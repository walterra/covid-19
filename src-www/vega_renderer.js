(function () {
  const global = window;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    return function () {
      var Super = _getPrototypeOf(Derived),
          result;

      if (_isNativeReflectConstruct()) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o) {
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var it,
        normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          prototype[method] = function (arg) {
            return this._invoke(method, arg);
          };
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;

          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });

  var jquery = createCommonjsModule(function (module) {
    /*!
     * jQuery JavaScript Library v3.5.0
     * https://jquery.com/
     *
     * Includes Sizzle.js
     * https://sizzlejs.com/
     *
     * Copyright JS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2020-04-10T15:07Z
     */
    (function (global, factory) {

      {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ? factory(global, true) : function (w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }

          return factory(w);
        };
      } // Pass this if window is not defined yet

    })(typeof window !== "undefined" ? window : commonjsGlobal, function (window, noGlobal) {

      var arr = [];
      var getProto = Object.getPrototypeOf;
      var _slice = arr.slice;
      var flat = arr.flat ? function (array) {
        return arr.flat.call(array);
      } : function (array) {
        return arr.concat.apply([], array);
      };
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};

      var isFunction = function isFunction(obj) {
        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        return typeof obj === "function" && typeof obj.nodeType !== "number";
      };

      var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
      };

      var document = window.document;
      var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
      };

      function DOMEval(code, node, doc) {
        doc = doc || document;
        var i,
            val,
            script = doc.createElement("script");
        script.text = code;

        if (node) {
          for (i in preservedScriptAttributes) {
            // Support: Firefox 64+, Edge 18+
            // Some browsers don't support the "nonce" property on scripts.
            // On the other hand, just using `getAttribute` is not enough as
            // the `nonce` attribute is reset to an empty string whenever it
            // becomes browsing-context connected.
            // See https://github.com/whatwg/html/issues/2369
            // See https://html.spec.whatwg.org/#nonce-attributes
            // The `node.getAttribute` check was added for the sake of
            // `jQuery.globalEval` so that it can fake a nonce-containing node
            // via an object.
            val = node[i] || node.getAttribute && node.getAttribute(i);

            if (val) {
              script.setAttribute(i, val);
            }
          }
        }

        doc.head.appendChild(script).parentNode.removeChild(script);
      }

      function toType(obj) {
        if (obj == null) {
          return obj + "";
        } // Support: Android <=2.3 only (functionish RegExp)


        return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
      }
      /* global Symbol */
      // Defining this global in .eslintrc.json would create a danger of using the global
      // unguarded in another place, it seems safer to define global only for this module


      var version = "3.5.0",
          // Define a local copy of jQuery
      jQuery = function jQuery(selector, context) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init(selector, context);
      };

      jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
        constructor: jQuery,
        // The default length of a jQuery object is 0
        length: 0,
        toArray: function toArray() {
          return _slice.call(this);
        },
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function get(num) {
          // Return all the elements in a clean array
          if (num == null) {
            return _slice.call(this);
          } // Return just the one element from the set


          return num < 0 ? this[num + this.length] : this[num];
        },
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function pushStack(elems) {
          // Build a new jQuery matched element set
          var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

          ret.prevObject = this; // Return the newly-formed element set

          return ret;
        },
        // Execute a callback for every element in the matched set.
        each: function each(callback) {
          return jQuery.each(this, callback);
        },
        map: function map(callback) {
          return this.pushStack(jQuery.map(this, function (elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function slice() {
          return this.pushStack(_slice.apply(this, arguments));
        },
        first: function first() {
          return this.eq(0);
        },
        last: function last() {
          return this.eq(-1);
        },
        even: function even() {
          return this.pushStack(jQuery.grep(this, function (_elem, i) {
            return (i + 1) % 2;
          }));
        },
        odd: function odd() {
          return this.pushStack(jQuery.grep(this, function (_elem, i) {
            return i % 2;
          }));
        },
        eq: function eq(i) {
          var len = this.length,
              j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function end() {
          return this.prevObject || this.constructor();
        },
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };

      jQuery.extend = jQuery.fn.extend = function () {
        var options,
            name,
            src,
            copy,
            copyIsArray,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false; // Handle a deep copy situation

        if (typeof target === "boolean") {
          deep = target; // Skip the boolean and the target

          target = arguments[i] || {};
          i++;
        } // Handle case when target is a string or something (possible in deep copy)


        if (_typeof(target) !== "object" && !isFunction(target)) {
          target = {};
        } // Extend jQuery itself if only one argument is passed


        if (i === length) {
          target = this;
          i--;
        }

        for (; i < length; i++) {
          // Only deal with non-null/undefined values
          if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
              copy = options[name]; // Prevent Object.prototype pollution
              // Prevent never-ending loop

              if (name === "__proto__" || target === copy) {
                continue;
              } // Recurse if we're merging plain objects or arrays


              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                src = target[name]; // Ensure proper type for the source value

                if (copyIsArray && !Array.isArray(src)) {
                  clone = [];
                } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                  clone = {};
                } else {
                  clone = src;
                }

                copyIsArray = false; // Never move original objects, clone them

                target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        } // Return the modified object


        return target;
      };

      jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        // Assume jQuery is ready without the ready module
        isReady: true,
        error: function error(msg) {
          throw new Error(msg);
        },
        noop: function noop() {},
        isPlainObject: function isPlainObject(obj) {
          var proto, Ctor; // Detect obvious negatives
          // Use toString instead of jQuery.type to catch host objects

          if (!obj || toString.call(obj) !== "[object Object]") {
            return false;
          }

          proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

          if (!proto) {
            return true;
          } // Objects with prototype are plain iff they were constructed by a global Object function


          Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function isEmptyObject(obj) {
          var name;

          for (name in obj) {
            return false;
          }

          return true;
        },
        // Evaluates a script in a provided context; falls back to the global one
        // if not specified.
        globalEval: function globalEval(code, options, doc) {
          DOMEval(code, {
            nonce: options && options.nonce
          }, doc);
        },
        each: function each(obj, callback) {
          var length,
              i = 0;

          if (isArrayLike(obj)) {
            length = obj.length;

            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          }

          return obj;
        },
        // results is for internal usage only
        makeArray: function makeArray(arr, results) {
          var ret = results || [];

          if (arr != null) {
            if (isArrayLike(Object(arr))) {
              jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
            } else {
              push.call(ret, arr);
            }
          }

          return ret;
        },
        inArray: function inArray(elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function merge(first, second) {
          var len = +second.length,
              j = 0,
              i = first.length;

          for (; j < len; j++) {
            first[i++] = second[j];
          }

          first.length = i;
          return first;
        },
        grep: function grep(elems, callback, invert) {
          var callbackInverse,
              matches = [],
              i = 0,
              length = elems.length,
              callbackExpect = !invert; // Go through the array, only saving the items
          // that pass the validator function

          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);

            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }

          return matches;
        },
        // arg is for internal usage only
        map: function map(elems, callback, arg) {
          var length,
              value,
              i = 0,
              ret = []; // Go through the array, translating each of the items to their new values

          if (isArrayLike(elems)) {
            length = elems.length;

            for (; i < length; i++) {
              value = callback(elems[i], i, arg);

              if (value != null) {
                ret.push(value);
              }
            } // Go through every key on the object,

          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);

              if (value != null) {
                ret.push(value);
              }
            }
          } // Flatten any nested arrays


          return flat(ret);
        },
        // A global GUID counter for objects
        guid: 1,
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
      });

      if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
      } // Populate the class2type map


      jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });

      function isArrayLike(obj) {
        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
            type = toType(obj);

        if (isFunction(obj) || isWindow(obj)) {
          return false;
        }

        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }

      var Sizzle =
      /*!
       * Sizzle CSS Selector Engine v2.3.5
       * https://sizzlejs.com/
       *
       * Copyright JS Foundation and other contributors
       * Released under the MIT license
       * https://js.foundation/
       *
       * Date: 2020-03-14
       */
      function (window) {
        var i,
            support,
            Expr,
            getText,
            isXML,
            tokenize,
            compile,
            select,
            outermostContext,
            sortInput,
            hasDuplicate,
            // Local document vars
        setDocument,
            document,
            docElem,
            documentIsHTML,
            rbuggyQSA,
            rbuggyMatches,
            matches,
            contains,
            // Instance-specific data
        expando = "sizzle" + 1 * new Date(),
            preferredDoc = window.document,
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),
            nonnativeSelectorCache = createCache(),
            sortOrder = function sortOrder(a, b) {
          if (a === b) {
            hasDuplicate = true;
          }

          return 0;
        },
            // Instance methods
        hasOwn = {}.hasOwnProperty,
            arr = [],
            pop = arr.pop,
            pushNative = arr.push,
            push = arr.push,
            slice = arr.slice,
            // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function indexOf(list, elem) {
          var i = 0,
              len = list.length;

          for (; i < len; i++) {
            if (list[i] === elem) {
              return i;
            }
          }

          return -1;
        },
            booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",
            // Regular expressions
        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]",
            // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
            // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
        // or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
            pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
        ".*" + ")\\)|)",
            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+", "g"),
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
            rdescend = new RegExp(whitespace + "|>"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),
            matchExpr = {
          "ID": new RegExp("^#(" + identifier + ")"),
          "CLASS": new RegExp("^\\.(" + identifier + ")"),
          "TAG": new RegExp("^(" + identifier + "|[*])"),
          "ATTR": new RegExp("^" + attributes),
          "PSEUDO": new RegExp("^" + pseudos),
          "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
          "bool": new RegExp("^(?:" + booleans + ")$", "i"),
          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        },
            rhtml = /HTML$/i,
            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,
            rnative = /^[^{]+\{\s*\[native \w/,
            // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            rsibling = /[+~]/,
            // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
            funescape = function funescape(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 0x10000;
          return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
          nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
          // Support: IE <=11+
          // For values outside the Basic Multilingual Plane (BMP), manually construct a
          // surrogate pair
          high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
        },
            // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
            fcssescape = function fcssescape(ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === "\0") {
              return "\uFFFD";
            } // Control characters and (dependent upon position) numbers get escaped as code points


            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          } // Other potentially-special ASCII characters get backslash-escaped


          return "\\" + ch;
        },
            // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function unloadHandler() {
          setDocument();
        },
            inDisabledFieldset = addCombinator(function (elem) {
          return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
        }, {
          dir: "parentNode",
          next: "legend"
        }); // Optimize for push.apply( _, NodeList )


        try {
          push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
          // Detect silently failing push.apply
          // eslint-disable-next-line no-unused-expressions

          arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push = {
            apply: arr.length ? // Leverage slice if possible
            function (target, els) {
              pushNative.apply(target, slice.call(els));
            } : // Support: IE<9
            // Otherwise append directly
            function (target, els) {
              var j = target.length,
                  i = 0; // Can't trust NodeList.length

              while (target[j++] = els[i++]) {}

              target.length = j - 1;
            }
          };
        }

        function Sizzle(selector, context, results, seed) {
          var m,
              i,
              elem,
              nid,
              match,
              groups,
              newSelector,
              newContext = context && context.ownerDocument,
              // nodeType defaults to 9, since context defaults to document
          nodeType = context ? context.nodeType : 9;
          results = results || []; // Return early from calls with invalid selector or context

          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          } // Try to shortcut find operations (as opposed to filters) in HTML documents


          if (!seed) {
            setDocument(context);
            context = context || document;

            if (documentIsHTML) {
              // If the selector is sufficiently simple, try using a "get*By*" DOM method
              // (excepting DocumentFragment context, where the methods don't exist)
              if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                // ID selector
                if (m = match[1]) {
                  // Document context
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      // Support: IE, Opera, Webkit
                      // TODO: identify versions
                      // getElementById can match elements by name instead of ID
                      if (elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    } else {
                      return results;
                    } // Element context

                  } else {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } // Type selector

                } else if (match[2]) {
                  push.apply(results, context.getElementsByTagName(selector));
                  return results; // Class selector
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                  push.apply(results, context.getElementsByClassName(m));
                  return results;
                }
              } // Take advantage of querySelectorAll


              if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
              // Exclude object elements
              nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                newSelector = selector;
                newContext = context; // qSA considers elements outside a scoping root when evaluating child or
                // descendant combinators, which is not what we want.
                // In such cases, we work around the behavior by prefixing every selector in the
                // list with an ID selector referencing the scope context.
                // The technique has to be used as well when a leading combinator is used
                // as such selectors are not recognized by querySelectorAll.
                // Thanks to Andrew Dupont for this technique.

                if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                  // Expand context for sibling selectors
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser
                  // supports it & if we're not changing the context.

                  if (newContext !== context || !support.scope) {
                    // Capture the context ID, setting it first if necessary
                    if (nid = context.getAttribute("id")) {
                      nid = nid.replace(rcssescape, fcssescape);
                    } else {
                      context.setAttribute("id", nid = expando);
                    }
                  } // Prefix every selector in the list


                  groups = tokenize(selector);
                  i = groups.length;

                  while (i--) {
                    groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
                  }

                  newSelector = groups.join(",");
                }

                try {
                  push.apply(results, newContext.querySelectorAll(newSelector));
                  return results;
                } catch (qsaError) {
                  nonnativeSelectorCache(selector, true);
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          } // All others


          return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
         * Create key-value caches of limited size
         * @returns {function(string, object)} Returns the Object data after storing it on itself with
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *	deleting the oldest entry
         */


        function createCache() {
          var keys = [];

          function cache(key, value) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if (keys.push(key + " ") > Expr.cacheLength) {
              // Only keep the most recent entries
              delete cache[keys.shift()];
            }

            return cache[key + " "] = value;
          }

          return cache;
        }
        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */


        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        /**
         * Support testing using an element
         * @param {Function} fn Passed the created element and returns a boolean result
         */


        function assert(fn) {
          var el = document.createElement("fieldset");

          try {
            return !!fn(el);
          } catch (e) {
            return false;
          } finally {
            // Remove from its parent by default
            if (el.parentNode) {
              el.parentNode.removeChild(el);
            } // release memory in IE


            el = null;
          }
        }
        /**
         * Adds the same handler for all of the specified attrs
         * @param {String} attrs Pipe-separated list of attributes
         * @param {Function} handler The method that will be applied
         */


        function addHandle(attrs, handler) {
          var arr = attrs.split("|"),
              i = arr.length;

          while (i--) {
            Expr.attrHandle[arr[i]] = handler;
          }
        }
        /**
         * Checks document order of two siblings
         * @param {Element} a
         * @param {Element} b
         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
         */


        function siblingCheck(a, b) {
          var cur = b && a,
              diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

          if (diff) {
            return diff;
          } // Check if b follows a


          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1;
              }
            }
          }

          return a ? 1 : -1;
        }
        /**
         * Returns a function to use in pseudos for input types
         * @param {String} type
         */


        function createInputPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
          };
        }
        /**
         * Returns a function to use in pseudos for buttons
         * @param {String} type
         */


        function createButtonPseudo(type) {
          return function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
          };
        }
        /**
         * Returns a function to use in pseudos for :enabled/:disabled
         * @param {Boolean} disabled true for :disabled; false for :enabled
         */


        function createDisabledPseudo(disabled) {
          // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
          return function (elem) {
            // Only certain elements can match :enabled or :disabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
            // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
            if ("form" in elem) {
              // Check for inherited disabledness on relevant non-disabled elements:
              // * listed form-associated elements in a disabled fieldset
              //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
              // * option elements in a disabled optgroup
              //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
              // All such elements have a "form" property.
              if (elem.parentNode && elem.disabled === false) {
                // Option elements defer to a parent optgroup if present
                if ("label" in elem) {
                  if ("label" in elem.parentNode) {
                    return elem.parentNode.disabled === disabled;
                  } else {
                    return elem.disabled === disabled;
                  }
                } // Support: IE 6 - 11
                // Use the isDisabled shortcut property to check for disabled fieldset ancestors


                return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

                /* jshint -W018 */
                elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
              }

              return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
              // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
              // even exist on them, let alone have a boolean value.
            } else if ("label" in elem) {
              return elem.disabled === disabled;
            } // Remaining elements are neither :enabled nor :disabled


            return false;
          };
        }
        /**
         * Returns a function to use in pseudos for positionals
         * @param {Function} fn
         */


        function createPositionalPseudo(fn) {
          return markFunction(function (argument) {
            argument = +argument;
            return markFunction(function (seed, matches) {
              var j,
                  matchIndexes = fn([], seed.length, argument),
                  i = matchIndexes.length; // Match elements found at the specified indexes

              while (i--) {
                if (seed[j = matchIndexes[i]]) {
                  seed[j] = !(matches[j] = seed[j]);
                }
              }
            });
          });
        }
        /**
         * Checks a node for validity as a Sizzle context
         * @param {Element|Object=} context
         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
         */


        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        } // Expose support vars for convenience


        support = Sizzle.support = {};
        /**
         * Detects XML nodes
         * @param {Element|Object} elem An element or a document
         * @returns {Boolean} True iff elem is a non-HTML XML node
         */

        isXML = Sizzle.isXML = function (elem) {
          var namespace = elem.namespaceURI,
              docElem = (elem.ownerDocument || elem).documentElement; // Support: IE <=8
          // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
          // https://bugs.jquery.com/ticket/4833

          return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
        };
        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */


        setDocument = Sizzle.setDocument = function (node) {
          var hasCompare,
              subWindow,
              doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq

          if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
            return document;
          } // Update global variables


          document = doc;
          docElem = document.documentElement;
          documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+
          // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq

          if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
            // Support: IE 11, Edge
            if (subWindow.addEventListener) {
              subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent("onunload", unloadHandler);
            }
          } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
          // Safari 4 - 5 only, Opera <=11.6 - 12.x only
          // IE/Edge & older browsers don't support the :scope pseudo-class.
          // Support: Safari 6.0 only
          // Safari 6.0 supports :scope but it's an alias of :root there.


          support.scope = assert(function (el) {
            docElem.appendChild(el).appendChild(document.createElement("div"));
            return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
          });
          /* Attributes
          ---------------------------------------------------------------------- */
          // Support: IE<8
          // Verify that getAttribute really returns attributes and not properties
          // (excepting IE8 booleans)

          support.attributes = assert(function (el) {
            el.className = "i";
            return !el.getAttribute("className");
          });
          /* getElement(s)By*
          ---------------------------------------------------------------------- */
          // Check if getElementsByTagName("*") returns only elements

          support.getElementsByTagName = assert(function (el) {
            el.appendChild(document.createComment(""));
            return !el.getElementsByTagName("*").length;
          }); // Support: IE<9

          support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
          // Check if getElementById returns elements by name
          // The broken getElementById methods don't pick up programmatically-set names,
          // so use a roundabout getElementsByName test

          support.getById = assert(function (el) {
            docElem.appendChild(el).id = expando;
            return !document.getElementsByName || !document.getElementsByName(expando).length;
          }); // ID filter and find

          if (support.getById) {
            Expr.filter["ID"] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                return elem.getAttribute("id") === attrId;
              };
            };

            Expr.find["ID"] = function (id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : [];
              }
            };
          } else {
            Expr.filter["ID"] = function (id) {
              var attrId = id.replace(runescape, funescape);
              return function (elem) {
                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node && node.value === attrId;
              };
            }; // Support: IE 6 - 7 only
            // getElementById is not reliable as a find shortcut


            Expr.find["ID"] = function (id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var node,
                    i,
                    elems,
                    elem = context.getElementById(id);

                if (elem) {
                  // Verify the id attribute
                  node = elem.getAttributeNode("id");

                  if (node && node.value === id) {
                    return [elem];
                  } // Fall back on getElementsByName


                  elems = context.getElementsByName(id);
                  i = 0;

                  while (elem = elems[i++]) {
                    node = elem.getAttributeNode("id");

                    if (node && node.value === id) {
                      return [elem];
                    }
                  }
                }

                return [];
              }
            };
          } // Tag


          Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
            } else if (support.qsa) {
              return context.querySelectorAll(tag);
            }
          } : function (tag, context) {
            var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
            results = context.getElementsByTagName(tag); // Filter out possible comments

            if (tag === "*") {
              while (elem = results[i++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem);
                }
              }

              return tmp;
            }

            return results;
          }; // Class

          Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          /* QSA/matchesSelector
          ---------------------------------------------------------------------- */
          // QSA and matchesSelector support
          // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


          rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
          // We allow this because of a bug in IE8/9 that throws an error
          // whenever `document.activeElement` is accessed on an iframe
          // So, we allow :focus to pass through QSA all the time to avoid the IE error
          // See https://bugs.jquery.com/ticket/13378

          rbuggyQSA = [];

          if (support.qsa = rnative.test(document.querySelectorAll)) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function (el) {
              var input; // Select is set to empty string on purpose
              // This is to test IE's treatment of not explicitly
              // setting a boolean content attribute,
              // since its presence should be enough
              // https://bugs.jquery.com/ticket/12359

              docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
              // Nothing should be selected when empty strings follow ^= or $= or *=
              // The test attribute must be unknown in Opera but "safe" for WinRT
              // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
              } // Support: IE8
              // Boolean attributes and "value" are not treated correctly


              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              } // Support: IE 11+, Edge 15 - 18+
              // IE 11/Edge don't find elements on a `[name='']` query in some cases.
              // Adding a temporary attribute to the document before the selection works
              // around the issue.
              // Interestingly, IE 10 & older don't seem to have the issue.


              input = document.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);

              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
              } // Webkit/Opera - :checked should return selected option elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              // IE8 throws error here and will not see later tests


              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              } // Support: Safari 8+, iOS 8+
              // https://bugs.webkit.org/show_bug.cgi?id=136851
              // In-page `selector#id sibling-combinator selector` fails


              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              } // Support: Firefox <=3.6 - 5 only
              // Old Firefox doesn't throw on a badly-escaped identifier.


              el.querySelectorAll("\\\f");
              rbuggyQSA.push("[\\r\\n\\f]");
            });
            assert(function (el) {
              el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
              // The type and name attributes are restricted during .innerHTML assignment

              var input = document.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D"); // Support: IE8
              // Enforce case-sensitivity of name attribute

              if (el.querySelectorAll("[name=d]").length) {
                rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
              } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
              // IE8 throws error here and will not see later tests


              if (el.querySelectorAll(":enabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              } // Support: IE9-11+
              // IE's :disabled selector does not pick up the children of disabled fieldsets


              docElem.appendChild(el).disabled = true;

              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              } // Support: Opera 10 - 11 only
              // Opera 10-11 does not throw on post-comma invalid pseudos


              el.querySelectorAll("*,:x");
              rbuggyQSA.push(",.*:");
            });
          }

          if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function (el) {
              // Check to see if it's possible to do matchesSelector
              // on a disconnected node (IE 9)
              support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
              // Gecko does not error, returns false instead

              matches.call(el, "[s!='']:x");
              rbuggyMatches.push("!=", pseudos);
            });
          }

          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
          /* Contains
          ---------------------------------------------------------------------- */

          hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
          // Purposefully self-exclusive
          // As in, an element does not contain itself

          contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
          } : function (a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true;
                }
              }
            }

            return false;
          };
          /* Sorting
          ---------------------------------------------------------------------- */
          // Document order sorting

          sortOrder = hasCompare ? function (a, b) {
            // Flag for duplicate removal
            if (a === b) {
              hasDuplicate = true;
              return 0;
            } // Sort on method existence if only one input has compareDocumentPosition


            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

            if (compare) {
              return compare;
            } // Calculate position if both inputs belong to the same document
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.
            // eslint-disable-next-line eqeqeq


            compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
            1; // Disconnected nodes

            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
              // Choose the first element that is related to our preferred document
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
                return -1;
              } // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq


              if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
                return 1;
              } // Maintain original order


              return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
            }

            return compare & 4 ? -1 : 1;
          } : function (a, b) {
            // Exit early if the nodes are identical
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }

            var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [a],
                bp = [b]; // Parentless nodes are either documents or disconnected

            if (!aup || !bup) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.

              /* eslint-disable eqeqeq */
              return a == document ? -1 : b == document ? 1 :
              /* eslint-enable eqeqeq */
              aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
            } else if (aup === bup) {
              return siblingCheck(a, b);
            } // Otherwise we need full lists of their ancestors for comparison


            cur = a;

            while (cur = cur.parentNode) {
              ap.unshift(cur);
            }

            cur = b;

            while (cur = cur.parentNode) {
              bp.unshift(cur);
            } // Walk down the tree looking for a discrepancy


            while (ap[i] === bp[i]) {
              i++;
            }

            return i ? // Do a sibling check if the nodes have a common ancestor
            siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
            // Support: IE 11+, Edge 17 - 18+
            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
            // two documents; shallow comparisons work.

            /* eslint-disable eqeqeq */
            ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :
            /* eslint-enable eqeqeq */
            0;
          };
          return document;
        };

        Sizzle.matches = function (expr, elements) {
          return Sizzle(expr, null, null, elements);
        };

        Sizzle.matchesSelector = function (elem, expr) {
          setDocument(elem);

          if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

              if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {
              nonnativeSelectorCache(expr, true);
            }
          }

          return Sizzle(expr, document, null, [elem]).length > 0;
        };

        Sizzle.contains = function (context, elem) {
          // Set document vars if needed
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if ((context.ownerDocument || context) != document) {
            setDocument(context);
          }

          return contains(context, elem);
        };

        Sizzle.attr = function (elem, name) {
          // Set document vars if needed
          // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq
          if ((elem.ownerDocument || elem) != document) {
            setDocument(elem);
          }

          var fn = Expr.attrHandle[name.toLowerCase()],
              // Don't get fooled by Object.prototype properties (jQuery #13807)
          val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
          return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };

        Sizzle.escape = function (sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };

        Sizzle.error = function (msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        /**
         * Document sorting and removing duplicates
         * @param {ArrayLike} results
         */


        Sizzle.uniqueSort = function (results) {
          var elem,
              duplicates = [],
              j = 0,
              i = 0; // Unless we *know* we can detect duplicates, assume their presence

          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice(0);
          results.sort(sortOrder);

          if (hasDuplicate) {
            while (elem = results[i++]) {
              if (elem === results[i]) {
                j = duplicates.push(i);
              }
            }

            while (j--) {
              results.splice(duplicates[j], 1);
            }
          } // Clear input after sorting to release objects
          // See https://github.com/jquery/sizzle/pull/225


          sortInput = null;
          return results;
        };
        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */


        getText = Sizzle.getText = function (elem) {
          var node,
              ret = "",
              i = 0,
              nodeType = elem.nodeType;

          if (!nodeType) {
            // If no nodeType, this is expected to be an array
            while (node = elem[i++]) {
              // Do not traverse comment nodes
              ret += getText(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (jQuery #11153)
            if (typeof elem.textContent === "string") {
              return elem.textContent;
            } else {
              // Traverse its children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem);
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          } // Do not include comment or processing instruction nodes


          return ret;
        };

        Expr = Sizzle.selectors = {
          // Can be adjusted by the user
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": {
              dir: "parentNode",
              first: true
            },
            " ": {
              dir: "parentNode"
            },
            "+": {
              dir: "previousSibling",
              first: true
            },
            "~": {
              dir: "previousSibling"
            }
          },
          preFilter: {
            "ATTR": function ATTR(match) {
              match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

              match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

              if (match[2] === "~=") {
                match[3] = " " + match[3] + " ";
              }

              return match.slice(0, 4);
            },
            "CHILD": function CHILD(match) {
              /* matches from matchExpr["CHILD"]
              	1 type (only|nth|...)
              	2 what (child|of-type)
              	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
              	4 xn-component of xn+y argument ([+-]?\d*n|)
              	5 sign of xn-component
              	6 x of xn-component
              	7 sign of y-component
              	8 y of y-component
              */
              match[1] = match[1].toLowerCase();

              if (match[1].slice(0, 3) === "nth") {
                // nth-* requires argument
                if (!match[3]) {
                  Sizzle.error(match[0]);
                } // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1


                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
              } else if (match[3]) {
                Sizzle.error(match[0]);
              }

              return match;
            },
            "PSEUDO": function PSEUDO(match) {
              var excess,
                  unquoted = !match[6] && match[2];

              if (matchExpr["CHILD"].test(match[0])) {
                return null;
              } // Accept quoted arguments as-is


              if (match[3]) {
                match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
              } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
              excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
              excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                // excess is a negative index
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              } // Return only captures needed by the pseudo filter method (type and argument)


              return match.slice(0, 3);
            }
          },
          filter: {
            "TAG": function TAG(nodeNameSelector) {
              var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function () {
                return true;
              } : function (elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
              };
            },
            "CLASS": function CLASS(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
              });
            },
            "ATTR": function ATTR(name, operator, check) {
              return function (elem) {
                var result = Sizzle.attr(elem, name);

                if (result == null) {
                  return operator === "!=";
                }

                if (!operator) {
                  return true;
                }

                result += "";
                /* eslint-disable max-len */

                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                /* eslint-enable max-len */
              };
            },
            "CHILD": function CHILD(type, what, _argument, first, last) {
              var simple = type.slice(0, 3) !== "nth",
                  forward = type.slice(-4) !== "last",
                  ofType = what === "of-type";
              return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
              function (elem) {
                return !!elem.parentNode;
              } : function (elem, _context, xml) {
                var cache,
                    uniqueCache,
                    outerCache,
                    node,
                    nodeIndex,
                    start,
                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType,
                    diff = false;

                if (parent) {
                  // :(first|last|only)-(child|of-type)
                  if (simple) {
                    while (dir) {
                      node = elem;

                      while (node = node[dir]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false;
                        }
                      } // Reverse direction for :only-* (if we haven't yet done so)


                      start = dir = type === "only" && !start && "nextSibling";
                    }

                    return true;
                  }

                  start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

                  if (forward && useCache) {
                    // Seek `elem` from a previously-cached index
                    // ...in a gzip-friendly way
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)

                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];

                    while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                    diff = nodeIndex = 0) || start.pop()) {
                      // When found, cache indexes on `parent` and break
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        uniqueCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else {
                    // Use previously-cached element index if available
                    if (useCache) {
                      // ...in a gzip-friendly way
                      node = elem;
                      outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)

                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex;
                    } // xml :nth-child(...)
                    // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                    if (diff === false) {
                      // Use the same loop as above to seek `elem` from the start
                      while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          // Cache the index of each encountered element
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                            // Defend against cloned attroperties (jQuery gh-1709)

                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            uniqueCache[type] = [dirruns, diff];
                          }

                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                  } // Incorporate the offset, then check against cycle size


                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0;
                }
              };
            },
            "PSEUDO": function PSEUDO(pseudo, argument) {
              // pseudo-class names are case-insensitive
              // http://www.w3.org/TR/selectors/#pseudo-classes
              // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
              // Remember that setFilters inherits from pseudos
              var args,
                  fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
              // arguments are needed to create the filter function
              // just as Sizzle does

              if (fn[expando]) {
                return fn(argument);
              } // But maintain support for old signatures


              if (fn.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                  var idx,
                      matched = fn(seed, argument),
                      i = matched.length;

                  while (i--) {
                    idx = indexOf(seed, matched[i]);
                    seed[idx] = !(matches[idx] = matched[i]);
                  }
                }) : function (elem) {
                  return fn(elem, 0, args);
                };
              }

              return fn;
            }
          },
          pseudos: {
            // Potentially complex pseudos
            "not": markFunction(function (selector) {
              // Trim the selector passed to compile
              // to avoid treating leading and trailing
              // spaces as combinators
              var input = [],
                  results = [],
                  matcher = compile(selector.replace(rtrim, "$1"));
              return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
                var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length; // Match elements unmatched by `matcher`

                while (i--) {
                  if (elem = unmatched[i]) {
                    seed[i] = !(matches[i] = elem);
                  }
                }
              }) : function (elem, _context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results); // Don't keep the element (issue #299)

                input[0] = null;
                return !results.pop();
              };
            }),
            "has": markFunction(function (selector) {
              return function (elem) {
                return Sizzle(selector, elem).length > 0;
              };
            }),
            "contains": markFunction(function (text) {
              text = text.replace(runescape, funescape);
              return function (elem) {
                return (elem.textContent || getText(elem)).indexOf(text) > -1;
              };
            }),
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            "lang": markFunction(function (lang) {
              // lang value must be a valid identifier
              if (!ridentifier.test(lang || "")) {
                Sizzle.error("unsupported lang: " + lang);
              }

              lang = lang.replace(runescape, funescape).toLowerCase();
              return function (elem) {
                var elemLang;

                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);

                return false;
              };
            }),
            // Miscellaneous
            "target": function target(elem) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            "root": function root(elem) {
              return elem === docElem;
            },
            "focus": function focus(elem) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            // Boolean properties
            "enabled": createDisabledPseudo(false),
            "disabled": createDisabledPseudo(true),
            "checked": function checked(elem) {
              // In CSS3, :checked should return both checked and selected elements
              // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
              var nodeName = elem.nodeName.toLowerCase();
              return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
            },
            "selected": function selected(elem) {
              // Accessing this property makes selected-by-default
              // options in Safari work properly
              if (elem.parentNode) {
                // eslint-disable-next-line no-unused-expressions
                elem.parentNode.selectedIndex;
              }

              return elem.selected === true;
            },
            // Contents
            "empty": function empty(elem) {
              // http://www.w3.org/TR/selectors/#empty-pseudo
              // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
              //   but not by others (comment: 8; processing instruction: 7; etc.)
              // nodeType < 6 works because attributes (2) do not appear as children
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }

              return true;
            },
            "parent": function parent(elem) {
              return !Expr.pseudos["empty"](elem);
            },
            // Element/input types
            "header": function header(elem) {
              return rheader.test(elem.nodeName);
            },
            "input": function input(elem) {
              return rinputs.test(elem.nodeName);
            },
            "button": function button(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === "button" || name === "button";
            },
            "text": function text(elem) {
              var attr;
              return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
              // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
              (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            // Position-in-collection
            "first": createPositionalPseudo(function () {
              return [0];
            }),
            "last": createPositionalPseudo(function (_matchIndexes, length) {
              return [length - 1];
            }),
            "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            "even": createPositionalPseudo(function (matchIndexes, length) {
              var i = 0;

              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            }),
            "odd": createPositionalPseudo(function (matchIndexes, length) {
              var i = 1;

              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            }),
            "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument > length ? length : argument;

              for (; --i >= 0;) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            }),
            "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;

              for (; ++i < length;) {
                matchIndexes.push(i);
              }

              return matchIndexes;
            })
          }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

        for (i in {
          radio: true,
          checkbox: true,
          file: true,
          password: true,
          image: true
        }) {
          Expr.pseudos[i] = createInputPseudo(i);
        }

        for (i in {
          submit: true,
          reset: true
        }) {
          Expr.pseudos[i] = createButtonPseudo(i);
        } // Easy API for creating new setFilters


        function setFilters() {}

        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();

        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
          var matched,
              match,
              tokens,
              type,
              soFar,
              groups,
              preFilters,
              cached = tokenCache[selector + " "];

          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }

          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;

          while (soFar) {
            // Comma and first run
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice(match[0].length) || soFar;
              }

              groups.push(tokens = []);
            }

            matched = false; // Combinators

            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace(rtrim, " ")
              });
              soFar = soFar.slice(matched.length);
            } // Filters


            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }

            if (!matched) {
              break;
            }
          } // Return the length of the invalid excess
          // if we're just parsing
          // Otherwise, throw an error or return tokens


          return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
          tokenCache(selector, groups).slice(0);
        };

        function toSelector(tokens) {
          var i = 0,
              len = tokens.length,
              selector = "";

          for (; i < len; i++) {
            selector += tokens[i].value;
          }

          return selector;
        }

        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir,
              skip = combinator.next,
              key = skip || dir,
              checkNonElements = base && key === "parentNode",
              doneName = done++;
          return combinator.first ? // Check against closest ancestor/preceding element
          function (elem, context, xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }

            return false;
          } : // Check against all ancestor/preceding elements
          function (elem, context, xml) {
            var oldCache,
                uniqueCache,
                outerCache,
                newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

            if (xml) {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while (elem = elem[dir]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                  if (skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir] || elem;
                  } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    // Assign to newCache so results back-propagate to previous elements
                    return newCache[2] = oldCache[2];
                  } else {
                    // Reuse newcache so results back-propagate to previous elements
                    uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              }
            }

            return false;
          };
        }

        function elementMatcher(matchers) {
          return matchers.length > 1 ? function (elem, context, xml) {
            var i = matchers.length;

            while (i--) {
              if (!matchers[i](elem, context, xml)) {
                return false;
              }
            }

            return true;
          } : matchers[0];
        }

        function multipleContexts(selector, contexts, results) {
          var i = 0,
              len = contexts.length;

          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results);
          }

          return results;
        }

        function condense(unmatched, map, filter, context, xml) {
          var elem,
              newUnmatched = [],
              i = 0,
              len = unmatched.length,
              mapped = map != null;

          for (; i < len; i++) {
            if (elem = unmatched[i]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);

                if (mapped) {
                  map.push(i);
                }
              }
            }
          }

          return newUnmatched;
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }

          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }

          return markFunction(function (seed, results, context, xml) {
            var temp,
                i,
                elem,
                preMap = [],
                postMap = [],
                preexisting = results.length,
                // Get initial elements from seed or context
            elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
            postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
            [] : // ...otherwise use results directly
            results : matcherIn; // Find primary matches

            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml);
            } // Apply postFilter


            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

              i = temp.length;

              while (i--) {
                if (elem = temp[i]) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
              }
            }

            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  // Get the final matcherOut by condensing this intermediate into postFinder contexts
                  temp = [];
                  i = matcherOut.length;

                  while (i--) {
                    if (elem = matcherOut[i]) {
                      // Restore matcherIn since elem is not yet a final match
                      temp.push(matcherIn[i] = elem);
                    }
                  }

                  postFinder(null, matcherOut = [], temp, xml);
                } // Move matched elements from seed to results to keep them synchronized


                i = matcherOut.length;

                while (i--) {
                  if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              } // Add elements to results, through postFinder if defined

            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push.apply(results, matcherOut);
              }
            }
          });
        }

        function matcherFromTokens(tokens) {
          var checkContext,
              matcher,
              j,
              len = tokens.length,
              leadingRelative = Expr.relative[tokens[0].type],
              implicitRelative = leadingRelative || Expr.relative[" "],
              i = leadingRelative ? 1 : 0,
              // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(function (elem) {
            return elem === checkContext;
          }, implicitRelative, true),
              matchAnyContext = addCombinator(function (elem) {
            return indexOf(checkContext, elem) > -1;
          }, implicitRelative, true),
              matchers = [function (elem, context, xml) {
            var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

            checkContext = null;
            return ret;
          }];

          for (; i < len; i++) {
            if (matcher = Expr.relative[tokens[i].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

              if (matcher[expando]) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;

                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }

                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                tokens.slice(0, i - 1).concat({
                  value: tokens[i - 2].type === " " ? "*" : ""
                })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
              }

              matchers.push(matcher);
            }
          }

          return elementMatcher(matchers);
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0,
              byElement = elementMatchers.length > 0,
              superMatcher = function superMatcher(seed, context, xml, results, outermost) {
            var elem,
                j,
                matcher,
                matchedCount = 0,
                i = "0",
                unmatched = seed && [],
                setMatched = [],
                contextBackup = outermostContext,
                // We must always have either seed elements or outermost context
            elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                // Use integer dirruns iff this is the outermost matcher
            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
                len = elems.length;

            if (outermost) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              outermostContext = context == document || context || outermost;
            } // Add elements passing elementMatchers directly to results
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0; // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq

                if (!context && elem.ownerDocument != document) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }

                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break;
                  }
                }

                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              } // Track unmatched elements for set filters


              if (bySet) {
                // They will have gone through all possible matchers
                if (elem = !matcher && elem) {
                  matchedCount--;
                } // Lengthen the array for every element, matched or not


                if (seed) {
                  unmatched.push(elem);
                }
              }
            } // `i` is now the count of elements visited above, and adding it to `matchedCount`
            // makes the latter nonnegative.


            matchedCount += i; // Apply set filters to unmatched elements
            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
            // no element matchers and no seed.
            // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
            // case, which will result in a "00" `matchedCount` that differs from `i` but is also
            // numerically zero.

            if (bySet && i !== matchedCount) {
              j = 0;

              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }

              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                } // Discard index placeholder values to get only actual matches


                setMatched = condense(setMatched);
              } // Add matches to results


              push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle.uniqueSort(results);
              }
            } // Override manipulation of globals by nested matchers


            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }

            return unmatched;
          };

          return bySet ? markFunction(superMatcher) : superMatcher;
        }

        compile = Sizzle.compile = function (selector, match
        /* Internal Use Only */
        ) {
          var i,
              setMatchers = [],
              elementMatchers = [],
              cached = compilerCache[selector + " "];

          if (!cached) {
            // Generate a function of recursive functions that can be used to check each element
            if (!match) {
              match = tokenize(selector);
            }

            i = match.length;

            while (i--) {
              cached = matcherFromTokens(match[i]);

              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            } // Cache the compiled function


            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

            cached.selector = selector;
          }

          return cached;
        };
        /**
         * A low-level selection function that works with Sizzle's compiled
         *  selector functions
         * @param {String|Function} selector A selector or a pre-compiled
         *  selector function built with Sizzle.compile
         * @param {Element} context
         * @param {Array} [results]
         * @param {Array} [seed] A set of elements to match against
         */


        select = Sizzle.select = function (selector, context, results, seed) {
          var i,
              tokens,
              token,
              type,
              find,
              compiled = typeof selector === "function" && selector,
              match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
          // (the latter of which guarantees us context)

          if (match.length === 1) {
            // Reduce context if the leading compound selector is an ID
            tokens = match[0] = match[0].slice(0);

            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

              if (!context) {
                return results; // Precompiled matchers will still verify ancestry, so step up a level
              } else if (compiled) {
                context = context.parentNode;
              }

              selector = selector.slice(tokens.shift().value.length);
            } // Fetch a seed set for right-to-left matching


            i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

            while (i--) {
              token = tokens[i]; // Abort if we hit a combinator

              if (Expr.relative[type = token.type]) {
                break;
              }

              if (find = Expr.find[type]) {
                // Search, expanding context for leading sibling combinators
                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  // If seed is empty or no tokens remain, we can return early
                  tokens.splice(i, 1);
                  selector = seed.length && toSelector(tokens);

                  if (!selector) {
                    push.apply(results, seed);
                    return results;
                  }

                  break;
                }
              }
            }
          } // Compile and execute a filtering function if one is not provided
          // Provide `match` to avoid retokenization if we modified the selector above


          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results;
        }; // One-time assignments
        // Sort stability


        support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
        // Always assume duplicates if they aren't passed to the comparison function

        support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

        setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
        // Detached nodes confoundingly follow *each other*

        support.sortDetached = assert(function (el) {
          // Should return 1, but returns 4 (following)
          return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
        }); // Support: IE<8
        // Prevent attribute/property "interpolation"
        // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

        if (!assert(function (el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute("href") === "#";
        })) {
          addHandle("type|href|height|width", function (elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
            }
          });
        } // Support: IE<9
        // Use defaultValue in place of getAttribute("value")


        if (!support.attributes || !assert(function (el) {
          el.innerHTML = "<input/>";
          el.firstChild.setAttribute("value", "");
          return el.firstChild.getAttribute("value") === "";
        })) {
          addHandle("value", function (elem, _name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === "input") {
              return elem.defaultValue;
            }
          });
        } // Support: IE<9
        // Use getAttributeNode to fetch booleans when getAttribute lies


        if (!assert(function (el) {
          return el.getAttribute("disabled") == null;
        })) {
          addHandle(booleans, function (elem, name, isXML) {
            var val;

            if (!isXML) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }
          });
        }

        return Sizzle;
      }(window);

      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors; // Deprecated

      jQuery.expr[":"] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      jQuery.escapeSelector = Sizzle.escape;

      var dir = function dir(elem, _dir, until) {
        var matched = [],
            truncate = until !== undefined;

        while ((elem = elem[_dir]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break;
            }

            matched.push(elem);
          }
        }

        return matched;
      };

      var _siblings = function siblings(n, elem) {
        var matched = [];

        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n);
          }
        }

        return matched;
      };

      var rneedsContext = jQuery.expr.match.needsContext;

      function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
      }
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

      function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
          return jQuery.grep(elements, function (elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        } // Single element


        if (qualifier.nodeType) {
          return jQuery.grep(elements, function (elem) {
            return elem === qualifier !== not;
          });
        } // Arraylike of elements (jQuery, arguments, Array)


        if (typeof qualifier !== "string") {
          return jQuery.grep(elements, function (elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
          });
        } // Filtered directly for both simple and complex selectors


        return jQuery.filter(qualifier, elements, not);
      }

      jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];

        if (not) {
          expr = ":not(" + expr + ")";
        }

        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }

        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
          return elem.nodeType === 1;
        }));
      };

      jQuery.fn.extend({
        find: function find(selector) {
          var i,
              ret,
              len = this.length,
              self = this;

          if (typeof selector !== "string") {
            return this.pushStack(jQuery(selector).filter(function () {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }

          ret = this.pushStack([]);

          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }

          return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function filter(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function not(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function is(selector) {
          return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
          // so $("p:first").is("p:last") won't return true for a doc with two "p".
          typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
      }); // Initialize a jQuery object
      // A central reference to the root jQuery(document)

      var rootjQuery,
          // A simple way to check for HTML strings
      // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
      // Strict HTML recognition (#11290: must start with <)
      // Shortcut simple #id case for speed
      rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
          init = jQuery.fn.init = function (selector, context, root) {
        var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

        if (!selector) {
          return this;
        } // Method init() accepts an alternate rootjQuery
        // so migrate can support jQuery.sub (gh-2101)


        root = root || rootjQuery; // Handle HTML strings

        if (typeof selector === "string") {
          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
            // Assume that strings that start and end with <> are HTML and skip the regex check
            match = [null, selector, null];
          } else {
            match = rquickExpr.exec(selector);
          } // Match html or make sure no context is specified for #id


          if (match && (match[1] || !context)) {
            // HANDLE: $(html) -> $(array)
            if (match[1]) {
              context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
              // Intentionally let the error be thrown if parseHTML is not present

              jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                for (match in context) {
                  // Properties of context are called as methods if possible
                  if (isFunction(this[match])) {
                    this[match](context[match]); // ...and otherwise set as attributes
                  } else {
                    this.attr(match, context[match]);
                  }
                }
              }

              return this; // HANDLE: $(#id)
            } else {
              elem = document.getElementById(match[2]);

              if (elem) {
                // Inject the element directly into the jQuery object
                this[0] = elem;
                this.length = 1;
              }

              return this;
            } // HANDLE: $(expr, $(...))

          } else if (!context || context.jquery) {
            return (context || root).find(selector); // HANDLE: $(expr, context)
            // (which is just equivalent to: $(context).find(expr)
          } else {
            return this.constructor(context).find(selector);
          } // HANDLE: $(DOMElement)

        } else if (selector.nodeType) {
          this[0] = selector;
          this.length = 1;
          return this; // HANDLE: $(function)
          // Shortcut for document ready
        } else if (isFunction(selector)) {
          return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
          selector(jQuery);
        }

        return jQuery.makeArray(selector, this);
      }; // Give the init function the jQuery prototype for later instantiation


      init.prototype = jQuery.fn; // Initialize central reference

      rootjQuery = jQuery(document);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/,
          // Methods guaranteed to produce a unique set when starting from a unique set
      guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
      jQuery.fn.extend({
        has: function has(target) {
          var targets = jQuery(target, this),
              l = targets.length;
          return this.filter(function () {
            var i = 0;

            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function closest(selectors, context) {
          var cur,
              i = 0,
              l = this.length,
              matched = [],
              targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                // Always skip document fragments
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
                cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break;
                }
              }
            }
          }

          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        // Determine the position of an element within the set
        index: function index(elem) {
          // No argument, return index in parent
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          } // Index in selector


          if (typeof elem === "string") {
            return indexOf.call(jQuery(elem), this[0]);
          } // Locate the position of the desired element


          return indexOf.call(this, // If it receives a jQuery object, the first element is used
          elem.jquery ? elem[0] : elem);
        },
        add: function add(selector, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function addBack(selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });

      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}

        return cur;
      }

      jQuery.each({
        parent: function parent(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function parents(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function parentsUntil(elem, _i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function next(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function prev(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function nextAll(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function prevAll(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function nextUntil(elem, _i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function prevUntil(elem, _i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function siblings(elem) {
          return _siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function children(elem) {
          return _siblings(elem.firstChild);
        },
        contents: function contents(elem) {
          if (elem.contentDocument != null && // Support: IE 11+
          // <object> elements with no `data` attribute has an object
          // `contentDocument` with a `null` prototype.
          getProto(elem.contentDocument)) {
            return elem.contentDocument;
          } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
          // Treat the template element as a regular one in browsers that
          // don't support it.


          if (nodeName(elem, "template")) {
            elem = elem.content || elem;
          }

          return jQuery.merge([], elem.childNodes);
        }
      }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
          var matched = jQuery.map(this, fn, until);

          if (name.slice(-5) !== "Until") {
            selector = until;
          }

          if (selector && typeof selector === "string") {
            matched = jQuery.filter(selector, matched);
          }

          if (this.length > 1) {
            // Remove duplicates
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched);
            } // Reverse order for parents* and prev-derivatives


            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }

          return this.pushStack(matched);
        };
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
          object[flag] = true;
        });
        return object;
      }
      /*
       * Create a callback list using the following parameters:
       *
       *	options: an optional list of space-separated options that will change how
       *			the callback list behaves or a more traditional option object
       *
       * By default a callback list will act like an event callback list and can be
       * "fired" multiple times.
       *
       * Possible options:
       *
       *	once:			will ensure the callback list can only be fired once (like a Deferred)
       *
       *	memory:			will keep track of previous values and will call any callback added
       *					after the list has been fired right away with the latest "memorized"
       *					values (like a Deferred)
       *
       *	unique:			will ensure a callback can only be added once (no duplicate in the list)
       *
       *	stopOnFalse:	interrupt callings when a callback returns false
       *
       */


      jQuery.Callbacks = function (options) {
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

        var // Flag to know if list is currently firing
        firing,
            // Last fire value for non-forgettable lists
        memory,
            // Flag to know if list was already fired
        _fired,
            // Flag to prevent firing
        _locked,
            // Actual callback list
        list = [],
            // Queue of execution data for repeatable lists
        queue = [],
            // Index of currently firing callback (modified by add/remove as needed)
        firingIndex = -1,
            // Fire callbacks
        fire = function fire() {
          // Enforce single-firing
          _locked = _locked || options.once; // Execute callbacks for all pending executions,
          // respecting firingIndex overrides and runtime changes

          _fired = firing = true;

          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();

            while (++firingIndex < list.length) {
              // Run callback and check for early termination
              if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                // Jump to end and forget the data so .add doesn't re-fire
                firingIndex = list.length;
                memory = false;
              }
            }
          } // Forget the data if we're done with it


          if (!options.memory) {
            memory = false;
          }

          firing = false; // Clean up if we're done firing for good

          if (_locked) {
            // Keep an empty list if we have data for future add calls
            if (memory) {
              list = []; // Otherwise, this object is spent
            } else {
              list = "";
            }
          }
        },
            // Actual Callbacks object
        self = {
          // Add a callback or a collection of callbacks to the list
          add: function add() {
            if (list) {
              // If we have memory from a past run, we should fire after adding
              if (memory && !firing) {
                firingIndex = list.length - 1;
                queue.push(memory);
              }

              (function add(args) {
                jQuery.each(args, function (_, arg) {
                  if (isFunction(arg)) {
                    if (!options.unique || !self.has(arg)) {
                      list.push(arg);
                    }
                  } else if (arg && arg.length && toType(arg) !== "string") {
                    // Inspect recursively
                    add(arg);
                  }
                });
              })(arguments);

              if (memory && !firing) {
                fire();
              }
            }

            return this;
          },
          // Remove a callback from the list
          remove: function remove() {
            jQuery.each(arguments, function (_, arg) {
              var index;

              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1); // Handle firing indexes

                if (index <= firingIndex) {
                  firingIndex--;
                }
              }
            });
            return this;
          },
          // Check if a given callback is in the list.
          // If no argument is given, return whether or not list has callbacks attached.
          has: function has(fn) {
            return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
          },
          // Remove all callbacks from the list
          empty: function empty() {
            if (list) {
              list = [];
            }

            return this;
          },
          // Disable .fire and .add
          // Abort any current/pending executions
          // Clear all callbacks and values
          disable: function disable() {
            _locked = queue = [];
            list = memory = "";
            return this;
          },
          disabled: function disabled() {
            return !list;
          },
          // Disable .fire
          // Also disable .add unless we have memory (since it would have no effect)
          // Abort any pending executions
          lock: function lock() {
            _locked = queue = [];

            if (!memory && !firing) {
              list = memory = "";
            }

            return this;
          },
          locked: function locked() {
            return !!_locked;
          },
          // Call all callbacks with the given context and arguments
          fireWith: function fireWith(context, args) {
            if (!_locked) {
              args = args || [];
              args = [context, args.slice ? args.slice() : args];
              queue.push(args);

              if (!firing) {
                fire();
              }
            }

            return this;
          },
          // Call all the callbacks with the given arguments
          fire: function fire() {
            self.fireWith(this, arguments);
            return this;
          },
          // To know if the callbacks have already been called at least once
          fired: function fired() {
            return !!_fired;
          }
        };

        return self;
      };

      function Identity(v) {
        return v;
      }

      function Thrower(ex) {
        throw ex;
      }

      function adoptValue(value, resolve, reject, noValue) {
        var method;

        try {
          // Check for promise aspect first to privilege synchronous behavior
          if (value && isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject); // Other thenables
          } else if (value && isFunction(method = value.then)) {
            method.call(value, resolve, reject); // Other non-thenables
          } else {
            // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
            // * false: [ value ].slice( 0 ) => resolve( value )
            // * true: [ value ].slice( 1 ) => resolve()
            resolve.apply(undefined, [value].slice(noValue));
          } // For Promises/A+, convert exceptions into rejections
          // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
          // Deferred#then to conditionally suppress rejection.

        } catch (value) {
          // Support: Android 4.0 only
          // Strict mode functions invoked without .call/.apply get global-object context
          reject.apply(undefined, [value]);
        }
      }

      jQuery.extend({
        Deferred: function Deferred(func) {
          var tuples = [// action, add listener, callbacks,
          // ... .then handlers, argument index, [final state]
          ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
              _state = "pending",
              _promise = {
            state: function state() {
              return _state;
            },
            always: function always() {
              deferred.done(arguments).fail(arguments);
              return this;
            },
            "catch": function _catch(fn) {
              return _promise.then(null, fn);
            },
            // Keep pipe for back-compat
            pipe: function pipe()
            /* fnDone, fnFail, fnProgress */
            {
              var fns = arguments;
              return jQuery.Deferred(function (newDefer) {
                jQuery.each(tuples, function (_i, tuple) {
                  // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
                  // deferred.done(function() { bind to newDefer or newDefer.resolve })
                  // deferred.fail(function() { bind to newDefer or newDefer.reject })

                  deferred[tuple[1]](function () {
                    var returned = fn && fn.apply(this, arguments);

                    if (returned && isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            then: function then(onFulfilled, onRejected, onProgress) {
              var maxDepth = 0;

              function resolve(depth, deferred, handler, special) {
                return function () {
                  var that = this,
                      args = arguments,
                      mightThrow = function mightThrow() {
                    var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts

                    if (depth < maxDepth) {
                      return;
                    }

                    returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48

                    if (returned === deferred.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    } // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once


                    then = returned && ( // Support: Promises/A+ section 2.3.4
                    // https://promisesaplus.com/#point-64
                    // Only check objects and functions for thenability
                    _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                      } // Handle all other returned values

                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      } // Process the value(s)
                      // Default process is resolve


                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                      // Only normal processors (resolve) catch and reject exceptions
                  process = special ? mightThrow : function () {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (jQuery.Deferred.exceptionHook) {
                        jQuery.Deferred.exceptionHook(e, process.stackTrace);
                      } // Support: Promises/A+ section 2.3.3.3.4.1
                      // https://promisesaplus.com/#point-61
                      // Ignore post-resolution exceptions


                      if (depth + 1 >= maxDepth) {
                        // Only substitute handlers pass on context
                        // and multiple values (non-spec behavior)
                        if (handler !== Thrower) {
                          that = undefined;
                          args = [e];
                        }

                        deferred.rejectWith(that, args);
                      }
                    }
                  }; // Support: Promises/A+ section 2.3.3.3.1
                  // https://promisesaplus.com/#point-57
                  // Re-resolve promises immediately to dodge false rejection from
                  // subsequent errors


                  if (depth) {
                    process();
                  } else {
                    // Call an optional hook to record the stack, in case of exception
                    // since it's otherwise lost when execution goes async
                    if (jQuery.Deferred.getStackHook) {
                      process.stackTrace = jQuery.Deferred.getStackHook();
                    }

                    window.setTimeout(process);
                  }
                };
              }

              return jQuery.Deferred(function (newDefer) {
                // progress_handlers.add( ... )
                tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

                tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

                tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
              }).promise();
            },
            // Get a promise for this deferred
            // If obj is provided, the promise aspect is added to the object
            promise: function promise(obj) {
              return obj != null ? jQuery.extend(obj, _promise) : _promise;
            }
          },
              deferred = {}; // Add list-specific methods

          jQuery.each(tuples, function (i, tuple) {
            var list = tuple[2],
                stateString = tuple[5]; // promise.progress = list.add
            // promise.done = list.add
            // promise.fail = list.add

            _promise[tuple[1]] = list.add; // Handle state

            if (stateString) {
              list.add(function () {
                // state = "resolved" (i.e., fulfilled)
                // state = "rejected"
                _state = stateString;
              }, // rejected_callbacks.disable
              // fulfilled_callbacks.disable
              tuples[3 - i][2].disable, // rejected_handlers.disable
              // fulfilled_handlers.disable
              tuples[3 - i][3].disable, // progress_callbacks.lock
              tuples[0][2].lock, // progress_handlers.lock
              tuples[0][3].lock);
            } // progress_handlers.fire
            // fulfilled_handlers.fire
            // rejected_handlers.fire


            list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
            // deferred.resolve = function() { deferred.resolveWith(...) }
            // deferred.reject = function() { deferred.rejectWith(...) }

            deferred[tuple[0]] = function () {
              deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
              return this;
            }; // deferred.notifyWith = list.fireWith
            // deferred.resolveWith = list.fireWith
            // deferred.rejectWith = list.fireWith


            deferred[tuple[0] + "With"] = list.fireWith;
          }); // Make the deferred a promise

          _promise.promise(deferred); // Call given func if any


          if (func) {
            func.call(deferred, deferred);
          } // All done!


          return deferred;
        },
        // Deferred helper
        when: function when(singleValue) {
          var // count of uncompleted subordinates
          remaining = arguments.length,
              // count of unprocessed arguments
          i = remaining,
              // subordinate fulfillment data
          resolveContexts = Array(i),
              resolveValues = _slice.call(arguments),
              // the master Deferred
          master = jQuery.Deferred(),
              // subordinate callback factory
          updateFunc = function updateFunc(i) {
            return function (value) {
              resolveContexts[i] = this;
              resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

              if (! --remaining) {
                master.resolveWith(resolveContexts, resolveValues);
              }
            };
          }; // Single- and empty arguments are adopted like Promise.resolve


          if (remaining <= 1) {
            adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

            if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
              return master.then();
            }
          } // Multiple arguments are aggregated like Promise.all array elements


          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), master.reject);
          }

          return master.promise();
        }
      }); // These usually indicate a programmer mistake during development,
      // warn about them ASAP rather than swallowing them by default.

      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

      jQuery.Deferred.exceptionHook = function (error, stack) {
        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
          window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
      };

      jQuery.readyException = function (error) {
        window.setTimeout(function () {
          throw error;
        });
      }; // The deferred used on DOM ready


      var readyList = jQuery.Deferred();

      jQuery.fn.ready = function (fn) {
        readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
        // happens at the time of error handling instead of callback
        // registration.
        .catch(function (error) {
          jQuery.readyException(error);
        });
        return this;
      };

      jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
        // Handle when the DOM is ready
        ready: function ready(wait) {
          // Abort if there are pending holds or we're already ready
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          } // Remember that the DOM is ready


          jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          } // If there are functions bound, to execute


          readyList.resolveWith(document, [jQuery]);
        }
      });
      jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

      function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
      } // Catch cases where $(document).ready() is called
      // after the browser event has already occurred.
      // Support: IE <=9 - 10 only
      // Older IE sometimes signals "interactive" too soon


      if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready);
      } else {
        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

        window.addEventListener("load", completed);
      } // Multifunctional method to get and set values of a collection
      // The value/s can optionally be executed if it's a function


      var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
            len = elems.length,
            bulk = key == null; // Sets many values

        if (toType(key) === "object") {
          chainable = true;

          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          } // Sets one value

        } else if (value !== undefined) {
          chainable = true;

          if (!isFunction(value)) {
            raw = true;
          }

          if (bulk) {
            // Bulk operations run against the entire set
            if (raw) {
              fn.call(elems, value);
              fn = null; // ...except when executing function values
            } else {
              bulk = fn;

              fn = function fn(elem, _key, value) {
                return bulk.call(jQuery(elem), value);
              };
            }
          }

          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
          }
        }

        if (chainable) {
          return elems;
        } // Gets


        if (bulk) {
          return fn.call(elems);
        }

        return len ? fn(elems[0], key) : emptyGet;
      }; // Matches dashed string for camelizing


      var rmsPrefix = /^-ms-/,
          rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

      function fcamelCase(_all, letter) {
        return letter.toUpperCase();
      } // Convert dashed to camelCase; used by the css and data modules
      // Support: IE <=9 - 11, Edge 12 - 15
      // Microsoft forgot to hump their vendor prefix (#9572)


      function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
      }

      var acceptData = function acceptData(owner) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };

      function Data() {
        this.expando = jQuery.expando + Data.uid++;
      }

      Data.uid = 1;
      Data.prototype = {
        cache: function cache(owner) {
          // Check if the owner object already has a cache
          var value = owner[this.expando]; // If not, create one

          if (!value) {
            value = Object.create(null); // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return an empty object.

            if (acceptData(owner)) {
              // If it is a node unlikely to be stringify-ed or looped over
              // use plain assignment
              if (owner.nodeType) {
                owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
                // configurable must be true to allow the property to be
                // deleted when data is removed
              } else {
                Object.defineProperty(owner, this.expando, {
                  value: value,
                  configurable: true
                });
              }
            }
          }

          return value;
        },
        set: function set(owner, data, value) {
          var prop,
              cache = this.cache(owner); // Handle: [ owner, key, value ] args
          // Always use camelCase key (gh-2257)

          if (typeof data === "string") {
            cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
          } else {
            // Copy the properties one-by-one to the cache object
            for (prop in data) {
              cache[camelCase(prop)] = data[prop];
            }
          }

          return cache;
        },
        get: function get(owner, key) {
          return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function access(owner, key, value) {
          // In cases where either:
          //
          //   1. No key was specified
          //   2. A string key was specified, but no value provided
          //
          // Take the "read" path and allow the get method to determine
          // which value to return, respectively either:
          //
          //   1. The entire cache object
          //   2. The data stored at the key
          //
          if (key === undefined || key && typeof key === "string" && value === undefined) {
            return this.get(owner, key);
          } // When the key is not a string, or both a key and value
          // are specified, set or extend (existing objects) with either:
          //
          //   1. An object of properties
          //   2. A key and value
          //


          this.set(owner, key, value); // Since the "set" path can have two possible entry points
          // return the expected data based on which path was taken[*]

          return value !== undefined ? value : key;
        },
        remove: function remove(owner, key) {
          var i,
              cache = owner[this.expando];

          if (cache === undefined) {
            return;
          }

          if (key !== undefined) {
            // Support array or space separated string of keys
            if (Array.isArray(key)) {
              // If key is an array of keys...
              // We always set camelCase keys, so remove that.
              key = key.map(camelCase);
            } else {
              key = camelCase(key); // If a key with the spaces exists, use it.
              // Otherwise, create an array by matching non-whitespace

              key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
            }

            i = key.length;

            while (i--) {
              delete cache[key[i]];
            }
          } // Remove the expando if there's no more data


          if (key === undefined || jQuery.isEmptyObject(cache)) {
            // Support: Chrome <=35 - 45
            // Webkit & Blink performance suffers when deleting properties
            // from DOM nodes, so set to undefined instead
            // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
            if (owner.nodeType) {
              owner[this.expando] = undefined;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function hasData(owner) {
          var cache = owner[this.expando];
          return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data();
      var dataUser = new Data(); //	Implementation Summary
      //
      //	1. Enforce API surface and semantic compatibility with 1.9.x branch
      //	2. Improve the module's maintainability by reducing the storage
      //		paths to a single mechanism.
      //	3. Use the same single mechanism to support "private" and "user" data.
      //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
      //	5. Avoid exposing implementation details on user objects (eg. expando properties)
      //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
          rmultiDash = /[A-Z]/g;

      function getData(data) {
        if (data === "true") {
          return true;
        }

        if (data === "false") {
          return false;
        }

        if (data === "null") {
          return null;
        } // Only convert to a number if it doesn't change the string


        if (data === +data + "") {
          return +data;
        }

        if (rbrace.test(data)) {
          return JSON.parse(data);
        }

        return data;
      }

      function dataAttr(elem, key, data) {
        var name; // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute

        if (data === undefined && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data = elem.getAttribute(name);

          if (typeof data === "string") {
            try {
              data = getData(data);
            } catch (e) {} // Make sure we set the data so it isn't changed later


            dataUser.set(elem, key, data);
          } else {
            data = undefined;
          }
        }

        return data;
      }

      jQuery.extend({
        hasData: function hasData(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function data(elem, name, _data) {
          return dataUser.access(elem, name, _data);
        },
        removeData: function removeData(elem, name) {
          dataUser.remove(elem, name);
        },
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function _data(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },
        _removeData: function _removeData(elem, name) {
          dataPriv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function data(key, value) {
          var i,
              name,
              data,
              elem = this[0],
              attrs = elem && elem.attributes; // Gets all values

          if (key === undefined) {
            if (this.length) {
              data = dataUser.get(elem);

              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i = attrs.length;

                while (i--) {
                  // Support: IE 11 only
                  // The attrs elements can be null (#14894)
                  if (attrs[i]) {
                    name = attrs[i].name;

                    if (name.indexOf("data-") === 0) {
                      name = camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }

                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }

            return data;
          } // Sets multiple values


          if (_typeof(key) === "object") {
            return this.each(function () {
              dataUser.set(this, key);
            });
          }

          return access(this, function (value) {
            var data; // The calling jQuery object (element matches) is not empty
            // (and therefore has an element appears at this[ 0 ]) and the
            // `value` parameter was not undefined. An empty jQuery object
            // will result in `undefined` for elem = this[ 0 ] which will
            // throw an exception if an attempt to read a data cache is made.

            if (elem && value === undefined) {
              // Attempt to get data from the cache
              // The key will always be camelCased in Data
              data = dataUser.get(elem, key);

              if (data !== undefined) {
                return data;
              } // Attempt to "discover" the data in
              // HTML5 custom data-* attrs


              data = dataAttr(elem, key);

              if (data !== undefined) {
                return data;
              } // We tried really hard, but the data doesn't exist.


              return;
            } // Set the data...


            this.each(function () {
              // We always store the camelCased key
              dataUser.set(this, key, value);
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function removeData(key) {
          return this.each(function () {
            dataUser.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue: function queue(elem, type, data) {
          var queue;

          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

            if (data) {
              if (!queue || Array.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }

            return queue || [];
          }
        },
        dequeue: function dequeue(elem, type) {
          type = type || "fx";

          var queue = jQuery.queue(elem, type),
              startLength = queue.length,
              fn = queue.shift(),
              hooks = jQuery._queueHooks(elem, type),
              next = function next() {
            jQuery.dequeue(elem, type);
          }; // If the fx queue is dequeued, always remove the progress sentinel


          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }

          if (fn) {
            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if (type === "fx") {
              queue.unshift("inprogress");
            } // Clear up the last queue stop function


            delete hooks.stop;
            fn.call(elem, next, hooks);
          }

          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function _queueHooks(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks("once memory").add(function () {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue: function queue(type, data) {
          var setter = 2;

          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }

          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }

          return data === undefined ? this : this.each(function () {
            var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

            jQuery._queueHooks(this, type);

            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function dequeue(type) {
          return this.each(function () {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function clearQueue(type) {
          return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function promise(type, obj) {
          var tmp,
              count = 1,
              defer = jQuery.Deferred(),
              elements = this,
              i = this.length,
              resolve = function resolve() {
            if (! --count) {
              defer.resolveWith(elements, [elements]);
            }
          };

          if (typeof type !== "string") {
            obj = type;
            type = undefined;
          }

          type = type || "fx";

          while (i--) {
            tmp = dataPriv.get(elements[i], type + "queueHooks");

            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }

          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var documentElement = document.documentElement;

      var isAttached = function isAttached(elem) {
        return jQuery.contains(elem.ownerDocument, elem);
      },
          composed = {
        composed: true
      }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
      // Check attachment across shadow DOM boundaries when possible (gh-3504)
      // Support: iOS 10.0-10.2 only
      // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
      // leading to errors. We need to check for `getRootNode`.


      if (documentElement.getRootNode) {
        isAttached = function isAttached(elem) {
          return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
      }

      var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem; // Inline style trumps all

        return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) && jQuery.css(elem, "display") === "none";
      };

      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted,
            scale,
            maxIterations = 20,
            currentValue = tween ? function () {
          return tween.cur();
        } : function () {
          return jQuery.css(elem, prop, "");
        },
            initial = currentValue(),
            unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
            // Starting value computation is required for potential unit mismatches
        initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

        if (initialInUnit && initialInUnit[3] !== unit) {
          // Support: Firefox <=54
          // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
          initial = initial / 2; // Trust units reported by jQuery.css

          unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

          initialInUnit = +initial || 1;

          while (maxIterations--) {
            // Evaluate and update our best guess (doubling guesses that zero out).
            // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
            jQuery.style(elem, prop, initialInUnit + unit);

            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
              maxIterations = 0;
            }

            initialInUnit = initialInUnit / scale;
          }

          initialInUnit = initialInUnit * 2;
          jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

          valueParts = valueParts || [];
        }

        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }

        return adjusted;
      }

      var defaultDisplayMap = {};

      function getDefaultDisplay(elem) {
        var temp,
            doc = elem.ownerDocument,
            nodeName = elem.nodeName,
            display = defaultDisplayMap[nodeName];

        if (display) {
          return display;
        }

        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);

        if (display === "none") {
          display = "block";
        }

        defaultDisplayMap[nodeName] = display;
        return display;
      }

      function showHide(elements, show) {
        var display,
            elem,
            values = [],
            index = 0,
            length = elements.length; // Determine new display value for elements that need to change

        for (; index < length; index++) {
          elem = elements[index];

          if (!elem.style) {
            continue;
          }

          display = elem.style.display;

          if (show) {
            // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
            // check is required in this first loop unless we have a nonempty display value (either
            // inline or about-to-be-restored)
            if (display === "none") {
              values[index] = dataPriv.get(elem, "display") || null;

              if (!values[index]) {
                elem.style.display = "";
              }
            }

            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem);
            }
          } else {
            if (display !== "none") {
              values[index] = "none"; // Remember what we're overwriting

              dataPriv.set(elem, "display", display);
            }
          }
        } // Set the display of the elements in a second loop to avoid constant reflow


        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index];
          }
        }

        return elements;
      }

      jQuery.fn.extend({
        show: function show() {
          return showHide(this, true);
        },
        hide: function hide() {
          return showHide(this);
        },
        toggle: function toggle(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }

          return this.each(function () {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
      var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

      (function () {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild(document.createElement("div")),
            input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)

        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input); // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments

        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned

        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only
        // IE <=9 replaces <option> tags with their contents when inserted outside of
        // the select element.

        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
      })(); // We have to close these tags to support XHTML (#13200)


      var wrapMap = {
        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td; // Support: IE <=9 only

      if (!support.option) {
        wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
      }

      function getAll(context, tag) {
        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;

        if (typeof context.getElementsByTagName !== "undefined") {
          ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
          ret = context.querySelectorAll(tag || "*");
        } else {
          ret = [];
        }

        if (tag === undefined || tag && nodeName(context, tag)) {
          return jQuery.merge([context], ret);
        }

        return ret;
      } // Mark scripts as having already been evaluated


      function setGlobalEval(elems, refElements) {
        var i = 0,
            l = elems.length;

        for (; i < l; i++) {
          dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
      }

      var rhtml = /<|&#?\w+;/;

      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem,
            tmp,
            tag,
            wrap,
            attached,
            j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;

        for (; i < l; i++) {
          elem = elems[i];

          if (elem || elem === 0) {
            // Add nodes directly
            if (toType(elem) === "object") {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

              j = wrap[0];

              while (j--) {
                tmp = tmp.lastChild;
              } // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit


              jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

              tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

              tmp.textContent = "";
            }
          }
        } // Remove wrapper from fragment


        fragment.textContent = "";
        i = 0;

        while (elem = nodes[i++]) {
          // Skip elements already in the context collection (trac-4087)
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }

            continue;
          }

          attached = isAttached(elem); // Append to fragment

          tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

          if (attached) {
            setGlobalEval(tmp);
          } // Capture executables


          if (scripts) {
            j = 0;

            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }

        return fragment;
      }

      var rkeyEvent = /^key/,
          rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
          rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

      function returnTrue() {
        return true;
      }

      function returnFalse() {
        return false;
      } // Support: IE <=9 - 11+
      // focus() and blur() are asynchronous, except when they are no-op.
      // So expect focus to be synchronous when the element is already active,
      // and blur to be synchronous when the element is not already active.
      // (focus and blur are always synchronous in other supported browsers,
      // this just defines when we can count on it).


      function expectSync(elem, type) {
        return elem === safeActiveElement() === (type === "focus");
      } // Support: IE <=9 only
      // Accessing document.activeElement can throw unexpectedly
      // https://bugs.jquery.com/ticket/13393


      function safeActiveElement() {
        try {
          return document.activeElement;
        } catch (err) {}
      }

      function _on(elem, types, selector, data, fn, one) {
        var origFn, type; // Types can be a map of types/handlers

        if (_typeof(types) === "object") {
          // ( types-Object, selector, data )
          if (typeof selector !== "string") {
            // ( types-Object, data )
            data = data || selector;
            selector = undefined;
          }

          for (type in types) {
            _on(elem, type, selector, data, types[type], one);
          }

          return elem;
        }

        if (data == null && fn == null) {
          // ( types, fn )
          fn = selector;
          data = selector = undefined;
        } else if (fn == null) {
          if (typeof selector === "string") {
            // ( types, selector, fn )
            fn = data;
            data = undefined;
          } else {
            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined;
          }
        }

        if (fn === false) {
          fn = returnFalse;
        } else if (!fn) {
          return elem;
        }

        if (one === 1) {
          origFn = fn;

          fn = function fn(event) {
            // Can use an empty set, since event contains the info
            jQuery().off(event);
            return origFn.apply(this, arguments);
          }; // Use same guid so caller can remove using origFn


          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }

        return elem.each(function () {
          jQuery.event.add(this, types, fn, data, selector);
        });
      }
      /*
       * Helper functions for managing events -- not part of the public interface.
       * Props to Dean Edwards' addEvent library for many of the ideas.
       */


      jQuery.event = {
        global: {},
        add: function add(elem, types, handler, data, selector) {
          var handleObjIn,
              eventHandle,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = dataPriv.get(elem); // Only attach events to objects that accept data

          if (!acceptData(elem)) {
            return;
          } // Caller can pass in an object of custom data in lieu of the handler


          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          } // Ensure that invalid selectors throw exceptions at attach time
          // Evaluate against documentElement in case elem is a non-element node (e.g., document)


          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector);
          } // Make sure that the handler has a unique ID, used to find/remove it later


          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          } // Init the element's event structure and main handler, if this is the first


          if (!(events = elemData.events)) {
            events = elemData.events = Object.create(null);
          }

          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function (e) {
              // Discard the second event of a jQuery.event.trigger() and
              // when an event is called after a page has unloaded
              return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
          } // Handle multiple events separated by a space


          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;

          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

            if (!type) {
              continue;
            } // If event changes its type, use the special event handlers for the changed type


            special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

            type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

            special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn); // Init the event handler queue if we're the first

            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }

            if (special.add) {
              special.add.call(elem, handleObj);

              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            } // Add to the element's handler list, delegates in front


            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            } // Keep track of which events have ever been used, for event optimization


            jQuery.event.global[type] = true;
          }
        },
        // Detach an event or set of events from an element
        remove: function remove(elem, types, handler, selector, mappedTypes) {
          var j,
              origCount,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

          if (!elemData || !(events = elemData.events)) {
            return;
          } // Once for each type.namespace in types; type may be omitted


          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;

          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }

              continue;
            }

            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

            origCount = j = handlers.length;

            while (j--) {
              handleObj = handlers[j];

              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);

                if (handleObj.selector) {
                  handlers.delegateCount--;
                }

                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            } // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)


            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }

              delete events[type];
            }
          } // Remove data and the expando if it's no longer used


          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },
        dispatch: function dispatch(nativeEvent) {
          var i,
              j,
              ret,
              matched,
              handleObj,
              handlerQueue,
              args = new Array(arguments.length),
              // Make a writable jQuery.Event from the native event object
          event = jQuery.event.fix(nativeEvent),
              handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
              special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

          args[0] = event;

          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i];
          }

          event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          } // Determine handlers


          handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

          i = 0;

          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;

            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              // If the event is namespaced, then each handler is only invoked if it is
              // specially universal or its namespaces are a superset of the event's.
              if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          } // Call the postDispatch hook for the mapped type


          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }

          return event.result;
        },
        handlers: function handlers(event, _handlers) {
          var i,
              handleObj,
              sel,
              matchedHandlers,
              matchedSelectors,
              handlerQueue = [],
              delegateCount = _handlers.delegateCount,
              cur = event.target; // Find delegate handlers

          if (delegateCount && // Support: IE <=9
          // Black-hole SVG <use> instance trees (trac-13180)
          cur.nodeType && // Support: Firefox <=42
          // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
          // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
          // Support: IE 11 only
          // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
          !(event.type === "click" && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              // Don't check non-elements (#13208)
              // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
              if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};

                for (i = 0; i < delegateCount; i++) {
                  handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

                  sel = handleObj.selector + " ";

                  if (matchedSelectors[sel] === undefined) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                  }

                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj);
                  }
                }

                if (matchedHandlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matchedHandlers
                  });
                }
              }
            }
          } // Add the remaining (directly-bound) handlers


          cur = this;

          if (delegateCount < _handlers.length) {
            handlerQueue.push({
              elem: cur,
              handlers: _handlers.slice(delegateCount)
            });
          }

          return handlerQueue;
        },
        addProp: function addProp(name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: isFunction(hook) ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            } : function () {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },
            set: function set(value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: value
              });
            }
          });
        },
        fix: function fix(originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
          load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
          },
          click: {
            // Utilize native event to ensure correct state for checkable inputs
            setup: function setup(data) {
              // For mutual compressibility with _default, replace `this` access with a local var.
              // `|| data` is dead code meant only to preserve the variable through minification.
              var el = this || data; // Claim the first handler

              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                // dataPriv.set( el, "click", ... )
                leverageNative(el, "click", returnTrue);
              } // Return false to allow normal processing in the caller


              return false;
            },
            trigger: function trigger(data) {
              // For mutual compressibility with _default, replace `this` access with a local var.
              // `|| data` is dead code meant only to preserve the variable through minification.
              var el = this || data; // Force setup before triggering a click

              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click");
              } // Return non-false to allow normal event-path propagation


              return true;
            },
            // For cross-browser consistency, suppress native .click() on links
            // Also prevent it if we're currently inside a leveraged native-event stack
            _default: function _default(event) {
              var target = event.target;
              return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
            }
          },
          beforeunload: {
            postDispatch: function postDispatch(event) {
              // Support: Firefox 20+
              // Firefox doesn't alert if the returnValue field is not set.
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      }; // Ensure the presence of an event listener that handles manually-triggered
      // synthetic events by interrupting progress until reinvoked in response to
      // *native* events that it fires directly, ensuring that state changes have
      // already occurred before other listeners are invoked.

      function leverageNative(el, type, expectSync) {
        // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
        if (!expectSync) {
          if (dataPriv.get(el, type) === undefined) {
            jQuery.event.add(el, type, returnTrue);
          }

          return;
        } // Register the controller as a special universal handler for all event namespaces


        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
          namespace: false,
          handler: function handler(event) {
            var notAsync,
                result,
                saved = dataPriv.get(this, type);

            if (event.isTrigger & 1 && this[type]) {
              // Interrupt processing of the outer synthetic .trigger()ed event
              // Saved data should be false in such cases, but might be a leftover capture object
              // from an async native handler (gh-4350)
              if (!saved.length) {
                // Store arguments for use when handling the inner native event
                // There will always be at least one argument (an event object), so this array
                // will not be confused with a leftover capture object.
                saved = _slice.call(arguments);
                dataPriv.set(this, type, saved); // Trigger the native event and capture its result
                // Support: IE <=9 - 11+
                // focus() and blur() are asynchronous

                notAsync = expectSync(this, type);
                this[type]();
                result = dataPriv.get(this, type);

                if (saved !== result || notAsync) {
                  dataPriv.set(this, type, false);
                } else {
                  result = {};
                }

                if (saved !== result) {
                  // Cancel the outer synthetic event
                  event.stopImmediatePropagation();
                  event.preventDefault();
                  return result.value;
                } // If this is an inner synthetic event for an event with a bubbling surrogate
                // (focus or blur), assume that the surrogate already propagated from triggering the
                // native event and prevent that from happening again here.
                // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                // less bad than duplication.

              } else if ((jQuery.event.special[type] || {}).delegateType) {
                event.stopPropagation();
              } // If this is a native event triggered above, everything is now in order
              // Fire an inner synthetic event with the original arguments

            } else if (saved.length) {
              // ...and capture the result
              dataPriv.set(this, type, {
                value: jQuery.event.trigger( // Support: IE <=9 - 11+
                // Extend with the prototype to reset the above stopImmediatePropagation()
                jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
              }); // Abort handling of the native event

              event.stopImmediatePropagation();
            }
          }
        });
      }

      jQuery.removeEvent = function (elem, type, handle) {
        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };

      jQuery.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        } // Event object


        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type; // Events bubbling up the document may have been marked as prevented
          // by a handler lower down the tree; reflect the correct value.

          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
          src.returnValue === false ? returnTrue : returnFalse; // Create target properties
          // Support: Safari <=6 - 7 only
          // Target should not be a text node (#504, #13143)

          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget; // Event type
        } else {
          this.type = src;
        } // Put explicitly provided properties onto the event object


        if (props) {
          jQuery.extend(this, props);
        } // Create a timestamp if incoming event doesn't have one


        this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

        this[jQuery.expando] = true;
      }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
      // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function preventDefault() {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;

          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation: function stopPropagation() {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;

          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function stopImmediatePropagation() {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;

          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }

          this.stopPropagation();
        }
      }; // Includes all common event props including KeyEvent and MouseEvent specific props

      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function which(event) {
          var button = event.button; // Add which for key events

          if (event.which == null && rkeyEvent.test(event.type)) {
            return event.charCode != null ? event.charCode : event.keyCode;
          } // Add which for click: 1 === left; 2 === middle; 3 === right


          if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
            if (button & 1) {
              return 1;
            }

            if (button & 2) {
              return 3;
            }

            if (button & 4) {
              return 2;
            }

            return 0;
          }

          return event.which;
        }
      }, jQuery.event.addProp);
      jQuery.each({
        focus: "focusin",
        blur: "focusout"
      }, function (type, delegateType) {
        jQuery.event.special[type] = {
          // Utilize native event if possible so blur/focus sequence is correct
          setup: function setup() {
            // Claim the first handler
            // dataPriv.set( this, "focus", ... )
            // dataPriv.set( this, "blur", ... )
            leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

            return false;
          },
          trigger: function trigger() {
            // Force setup before trigger
            leverageNative(this, type); // Return non-false to allow normal event-path propagation

            return true;
          },
          delegateType: delegateType
        };
      }); // Create mouseenter/leave events using mouseover/out and event-time checks
      // so that event delegation works in jQuery.
      // Do the same for pointerenter/pointerleave and pointerover/pointerout
      //
      // Support: Safari 7 only
      // Safari sends mouseenter too often; see:
      // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
      // for the description of the bug (it existed in older Chrome versions as well).

      jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function (orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function handle(event) {
            var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window

            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }

            return ret;
          }
        };
      });
      jQuery.fn.extend({
        on: function on(types, selector, data, fn) {
          return _on(this, types, selector, data, fn);
        },
        one: function one(types, selector, data, fn) {
          return _on(this, types, selector, data, fn, 1);
        },
        off: function off(types, selector, fn) {
          var handleObj, type;

          if (types && types.preventDefault && types.handleObj) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }

          if (_typeof(types) === "object") {
            // ( types-object [, selector] )
            for (type in types) {
              this.off(type, selector, types[type]);
            }

            return this;
          }

          if (selector === false || typeof selector === "function") {
            // ( types [, fn] )
            fn = selector;
            selector = undefined;
          }

          if (fn === false) {
            fn = returnFalse;
          }

          return this.each(function () {
            jQuery.event.remove(this, types, fn, selector);
          });
        }
      });
      var // Support: IE <=10 - 11, Edge 12 - 13 only
      // In IE/Edge using regex groups here causes severe slowdowns.
      // See https://connect.microsoft.com/IE/feedback/details/1736512/
      rnoInnerhtml = /<script|<style|<link/i,
          // checked="checked" or checked
      rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
          rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

      function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
          return jQuery(elem).children("tbody")[0] || elem;
        }

        return elem;
      } // Replace/restore the type attribute of script elements for safe DOM manipulation


      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }

      function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
          elem.type = elem.type.slice(5);
        } else {
          elem.removeAttribute("type");
        }

        return elem;
      }

      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;

        if (dest.nodeType !== 1) {
          return;
        } // 1. Copy private data: events, handlers, etc.


        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.get(src);
          events = pdataOld.events;

          if (events) {
            dataPriv.remove(dest, "handle events");

            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        } // 2. Copy user data


        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur);
        }
      } // Fix IE bugs, see support tests


      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

        if (nodeName === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === "input" || nodeName === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }

      function domManip(collection, args, callback, ignored) {
        // Flatten any nested arrays
        args = flat(args);
        var fragment,
            first,
            scripts,
            hasScripts,
            node,
            doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[0],
            valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
          return collection.each(function (index) {
            var self = collection.eq(index);

            if (valueIsFunction) {
              args[0] = value.call(this, index, self.html());
            }

            domManip(self, args, callback, ignored);
          });
        }

        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;

          if (fragment.childNodes.length === 1) {
            fragment = first;
          } // Require either new content or an interest in ignored elements to invoke the callback


          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length; // Use the original fragment for the last item
            // instead of the first because it can end up
            // being emptied incorrectly in certain situations (#8070).

            for (; i < l; i++) {
              node = fragment;

              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

                if (hasScripts) {
                  // Support: Android <=4.0 only, PhantomJS 1 only
                  // push.apply(_, arraylike) throws on ancient WebKit
                  jQuery.merge(scripts, getAll(node, "script"));
                }
              }

              callback.call(collection[i], node, i);
            }

            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

              jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];

                if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                  if (node.src && (node.type || "").toLowerCase() !== "module") {
                    // Optional AJAX dependency, but won't run scripts if not present
                    if (jQuery._evalUrl && !node.noModule) {
                      jQuery._evalUrl(node.src, {
                        nonce: node.nonce || node.getAttribute("nonce")
                      }, doc);
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                  }
                }
              }
            }
          }
        }

        return collection;
      }

      function _remove(elem, selector, keepData) {
        var node,
            nodes = selector ? jQuery.filter(selector, elem) : elem,
            i = 0;

        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node));
          }

          if (node.parentNode) {
            if (keepData && isAttached(node)) {
              setGlobalEval(getAll(node, "script"));
            }

            node.parentNode.removeChild(node);
          }
        }

        return elem;
      }

      jQuery.extend({
        htmlPrefilter: function htmlPrefilter(html) {
          return html;
        },
        clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
          var i,
              l,
              srcElements,
              destElements,
              clone = elem.cloneNode(true),
              inPage = isAttached(elem); // Fix IE cloning issues

          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
            destElements = getAll(clone);
            srcElements = getAll(elem);

            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          } // Copy the events from the original to the clone


          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);

              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          } // Preserve script evaluation history


          destElements = getAll(clone, "script");

          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          } // Return the cloned set


          return clone;
        },
        cleanData: function cleanData(elems) {
          var data,
              elem,
              type,
              special = jQuery.event.special,
              i = 0;

          for (; (elem = elems[i]) !== undefined; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                } // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove


                elem[dataPriv.expando] = undefined;
              }

              if (elem[dataUser.expando]) {
                // Support: Chrome <=35 - 45+
                // Assign undefined instead of using delete, see Data#remove
                elem[dataUser.expando] = undefined;
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function detach(selector) {
          return _remove(this, selector, true);
        },
        remove: function remove(selector) {
          return _remove(this, selector);
        },
        text: function text(value) {
          return access(this, function (value) {
            return value === undefined ? jQuery.text(this) : this.empty().each(function () {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value;
              }
            });
          }, null, value, arguments.length);
        },
        append: function append() {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function prepend() {
          return domManip(this, arguments, function (elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function before() {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function after() {
          return domManip(this, arguments, function (elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty: function empty() {
          var elem,
              i = 0;

          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              // Prevent memory leaks
              jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

              elem.textContent = "";
            }
          }

          return this;
        },
        clone: function clone(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function () {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function html(value) {
          return access(this, function (value) {
            var elem = this[0] || {},
                i = 0,
                l = this.length;

            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML;
            } // See if we can take a shortcut and just use innerHTML


            if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
              value = jQuery.htmlPrefilter(value);

              try {
                for (; i < l; i++) {
                  elem = this[i] || {}; // Remove element nodes and prevent memory leaks

                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value;
                  }
                }

                elem = 0; // If using innerHTML throws an exception, use the fallback method
              } catch (e) {}
            }

            if (elem) {
              this.empty().append(value);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function replaceWith() {
          var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

          return domManip(this, arguments, function (elem) {
            var parent = this.parentNode;

            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));

              if (parent) {
                parent.replaceChild(elem, this);
              }
            } // Force callback invocation

          }, ignored);
        }
      });
      jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function (name, original) {
        jQuery.fn[name] = function (selector) {
          var elems,
              ret = [],
              insert = jQuery(selector),
              last = insert.length - 1,
              i = 0;

          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
            // .get() because push.apply(_, arraylike) throws on ancient WebKit

            push.apply(ret, elems.get());
          }

          return this.pushStack(ret);
        };
      });
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

      var getStyles = function getStyles(elem) {
        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if (!view || !view.opener) {
          view = window;
        }

        return view.getComputedStyle(elem);
      };

      var swap = function swap(elem, options, callback) {
        var ret,
            name,
            old = {}; // Remember the old values, and insert the new ones

        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }

        ret = callback.call(elem); // Revert the old values

        for (name in options) {
          elem.style[name] = old[name];
        }

        return ret;
      };

      var rboxStyle = new RegExp(cssExpand.join("|"), "i");

      (function () {
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
          // This is a singleton, we need to execute it only once
          if (!div) {
            return;
          }

          container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
          div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
          documentElement.appendChild(container).appendChild(div);
          var divStyle = window.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

          reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
          // Some styles come back with percentage values, even though they shouldn't

          div.style.right = "60%";
          pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
          // Detect misreporting of content dimensions for box-sizing:border-box elements

          boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
          // Detect overflow:scroll screwiness (gh-3699)
          // Support: Chrome <=64
          // Don't get tricked when zoom affects offsetWidth (gh-4029)

          div.style.position = "absolute";
          scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
          documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
          // it will also be a sign that checks already performed

          div = null;
        }

        function roundPixelMeasures(measure) {
          return Math.round(parseFloat(measure));
        }

        var pixelPositionVal,
            boxSizingReliableVal,
            scrollboxSizeVal,
            pixelBoxStylesVal,
            reliableTrDimensionsVal,
            reliableMarginLeftVal,
            container = document.createElement("div"),
            div = document.createElement("div"); // Finish early in limited (non-browser) environments

        if (!div.style) {
          return;
        } // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)


        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
          boxSizingReliable: function boxSizingReliable() {
            computeStyleTests();
            return boxSizingReliableVal;
          },
          pixelBoxStyles: function pixelBoxStyles() {
            computeStyleTests();
            return pixelBoxStylesVal;
          },
          pixelPosition: function pixelPosition() {
            computeStyleTests();
            return pixelPositionVal;
          },
          reliableMarginLeft: function reliableMarginLeft() {
            computeStyleTests();
            return reliableMarginLeftVal;
          },
          scrollboxSize: function scrollboxSize() {
            computeStyleTests();
            return scrollboxSizeVal;
          },
          // Support: IE 9 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Behavior in IE 9 is more subtle than in newer versions & it passes
          // some versions of this test; make sure not to make it pass there!
          reliableTrDimensions: function reliableTrDimensions() {
            var table, tr, trChild, trStyle;

            if (reliableTrDimensionsVal == null) {
              table = document.createElement("table");
              tr = document.createElement("tr");
              trChild = document.createElement("div");
              table.style.cssText = "position:absolute;left:-11111px";
              tr.style.height = "1px";
              trChild.style.height = "9px";
              documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
              trStyle = window.getComputedStyle(tr);
              reliableTrDimensionsVal = parseInt(trStyle.height) > 3;
              documentElement.removeChild(table);
            }

            return reliableTrDimensionsVal;
          }
        });
      })();

      function curCSS(elem, name, computed) {
        var width,
            minWidth,
            maxWidth,
            ret,
            // Support: Firefox 51+
        // Retrieving style before computed somehow
        // fixes an issue with getting wrong values
        // on detached elements
        style = elem.style;
        computed = computed || getStyles(elem); // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, #12537)
        //   .css('--customProperty) (#3144)

        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];

          if (ret === "" && !isAttached(elem)) {
            ret = jQuery.style(elem, name);
          } // A tribute to the "awesome hack by Dean Edwards"
          // Android Browser returns percentage for some values,
          // but width seems to be reliably pixels.
          // This is against the CSSOM draft spec:
          // https://drafts.csswg.org/cssom/#resolved-values


          if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
            // Remember the original values
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth; // Put in the new values to get a computed value out

            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width; // Revert the changed values

            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }

        return ret !== undefined ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + "" : ret;
      }

      function addGetHookIf(conditionFn, hookFn) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
          get: function get() {
            if (conditionFn()) {
              // Hook not needed (or it's not possible to use it due
              // to missing dependency), remove it.
              delete this.get;
              return;
            } // Hook needed; redefine it so that the support test is not executed again.


            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }

      var cssPrefixes = ["Webkit", "Moz", "ms"],
          emptyStyle = document.createElement("div").style,
          vendorProps = {}; // Return a vendor-prefixed property or undefined

      function vendorPropName(name) {
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1),
            i = cssPrefixes.length;

        while (i--) {
          name = cssPrefixes[i] + capName;

          if (name in emptyStyle) {
            return name;
          }
        }
      } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


      function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];

        if (final) {
          return final;
        }

        if (name in emptyStyle) {
          return name;
        }

        return vendorProps[name] = vendorPropName(name) || name;
      }

      var // Swappable if display is none or starts with table
      // except "table", "table-cell", or "table-caption"
      // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
      rdisplayswap = /^(none|table(?!-c[ea]).+)/,
          rcustomProp = /^--/,
          cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
      },
          cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      };

      function setPositiveNumber(_elem, value, subtract) {
        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
      }

      function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0,
            extra = 0,
            delta = 0; // Adjustment may not be necessary

        if (box === (isBorderBox ? "border" : "content")) {
          return 0;
        }

        for (; i < 4; i += 2) {
          // Both box models exclude margin
          if (box === "margin") {
            delta += jQuery.css(elem, box + cssExpand[i], true, styles);
          } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


          if (!isBorderBox) {
            // Add padding
            delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

            if (box !== "padding") {
              delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
            } else {
              extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } // If we get here with a border-box (content + padding + border), we're seeking "content" or
            // "padding" or "margin"

          } else {
            // For "content", subtract padding
            if (box === "content") {
              delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            } // For "content" or "padding", subtract border


            if (box !== "margin") {
              delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        } // Account for positive content-box scroll gutter when requested by providing computedVal


        if (!isBorderBox && computedVal >= 0) {
          // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
          // Assuming integer scroll gutter, subtract the rest and round down
          delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
          // Use an explicit zero to avoid NaN (gh-3964)
          )) || 0;
        }

        return delta;
      }

      function getWidthOrHeight(elem, dimension, extra) {
        // Start with computed style
        var styles = getStyles(elem),
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
        // Fake content-box until we know it's needed to know the true value.
        boxSizingNeeded = !support.boxSizingReliable() || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            valueIsBorderBox = isBorderBox,
            val = curCSS(elem, dimension, styles),
            offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.

        if (rnumnonpx.test(val)) {
          if (!extra) {
            return val;
          }

          val = "auto";
        } // Support: IE 9 - 11 only
        // Use offsetWidth/offsetHeight for when box sizing is unreliable.
        // In those cases, the computed value can be trusted to be border-box.


        if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === "auto" || // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
        elem.getClientRects().length) {
          isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
          // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
          // retrieved value as a content box dimension.

          valueIsBorderBox = offsetProp in elem;

          if (valueIsBorderBox) {
            val = elem[offsetProp];
          }
        } // Normalize "" and auto


        val = parseFloat(val) || 0; // Adjust for the element's box model

        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val) + "px";
      }

      jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
          opacity: {
            get: function get(elem, computed) {
              if (computed) {
                // We should always get a number back from opacity
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
          "animationIterationCount": true,
          "columnCount": true,
          "fillOpacity": true,
          "flexGrow": true,
          "flexShrink": true,
          "fontWeight": true,
          "gridArea": true,
          "gridColumn": true,
          "gridColumnEnd": true,
          "gridColumnStart": true,
          "gridRow": true,
          "gridRowEnd": true,
          "gridRowStart": true,
          "lineHeight": true,
          "opacity": true,
          "order": true,
          "orphans": true,
          "widows": true,
          "zIndex": true,
          "zoom": true
        },
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {},
        // Get and set the style property on a DOM Node
        style: function style(elem, name, value, extra) {
          // Don't set styles on text and comment nodes
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          } // Make sure that we're working with the right name


          var ret,
              type,
              hooks,
              origName = camelCase(name),
              isCustomProp = rcustomProp.test(name),
              style = elem.style; // Make sure that we're working with the right name. We don't
          // want to query the value if it is a CSS custom property
          // since they are user-defined.

          if (!isCustomProp) {
            name = finalPropName(origName);
          } // Gets hook for the prefixed version, then unprefixed version


          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

          if (value !== undefined) {
            type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret); // Fixes bug #9237

              type = "number";
            } // Make sure that null and NaN values aren't set (#7116)


            if (value == null || value !== value) {
              return;
            } // If a number was passed in, add the unit (except for certain CSS properties)
            // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
            // "px" to a few hardcoded values.


            if (type === "number" && !isCustomProp) {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
            } // background-* props affect original clone's values


            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            } // If a hook was provided, use that value, otherwise just set the specified value


            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              if (isCustomProp) {
                style.setProperty(name, value);
              } else {
                style[name] = value;
              }
            }
          } else {
            // If a hook was provided get the non-computed value from there
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret;
            } // Otherwise just get the value from the style object


            return style[name];
          }
        },
        css: function css(elem, name, extra, styles) {
          var val,
              num,
              hooks,
              origName = camelCase(name),
              isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
          // want to modify the value if it is a CSS custom property
          // since they are user-defined.

          if (!isCustomProp) {
            name = finalPropName(origName);
          } // Try prefixed name followed by the unprefixed name


          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          } // Otherwise, if a way to get the computed value exists, use that


          if (val === undefined) {
            val = curCSS(elem, name, styles);
          } // Convert "normal" to computed value


          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          } // Make numeric if forced or a qualifier was provided and val looks numeric


          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }

          return val;
        }
      });
      jQuery.each(["height", "width"], function (_i, dimension) {
        jQuery.cssHooks[dimension] = {
          get: function get(elem, computed, extra) {
            if (computed) {
              // Certain elements can have dimension info if we invisibly show them
              // but it must have a current display style that would benefit
              return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
              // Table columns in Safari have non-zero offsetWidth & zero
              // getBoundingClientRect().width unless display is changed.
              // Support: IE <=11 only
              // Running getBoundingClientRect on a disconnected node
              // in IE throws an error.
              !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, dimension, extra);
              }) : getWidthOrHeight(elem, dimension, extra);
            }
          },
          set: function set(elem, value, extra) {
            var matches,
                styles = getStyles(elem),
                // Only read styles.position if the test has a chance to fail
            // to avoid forcing a reflow.
            scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
                // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
            boxSizingNeeded = scrollboxSizeBuggy || extra,
                isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
            // faking a content-box to get border and padding (gh-3699)

            if (isBorderBox && scrollboxSizeBuggy) {
              subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
            } // Convert to pixels if value adjustment is needed


            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
              elem.style[dimension] = value;
              value = jQuery.css(elem, dimension);
            }

            return setPositiveNumber(elem, value, subtract);
          }
        };
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
            marginLeft: 0
          }, function () {
            return elem.getBoundingClientRect().left;
          })) + "px";
        }
      }); // These hooks are used by animate to expand properties

      jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function expand(value) {
            var i = 0,
                expanded = {},
                // Assumes a single number if not a string
            parts = typeof value === "string" ? value.split(" ") : [value];

            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }

            return expanded;
          }
        };

        if (prefix !== "margin") {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery.fn.extend({
        css: function css(name, value) {
          return access(this, function (elem, name, value) {
            var styles,
                len,
                map = {},
                i = 0;

            if (Array.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;

              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles);
              }

              return map;
            }

            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
          }, name, value, arguments.length > 1);
        }
      });

      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }

      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function init(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function cur() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function run(percent) {
          var eased,
              hooks = Tween.propHooks[this.prop];

          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }

          this.now = (this.end - this.start) * eased + this.start;

          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }

          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }

          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function get(tween) {
            var result; // Use a property on the element directly when it is not a DOM element,
            // or when there is no matching style property that exists.

            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            } // Passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails.
            // Simple values such as "10px" are parsed to Float;
            // complex values such as "rotate(1rad)" are returned as-is.


            result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

            return !result || result === "auto" ? 0 : result;
          },
          set: function set(tween) {
            // Use step hook for back compat.
            // Use cssHook if its there.
            // Use .style if available and use plain properties where available.
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      }; // Support: IE <=9 only
      // Panic based approach to setting things on disconnected nodes

      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function set(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.easing = {
        linear: function linear(p) {
          return p;
        },
        swing: function swing(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
      };
      jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

      jQuery.fx.step = {};
      var fxNow,
          inProgress,
          rfxtypes = /^(?:toggle|show|hide)$/,
          rrun = /queueHooks$/;

      function schedule() {
        if (inProgress) {
          if (document.hidden === false && window.requestAnimationFrame) {
            window.requestAnimationFrame(schedule);
          } else {
            window.setTimeout(schedule, jQuery.fx.interval);
          }

          jQuery.fx.tick();
        }
      } // Animations created synchronously will run synchronously


      function createFxNow() {
        window.setTimeout(function () {
          fxNow = undefined;
        });
        return fxNow = Date.now();
      } // Generate parameters to create a standard animation


      function genFx(type, includeWidth) {
        var which,
            i = 0,
            attrs = {
          height: type
        }; // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right

        includeWidth = includeWidth ? 1 : 0;

        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }

        return attrs;
      }

      function createTween(value, prop, animation) {
        var tween,
            collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
            index = 0,
            length = collection.length;

        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            // We're done with this property
            return tween;
          }
        }
      }

      function defaultPrefilter(elem, props, opts) {
        var prop,
            value,
            toggle,
            hooks,
            oldfire,
            propTween,
            restoreDisplay,
            display,
            isBox = "width" in props || "height" in props,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHiddenWithinTree(elem),
            dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");

          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;

            hooks.empty.fire = function () {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }

          hooks.unqueued++;
          anim.always(function () {
            // Ensure the complete handler is called before this completes
            anim.always(function () {
              hooks.unqueued--;

              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        } // Detect show/hide animations


        for (prop in props) {
          value = props[prop];

          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";

            if (value === (hidden ? "hide" : "show")) {
              // Pretend to be hidden if this is a "show" and
              // there is still data from a stopped show/hide
              if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                hidden = true; // Ignore all other no-op show/hide data
              } else {
                continue;
              }
            }

            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          }
        } // Bail out if this is a no-op like .hide().hide()


        propTween = !jQuery.isEmptyObject(props);

        if (!propTween && jQuery.isEmptyObject(orig)) {
          return;
        } // Restrict "overflow" and "display" styles during box animations


        if (isBox && elem.nodeType === 1) {
          // Support: IE <=9 - 11, Edge 12 - 15
          // Record all 3 overflow attributes because IE does not infer the shorthand
          // from identically-valued overflowX and overflowY and Edge just mirrors
          // the overflowX value there.
          opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

          restoreDisplay = dataShow && dataShow.display;

          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, "display");
          }

          display = jQuery.css(elem, "display");

          if (display === "none") {
            if (restoreDisplay) {
              display = restoreDisplay;
            } else {
              // Get nonempty value(s) by temporarily forcing visibility
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, "display");
              showHide([elem]);
            }
          } // Animate inline elements as inline-block


          if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
            if (jQuery.css(elem, "float") === "none") {
              // Restore the original display value at the end of pure show/hide animations
              if (!propTween) {
                anim.done(function () {
                  style.display = restoreDisplay;
                });

                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === "none" ? "" : display;
                }
              }

              style.display = "inline-block";
            }
          }
        }

        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function () {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        } // Implement show/hide animations


        propTween = false;

        for (prop in orig) {
          // General show/hide setup for this element animation
          if (!propTween) {
            if (dataShow) {
              if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = dataPriv.access(elem, "fxshow", {
                display: restoreDisplay
              });
            } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


            if (toggle) {
              dataShow.hidden = !hidden;
            } // Show elements before animating them


            if (hidden) {
              showHide([elem], true);
            }
            /* eslint-disable no-loop-func */


            anim.done(function () {
              /* eslint-enable no-loop-func */
              // The final step of a "hide" animation is actually hiding the element
              if (!hidden) {
                showHide([elem]);
              }

              dataPriv.remove(elem, "fxshow");

              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop]);
              }
            });
          } // Per-property setup


          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;

            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0;
            }
          }
        }
      }

      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

        for (index in props) {
          name = camelCase(index);
          easing = specialEasing[name];
          value = props[index];

          if (Array.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }

          if (index !== name) {
            props[name] = value;
            delete props[index];
          }

          hooks = jQuery.cssHooks[name];

          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
            // Reusing 'index' because we have the correct "name"

            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }

      function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always(function () {
          // Don't match elem in the :animated selector
          delete tick.elem;
        }),
            tick = function tick() {
          if (stopped) {
            return false;
          }

          var currentTime = fxNow || createFxNow(),
              remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
              // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
          temp = remaining / animation.duration || 0,
              percent = 1 - temp,
              index = 0,
              length = animation.tweens.length;

          for (; index < length; index++) {
            animation.tweens[index].run(percent);
          }

          deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

          if (percent < 1 && length) {
            return remaining;
          } // If this was an empty animation, synthesize a final progress notification


          if (!length) {
            deferred.notifyWith(elem, [animation, 1, 0]);
          } // Resolve the animation and report its conclusion


          deferred.resolveWith(elem, [animation]);
          return false;
        },
            animation = deferred.promise({
          elem: elem,
          props: jQuery.extend({}, properties),
          opts: jQuery.extend(true, {
            specialEasing: {},
            easing: jQuery.easing._default
          }, options),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function createTween(prop, end) {
            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
            animation.tweens.push(tween);
            return tween;
          },
          stop: function stop(gotoEnd) {
            var index = 0,
                // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;

            if (stopped) {
              return this;
            }

            stopped = true;

            for (; index < length; index++) {
              animation.tweens[index].run(1);
            } // Resolve when we played the last frame; otherwise, reject


            if (gotoEnd) {
              deferred.notifyWith(elem, [animation, 1, 0]);
              deferred.resolveWith(elem, [animation, gotoEnd]);
            } else {
              deferred.rejectWith(elem, [animation, gotoEnd]);
            }

            return this;
          }
        }),
            props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

          if (result) {
            if (isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
            }

            return result;
          }
        }

        jQuery.map(props, createTween, animation);

        if (isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        } // Attach callbacks from options


        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation;
      }

      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          "*": [function (prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },
        tweener: function tweener(props, callback) {
          if (isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnothtmlwhite);
          }

          var prop,
              index = 0,
              length = props.length;

          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function prefilter(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });

      jQuery.speed = function (speed, easing, fn) {
        var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !isFunction(easing) && easing
        }; // Go to the end state if fx are off

        if (jQuery.fx.off) {
          opt.duration = 0;
        } else {
          if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration];
            } else {
              opt.duration = jQuery.fx.speeds._default;
            }
          }
        } // Normalize opt.queue - true/undefined/null -> "fx"


        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        } // Queueing


        opt.old = opt.complete;

        opt.complete = function () {
          if (isFunction(opt.old)) {
            opt.old.call(this);
          }

          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };

        return opt;
      };

      jQuery.fn.extend({
        fadeTo: function fadeTo(speed, to, easing, callback) {
          // Show any hidden elements after setting opacity to 0
          return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
          .end().animate({
            opacity: to
          }, speed, easing, callback);
        },
        animate: function animate(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop),
              optall = jQuery.speed(speed, easing, callback),
              doAnimation = function doAnimation() {
            // Operate on a copy of prop so per-property easing won't be lost
            var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

            if (empty || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };

          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function stop(type, clearQueue, gotoEnd) {
          var stopQueue = function stopQueue(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };

          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
          }

          if (clearQueue) {
            this.queue(type || "fx", []);
          }

          return this.each(function () {
            var dequeue = true,
                index = type != null && type + "queueHooks",
                timers = jQuery.timers,
                data = dataPriv.get(this);

            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }

            for (index = timers.length; index--;) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            } // Start the next in the queue if the last step wasn't forced.
            // Timers currently will call their complete callbacks, which
            // will dequeue but only if they were gotoEnd.


            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function finish(type) {
          if (type !== false) {
            type = type || "fx";
          }

          return this.each(function () {
            var index,
                data = dataPriv.get(this),
                queue = data[type + "queue"],
                hooks = data[type + "queueHooks"],
                timers = jQuery.timers,
                length = queue ? queue.length : 0; // Enable finishing flag on private data

            data.finish = true; // Empty the queue first

            jQuery.queue(this, type, []);

            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            } // Look for any active animations, and finish them


            for (index = timers.length; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            } // Look for any animations in the old queue and finish them


            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            } // Turn off finishing flag


            delete data.finish;
          });
        }
      });
      jQuery.each(["toggle", "show", "hide"], function (_i, name) {
        var cssFn = jQuery.fn[name];

        jQuery.fn[name] = function (speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      }); // Generate shortcuts for custom animations

      jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
          opacity: "show"
        },
        fadeOut: {
          opacity: "hide"
        },
        fadeToggle: {
          opacity: "toggle"
        }
      }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.timers = [];

      jQuery.fx.tick = function () {
        var timer,
            i = 0,
            timers = jQuery.timers;
        fxNow = Date.now();

        for (; i < timers.length; i++) {
          timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }

        if (!timers.length) {
          jQuery.fx.stop();
        }

        fxNow = undefined;
      };

      jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
      };

      jQuery.fx.interval = 13;

      jQuery.fx.start = function () {
        if (inProgress) {
          return;
        }

        inProgress = true;
        schedule();
      };

      jQuery.fx.stop = function () {
        inProgress = null;
      };

      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
      }; // Based off of the plugin by Clint Helfers, with permission.
      // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

      jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function (next, hooks) {
          var timeout = window.setTimeout(next, time);

          hooks.stop = function () {
            window.clearTimeout(timeout);
          };
        });
      };

      (function () {
        var input = document.createElement("input"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox"; // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"

        support.checkOn = input.value !== ""; // Support: IE <=11 only
        // Must access selectedIndex to make default options select

        support.optSelected = opt.selected; // Support: IE <=11 only
        // An input loses its value after becoming a radio

        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();

      var boolHook,
          attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function attr(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function removeAttr(name) {
          return this.each(function () {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr: function attr(elem, name, value) {
          var ret,
              hooks,
              nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          } // Fallback to prop when attributes are not supported


          if (typeof elem.getAttribute === "undefined") {
            return jQuery.prop(elem, name, value);
          } // Attribute hooks are determined by the lowercase version
          // Grab necessary hook if one is defined


          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
          }

          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return;
            }

            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            }

            elem.setAttribute(name, value + "");
            return value;
          }

          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }

          ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

          return ret == null ? undefined : ret;
        },
        attrHooks: {
          type: {
            set: function set(elem, value) {
              if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);

                if (val) {
                  elem.value = val;
                }

                return value;
              }
            }
          }
        },
        removeAttr: function removeAttr(elem, value) {
          var name,
              i = 0,
              // Attribute names can contain non-HTML whitespace characters
          // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
          attrNames = value && value.match(rnothtmlwhite);

          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name);
            }
          }
        }
      }); // Hooks for boolean attributes

      boolHook = {
        set: function set(elem, value, name) {
          if (value === false) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }

          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        attrHandle[name] = function (elem, name, isXML) {
          var ret,
              handle,
              lowercaseName = name.toLowerCase();

          if (!isXML) {
            // Avoid an infinite loop by temporarily removing this function from the getter
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle;
          }

          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i,
          rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function prop(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function removeProp(name) {
          return this.each(function () {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        prop: function prop(elem, name, value) {
          var ret,
              hooks,
              nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }

          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            // Fix name and attach hooks
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }

          if (value !== undefined) {
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            }

            return elem[name] = value;
          }

          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }

          return elem[name];
        },
        propHooks: {
          tabIndex: {
            get: function get(elem) {
              // Support: IE <=9 - 11 only
              // elem.tabIndex doesn't always return the
              // correct value when it hasn't been explicitly set
              // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
              // Use proper attribute retrieval(#12072)
              var tabindex = jQuery.find.attr(elem, "tabindex");

              if (tabindex) {
                return parseInt(tabindex, 10);
              }

              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0;
              }

              return -1;
            }
          }
        },
        propFix: {
          "for": "htmlFor",
          "class": "className"
        }
      }); // Support: IE <=11 only
      // Accessing the selectedIndex property
      // forces the browser to respect setting selected
      // on the option
      // The getter ensures a default option is selected
      // when in an optgroup
      // eslint rule "no-unused-expressions" is disabled for this code
      // since it considers such accessions noop

      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function get(elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;

            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }

            return null;
          },
          set: function set(elem) {
            /* eslint no-unused-expressions: "off" */
            var parent = elem.parentNode;

            if (parent) {
              parent.selectedIndex;

              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }

      jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        jQuery.propFix[this.toLowerCase()] = this;
      }); // Strip and collapse whitespace according to HTML spec
      // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
      }

      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }

      function classesToArray(value) {
        if (Array.isArray(value)) {
          return value;
        }

        if (typeof value === "string") {
          return value.match(rnothtmlwhite) || [];
        }

        return [];
      }

      jQuery.fn.extend({
        addClass: function addClass(value) {
          var classes,
              elem,
              cur,
              curValue,
              clazz,
              j,
              finalValue,
              i = 0;

          if (isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
          }

          classes = classesToArray(value);

          if (classes.length) {
            while (elem = this[i++]) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

              if (cur) {
                j = 0;

                while (clazz = classes[j++]) {
                  if (cur.indexOf(" " + clazz + " ") < 0) {
                    cur += clazz + " ";
                  }
                } // Only assign if different to avoid unneeded rendering.


                finalValue = stripAndCollapse(cur);

                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }

          return this;
        },
        removeClass: function removeClass(value) {
          var classes,
              elem,
              cur,
              curValue,
              clazz,
              j,
              finalValue,
              i = 0;

          if (isFunction(value)) {
            return this.each(function (j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
          }

          if (!arguments.length) {
            return this.attr("class", "");
          }

          classes = classesToArray(value);

          if (classes.length) {
            while (elem = this[i++]) {
              curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

              cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

              if (cur) {
                j = 0;

                while (clazz = classes[j++]) {
                  // Remove *all* instances
                  while (cur.indexOf(" " + clazz + " ") > -1) {
                    cur = cur.replace(" " + clazz + " ", " ");
                  }
                } // Only assign if different to avoid unneeded rendering.


                finalValue = stripAndCollapse(cur);

                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }

          return this;
        },
        toggleClass: function toggleClass(value, stateVal) {
          var type = _typeof(value),
              isValidValue = type === "string" || Array.isArray(value);

          if (typeof stateVal === "boolean" && isValidValue) {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }

          if (isFunction(value)) {
            return this.each(function (i) {
              jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
            });
          }

          return this.each(function () {
            var className, i, self, classNames;

            if (isValidValue) {
              // Toggle individual class names
              i = 0;
              self = jQuery(this);
              classNames = classesToArray(value);

              while (className = classNames[i++]) {
                // Check each className given, space separated list
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              } // Toggle whole class name

            } else if (value === undefined || type === "boolean") {
              className = getClass(this);

              if (className) {
                // Store className if set
                dataPriv.set(this, "__className__", className);
              } // If the element has a class name or if we're passed `false`,
              // then remove the whole classname (if there was one, the above saved it).
              // Otherwise bring back whatever was previously saved (if anything),
              // falling back to the empty string if nothing was stored.


              if (this.setAttribute) {
                this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
              }
            }
          });
        },
        hasClass: function hasClass(selector) {
          var className,
              elem,
              i = 0;
          className = " " + selector + " ";

          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
              return true;
            }
          }

          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function val(value) {
          var hooks,
              ret,
              valueIsFunction,
              elem = this[0];

          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                return ret;
              }

              ret = elem.value; // Handle most common string cases

              if (typeof ret === "string") {
                return ret.replace(rreturn, "");
              } // Handle cases where value is null/undef or number


              return ret == null ? "" : ret;
            }

            return;
          }

          valueIsFunction = isFunction(value);
          return this.each(function (i) {
            var val;

            if (this.nodeType !== 1) {
              return;
            }

            if (valueIsFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            } // Treat null/undefined as ""; convert numbers to string


            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (Array.isArray(val)) {
              val = jQuery.map(val, function (value) {
                return value == null ? "" : value + "";
              });
            }

            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
              this.value = val;
            }
          });
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function get(elem) {
              var val = jQuery.find.attr(elem, "value");
              return val != null ? val : // Support: IE <=10 - 11 only
              // option.text throws exceptions (#14686, #14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem));
            }
          },
          select: {
            get: function get(elem) {
              var value,
                  option,
                  i,
                  options = elem.options,
                  index = elem.selectedIndex,
                  one = elem.type === "select-one",
                  values = one ? null : [],
                  max = one ? index + 1 : options.length;

              if (index < 0) {
                i = max;
              } else {
                i = one ? index : 0;
              } // Loop through all the selected options


              for (; i < max; i++) {
                option = options[i]; // Support: IE <=9 only
                // IE8-9 doesn't update selected after form reset (#2551)

                if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                  // Get the specific value for the option
                  value = jQuery(option).val(); // We don't need an array for one selects

                  if (one) {
                    return value;
                  } // Multi-Selects return an array


                  values.push(value);
                }
              }

              return values;
            },
            set: function set(elem, value) {
              var optionSet,
                  option,
                  options = elem.options,
                  values = jQuery.makeArray(value),
                  i = options.length;

              while (i--) {
                option = options[i];
                /* eslint-disable no-cond-assign */

                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true;
                }
                /* eslint-enable no-cond-assign */

              } // Force browsers to behave consistently when non-matching value is set


              if (!optionSet) {
                elem.selectedIndex = -1;
              }

              return values;
            }
          }
        }
      }); // Radios and checkboxes getter/setter

      jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
          set: function set(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
          }
        };

        if (!support.checkOn) {
          jQuery.valHooks[this].get = function (elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      }); // Return jQuery for attributes-only inclusion

      support.focusin = "onfocusin" in window;

      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
          stopPropagationCallback = function stopPropagationCallback(e) {
        e.stopPropagation();
      };

      jQuery.extend(jQuery.event, {
        trigger: function trigger(event, data, elem, onlyHandlers) {
          var i,
              cur,
              tmp,
              bubbleType,
              ontype,
              handle,
              special,
              lastElement,
              eventPath = [elem || document],
              type = hasOwn.call(event, "type") ? event.type : event,
              namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          } // focus/blur morphs to focusin/out; ensure we're not firing them right now


          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }

          if (type.indexOf(".") > -1) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }

          ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

          event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

          event.result = undefined;

          if (!event.target) {
            event.target = elem;
          } // Clone any incoming data and prepend the event, creating the handler arg list


          data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

          special = jQuery.event.special[type] || {};

          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          } // Determine event propagation path in advance, per W3C events spec (#9951)
          // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


          if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
            bubbleType = special.delegateType || type;

            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }

            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            } // Only add window if we got to document (e.g., not plain obj or detached DOM)


            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
          } // Fire handlers on the event path


          i = 0;

          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            lastElement = cur;
            event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

            handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");

            if (handle) {
              handle.apply(cur, data);
            } // Native handler


            handle = ontype && cur[ontype];

            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);

              if (event.result === false) {
                event.preventDefault();
              }
            }
          }

          event.type = type; // If nobody prevented the default action, do it now

          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              // Call a native DOM method on the target with the same name as the event.
              // Don't do default actions on window, that's where global variables be (#6170)
              if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                // Don't re-trigger an onFOO event when we call its FOO() method
                tmp = elem[ontype];

                if (tmp) {
                  elem[ontype] = null;
                } // Prevent re-triggering of the same event, since we already bubbled it above


                jQuery.event.triggered = type;

                if (event.isPropagationStopped()) {
                  lastElement.addEventListener(type, stopPropagationCallback);
                }

                elem[type]();

                if (event.isPropagationStopped()) {
                  lastElement.removeEventListener(type, stopPropagationCallback);
                }

                jQuery.event.triggered = undefined;

                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }

          return event.result;
        },
        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function simulate(type, elem, event) {
          var e = jQuery.extend(new jQuery.Event(), event, {
            type: type,
            isSimulated: true
          });
          jQuery.event.trigger(e, null, elem);
        }
      });
      jQuery.fn.extend({
        trigger: function trigger(type, data) {
          return this.each(function () {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function triggerHandler(type, data) {
          var elem = this[0];

          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      }); // Support: Firefox <=44
      // Firefox doesn't have focus(in | out) events
      // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
      //
      // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
      // focus(in | out) events fire after focus & blur events,
      // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
      // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

      if (!support.focusin) {
        jQuery.each({
          focus: "focusin",
          blur: "focusout"
        }, function (orig, fix) {
          // Attach a single capturing handler on the document while someone wants focusin/focusout
          var handler = function handler(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
          };

          jQuery.event.special[fix] = {
            setup: function setup() {
              // Handle: regular nodes (via `this.ownerDocument`), window
              // (via `this.document`) & document (via `this`).
              var doc = this.ownerDocument || this.document || this,
                  attaches = dataPriv.access(doc, fix);

              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }

              dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function teardown() {
              var doc = this.ownerDocument || this.document || this,
                  attaches = dataPriv.access(doc, fix) - 1;

              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix);
              } else {
                dataPriv.access(doc, fix, attaches);
              }
            }
          };
        });
      }

      var location = window.location;
      var nonce = {
        guid: Date.now()
      };
      var rquery = /\?/; // Cross-browser xml parsing

      jQuery.parseXML = function (data) {
        var xml;

        if (!data || typeof data !== "string") {
          return null;
        } // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.


        try {
          xml = new window.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
          xml = undefined;
        }

        if (!xml || xml.getElementsByTagName("parsererror").length) {
          jQuery.error("Invalid XML: " + data);
        }

        return xml;
      };

      var rbracket = /\[\]$/,
          rCRLF = /\r?\n/g,
          rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
          rsubmittable = /^(?:input|select|textarea|keygen)/i;

      function buildParams(prefix, obj, traditional, add) {
        var name;

        if (Array.isArray(obj)) {
          // Serialize array item.
          jQuery.each(obj, function (i, v) {
            if (traditional || rbracket.test(prefix)) {
              // Treat each array item as a scalar.
              add(prefix, v);
            } else {
              // Item is non-scalar (array or object), encode its numeric index.
              buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
            }
          });
        } else if (!traditional && toType(obj) === "object") {
          // Serialize object item.
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }
        } else {
          // Serialize scalar item.
          add(prefix, obj);
        }
      } // Serialize an array of form elements or a set of
      // key/values into a query string


      jQuery.param = function (a, traditional) {
        var prefix,
            s = [],
            add = function add(key, valueOrFunction) {
          // If value is a function, invoke it and use its return value
          var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };

        if (a == null) {
          return "";
        } // If an array was passed in, assume that it is an array of form elements.


        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          // Serialize the form elements
          jQuery.each(a, function () {
            add(this.name, this.value);
          });
        } else {
          // If traditional, encode the "old" way (the way 1.3.2 or older
          // did it), otherwise encode params recursively.
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        } // Return the resulting serialization


        return s.join("&");
      };

      jQuery.fn.extend({
        serialize: function serialize() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function serializeArray() {
          return this.map(function () {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function () {
            var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

            return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function (_i, elem) {
            var val = jQuery(this).val();

            if (val == null) {
              return null;
            }

            if (Array.isArray(val)) {
              return jQuery.map(val, function (val) {
                return {
                  name: elem.name,
                  value: val.replace(rCRLF, "\r\n")
                };
              });
            }

            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          }).get();
        }
      });
      var r20 = /%20/g,
          rhash = /#.*$/,
          rantiCache = /([?&])_=[^&]*/,
          rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
          // #7653, #8125, #8152: local protocol detection
      rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
          rnoContent = /^(?:GET|HEAD)$/,
          rprotocol = /^\/\//,

      /* Prefilters
       * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
       * 2) These are called:
       *    - BEFORE asking for a transport
       *    - AFTER param serialization (s.data is a string if s.processData is true)
       * 3) key is the dataType
       * 4) the catchall symbol "*" can be used
       * 5) execution will start with transport dataType and THEN continue down to "*" if needed
       */
      prefilters = {},

      /* Transports bindings
       * 1) key is the dataType
       * 2) the catchall symbol "*" can be used
       * 3) selection will start with transport dataType and THEN go to "*" if needed
       */
      transports = {},
          // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
      allTypes = "*/".concat("*"),
          // Anchor tag for parsing the document origin
      originAnchor = document.createElement("a");
      originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

      function addToPrefiltersOrTransports(structure) {
        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }

          var dataType,
              i = 0,
              dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

          if (isFunction(func)) {
            // For each dataType in the dataTypeExpression
            while (dataType = dataTypes[i++]) {
              // Prepend if requested
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      } // Base inspection function for prefilters and transports


      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {},
            seekingTransport = structure === transports;

        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      } // A special extend for ajax options
      // that takes "flat" options (not to be deep extended)
      // Fixes #9887


      function ajaxExtend(target, src) {
        var key,
            deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }

        if (deep) {
          jQuery.extend(true, target, deep);
        }

        return target;
      }
      /* Handles responses to an ajax request:
       * - finds the right dataType (mediates between content-type and expected dataType)
       * - returns the corresponding response
       */


      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct,
            type,
            finalDataType,
            firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

        while (dataTypes[0] === "*") {
          dataTypes.shift();

          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        } // Check if we're dealing with a known content-type


        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        } // Check to see if we have a response for the expected dataType


        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          // Try convertible dataTypes
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }

            if (!firstDataType) {
              firstDataType = type;
            }
          } // Or just use first one


          finalDataType = finalDataType || firstDataType;
        } // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response


        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }

          return responses[finalDataType];
        }
      }
      /* Chain conversions given the request and the original response
       * Also sets the responseXXX fields on the jqXHR instance
       */


      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2,
            current,
            conv,
            tmp,
            prev,
            converters = {},
            // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }

        current = dataTypes.shift(); // Convert to each sequential dataType

        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          } // Apply the dataFilter if provided


          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }

          prev = current;
          current = dataTypes.shift();

          if (current) {
            // There's only work to do if current dataType is non-auto
            if (current === "*") {
              current = prev; // Convert response if prev dataType is non-auto and differs from current
            } else if (prev !== "*" && prev !== current) {
              // Seek a direct converter
              conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

              if (!conv) {
                for (conv2 in converters) {
                  // If conv2 outputs current
                  tmp = conv2.split(" ");

                  if (tmp[1] === current) {
                    // If prev can be converted to accepted input
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                    if (conv) {
                      // Condense equivalence converters
                      if (conv === true) {
                        conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }

                      break;
                    }
                  }
                }
              } // Apply converter (if not an equivalence)


              if (conv !== true) {
                // Unless errors are allowed to bubble, catch and return them
                if (conv && s.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }

        return {
          state: "success",
          data: response
        };
      }

      jQuery.extend({
        // Counter for holding the number of active queries
        active: 0,
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",

          /*
          timeout: 0,
          data: null,
          dataType: null,
          username: null,
          password: null,
          cache: null,
          throws: false,
          traditional: false,
          headers: {},
          */
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          // Data converters
          // Keys separate source (or catchall "*") and destination types with a single space
          converters: {
            // Convert anything to text
            "* text": String,
            // Text to html (true = no transformation)
            "text html": true,
            // Evaluate text as a json expression
            "text json": JSON.parse,
            // Parse text as xml
            "text xml": jQuery.parseXML
          },
          // For options that shouldn't be deep extended:
          // you can add your own custom options here if
          // and when you create one that shouldn't be
          // deep extended (see ajaxExtend)
          flatOptions: {
            url: true,
            context: true
          }
        },
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function ajaxSetup(target, settings) {
          return settings ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        // Main method
        ajax: function ajax(url, options) {
          // If url is an object, simulate pre-1.5 signature
          if (_typeof(url) === "object") {
            options = url;
            url = undefined;
          } // Force options to be an object


          options = options || {};

          var transport,
              // URL without anti-cache param
          cacheURL,
              // Response headers
          responseHeadersString,
              responseHeaders,
              // timeout handle
          timeoutTimer,
              // Url cleanup var
          urlAnchor,
              // Request state (becomes false upon send and true upon completion)
          completed,
              // To know if global events are to be dispatched
          fireGlobals,
              // Loop variable
          i,
              // uncached part of the url
          uncached,
              // Create the final options object
          s = jQuery.ajaxSetup({}, options),
              // Callbacks context
          callbackContext = s.context || s,
              // Context for global events is callbackContext if it is a DOM node or jQuery collection
          globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
              // Deferreds
          deferred = jQuery.Deferred(),
              completeDeferred = jQuery.Callbacks("once memory"),
              // Status-dependent callbacks
          _statusCode = s.statusCode || {},
              // Headers (they are sent all at once)
          requestHeaders = {},
              requestHeadersNames = {},
              // Default abort message
          strAbort = "canceled",
              // Fake xhr
          jqXHR = {
            readyState: 0,
            // Builds headers hashtable if needed
            getResponseHeader: function getResponseHeader(key) {
              var match;

              if (completed) {
                if (!responseHeaders) {
                  responseHeaders = {};

                  while (match = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                  }
                }

                match = responseHeaders[key.toLowerCase() + " "];
              }

              return match == null ? null : match.join(", ");
            },
            // Raw string
            getAllResponseHeaders: function getAllResponseHeaders() {
              return completed ? responseHeadersString : null;
            },
            // Caches the header
            setRequestHeader: function setRequestHeader(name, value) {
              if (completed == null) {
                name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                requestHeaders[name] = value;
              }

              return this;
            },
            // Overrides response content-type header
            overrideMimeType: function overrideMimeType(type) {
              if (completed == null) {
                s.mimeType = type;
              }

              return this;
            },
            // Status-dependent callbacks
            statusCode: function statusCode(map) {
              var code;

              if (map) {
                if (completed) {
                  // Execute the appropriate callbacks
                  jqXHR.always(map[jqXHR.status]);
                } else {
                  // Lazy-add the new callbacks in a way that preserves old ones
                  for (code in map) {
                    _statusCode[code] = [_statusCode[code], map[code]];
                  }
                }
              }

              return this;
            },
            // Cancel the request
            abort: function abort(statusText) {
              var finalText = statusText || strAbort;

              if (transport) {
                transport.abort(finalText);
              }

              done(0, finalText);
              return this;
            }
          }; // Attach deferreds


          deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
          // Handle falsy url in the settings object (#10093: consistency with old signature)
          // We also use the url parameter if available

          s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

          s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

          s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

          if (s.crossDomain == null) {
            urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
            // IE throws exception on accessing the href property if url is malformed,
            // e.g. http://example.com:80x/

            try {
              urlAnchor.href = s.url; // Support: IE <=8 - 11 only
              // Anchor's host property isn't correctly set when s.url is relative

              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e) {
              // If there is an error parsing the URL, assume it is crossDomain,
              // it can be rejected by the transport if it is invalid
              s.crossDomain = true;
            }
          } // Convert data if not already a string


          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery.param(s.data, s.traditional);
          } // Apply prefilters


          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

          if (completed) {
            return jqXHR;
          } // We can fire global events as of now if asked to
          // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


          fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger("ajaxStart");
          } // Uppercase the type


          s.type = s.type.toUpperCase(); // Determine if request has content

          s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
          // and/or If-None-Match header later on
          // Remove hash to simplify url manipulation

          cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

          if (!s.hasContent) {
            // Remember the hash so we can put it back
            uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

            if (s.data && (s.processData || typeof s.data === "string")) {
              cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

              delete s.data;
            } // Add or update anti-cache param if needed


            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, "$1");
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
            } // Put hash and anti-cache on the URL that will be requested (gh-1732)


            s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
          } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
            s.data = s.data.replace(r20, "+");
          } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }

            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          } // Set the correct header, if data is being sent


          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          } // Set the Accepts header for the server, depending on the dataType


          jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          } // Allow custom headers/mimetypes and early abort


          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
            // Abort if not done already and return
            return jqXHR.abort();
          } // Aborting is no longer a cancellation


          strAbort = "abort"; // Install callbacks on deferreds

          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error); // Get transport

          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1; // Send global event

            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            } // If request was aborted inside ajaxSend, stop there


            if (completed) {
              return jqXHR;
            } // Timeout


            if (s.async && s.timeout > 0) {
              timeoutTimer = window.setTimeout(function () {
                jqXHR.abort("timeout");
              }, s.timeout);
            }

            try {
              completed = false;
              transport.send(requestHeaders, done);
            } catch (e) {
              // Rethrow post-completion exceptions
              if (completed) {
                throw e;
              } // Propagate others as results


              done(-1, e);
            }
          } // Callback for when everything is done


          function done(status, nativeStatusText, responses, headers) {
            var isSuccess,
                success,
                error,
                response,
                modified,
                statusText = nativeStatusText; // Ignore repeat invocations

            if (completed) {
              return;
            }

            completed = true; // Clear timeout if it exists

            if (timeoutTimer) {
              window.clearTimeout(timeoutTimer);
            } // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)


            transport = undefined; // Cache response headers

            responseHeadersString = headers || ""; // Set readyState

            jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

            isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            } // Use a noop converter for missing script


            if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1) {
              s.converters["text script"] = function () {};
            } // Convert no matter what (that way responseXXX fields are always set)


            response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

            if (isSuccess) {
              // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");

                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }

                modified = jqXHR.getResponseHeader("etag");

                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              } // if no content


              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent"; // if not modified
              } else if (status === 304) {
                statusText = "notmodified"; // If we have data, let's convert it
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              // Extract error from statusText and normalize for non-aborts
              error = statusText;

              if (status || !statusText) {
                statusText = "error";

                if (status < 0) {
                  status = 0;
                }
              }
            } // Set data for the fake xhr object


            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            } // Status-dependent callbacks


            jqXHR.statusCode(_statusCode);
            _statusCode = undefined;

            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
            } // Complete


            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

              if (! --jQuery.active) {
                jQuery.event.trigger("ajaxStop");
              }
            }
          }

          return jqXHR;
        },
        getJSON: function getJSON(url, data, callback) {
          return jQuery.get(url, data, callback, "json");
        },
        getScript: function getScript(url, callback) {
          return jQuery.get(url, undefined, callback, "script");
        }
      });
      jQuery.each(["get", "post"], function (_i, method) {
        jQuery[method] = function (url, data, callback, type) {
          // Shift arguments if data argument was omitted
          if (isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined;
          } // The url can be an options object (which then must have .url)


          return jQuery.ajax(jQuery.extend({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          }, jQuery.isPlainObject(url) && url));
        };
      });
      jQuery.ajaxPrefilter(function (s) {
        var i;

        for (i in s.headers) {
          if (i.toLowerCase() === "content-type") {
            s.contentType = s.headers[i] || "";
          }
        }
      });

      jQuery._evalUrl = function (url, options, doc) {
        return jQuery.ajax({
          url: url,
          // Make this explicit, since user can override this through ajaxSetup (#11264)
          type: "GET",
          dataType: "script",
          cache: true,
          async: false,
          global: false,
          // Only evaluate the response if it is successful (gh-4126)
          // dataFilter is not invoked for failure responses, so using it instead
          // of the default converter is kludgy but it works.
          converters: {
            "text script": function textScript() {}
          },
          dataFilter: function dataFilter(response) {
            jQuery.globalEval(response, options, doc);
          }
        });
      };

      jQuery.fn.extend({
        wrapAll: function wrapAll(html) {
          var wrap;

          if (this[0]) {
            if (isFunction(html)) {
              html = html.call(this[0]);
            } // The elements to wrap the target around


            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }

            wrap.map(function () {
              var elem = this;

              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }

              return elem;
            }).append(this);
          }

          return this;
        },
        wrapInner: function wrapInner(html) {
          if (isFunction(html)) {
            return this.each(function (i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }

          return this.each(function () {
            var self = jQuery(this),
                contents = self.contents();

            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function wrap(html) {
          var htmlIsFunction = isFunction(html);
          return this.each(function (i) {
            jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function unwrap(selector) {
          this.parent(selector).not("body").each(function () {
            jQuery(this).replaceWith(this.childNodes);
          });
          return this;
        }
      });

      jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem);
      };

      jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };

      jQuery.ajaxSettings.xhr = function () {
        try {
          return new window.XMLHttpRequest();
        } catch (e) {}
      };

      var xhrSuccessStatus = {
        // File protocol always yields status code 0, assume 200
        0: 200,
        // Support: IE <=9 only
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
      },
          xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function (options) {
        var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function send(headers, complete) {
              var i,
                  xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              } // Override mime type if needed


              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              } // X-Requested-With header
              // For cross-domain requests, seeing as conditions for a preflight are
              // akin to a jigsaw puzzle, we simply never set it to be sure.
              // (it can always be set on a per-request basis or even using ajaxSetup)
              // For same-domain requests, won't change header if already provided.


              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              } // Set headers


              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              } // Callback


              _callback = function callback(type) {
                return function () {
                  if (_callback) {
                    _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      // Support: IE <=9 only
                      // On a manual native abort, IE9 throws
                      // errors on any property access that is not readyState
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete( // File: protocol always yields status 0; see #8605, #14207
                        xhr.status, xhr.statusText);
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                      // IE9 has no XHR2 but throws on binary (trac-11426)
                      // For XHR2 non-text, let the caller handle it (gh-2498)
                      (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                        binary: xhr.response
                      } : {
                        text: xhr.responseText
                      }, xhr.getAllResponseHeaders());
                    }
                  }
                };
              }; // Listen to events


              xhr.onload = _callback();
              errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only
              // Use onreadystatechange to replace onabort
              // to handle uncaught aborts

              if (xhr.onabort !== undefined) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function () {
                  // Check readyState before timeout as it changes
                  if (xhr.readyState === 4) {
                    // Allow onerror to be called first,
                    // but that will not handle a native abort
                    // Also, save errorCallback to a variable
                    // as xhr.onerror cannot be accessed
                    window.setTimeout(function () {
                      if (_callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              } // Create the abort callback


              _callback = _callback("abort");

              try {
                // Do send the request (this may raise an exception)
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                // #14683: Only rethrow if this hasn't been notified as an error yet
                if (_callback) {
                  throw e;
                }
              }
            },
            abort: function abort() {
              if (_callback) {
                _callback();
              }
            }
          };
        }
      }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

      jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
          s.contents.script = false;
        }
      }); // Install script dataType

      jQuery.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function textScript(text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      }); // Handle cache's special case and crossDomain

      jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
          s.cache = false;
        }

        if (s.crossDomain) {
          s.type = "GET";
        }
      }); // Bind script tag hack transport

      jQuery.ajaxTransport("script", function (s) {
        // This transport only deals with cross domain or forced-by-attrs requests
        if (s.crossDomain || s.scriptAttrs) {
          var script, _callback2;

          return {
            send: function send(_, complete) {
              script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
                charset: s.scriptCharset,
                src: s.url
              }).on("load error", _callback2 = function callback(evt) {
                script.remove();
                _callback2 = null;

                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              }); // Use native DOM manipulation to avoid our domManip AJAX trickery

              document.head.appendChild(script[0]);
            },
            abort: function abort() {
              if (_callback2) {
                _callback2();
              }
            }
          };
        }
      });
      var oldCallbacks = [],
          rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

      jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function jsonpCallback() {
          var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
          this[callback] = true;
          return callback;
        }
      }); // Detect, normalize options and install callbacks for jsonp requests

      jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName,
            overwritten,
            responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

        if (jsonProp || s.dataTypes[0] === "jsonp") {
          // Get callback name, remembering preexisting value associated with it
          callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          } // Use data converter to retrieve json after script execution


          s.converters["script json"] = function () {
            if (!responseContainer) {
              jQuery.error(callbackName + " was not called");
            }

            return responseContainer[0];
          }; // Force json dataType


          s.dataTypes[0] = "json"; // Install callback

          overwritten = window[callbackName];

          window[callbackName] = function () {
            responseContainer = arguments;
          }; // Clean-up function (fires after converters)


          jqXHR.always(function () {
            // If previous value didn't exist - remove it
            if (overwritten === undefined) {
              jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
            } else {
              window[callbackName] = overwritten;
            } // Save back as free


            if (s[callbackName]) {
              // Make sure that re-using the options doesn't screw things around
              s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

              oldCallbacks.push(callbackName);
            } // Call if it was a function and we have a response


            if (responseContainer && isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }

            responseContainer = overwritten = undefined;
          }); // Delegate to script

          return "script";
        }
      }); // Support: Safari 8 only
      // In Safari 8 documents created via document.implementation.createHTMLDocument
      // collapse sibling forms: the second one becomes a child of the first one.
      // Because of that, this security measure has to be disabled in Safari 8.
      // https://bugs.webkit.org/show_bug.cgi?id=137337

      support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
      }(); // Argument "data" should be string of html
      // context (optional): If specified, the fragment will be created in this context,
      // defaults to document
      // keepScripts (optional): If true, will include scripts passed in the html string


      jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== "string") {
          return [];
        }

        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }

        var base, parsed, scripts;

        if (!context) {
          // Stop scripts or inline event handlers from being executed immediately
          // by using document.implementation
          if (support.createHTMLDocument) {
            context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
            // so any parsed elements with URLs
            // are based on the document's URL (gh-2965)

            base = context.createElement("base");
            base.href = document.location.href;
            context.head.appendChild(base);
          } else {
            context = document;
          }
        }

        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && []; // Single tag

        if (parsed) {
          return [context.createElement(parsed[1])];
        }

        parsed = buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
      };
      /**
       * Load a url into a page
       */


      jQuery.fn.load = function (url, params, callback) {
        var selector,
            type,
            response,
            self = this,
            off = url.indexOf(" ");

        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off);
        } // If it's a function


        if (isFunction(params)) {
          // We assume that it's the callback
          callback = params;
          params = undefined; // Otherwise, build a param string
        } else if (params && _typeof(params) === "object") {
          type = "POST";
        } // If we have elements to modify, make the request


        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            // If "type" variable is undefined, then "GET" method will be used.
            // Make value of this field explicit since
            // user can override it through ajaxSetup method
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function (responseText) {
            // Save response for use in complete callback
            response = arguments;
            self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
            // Exclude scripts to avoid IE 'Permission Denied' errors
            jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
            responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
            // but they are ignored because response was set above.
            // If it fails, this function gets "jqXHR", "status", "error"
          }).always(callback && function (jqXHR, status) {
            self.each(function () {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }

        return this;
      };

      jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
          return elem === fn.elem;
        }).length;
      };

      jQuery.offset = {
        setOffset: function setOffset(elem, options, i) {
          var curPosition,
              curLeft,
              curCSSTop,
              curTop,
              curOffset,
              curCSSLeft,
              calculatePosition,
              position = jQuery.css(elem, "position"),
              curElem = jQuery(elem),
              props = {}; // Set position first, in-case top/left are set even on static elem

          if (position === "static") {
            elem.style.position = "relative";
          }

          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, "top");
          curCSSLeft = jQuery.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
          // top or left is auto and position is either absolute or fixed

          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }

          if (isFunction(options)) {
            // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
            options = options.call(elem, i, jQuery.extend({}, curOffset));
          }

          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }

          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }

          if ("using" in options) {
            options.using.call(elem, props);
          } else {
            if (typeof props.top === "number") {
              props.top += "px";
            }

            if (typeof props.left === "number") {
              props.left += "px";
            }

            curElem.css(props);
          }
        }
      };
      jQuery.fn.extend({
        // offset() relates an element's border box to the document origin
        offset: function offset(options) {
          // Preserve chaining for setter
          if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i);
            });
          }

          var rect,
              win,
              elem = this[0];

          if (!elem) {
            return;
          } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
          // Support: IE <=11 only
          // Running getBoundingClientRect on a
          // disconnected node in IE throws an error


          if (!elem.getClientRects().length) {
            return {
              top: 0,
              left: 0
            };
          } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


          rect = elem.getBoundingClientRect();
          win = elem.ownerDocument.defaultView;
          return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
          };
        },
        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function position() {
          if (!this[0]) {
            return;
          }

          var offsetParent,
              offset,
              doc,
              elem = this[0],
              parentOffset = {
            top: 0,
            left: 0
          }; // position:fixed elements are offset from the viewport, which itself always has zero offset

          if (jQuery.css(elem, "position") === "fixed") {
            // Assume position:fixed implies availability of getBoundingClientRect
            offset = elem.getBoundingClientRect();
          } else {
            offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
            // when a statically positioned element is identified

            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;

            while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.parentNode;
            }

            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
              // Incorporate borders into its offset, since they are outside its content origin
              parentOffset = jQuery(offsetParent).offset();
              parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
              parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
            }
          } // Subtract parent offsets and element margins


          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
          };
        },
        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function offsetParent() {
          return this.map(function () {
            var offsetParent = this.offsetParent;

            while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }

            return offsetParent || documentElement;
          });
        }
      }); // Create scrollLeft and scrollTop methods

      jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
      }, function (method, prop) {
        var top = "pageYOffset" === prop;

        jQuery.fn[method] = function (val) {
          return access(this, function (elem, method, val) {
            // Coalesce documents and windows
            var win;

            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }

            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }

            if (win) {
              win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
            } else {
              elem[method] = val;
            }
          }, method, val, arguments.length);
        };
      }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
      // Add the top/left cssHooks using jQuery.fn.position
      // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
      // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
      // getComputedStyle returns percent when specified for top/left/bottom/right;
      // rather than make the css module depend on the offset module, just check for it here

      jQuery.each(["top", "left"], function (_i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
          }
        });
      }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

      jQuery.each({
        Height: "height",
        Width: "width"
      }, function (name, type) {
        jQuery.each({
          padding: "inner" + name,
          content: type,
          "": "outer" + name
        }, function (defaultExtra, funcName) {
          // Margin is only for outerHeight, outerWidth
          jQuery.fn[funcName] = function (margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function (elem, type, value) {
              var doc;

              if (isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
              } // Get document width or height


              if (elem.nodeType === 9) {
                doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest

                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
              }

              return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
              jQuery.css(elem, type, extra) : // Set width or height on the element
              jQuery.style(elem, type, value, extra);
            }, type, chainable ? margin : undefined, chainable);
          };
        });
      });
      jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
        jQuery.fn[type] = function (fn) {
          return this.on(type, fn);
        };
      });
      jQuery.fn.extend({
        bind: function bind(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function unbind(types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function delegate(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function undelegate(selector, types, fn) {
          // ( namespace ) or ( selector, types [, fn] )
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function hover(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
        // Handle event binding
        jQuery.fn[name] = function (data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      }); // Support: Android <=4.0 only
      // Make sure we trim BOM and NBSP

      var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g; // Bind a function to a context, optionally partially applying any
      // arguments.
      // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
      // However, it is not slated for removal any time soon

      jQuery.proxy = function (fn, context) {
        var tmp, args, proxy;

        if (typeof context === "string") {
          tmp = fn[context];
          context = fn;
          fn = tmp;
        } // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.


        if (!isFunction(fn)) {
          return undefined;
        } // Simulated bind


        args = _slice.call(arguments, 2);

        proxy = function proxy() {
          return fn.apply(context || this, args.concat(_slice.call(arguments)));
        }; // Set the guid of unique handler to the same of original handler, so it can be removed


        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
      };

      jQuery.holdReady = function (hold) {
        if (hold) {
          jQuery.readyWait++;
        } else {
          jQuery.ready(true);
        }
      };

      jQuery.isArray = Array.isArray;
      jQuery.parseJSON = JSON.parse;
      jQuery.nodeName = nodeName;
      jQuery.isFunction = isFunction;
      jQuery.isWindow = isWindow;
      jQuery.camelCase = camelCase;
      jQuery.type = toType;
      jQuery.now = Date.now;

      jQuery.isNumeric = function (obj) {
        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        !isNaN(obj - parseFloat(obj));
      };

      jQuery.trim = function (text) {
        return text == null ? "" : (text + "").replace(rtrim, "");
      }; // Register as a named AMD module, since jQuery can be concatenated with other

      var // Map over jQuery in case of overwrite
      _jQuery = window.jQuery,
          // Map over the $ in case of overwrite
      _$ = window.$;

      jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
          window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery;
        }

        return jQuery;
      }; // Expose jQuery and $ identifiers, even in AMD
      // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
      // and CommonJS for browser emulators (#13566)


      if (typeof noGlobal === "undefined") {
        window.jQuery = window.$ = jQuery;
      }

      return jQuery;
    });
  });

  function __rest(s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }

  /*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017 Joachim Wester
   * MIT license
   */
  var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    return function (d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwnProperty(obj, key) {
    return _hasOwnProperty.call(obj, key);
  }
  function _objectKeys(obj) {
    if (Array.isArray(obj)) {
      var keys = new Array(obj.length);

      for (var k = 0; k < keys.length; k++) {
        keys[k] = "" + k;
      }

      return keys;
    }

    if (Object.keys) {
      return Object.keys(obj);
    }

    var keys = [];

    for (var i in obj) {
      if (hasOwnProperty(obj, i)) {
        keys.push(i);
      }
    }

    return keys;
  }
  /**
  * Deeply clone the object.
  * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)
  * @param  {any} obj value to clone
  * @return {any} cloned obj
  */

  function _deepClone(obj) {
    switch (_typeof(obj)) {
      case "object":
        return JSON.parse(JSON.stringify(obj));
      //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5

      case "undefined":
        return null;
      //this is how JSON.stringify behaves for array items

      default:
        return obj;
      //no need to clone primitives
    }
  } //3x faster than cached /^\d+$/.test(str)

  function isInteger(str) {
    var i = 0;
    var len = str.length;
    var charCode;

    while (i < len) {
      charCode = str.charCodeAt(i);

      if (charCode >= 48 && charCode <= 57) {
        i++;
        continue;
      }

      return false;
    }

    return true;
  }
  /**
  * Escapes a json pointer path
  * @param path The raw pointer
  * @return the Escaped path
  */

  function escapePathComponent(path) {
    if (path.indexOf('/') === -1 && path.indexOf('~') === -1) return path;
    return path.replace(/~/g, '~0').replace(/\//g, '~1');
  }
  /**
   * Unescapes a json pointer path
   * @param path The escaped pointer
   * @return The unescaped path
   */

  function unescapePathComponent(path) {
    return path.replace(/~1/g, '/').replace(/~0/g, '~');
  }
  /**
  * Recursively checks whether an object has any undefined values inside.
  */

  function hasUndefined(obj) {
    if (obj === undefined) {
      return true;
    }

    if (obj) {
      if (Array.isArray(obj)) {
        for (var i = 0, len = obj.length; i < len; i++) {
          if (hasUndefined(obj[i])) {
            return true;
          }
        }
      } else if (_typeof(obj) === "object") {
        var objKeys = _objectKeys(obj);

        var objKeysLength = objKeys.length;

        for (var i = 0; i < objKeysLength; i++) {
          if (hasUndefined(obj[objKeys[i]])) {
            return true;
          }
        }
      }
    }

    return false;
  }

  function patchErrorMessageFormatter(message, args) {
    var messageParts = [message];

    for (var key in args) {
      var value = _typeof(args[key]) === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print

      if (typeof value !== 'undefined') {
        messageParts.push(key + ": " + value);
      }
    }

    return messageParts.join('\n');
  }

  var PatchError =
  /** @class */
  function (_super) {
    __extends(PatchError, _super);

    function PatchError(message, name, index, operation, tree) {
      var _newTarget = this.constructor;

      var _this = _super.call(this, patchErrorMessageFormatter(message, {
        name: name,
        index: index,
        operation: operation,
        tree: tree
      })) || this;

      _this.name = name;
      _this.index = index;
      _this.operation = operation;
      _this.tree = tree;
      Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359

      _this.message = patchErrorMessageFormatter(message, {
        name: name,
        index: index,
        operation: operation,
        tree: tree
      });
      return _this;
    }

    return PatchError;
  }(Error);

  var JsonPatchError = PatchError;
  var deepClone = _deepClone;
  /* We use a Javascript hash to store each
   function. Each hash entry (property) uses
   the operation identifiers specified in rfc6902.
   In this way, we can map each patch operation
   to its dedicated function in efficient way.
   */

  /* The operations applicable to an object */

  var objOps = {
    add: function add(obj, key, document) {
      obj[key] = this.value;
      return {
        newDocument: document
      };
    },
    remove: function remove(obj, key, document) {
      var removed = obj[key];
      delete obj[key];
      return {
        newDocument: document,
        removed: removed
      };
    },
    replace: function replace(obj, key, document) {
      var removed = obj[key];
      obj[key] = this.value;
      return {
        newDocument: document,
        removed: removed
      };
    },
    move: function move(obj, key, document) {
      /* in case move target overwrites an existing value,
      return the removed value, this can be taxing performance-wise,
      and is potentially unneeded */
      var removed = getValueByPointer(document, this.path);

      if (removed) {
        removed = _deepClone(removed);
      }

      var originalValue = applyOperation(document, {
        op: "remove",
        path: this.from
      }).removed;
      applyOperation(document, {
        op: "add",
        path: this.path,
        value: originalValue
      });
      return {
        newDocument: document,
        removed: removed
      };
    },
    copy: function copy(obj, key, document) {
      var valueToCopy = getValueByPointer(document, this.from); // enforce copy by value so further operations don't affect source (see issue #177)

      applyOperation(document, {
        op: "add",
        path: this.path,
        value: _deepClone(valueToCopy)
      });
      return {
        newDocument: document
      };
    },
    test: function test(obj, key, document) {
      return {
        newDocument: document,
        test: _areEquals(obj[key], this.value)
      };
    },
    _get: function _get(obj, key, document) {
      this.value = obj[key];
      return {
        newDocument: document
      };
    }
  };
  /* The operations applicable to an array. Many are the same as for the object */

  var arrOps = {
    add: function add(arr, i, document) {
      if (isInteger(i)) {
        arr.splice(i, 0, this.value);
      } else {
        // array props
        arr[i] = this.value;
      } // this may be needed when using '-' in an array


      return {
        newDocument: document,
        index: i
      };
    },
    remove: function remove(arr, i, document) {
      var removedList = arr.splice(i, 1);
      return {
        newDocument: document,
        removed: removedList[0]
      };
    },
    replace: function replace(arr, i, document) {
      var removed = arr[i];
      arr[i] = this.value;
      return {
        newDocument: document,
        removed: removed
      };
    },
    move: objOps.move,
    copy: objOps.copy,
    test: objOps.test,
    _get: objOps._get
  };
  /**
   * Retrieves a value from a JSON document by a JSON pointer.
   * Returns the value.
   *
   * @param document The document to get the value from
   * @param pointer an escaped JSON pointer
   * @return The retrieved value
   */

  function getValueByPointer(document, pointer) {
    if (pointer == '') {
      return document;
    }

    var getOriginalDestination = {
      op: "_get",
      path: pointer
    };
    applyOperation(document, getOriginalDestination);
    return getOriginalDestination.value;
  }
  /**
   * Apply a single JSON Patch Operation on a JSON document.
   * Returns the {newDocument, result} of the operation.
   * It modifies the `document` and `operation` objects - it gets the values by reference.
   * If you would like to avoid touching your values, clone them:
   * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.
   *
   * @param document The document to patch
   * @param operation The operation to apply
   * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
   * @param mutateDocument Whether to mutate the original document or clone it before applying
   * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
   * @return `{newDocument, result}` after the operation
   */

  function applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
    if (validateOperation === void 0) {
      validateOperation = false;
    }

    if (mutateDocument === void 0) {
      mutateDocument = true;
    }

    if (banPrototypeModifications === void 0) {
      banPrototypeModifications = true;
    }

    if (index === void 0) {
      index = 0;
    }

    if (validateOperation) {
      if (typeof validateOperation == 'function') {
        validateOperation(operation, 0, document, operation.path);
      } else {
        validator(operation, 0);
      }
    }
    /* ROOT OPERATIONS */


    if (operation.path === "") {
      var returnValue = {
        newDocument: document
      };

      if (operation.op === 'add') {
        returnValue.newDocument = operation.value;
        return returnValue;
      } else if (operation.op === 'replace') {
        returnValue.newDocument = operation.value;
        returnValue.removed = document; //document we removed

        return returnValue;
      } else if (operation.op === 'move' || operation.op === 'copy') {
        // it's a move or copy to root
        returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field

        if (operation.op === 'move') {
          // report removed item
          returnValue.removed = document;
        }

        return returnValue;
      } else if (operation.op === 'test') {
        returnValue.test = _areEquals(document, operation.value);

        if (returnValue.test === false) {
          throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
        }

        returnValue.newDocument = document;
        return returnValue;
      } else if (operation.op === 'remove') {
        // a remove on root
        returnValue.removed = document;
        returnValue.newDocument = null;
        return returnValue;
      } else if (operation.op === '_get') {
        operation.value = document;
        return returnValue;
      } else {
        /* bad operation */
        if (validateOperation) {
          throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
        } else {
          return returnValue;
        }
      }
    }
    /* END ROOT OPERATIONS */
    else {
        if (!mutateDocument) {
          document = _deepClone(document);
        }

        var path = operation.path || "";
        var keys = path.split('/');
        var obj = document;
        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift

        var len = keys.length;
        var existingPathFragment = undefined;
        var key = void 0;
        var validateFunction = void 0;

        if (typeof validateOperation == 'function') {
          validateFunction = validateOperation;
        } else {
          validateFunction = validator;
        }

        while (true) {
          key = keys[t];

          if (banPrototypeModifications && key == '__proto__') {
            throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');
          }

          if (validateOperation) {
            if (existingPathFragment === undefined) {
              if (obj[key] === undefined) {
                existingPathFragment = keys.slice(0, t).join('/');
              } else if (t == len - 1) {
                existingPathFragment = operation.path;
              }

              if (existingPathFragment !== undefined) {
                validateFunction(operation, 0, document, existingPathFragment);
              }
            }
          }

          t++;

          if (Array.isArray(obj)) {
            if (key === '-') {
              key = obj.length;
            } else {
              if (validateOperation && !isInteger(key)) {
                throw new JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document);
              } // only parse key when it's an integer for `arr.prop` to work
              else if (isInteger(key)) {
                  key = ~~key;
                }
            }

            if (t >= len) {
              if (validateOperation && operation.op === "add" && key > obj.length) {
                throw new JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document);
              }

              var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch

              if (returnValue.test === false) {
                throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
              }

              return returnValue;
            }
          } else {
            if (key && key.indexOf('~') != -1) {
              key = unescapePathComponent(key);
            }

            if (t >= len) {
              var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch

              if (returnValue.test === false) {
                throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
              }

              return returnValue;
            }
          }

          obj = obj[key];
        }
      }
  }
  /**
   * Apply a full JSON Patch array on a JSON document.
   * Returns the {newDocument, result} of the patch.
   * It modifies the `document` object and `patch` - it gets the values by reference.
   * If you would like to avoid touching your values, clone them:
   * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.
   *
   * @param document The document to patch
   * @param patch The patch to apply
   * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
   * @param mutateDocument Whether to mutate the original document or clone it before applying
   * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
   * @return An array of `{newDocument, result}` after the patch
   */

  function applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {
    if (mutateDocument === void 0) {
      mutateDocument = true;
    }

    if (banPrototypeModifications === void 0) {
      banPrototypeModifications = true;
    }

    if (validateOperation) {
      if (!Array.isArray(patch)) {
        throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
      }
    }

    if (!mutateDocument) {
      document = _deepClone(document);
    }

    var results = new Array(patch.length);

    for (var i = 0, length_1 = patch.length; i < length_1; i++) {
      // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`
      results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);
      document = results[i].newDocument; // in case root was replaced
    }

    results.newDocument = document;
    return results;
  }
  /**
   * Apply a single JSON Patch Operation on a JSON document.
   * Returns the updated document.
   * Suitable as a reducer.
   *
   * @param document The document to patch
   * @param operation The operation to apply
   * @return The updated document
   */

  function applyReducer(document, operation, index) {
    var operationResult = applyOperation(document, operation);

    if (operationResult.test === false) {
      // failed test
      throw new JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
    }

    return operationResult.newDocument;
  }
  /**
   * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
   * @param {object} operation - operation object (patch)
   * @param {number} index - index of operation in the sequence
   * @param {object} [document] - object where the operation is supposed to be applied
   * @param {string} [existingPathFragment] - comes along with `document`
   */

  function validator(operation, index, document, existingPathFragment) {
    if (_typeof(operation) !== 'object' || operation === null || Array.isArray(operation)) {
      throw new JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);
    } else if (!objOps[operation.op]) {
      throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
    } else if (typeof operation.path !== 'string') {
      throw new JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);
    } else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {
      // paths that aren't empty string should start with "/"
      throw new JsonPatchError('Operation `path` property must start with "/"', 'OPERATION_PATH_INVALID', index, operation, document);
    } else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
      throw new JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);
    } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
      throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);
    } else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && hasUndefined(operation.value)) {
      throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);
    } else if (document) {
      if (operation.op == "add") {
        var pathLen = operation.path.split("/").length;
        var existingPathLen = existingPathFragment.split("/").length;

        if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
          throw new JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);
        }
      } else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
        if (operation.path !== existingPathFragment) {
          throw new JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);
        }
      } else if (operation.op === 'move' || operation.op === 'copy') {
        var existingValue = {
          op: "_get",
          path: operation.from,
          value: undefined
        };
        var error = validate([existingValue], document);

        if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
          throw new JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);
        }
      }
    }
  }
  /**
   * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.
   * If error is encountered, returns a JsonPatchError object
   * @param sequence
   * @param document
   * @returns {JsonPatchError|undefined}
   */

  function validate(sequence, document, externalValidator) {
    try {
      if (!Array.isArray(sequence)) {
        throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
      }

      if (document) {
        //clone document and sequence so that we can safely try applying operations
        applyPatch(_deepClone(document), _deepClone(sequence), externalValidator || true);
      } else {
        externalValidator = externalValidator || validator;

        for (var i = 0; i < sequence.length; i++) {
          externalValidator(sequence[i], i, document, undefined);
        }
      }
    } catch (e) {
      if (e instanceof JsonPatchError) {
        return e;
      } else {
        throw e;
      }
    }
  } // based on https://github.com/epoberezkin/fast-deep-equal
  // MIT License
  // Copyright (c) 2017 Evgeny Poberezkin
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to deal
  // in the Software without restriction, including without limitation the rights
  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  // The above copyright notice and this permission notice shall be included in all
  // copies or substantial portions of the Software.
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  // SOFTWARE.

  function _areEquals(a, b) {
    if (a === b) return true;

    if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {
      var arrA = Array.isArray(a),
          arrB = Array.isArray(b),
          i,
          length,
          key;

      if (arrA && arrB) {
        length = a.length;
        if (length != b.length) return false;

        for (i = length; i-- !== 0;) {
          if (!_areEquals(a[i], b[i])) return false;
        }

        return true;
      }

      if (arrA != arrB) return false;
      var keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;

      for (i = length; i-- !== 0;) {
        if (!b.hasOwnProperty(keys[i])) return false;
      }

      for (i = length; i-- !== 0;) {
        key = keys[i];
        if (!_areEquals(a[key], b[key])) return false;
      }

      return true;
    }

    return a !== a && b !== b;
  }

  var core = /*#__PURE__*/Object.freeze({
    __proto__: null,
    JsonPatchError: JsonPatchError,
    deepClone: deepClone,
    getValueByPointer: getValueByPointer,
    applyOperation: applyOperation,
    applyPatch: applyPatch,
    applyReducer: applyReducer,
    validator: validator,
    validate: validate,
    _areEquals: _areEquals
  });

  var beforeDict = new WeakMap();

  var Mirror =
  /** @class */
  function () {
    function Mirror(obj) {
      this.observers = new Map();
      this.obj = obj;
    }

    return Mirror;
  }();

  var ObserverInfo =
  /** @class */
  function () {
    function ObserverInfo(callback, observer) {
      this.callback = callback;
      this.observer = observer;
    }

    return ObserverInfo;
  }();

  function getMirror(obj) {
    return beforeDict.get(obj);
  }

  function getObserverFromMirror(mirror, callback) {
    return mirror.observers.get(callback);
  }

  function removeObserverFromMirror(mirror, observer) {
    mirror.observers.delete(observer.callback);
  }
  /**
   * Detach an observer from an object
   */


  function unobserve(root, observer) {
    observer.unobserve();
  }
  /**
   * Observes changes made to an object, which can then be retrieved using generate
   */

  function observe(obj, callback) {
    var patches = [];
    var observer;
    var mirror = getMirror(obj);

    if (!mirror) {
      mirror = new Mirror(obj);
      beforeDict.set(obj, mirror);
    } else {
      var observerInfo = getObserverFromMirror(mirror, callback);
      observer = observerInfo && observerInfo.observer;
    }

    if (observer) {
      return observer;
    }

    observer = {};
    mirror.value = _deepClone(obj);

    if (callback) {
      observer.callback = callback;
      observer.next = null;

      var dirtyCheck = function dirtyCheck() {
        generate(observer);
      };

      var fastCheck = function fastCheck() {
        clearTimeout(observer.next);
        observer.next = setTimeout(dirtyCheck);
      };

      if (typeof window !== 'undefined') {
        //not Node
        window.addEventListener('mouseup', fastCheck);
        window.addEventListener('keyup', fastCheck);
        window.addEventListener('mousedown', fastCheck);
        window.addEventListener('keydown', fastCheck);
        window.addEventListener('change', fastCheck);
      }
    }

    observer.patches = patches;
    observer.object = obj;

    observer.unobserve = function () {
      generate(observer);
      clearTimeout(observer.next);
      removeObserverFromMirror(mirror, observer);

      if (typeof window !== 'undefined') {
        window.removeEventListener('mouseup', fastCheck);
        window.removeEventListener('keyup', fastCheck);
        window.removeEventListener('mousedown', fastCheck);
        window.removeEventListener('keydown', fastCheck);
        window.removeEventListener('change', fastCheck);
      }
    };

    mirror.observers.set(callback, new ObserverInfo(callback, observer));
    return observer;
  }
  /**
   * Generate an array of patches from an observer
   */

  function generate(observer, invertible) {
    if (invertible === void 0) {
      invertible = false;
    }

    var mirror = beforeDict.get(observer.object);

    _generate(mirror.value, observer.object, observer.patches, "", invertible);

    if (observer.patches.length) {
      applyPatch(mirror.value, observer.patches);
    }

    var temp = observer.patches;

    if (temp.length > 0) {
      observer.patches = [];

      if (observer.callback) {
        observer.callback(temp);
      }
    }

    return temp;
  } // Dirty check if obj is different from mirror, generate patches and update mirror

  function _generate(mirror, obj, patches, path, invertible) {
    if (obj === mirror) {
      return;
    }

    if (typeof obj.toJSON === "function") {
      obj = obj.toJSON();
    }

    var newKeys = _objectKeys(obj);

    var oldKeys = _objectKeys(mirror);
    var deleted = false; //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"

    for (var t = oldKeys.length - 1; t >= 0; t--) {
      var key = oldKeys[t];
      var oldVal = mirror[key];

      if (hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
        var newVal = obj[key];

        if (_typeof(oldVal) == "object" && oldVal != null && _typeof(newVal) == "object" && newVal != null) {
          _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key), invertible);
        } else {
          if (oldVal !== newVal) {

            if (invertible) {
              patches.push({
                op: "test",
                path: path + "/" + escapePathComponent(key),
                value: _deepClone(oldVal)
              });
            }

            patches.push({
              op: "replace",
              path: path + "/" + escapePathComponent(key),
              value: _deepClone(newVal)
            });
          }
        }
      } else if (Array.isArray(mirror) === Array.isArray(obj)) {
        if (invertible) {
          patches.push({
            op: "test",
            path: path + "/" + escapePathComponent(key),
            value: _deepClone(oldVal)
          });
        }

        patches.push({
          op: "remove",
          path: path + "/" + escapePathComponent(key)
        });
        deleted = true; // property has been deleted
      } else {
        if (invertible) {
          patches.push({
            op: "test",
            path: path,
            value: mirror
          });
        }

        patches.push({
          op: "replace",
          path: path,
          value: obj
        });
      }
    }

    if (!deleted && newKeys.length == oldKeys.length) {
      return;
    }

    for (var t = 0; t < newKeys.length; t++) {
      var key = newKeys[t];

      if (!hasOwnProperty(mirror, key) && obj[key] !== undefined) {
        patches.push({
          op: "add",
          path: path + "/" + escapePathComponent(key),
          value: _deepClone(obj[key])
        });
      }
    }
  }
  /**
   * Create an array of patches from the differences in two objects
   */


  function compare(tree1, tree2, invertible) {
    if (invertible === void 0) {
      invertible = false;
    }

    var patches = [];

    _generate(tree1, tree2, patches, '', invertible);

    return patches;
  }

  var duplex = /*#__PURE__*/Object.freeze({
    __proto__: null,
    unobserve: unobserve,
    observe: observe,
    generate: generate,
    compare: compare
  });

  _extends({}, core, duplex, {
    JsonPatchError: PatchError,
    deepClone: _deepClone,
    escapePathComponent: escapePathComponent,
    unescapePathComponent: unescapePathComponent
  });

  var stringOrChar = /("(?:[^\\"]|\\.)*")|[:,]/g;

  var jsonStringifyPrettyCompact = function stringify(passedObj, options) {
    var indent, maxLength, replacer;
    options = options || {};
    indent = JSON.stringify([1], undefined, options.indent === undefined ? 2 : options.indent).slice(2, -3);
    maxLength = indent === "" ? Infinity : options.maxLength === undefined ? 80 : options.maxLength;
    replacer = options.replacer;
    return function _stringify(obj, currentIndent, reserved) {
      // prettier-ignore
      var end, index, items, key, keyPart, keys, length, nextIndent, prettified, start, string, value;

      if (obj && typeof obj.toJSON === "function") {
        obj = obj.toJSON();
      }

      string = JSON.stringify(obj, replacer);

      if (string === undefined) {
        return string;
      }

      length = maxLength - currentIndent.length - reserved;

      if (string.length <= length) {
        prettified = string.replace(stringOrChar, function (match, stringLiteral) {
          return stringLiteral || match + " ";
        });

        if (prettified.length <= length) {
          return prettified;
        }
      }

      if (replacer != null) {
        obj = JSON.parse(string);
        replacer = undefined;
      }

      if (_typeof(obj) === "object" && obj !== null) {
        nextIndent = currentIndent + indent;
        items = [];
        index = 0;

        if (Array.isArray(obj)) {
          start = "[";
          end = "]";
          length = obj.length;

          for (; index < length; index++) {
            items.push(_stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) || "null");
          }
        } else {
          start = "{";
          end = "}";
          keys = Object.keys(obj);
          length = keys.length;

          for (; index < length; index++) {
            key = keys[index];
            keyPart = JSON.stringify(key) + ": ";
            value = _stringify(obj[key], nextIndent, keyPart.length + (index === length - 1 ? 0 : 1));

            if (value !== undefined) {
              items.push(keyPart + value);
            }
          }
        }

        if (items.length > 0) {
          return [start, indent + items.join(",\n" + nextIndent), end].join("\n" + currentIndent);
        }
      }

      return string;
    }(passedObj, "", 0);
  };

  // Note: this is the semver.org version of the spec that it implements
  // Not necessarily the package version of this code.
  var SEMVER_SPEC_VERSION = '2.0.0';
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */
  9007199254740991; // Max safe segment length for coercion.

  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var constants = {
    SEMVER_SPEC_VERSION: SEMVER_SPEC_VERSION,
    MAX_LENGTH: MAX_LENGTH,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,
    MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH
  };

  var debug = (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function () {
    var _console;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_console = console).error.apply(_console, ['SEMVER'].concat(args));
  } : function () {};
  var debug_1 = debug;

  var re_1 = createCommonjsModule(function (module, exports) {
    var MAX_SAFE_COMPONENT_LENGTH = constants.MAX_SAFE_COMPONENT_LENGTH;
    exports = module.exports = {}; // The actual regexps go on exports.re

    var re = exports.re = [];
    var src = exports.src = [];
    var t = exports.t = {};
    var R = 0;

    var createToken = function createToken(name, value, isGlobal) {
      var index = R++;
      debug_1(index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
    }; // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.
    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.


    createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
    createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+'); // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    createToken('NONNUMERICIDENTIFIER', '\\d*[a-zA-Z-][a-zA-Z0-9-]*'); // ## Main Version
    // Three dot-separated numeric identifiers.

    createToken('MAINVERSION', "(".concat(src[t.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIER], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIER], ")"));
    createToken('MAINVERSIONLOOSE', "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")\\.") + "(".concat(src[t.NUMERICIDENTIFIERLOOSE], ")")); // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.

    createToken('PRERELEASEIDENTIFIER', "(?:".concat(src[t.NUMERICIDENTIFIER], "|").concat(src[t.NONNUMERICIDENTIFIER], ")"));
    createToken('PRERELEASEIDENTIFIERLOOSE', "(?:".concat(src[t.NUMERICIDENTIFIERLOOSE], "|").concat(src[t.NONNUMERICIDENTIFIER], ")")); // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    createToken('PRERELEASE', "(?:-(".concat(src[t.PRERELEASEIDENTIFIER], "(?:\\.").concat(src[t.PRERELEASEIDENTIFIER], ")*))"));
    createToken('PRERELEASELOOSE', "(?:-?(".concat(src[t.PRERELEASEIDENTIFIERLOOSE], "(?:\\.").concat(src[t.PRERELEASEIDENTIFIERLOOSE], ")*))")); // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+'); // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    createToken('BUILD', "(?:\\+(".concat(src[t.BUILDIDENTIFIER], "(?:\\.").concat(src[t.BUILDIDENTIFIER], ")*))")); // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.
    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    createToken('FULLPLAIN', "v?".concat(src[t.MAINVERSION]).concat(src[t.PRERELEASE], "?").concat(src[t.BUILD], "?"));
    createToken('FULL', "^".concat(src[t.FULLPLAIN], "$")); // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.

    createToken('LOOSEPLAIN', "[v=\\s]*".concat(src[t.MAINVERSIONLOOSE]).concat(src[t.PRERELEASELOOSE], "?").concat(src[t.BUILD], "?"));
    createToken('LOOSE', "^".concat(src[t.LOOSEPLAIN], "$"));
    createToken('GTLT', '((?:<|>)?=?)'); // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.

    createToken('XRANGEIDENTIFIERLOOSE', "".concat(src[t.NUMERICIDENTIFIERLOOSE], "|x|X|\\*"));
    createToken('XRANGEIDENTIFIER', "".concat(src[t.NUMERICIDENTIFIER], "|x|X|\\*"));
    createToken('XRANGEPLAIN', "[v=\\s]*(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIER], ")") + "(?:".concat(src[t.PRERELEASE], ")?").concat(src[t.BUILD], "?") + ")?)?");
    createToken('XRANGEPLAINLOOSE', "[v=\\s]*(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:\\.(".concat(src[t.XRANGEIDENTIFIERLOOSE], ")") + "(?:".concat(src[t.PRERELEASELOOSE], ")?").concat(src[t.BUILD], "?") + ")?)?");
    createToken('XRANGE', "^".concat(src[t.GTLT], "\\s*").concat(src[t.XRANGEPLAIN], "$"));
    createToken('XRANGELOOSE', "^".concat(src[t.GTLT], "\\s*").concat(src[t.XRANGEPLAINLOOSE], "$")); // Coercion.
    // Extract anything that could conceivably be a part of a valid semver

    createToken('COERCE', "".concat('(^|[^\\d])' + '(\\d{1,').concat(MAX_SAFE_COMPONENT_LENGTH, "})") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH, "}))?") + "(?:\\.(\\d{1,".concat(MAX_SAFE_COMPONENT_LENGTH, "}))?") + "(?:$|[^\\d])");
    createToken('COERCERTL', src[t.COERCE], true); // Tilde ranges.
    // Meaning is "reasonably at or greater than"

    createToken('LONETILDE', '(?:~>?)');
    createToken('TILDETRIM', "(\\s*)".concat(src[t.LONETILDE], "\\s+"), true);
    exports.tildeTrimReplace = '$1~';
    createToken('TILDE', "^".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAIN], "$"));
    createToken('TILDELOOSE', "^".concat(src[t.LONETILDE]).concat(src[t.XRANGEPLAINLOOSE], "$")); // Caret ranges.
    // Meaning is "at least and backwards compatible with"

    createToken('LONECARET', '(?:\\^)');
    createToken('CARETTRIM', "(\\s*)".concat(src[t.LONECARET], "\\s+"), true);
    exports.caretTrimReplace = '$1^';
    createToken('CARET', "^".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAIN], "$"));
    createToken('CARETLOOSE', "^".concat(src[t.LONECARET]).concat(src[t.XRANGEPLAINLOOSE], "$")); // A simple gt/lt/eq thing, or just "" to indicate "any version"

    createToken('COMPARATORLOOSE', "^".concat(src[t.GTLT], "\\s*(").concat(src[t.LOOSEPLAIN], ")$|^$"));
    createToken('COMPARATOR', "^".concat(src[t.GTLT], "\\s*(").concat(src[t.FULLPLAIN], ")$|^$")); // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`

    createToken('COMPARATORTRIM', "(\\s*)".concat(src[t.GTLT], "\\s*(").concat(src[t.LOOSEPLAIN], "|").concat(src[t.XRANGEPLAIN], ")"), true);
    exports.comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.

    createToken('HYPHENRANGE', "^\\s*(".concat(src[t.XRANGEPLAIN], ")") + "\\s+-\\s+" + "(".concat(src[t.XRANGEPLAIN], ")") + "\\s*$");
    createToken('HYPHENRANGELOOSE', "^\\s*(".concat(src[t.XRANGEPLAINLOOSE], ")") + "\\s+-\\s+" + "(".concat(src[t.XRANGEPLAINLOOSE], ")") + "\\s*$"); // Star ranges basically just allow anything at all.

    createToken('STAR', '(<|>)?=?\\s*\\*'); // >=0.0.0 is like a star

    createToken('GTE0', '^\\s*>=\\s*0\.0\.0\\s*$');
    createToken('GTE0PRE', '^\\s*>=\\s*0\.0\.0-0\\s*$');
  });
  var re_2 = re_1.re;
  var re_3 = re_1.src;
  var re_4 = re_1.t;
  var re_5 = re_1.tildeTrimReplace;
  var re_6 = re_1.caretTrimReplace;
  var re_7 = re_1.comparatorTrimReplace;

  var numeric = /^[0-9]+$/;

  var compareIdentifiers = function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);

    if (anum && bnum) {
      a = +a;
      b = +b;
    }

    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  };

  var rcompareIdentifiers = function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  };

  var identifiers = {
    compareIdentifiers: compareIdentifiers,
    rcompareIdentifiers: rcompareIdentifiers
  };

  var MAX_LENGTH$1 = constants.MAX_LENGTH,
      MAX_SAFE_INTEGER$1 = constants.MAX_SAFE_INTEGER;
  var re = re_1.re,
      t = re_1.t;
  var compareIdentifiers$1 = identifiers.compareIdentifiers;

  var SemVer = /*#__PURE__*/function () {
    function SemVer(version, options) {
      _classCallCheck(this, SemVer);

      if (!options || _typeof(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== 'string') {
        throw new TypeError("Invalid Version: ".concat(version));
      }

      if (version.length > MAX_LENGTH$1) {
        throw new TypeError("version is longer than ".concat(MAX_LENGTH$1, " characters"));
      }

      debug_1('SemVer', version, options);
      this.options = options;
      this.loose = !!options.loose; // this isn't actually relevant for versions, but keep it so that we
      // don't run into trouble passing this.options around.

      this.includePrerelease = !!options.includePrerelease;
      var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

      if (!m) {
        throw new TypeError("Invalid Version: ".concat(version));
      }

      this.raw = version; // these are actually numbers

      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];

      if (this.major > MAX_SAFE_INTEGER$1 || this.major < 0) {
        throw new TypeError('Invalid major version');
      }

      if (this.minor > MAX_SAFE_INTEGER$1 || this.minor < 0) {
        throw new TypeError('Invalid minor version');
      }

      if (this.patch > MAX_SAFE_INTEGER$1 || this.patch < 0) {
        throw new TypeError('Invalid patch version');
      } // numberify any prerelease numeric ids


      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split('.').map(function (id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;

            if (num >= 0 && num < MAX_SAFE_INTEGER$1) {
              return num;
            }
          }

          return id;
        });
      }

      this.build = m[5] ? m[5].split('.') : [];
      this.format();
    }

    _createClass(SemVer, [{
      key: "format",
      value: function format() {
        this.version = "".concat(this.major, ".").concat(this.minor, ".").concat(this.patch);

        if (this.prerelease.length) {
          this.version += "-".concat(this.prerelease.join('.'));
        }

        return this.version;
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.version;
      }
    }, {
      key: "compare",
      value: function compare(other) {
        debug_1('SemVer.compare', this.version, this.options, other);

        if (!(other instanceof SemVer)) {
          if (typeof other === 'string' && other === this.version) {
            return 0;
          }

          other = new SemVer(other, this.options);
        }

        if (other.version === this.version) {
          return 0;
        }

        return this.compareMain(other) || this.comparePre(other);
      }
    }, {
      key: "compareMain",
      value: function compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }

        return compareIdentifiers$1(this.major, other.major) || compareIdentifiers$1(this.minor, other.minor) || compareIdentifiers$1(this.patch, other.patch);
      }
    }, {
      key: "comparePre",
      value: function comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        } // NOT having a prerelease is > having one


        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }

        var i = 0;

        do {
          var a = this.prerelease[i];
          var b = other.prerelease[i];
          debug_1('prerelease compare', i, a, b);

          if (a === undefined && b === undefined) {
            return 0;
          } else if (b === undefined) {
            return 1;
          } else if (a === undefined) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers$1(a, b);
          }
        } while (++i);
      }
    }, {
      key: "compareBuild",
      value: function compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }

        var i = 0;

        do {
          var a = this.build[i];
          var b = other.build[i];
          debug_1('prerelease compare', i, a, b);

          if (a === undefined && b === undefined) {
            return 0;
          } else if (b === undefined) {
            return 1;
          } else if (a === undefined) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers$1(a, b);
          }
        } while (++i);
      } // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.

    }, {
      key: "inc",
      value: function inc(release, identifier) {
        switch (release) {
          case 'premajor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc('pre', identifier);
            break;

          case 'preminor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc('pre', identifier);
            break;

          case 'prepatch':
            // If this is already a prerelease, it will bump to the next version
            // drop any prereleases that might already exist, since they are not
            // relevant at this point.
            this.prerelease.length = 0;
            this.inc('patch', identifier);
            this.inc('pre', identifier);
            break;
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.

          case 'prerelease':
            if (this.prerelease.length === 0) {
              this.inc('patch', identifier);
            }

            this.inc('pre', identifier);
            break;

          case 'major':
            // If this is a pre-major version, bump up to the same major version.
            // Otherwise increment major.
            // 1.0.0-5 bumps to 1.0.0
            // 1.1.0 bumps to 2.0.0
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }

            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;

          case 'minor':
            // If this is a pre-minor version, bump up to the same minor version.
            // Otherwise increment minor.
            // 1.2.0-5 bumps to 1.2.0
            // 1.2.1 bumps to 1.3.0
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }

            this.patch = 0;
            this.prerelease = [];
            break;

          case 'patch':
            // If this is not a pre-release version, it will increment the patch.
            // If it is a pre-release it will bump up to the same patch version.
            // 1.2.0-5 patches to 1.2.0
            // 1.2.0 patches to 1.2.1
            if (this.prerelease.length === 0) {
              this.patch++;
            }

            this.prerelease = [];
            break;
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.

          case 'pre':
            if (this.prerelease.length === 0) {
              this.prerelease = [0];
            } else {
              var i = this.prerelease.length;

              while (--i >= 0) {
                if (typeof this.prerelease[i] === 'number') {
                  this.prerelease[i]++;
                  i = -2;
                }
              }

              if (i === -1) {
                // didn't increment anything
                this.prerelease.push(0);
              }
            }

            if (identifier) {
              // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
              // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
              if (this.prerelease[0] === identifier) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = [identifier, 0];
                }
              } else {
                this.prerelease = [identifier, 0];
              }
            }

            break;

          default:
            throw new Error("invalid increment argument: ".concat(release));
        }

        this.format();
        this.raw = this.version;
        return this;
      }
    }]);

    return SemVer;
  }();

  var semver = SemVer;

  var MAX_LENGTH$2 = constants.MAX_LENGTH;
  var re$1 = re_1.re,
      t$1 = re_1.t;

  var parse = function parse(version, options) {
    if (!options || _typeof(options) !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }

    if (version instanceof semver) {
      return version;
    }

    if (typeof version !== 'string') {
      return null;
    }

    if (version.length > MAX_LENGTH$2) {
      return null;
    }

    var r = options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL];

    if (!r.test(version)) {
      return null;
    }

    try {
      return new semver(version, options);
    } catch (er) {
      return null;
    }
  };

  var parse_1 = parse;

  var valid = function valid(version, options) {
    var v = parse_1(version, options);
    return v ? v.version : null;
  };

  var valid_1 = valid;

  var clean = function clean(version, options) {
    var s = parse_1(version.trim().replace(/^[=v]+/, ''), options);
    return s ? s.version : null;
  };

  var clean_1 = clean;

  var inc = function inc(version, release, options, identifier) {
    if (typeof options === 'string') {
      identifier = options;
      options = undefined;
    }

    try {
      return new semver(version, options).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  };

  var inc_1 = inc;

  var compare$1 = function compare(a, b, loose) {
    return new semver(a, loose).compare(new semver(b, loose));
  };

  var compare_1 = compare$1;

  var eq = function eq(a, b, loose) {
    return compare_1(a, b, loose) === 0;
  };

  var eq_1 = eq;

  var diff = function diff(version1, version2) {
    if (eq_1(version1, version2)) {
      return null;
    } else {
      var v1 = parse_1(version1);
      var v2 = parse_1(version2);
      var hasPre = v1.prerelease.length || v2.prerelease.length;
      var prefix = hasPre ? 'pre' : '';
      var defaultResult = hasPre ? 'prerelease' : '';

      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return prefix + key;
          }
        }
      }

      return defaultResult; // may be undefined
    }
  };

  var diff_1 = diff;

  var major = function major(a, loose) {
    return new semver(a, loose).major;
  };

  var major_1 = major;

  var minor = function minor(a, loose) {
    return new semver(a, loose).minor;
  };

  var minor_1 = minor;

  var patch = function patch(a, loose) {
    return new semver(a, loose).patch;
  };

  var patch_1 = patch;

  var prerelease = function prerelease(version, options) {
    var parsed = parse_1(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };

  var prerelease_1 = prerelease;

  var rcompare = function rcompare(a, b, loose) {
    return compare_1(b, a, loose);
  };

  var rcompare_1 = rcompare;

  var compareLoose = function compareLoose(a, b) {
    return compare_1(a, b, true);
  };

  var compareLoose_1 = compareLoose;

  var compareBuild = function compareBuild(a, b, loose) {
    var versionA = new semver(a, loose);
    var versionB = new semver(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };

  var compareBuild_1 = compareBuild;

  var sort = function sort(list, loose) {
    return list.sort(function (a, b) {
      return compareBuild_1(a, b, loose);
    });
  };

  var sort_1 = sort;

  var rsort = function rsort(list, loose) {
    return list.sort(function (a, b) {
      return compareBuild_1(b, a, loose);
    });
  };

  var rsort_1 = rsort;

  var gt = function gt(a, b, loose) {
    return compare_1(a, b, loose) > 0;
  };

  var gt_1 = gt;

  var lt = function lt(a, b, loose) {
    return compare_1(a, b, loose) < 0;
  };

  var lt_1 = lt;

  var neq = function neq(a, b, loose) {
    return compare_1(a, b, loose) !== 0;
  };

  var neq_1 = neq;

  var gte = function gte(a, b, loose) {
    return compare_1(a, b, loose) >= 0;
  };

  var gte_1 = gte;

  var lte = function lte(a, b, loose) {
    return compare_1(a, b, loose) <= 0;
  };

  var lte_1 = lte;

  var cmp = function cmp(a, op, b, loose) {
    switch (op) {
      case '===':
        if (_typeof(a) === 'object') a = a.version;
        if (_typeof(b) === 'object') b = b.version;
        return a === b;

      case '!==':
        if (_typeof(a) === 'object') a = a.version;
        if (_typeof(b) === 'object') b = b.version;
        return a !== b;

      case '':
      case '=':
      case '==':
        return eq_1(a, b, loose);

      case '!=':
        return neq_1(a, b, loose);

      case '>':
        return gt_1(a, b, loose);

      case '>=':
        return gte_1(a, b, loose);

      case '<':
        return lt_1(a, b, loose);

      case '<=':
        return lte_1(a, b, loose);

      default:
        throw new TypeError("Invalid operator: ".concat(op));
    }
  };

  var cmp_1 = cmp;

  var re$2 = re_1.re,
      t$2 = re_1.t;

  var coerce = function coerce(version, options) {
    if (version instanceof semver) {
      return version;
    }

    if (typeof version === 'number') {
      version = String(version);
    }

    if (typeof version !== 'string') {
      return null;
    }

    options = options || {};
    var match = null;

    if (!options.rtl) {
      match = version.match(re$2[t$2.COERCE]);
    } else {
      // Find the right-most coercible string that does not share
      // a terminus with a more left-ward coercible string.
      // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
      //
      // Walk through the string checking with a /g regexp
      // Manually set the index so as to pick up overlapping matches.
      // Stop when we get a match that ends at the string end, since no
      // coercible string can be more right-ward without the same terminus.
      var next;

      while ((next = re$2[t$2.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }

        re$2[t$2.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      } // leave it in a clean state


      re$2[t$2.COERCERTL].lastIndex = -1;
    }

    if (match === null) return null;
    return parse_1("".concat(match[2], ".").concat(match[3] || '0', ".").concat(match[4] || '0'), options);
  };

  var coerce_1 = coerce;

  var Range = /*#__PURE__*/function () {
    function Range(range, options) {
      var _this = this;

      _classCallCheck(this, Range);

      if (!options || _typeof(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }

      if (range instanceof comparator) {
        // just put it in the set and return
        this.raw = range.value;
        this.set = [[range]];
        this.format();
        return this;
      }

      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||

      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/) // map the range to a 2d array of comparators
      .map(function (range) {
        return _this.parseRange(range.trim());
      }) // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(function (c) {
        return c.length;
      });

      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: ".concat(range));
      }

      this.format();
    }

    _createClass(Range, [{
      key: "format",
      value: function format() {
        this.range = this.set.map(function (comps) {
          return comps.join(' ').trim();
        }).join('||').trim();
        return this.range;
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.range;
      }
    }, {
      key: "parseRange",
      value: function parseRange(range) {
        var _this2 = this;

        var loose = this.options.loose;
        range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

        var hr = loose ? re$3[t$3.HYPHENRANGELOOSE] : re$3[t$3.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug_1('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

        range = range.replace(re$3[t$3.COMPARATORTRIM], comparatorTrimReplace);
        debug_1('comparator trim', range, re$3[t$3.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

        range = range.replace(re$3[t$3.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

        range = range.replace(re$3[t$3.CARETTRIM], caretTrimReplace); // normalize spaces

        range = range.split(/\s+/).join(' '); // At this point, the range is completely trimmed and
        // ready to be split into comparators.

        var compRe = loose ? re$3[t$3.COMPARATORLOOSE] : re$3[t$3.COMPARATOR];
        return range.split(' ').map(function (comp) {
          return parseComparator(comp, _this2.options);
        }).join(' ').split(/\s+/).map(function (comp) {
          return replaceGTE0(comp, _this2.options);
        }) // in loose mode, throw out any that are not valid comparators
        .filter(this.options.loose ? function (comp) {
          return !!comp.match(compRe);
        } : function () {
          return true;
        }).map(function (comp) {
          return new comparator(comp, _this2.options);
        });
      }
    }, {
      key: "intersects",
      value: function intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError('a Range is required');
        }

        return this.set.some(function (thisComparators) {
          return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
            return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
              return rangeComparators.every(function (rangeComparator) {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      } // if ANY of the sets match ALL of its comparators, then pass

    }, {
      key: "test",
      value: function test(version) {
        if (!version) {
          return false;
        }

        if (typeof version === 'string') {
          try {
            version = new semver(version, this.options);
          } catch (er) {
            return false;
          }
        }

        for (var i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version, this.options)) {
            return true;
          }
        }

        return false;
      }
    }]);

    return Range;
  }();

  var range = Range;
  var re$3 = re_1.re,
      t$3 = re_1.t,
      comparatorTrimReplace = re_1.comparatorTrimReplace,
      tildeTrimReplace = re_1.tildeTrimReplace,
      caretTrimReplace = re_1.caretTrimReplace; // take a set of comparators and determine whether there
  // exists a version which can satisfy it

  var isSatisfiable = function isSatisfiable(comparators, options) {
    var result = true;
    var remainingComparators = comparators.slice();
    var testComparator = remainingComparators.pop();

    while (result && remainingComparators.length) {
      result = remainingComparators.every(function (otherComparator) {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }

    return result;
  }; // comprised of xranges, tildes, stars, and gtlt's at this point.
  // already replaced the hyphen ranges
  // turn into a set of JUST comparators.


  var parseComparator = function parseComparator(comp, options) {
    debug_1('comp', comp, options);
    comp = replaceCarets(comp, options);
    debug_1('caret', comp);
    comp = replaceTildes(comp, options);
    debug_1('tildes', comp);
    comp = replaceXRanges(comp, options);
    debug_1('xrange', comp);
    comp = replaceStars(comp, options);
    debug_1('stars', comp);
    return comp;
  };

  var isX = function isX(id) {
    return !id || id.toLowerCase() === 'x' || id === '*';
  }; // ~, ~> --> * (any, kinda silly)
  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0


  var replaceTildes = function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceTilde(comp, options);
    }).join(' ');
  };

  var replaceTilde = function replaceTilde(comp, options) {
    var r = options.loose ? re$3[t$3.TILDELOOSE] : re$3[t$3.TILDE];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug_1('tilde', comp, _, M, m, p, pr);
      var ret;

      if (isX(M)) {
        ret = '';
      } else if (isX(m)) {
        ret = ">=".concat(M, ".0.0 <").concat(+M + 1, ".0.0-0");
      } else if (isX(p)) {
        // ~1.2 == >=1.2.0 <1.3.0-0
        ret = ">=".concat(M, ".").concat(m, ".0 <").concat(M, ".").concat(+m + 1, ".0-0");
      } else if (pr) {
        debug_1('replaceTilde pr', pr);
        ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
      } else {
        // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = ">=".concat(M, ".").concat(m, ".").concat(p, " <").concat(M, ".").concat(+m + 1, ".0-0");
      }

      debug_1('tilde return', ret);
      return ret;
    });
  }; // ^ --> * (any, kinda silly)
  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
  // ^1.2.3 --> >=1.2.3 <2.0.0-0
  // ^1.2.0 --> >=1.2.0 <2.0.0-0


  var replaceCarets = function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceCaret(comp, options);
    }).join(' ');
  };

  var replaceCaret = function replaceCaret(comp, options) {
    debug_1('caret', comp, options);
    var r = options.loose ? re$3[t$3.CARETLOOSE] : re$3[t$3.CARET];
    var z = options.includePrerelease ? '-0' : '';
    return comp.replace(r, function (_, M, m, p, pr) {
      debug_1('caret', comp, _, M, m, p, pr);
      var ret;

      if (isX(M)) {
        ret = '';
      } else if (isX(m)) {
        ret = ">=".concat(M, ".0.0").concat(z, " <").concat(+M + 1, ".0.0-0");
      } else if (isX(p)) {
        if (M === '0') {
          ret = ">=".concat(M, ".").concat(m, ".0").concat(z, " <").concat(M, ".").concat(+m + 1, ".0-0");
        } else {
          ret = ">=".concat(M, ".").concat(m, ".0").concat(z, " <").concat(+M + 1, ".0.0-0");
        }
      } else if (pr) {
        debug_1('replaceCaret pr', pr);

        if (M === '0') {
          if (m === '0') {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(m, ".").concat(+p + 1, "-0");
          } else {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
          }
        } else {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p, "-").concat(pr, " <").concat(+M + 1, ".0.0-0");
        }
      } else {
        debug_1('no pr');

        if (M === '0') {
          if (m === '0') {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p).concat(z, " <").concat(M, ".").concat(m, ".").concat(+p + 1, "-0");
          } else {
            ret = ">=".concat(M, ".").concat(m, ".").concat(p).concat(z, " <").concat(M, ".").concat(+m + 1, ".0-0");
          }
        } else {
          ret = ">=".concat(M, ".").concat(m, ".").concat(p, " <").concat(+M + 1, ".0.0-0");
        }
      }

      debug_1('caret return', ret);
      return ret;
    });
  };

  var replaceXRanges = function replaceXRanges(comp, options) {
    debug_1('replaceXRanges', comp, options);
    return comp.split(/\s+/).map(function (comp) {
      return replaceXRange(comp, options);
    }).join(' ');
  };

  var replaceXRange = function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? re$3[t$3.XRANGELOOSE] : re$3[t$3.XRANGE];
    return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
      debug_1('xRange', comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;

      if (gtlt === '=' && anyX) {
        gtlt = '';
      } // if we're including prereleases in the match, then we need
      // to fix this to -0, the lowest possible prerelease value


      pr = options.includePrerelease ? '-0' : '';

      if (xM) {
        if (gtlt === '>' || gtlt === '<') {
          // nothing is allowed
          ret = '<0.0.0-0';
        } else {
          // nothing is forbidden
          ret = '*';
        }
      } else if (gtlt && anyX) {
        // we know patch is an x, because we have any x at all.
        // replace X with 0
        if (xm) {
          m = 0;
        }

        p = 0;

        if (gtlt === '>') {
          // >1 => >=2.0.0
          // >1.2 => >=1.3.0
          gtlt = '>=';

          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === '<=') {
          // <=0.7.x is actually <0.8.0, since any 0.7.x should
          // pass.  Similarly, <=7.x is actually <8.0.0, etc.
          gtlt = '<';

          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }

        if (gtlt === '<') pr = '-0';
        ret = "".concat(gtlt + M, ".").concat(m, ".").concat(p).concat(pr);
      } else if (xm) {
        ret = ">=".concat(M, ".0.0").concat(pr, " <").concat(+M + 1, ".0.0-0");
      } else if (xp) {
        ret = ">=".concat(M, ".").concat(m, ".0").concat(pr, " <").concat(M, ".").concat(+m + 1, ".0-0");
      }

      debug_1('xRange return', ret);
      return ret;
    });
  }; // Because * is AND-ed with everything else in the comparator,
  // and '' means "any version", just remove the *s entirely.


  var replaceStars = function replaceStars(comp, options) {
    debug_1('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!

    return comp.trim().replace(re$3[t$3.STAR], '');
  };

  var replaceGTE0 = function replaceGTE0(comp, options) {
    debug_1('replaceGTE0', comp, options);
    return comp.trim().replace(re$3[options.includePrerelease ? t$3.GTE0PRE : t$3.GTE0], '');
  }; // This function is passed to string.replace(re[t.HYPHENRANGE])
  // M, m, patch, prerelease, build
  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
  // 1.2 - 3.4 => >=1.2.0 <3.5.0-0


  var hyphenReplace = function hyphenReplace(incPr) {
    return function ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = '';
      } else if (isX(fm)) {
        from = ">=".concat(fM, ".0.0").concat(incPr ? '-0' : '');
      } else if (isX(fp)) {
        from = ">=".concat(fM, ".").concat(fm, ".0").concat(incPr ? '-0' : '');
      } else if (fpr) {
        from = ">=".concat(from);
      } else {
        from = ">=".concat(from).concat(incPr ? '-0' : '');
      }

      if (isX(tM)) {
        to = '';
      } else if (isX(tm)) {
        to = "<".concat(+tM + 1, ".0.0-0");
      } else if (isX(tp)) {
        to = "<".concat(tM, ".").concat(+tm + 1, ".0-0");
      } else if (tpr) {
        to = "<=".concat(tM, ".").concat(tm, ".").concat(tp, "-").concat(tpr);
      } else if (incPr) {
        to = "<".concat(tM, ".").concat(tm, ".").concat(+tp + 1, "-0");
      } else {
        to = "<=".concat(to);
      }

      return "".concat(from, " ").concat(to).trim();
    };
  };

  var testSet = function testSet(set, version, options) {
    for (var i = 0; i < set.length; i++) {
      if (!set[i].test(version)) {
        return false;
      }
    }

    if (version.prerelease.length && !options.includePrerelease) {
      // Find the set of versions that are allowed to have prereleases
      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
      // That should allow `1.2.3-pr.2` to pass.
      // However, `1.2.4-alpha.notready` should NOT be allowed,
      // even though it's within the range set by the comparators.
      for (var _i = 0; _i < set.length; _i++) {
        debug_1(set[_i].semver);

        if (set[_i].semver === comparator.ANY) {
          continue;
        }

        if (set[_i].semver.prerelease.length > 0) {
          var allowed = set[_i].semver;

          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      } // Version has a -pre, but it's not one of the ones we like.


      return false;
    }

    return true;
  };

  var ANY = Symbol('SemVer ANY'); // hoisted class for cyclic dependency

  var Comparator = /*#__PURE__*/function () {
    _createClass(Comparator, null, [{
      key: "ANY",
      get: function get() {
        return ANY;
      }
    }]);

    function Comparator(comp, options) {
      _classCallCheck(this, Comparator);

      if (!options || _typeof(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }

      debug_1('comparator', comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);

      if (this.semver === ANY) {
        this.value = '';
      } else {
        this.value = this.operator + this.semver.version;
      }

      debug_1('comp', this);
    }

    _createClass(Comparator, [{
      key: "parse",
      value: function parse(comp) {
        var r = this.options.loose ? re$4[t$4.COMPARATORLOOSE] : re$4[t$4.COMPARATOR];
        var m = comp.match(r);

        if (!m) {
          throw new TypeError("Invalid comparator: ".concat(comp));
        }

        this.operator = m[1] !== undefined ? m[1] : '';

        if (this.operator === '=') {
          this.operator = '';
        } // if it literally is just '>' or '' then allow anything.


        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new semver(m[2], this.options.loose);
        }
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.value;
      }
    }, {
      key: "test",
      value: function test(version) {
        debug_1('Comparator.test', version, this.options.loose);

        if (this.semver === ANY || version === ANY) {
          return true;
        }

        if (typeof version === 'string') {
          try {
            version = new semver(version, this.options);
          } catch (er) {
            return false;
          }
        }

        return cmp_1(version, this.operator, this.semver, this.options);
      }
    }, {
      key: "intersects",
      value: function intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError('a Comparator is required');
        }

        if (!options || _typeof(options) !== 'object') {
          options = {
            loose: !!options,
            includePrerelease: false
          };
        }

        if (this.operator === '') {
          if (this.value === '') {
            return true;
          }

          return new range(comp.value, options).test(this.value);
        } else if (comp.operator === '') {
          if (comp.value === '') {
            return true;
          }

          return new range(this.value, options).test(comp.semver);
        }

        var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
        var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
        var sameSemVer = this.semver.version === comp.semver.version;
        var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
        var oppositeDirectionsLessThan = cmp_1(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
        var oppositeDirectionsGreaterThan = cmp_1(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
        return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
      }
    }]);

    return Comparator;
  }();

  var comparator = Comparator;
  var re$4 = re_1.re,
      t$4 = re_1.t;

  var satisfies = function satisfies(version, range$1, options) {
    try {
      range$1 = new range(range$1, options);
    } catch (er) {
      return false;
    }

    return range$1.test(version);
  };

  var satisfies_1 = satisfies;

  var toComparators = function toComparators(range$1, options) {
    return new range(range$1, options).set.map(function (comp) {
      return comp.map(function (c) {
        return c.value;
      }).join(' ').trim().split(' ');
    });
  };

  var toComparators_1 = toComparators;

  var maxSatisfying = function maxSatisfying(versions, range$1, options) {
    var max = null;
    var maxSV = null;
    var rangeObj = null;

    try {
      rangeObj = new range(range$1, options);
    } catch (er) {
      return null;
    }

    versions.forEach(function (v) {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!max || maxSV.compare(v) === -1) {
          // compare(max, v, true)
          max = v;
          maxSV = new semver(max, options);
        }
      }
    });
    return max;
  };

  var maxSatisfying_1 = maxSatisfying;

  var minSatisfying = function minSatisfying(versions, range$1, options) {
    var min = null;
    var minSV = null;
    var rangeObj = null;

    try {
      rangeObj = new range(range$1, options);
    } catch (er) {
      return null;
    }

    versions.forEach(function (v) {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!min || minSV.compare(v) === 1) {
          // compare(min, v, true)
          min = v;
          minSV = new semver(min, options);
        }
      }
    });
    return min;
  };

  var minSatisfying_1 = minSatisfying;

  var minVersion = function minVersion(range$1, loose) {
    range$1 = new range(range$1, loose);
    var minver = new semver('0.0.0');

    if (range$1.test(minver)) {
      return minver;
    }

    minver = new semver('0.0.0-0');

    if (range$1.test(minver)) {
      return minver;
    }

    minver = null;

    for (var i = 0; i < range$1.set.length; ++i) {
      var comparators = range$1.set[i];
      comparators.forEach(function (comparator) {
        // Clone to avoid manipulating the comparator's semver object.
        var compver = new semver(comparator.semver.version);

        switch (comparator.operator) {
          case '>':
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }

            compver.raw = compver.format();

          /* fallthrough */

          case '':
          case '>=':
            if (!minver || gt_1(minver, compver)) {
              minver = compver;
            }

            break;

          case '<':
          case '<=':
            /* Ignore maximum versions */
            break;

          /* istanbul ignore next */

          default:
            throw new Error("Unexpected operation: ".concat(comparator.operator));
        }
      });
    }

    if (minver && range$1.test(minver)) {
      return minver;
    }

    return null;
  };

  var minVersion_1 = minVersion;

  var validRange = function validRange(range$1, options) {
    try {
      // Return '*' instead of '' so that truthiness works.
      // This will throw if it's invalid anyway
      return new range(range$1, options).range || '*';
    } catch (er) {
      return null;
    }
  };

  var valid$1 = validRange;

  var ANY$1 = comparator.ANY;

  var outside = function outside(version, range$1, hilo, options) {
    version = new semver(version, options);
    range$1 = new range(range$1, options);
    var gtfn, ltefn, ltfn, comp, ecomp;

    switch (hilo) {
      case '>':
        gtfn = gt_1;
        ltefn = lte_1;
        ltfn = lt_1;
        comp = '>';
        ecomp = '>=';
        break;

      case '<':
        gtfn = lt_1;
        ltefn = gte_1;
        ltfn = gt_1;
        comp = '<';
        ecomp = '<=';
        break;

      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    } // If it satisifes the range it is not outside


    if (satisfies_1(version, range$1, options)) {
      return false;
    } // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.


    var _loop = function _loop(i) {
      var comparators = range$1.set[i];
      var high = null;
      var low = null;
      comparators.forEach(function (comparator$1) {
        if (comparator$1.semver === ANY$1) {
          comparator$1 = new comparator('>=0.0.0');
        }

        high = high || comparator$1;
        low = low || comparator$1;

        if (gtfn(comparator$1.semver, high.semver, options)) {
          high = comparator$1;
        } else if (ltfn(comparator$1.semver, low.semver, options)) {
          low = comparator$1;
        }
      }); // If the edge version comparator has a operator then our version
      // isn't outside it

      if (high.operator === comp || high.operator === ecomp) {
        return {
          v: false
        };
      } // If the lowest version comparator has an operator and our version
      // is less than it then it isn't higher than the range


      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return {
          v: false
        };
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return {
          v: false
        };
      }
    };

    for (var i = 0; i < range$1.set.length; ++i) {
      var _ret = _loop(i);

      if (_typeof(_ret) === "object") return _ret.v;
    }

    return true;
  };

  var outside_1 = outside;

  var gtr = function gtr(version, range, options) {
    return outside_1(version, range, '>', options);
  };

  var gtr_1 = gtr;

  var ltr = function ltr(version, range, options) {
    return outside_1(version, range, '<', options);
  };

  var ltr_1 = ltr;

  var intersects = function intersects(r1, r2, options) {
    r1 = new range(r1, options);
    r2 = new range(r2, options);
    return r1.intersects(r2);
  };

  var intersects_1 = intersects;

  // that includes the same versions that the original range does
  // If the original range is shorter than the simplified one, return that.

  var simplify = function simplify(versions, range, options) {
    var set = [];
    var min = null;
    var prev = null;
    var v = versions.sort(function (a, b) {
      return compare_1(a, b, options);
    });

    var _iterator = _createForOfIteratorHelper(v),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var version = _step.value;
        var included = satisfies_1(version, range, options);

        if (included) {
          prev = version;
          if (!min) min = version;
        } else {
          if (prev) {
            set.push([min, prev]);
          }

          prev = null;
          min = null;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (min) set.push([min, null]);
    var ranges = [];

    for (var _i = 0, _set = set; _i < _set.length; _i++) {
      var _set$_i = _slicedToArray(_set[_i], 2),
          _min = _set$_i[0],
          max = _set$_i[1];

      if (_min === max) ranges.push(_min);else if (!max && _min === v[0]) ranges.push('*');else if (!max) ranges.push(">=".concat(_min));else if (_min === v[0]) ranges.push("<=".concat(max));else ranges.push("".concat(_min, " - ").concat(max));
    }

    var simplified = ranges.join(' || ');
    var original = typeof range.raw === 'string' ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
  };

  var ANY$2 = comparator.ANY; // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
  // - Every simple range `r1, r2, ...` is a subset of some `R1, R2, ...`
  //
  // Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
  // - If c is only the ANY comparator
  //   - If C is only the ANY comparator, return true
  //   - Else return false
  // - Let EQ be the set of = comparators in c
  // - If EQ is more than one, return true (null set)
  // - Let GT be the highest > or >= comparator in c
  // - Let LT be the lowest < or <= comparator in c
  // - If GT and LT, and GT.semver > LT.semver, return true (null set)
  // - If EQ
  //   - If GT, and EQ does not satisfy GT, return true (null set)
  //   - If LT, and EQ does not satisfy LT, return true (null set)
  //   - If EQ satisfies every C, return true
  //   - Else return false
  // - If GT
  //   - If GT is lower than any > or >= comp in C, return false
  //   - If GT is >=, and GT.semver does not satisfy every C, return false
  // - If LT
  //   - If LT.semver is greater than that of any > comp in C, return false
  //   - If LT is <=, and LT.semver does not satisfy every C, return false
  // - If any C is a = range, and GT or LT are set, return false
  // - Else return true

  var subset = function subset(sub, dom, options) {
    sub = new range(sub, options);
    dom = new range(dom, options);
    var sawNonNull = false;

    var _iterator = _createForOfIteratorHelper(sub.set),
        _step;

    try {
      OUTER: for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var simpleSub = _step.value;

        var _iterator2 = _createForOfIteratorHelper(dom.set),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var simpleDom = _step2.value;
            var isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) continue OUTER;
          } // the null set is a subset of everything, but null simple ranges in
          // a complex range should be ignored.  so if we saw a non-null range,
          // then we know this isn't a subset, but if EVERY simple range was null,
          // then it is a subset.

        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (sawNonNull) return false;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return true;
  };

  var simpleSubset = function simpleSubset(sub, dom, options) {
    if (sub.length === 1 && sub[0].semver === ANY$2) return dom.length === 1 && dom[0].semver === ANY$2;
    var eqSet = new Set();
    var gt, lt;

    var _iterator3 = _createForOfIteratorHelper(sub),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var c = _step3.value;
        if (c.operator === '>' || c.operator === '>=') gt = higherGT(gt, c, options);else if (c.operator === '<' || c.operator === '<=') lt = lowerLT(lt, c, options);else eqSet.add(c.semver);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    if (eqSet.size > 1) return null;
    var gtltComp;

    if (gt && lt) {
      gtltComp = compare_1(gt.semver, lt.semver, options);
      if (gtltComp > 0) return null;else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) return null;
    } // will iterate one or zero times


    var _iterator4 = _createForOfIteratorHelper(eqSet),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var eq = _step4.value;
        if (gt && !satisfies_1(eq, String(gt), options)) return null;
        if (lt && !satisfies_1(eq, String(lt), options)) return null;

        var _iterator6 = _createForOfIteratorHelper(dom),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _c = _step6.value;
            if (!satisfies_1(eq, String(_c), options)) return false;
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return true;
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    var higher, lower;
    var hasDomLT, hasDomGT;

    var _iterator5 = _createForOfIteratorHelper(dom),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _c2 = _step5.value;
        hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';
        hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';

        if (gt) {
          if (_c2.operator === '>' || _c2.operator === '>=') {
            higher = higherGT(gt, _c2, options);
            if (higher === _c2) return false;
          } else if (gt.operator === '>=' && !satisfies_1(gt.semver, String(_c2), options)) return false;
        }

        if (lt) {
          if (_c2.operator === '<' || _c2.operator === '<=') {
            lower = lowerLT(lt, _c2, options);
            if (lower === _c2) return false;
          } else if (lt.operator === '<=' && !satisfies_1(lt.semver, String(_c2), options)) return false;
        }

        if (!_c2.operator && (lt || gt) && gtltComp !== 0) return false;
      } // if there was a < or >, and nothing in the dom, then must be false
      // UNLESS it was limited by another range in the other direction.
      // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0

    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    if (gt && hasDomLT && !lt && gtltComp !== 0) return false;
    if (lt && hasDomGT && !gt && gtltComp !== 0) return false;
    return true;
  }; // >=1.2.3 is lower than >1.2.3


  var higherGT = function higherGT(a, b, options) {
    if (!a) return b;
    var comp = compare_1(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;
  }; // <=1.2.3 is higher than <1.2.3


  var lowerLT = function lowerLT(a, b, options) {
    if (!a) return b;
    var comp = compare_1(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;
  };

  var subset_1 = subset;

  var semver$1 = {
    re: re_1.re,
    src: re_1.src,
    tokens: re_1.t,
    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
    SemVer: semver,
    compareIdentifiers: identifiers.compareIdentifiers,
    rcompareIdentifiers: identifiers.rcompareIdentifiers,
    parse: parse_1,
    valid: valid_1,
    clean: clean_1,
    inc: inc_1,
    diff: diff_1,
    major: major_1,
    minor: minor_1,
    patch: patch_1,
    prerelease: prerelease_1,
    compare: compare_1,
    rcompare: rcompare_1,
    compareLoose: compareLoose_1,
    compareBuild: compareBuild_1,
    sort: sort_1,
    rsort: rsort_1,
    gt: gt_1,
    lt: lt_1,
    eq: eq_1,
    neq: neq_1,
    gte: gte_1,
    lte: lte_1,
    cmp: cmp_1,
    coerce: coerce_1,
    Comparator: comparator,
    Range: range,
    satisfies: satisfies_1,
    toComparators: toComparators_1,
    maxSatisfying: maxSatisfying_1,
    minSatisfying: minSatisfying_1,
    minVersion: minVersion_1,
    validRange: valid$1,
    outside: outside_1,
    gtr: gtr_1,
    ltr: ltr_1,
    intersects: intersects_1,
    simplifyRange: simplify,
    subset: subset_1
  };
  var semver_33 = semver$1.satisfies;

  function accessor (fn, fields, name) {
    fn.fields = fields || [];
    fn.fname = name;
    return fn;
  }
  function accessorName(fn) {
    return fn == null ? null : fn.fname;
  }
  function accessorFields(fn) {
    return fn == null ? null : fn.fields;
  }

  function error (message) {
    throw Error(message);
  }

  function splitAccessPath (p) {
    var path = [],
        q = null,
        b = 0,
        n = p.length,
        s = '',
        i,
        j,
        c;
    p = p + '';

    function push() {
      path.push(s + p.substring(i, j));
      s = '';
      i = j + 1;
    }

    for (i = j = 0; j < n; ++j) {
      c = p[j];

      if (c === '\\') {
        s += p.substring(i, j);
        s += p.substring(++j, ++j);
        i = j;
      } else if (c === q) {
        push();
        q = null;
        b = -1;
      } else if (q) {
        continue;
      } else if (i === b && c === '"') {
        i = j + 1;
        q = c;
      } else if (i === b && c === "'") {
        i = j + 1;
        q = c;
      } else if (c === '.' && !b) {
        if (j > i) {
          push();
        } else {
          i = j + 1;
        }
      } else if (c === '[') {
        if (j > i) push();
        b = i = j + 1;
      } else if (c === ']') {
        if (!b) error('Access path missing open bracket: ' + p);
        if (b > 0) push();
        b = 0;
        i = j + 1;
      }
    }

    if (b) error('Access path missing closing bracket: ' + p);
    if (q) error('Access path missing closing quote: ' + p);

    if (j > i) {
      j++;
      push();
    }

    return path;
  }

  var isArray = Array.isArray;

  function isObject (_) {
    return _ === Object(_);
  }

  function isString (_) {
    return typeof _ === 'string';
  }

  function $(x) {
    return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString(x) ? // Output valid JSON and JS source strings.
    // See http://timelessrepo.com/json-isnt-a-javascript-subset
    JSON.stringify(x).replace("\u2028", "\\u2028").replace("\u2029", "\\u2029") : x;
  }

  function field (field, name) {
    var path = splitAccessPath(field),
        code = 'return _[' + path.map($).join('][') + '];';
    return accessor(Function('_', code), [field = path.length === 1 ? path[0] : field], name || field);
  }

  var empty = [];
  var id = field('id');
  var identity = accessor(function (_) {
    return _;
  }, empty, 'identity');
  var zero = accessor(function () {
    return 0;
  }, empty, 'zero');
  var one = accessor(function () {
    return 1;
  }, empty, 'one');
  var truthy = accessor(function () {
    return true;
  }, empty, 'true');
  var falsy = accessor(function () {
    return false;
  }, empty, 'false');

  function log(method, level, input) {
    var args = [level].concat([].slice.call(input));
    console[method].apply(console, args); // eslint-disable-line no-console
  }

  var None = 0;
  var Error$1 = 1;
  var Warn = 2;
  var Info = 3;
  var Debug = 4;
  function logger (_, method) {
    var _level = _ || None;

    return {
      level: function level(_) {
        if (arguments.length) {
          _level = +_;
          return this;
        } else {
          return _level;
        }
      },
      error: function error() {
        if (_level >= Error$1) log(method || 'error', 'ERROR', arguments);
        return this;
      },
      warn: function warn() {
        if (_level >= Warn) log(method || 'warn', 'WARN', arguments);
        return this;
      },
      info: function info() {
        if (_level >= Info) log(method || 'log', 'INFO', arguments);
        return this;
      },
      debug: function debug() {
        if (_level >= Debug) log(method || 'log', 'DEBUG', arguments);
        return this;
      }
    };
  }

  var isLegalKey = function isLegalKey(key) {
    return key !== '__proto__';
  };

  function mergeConfig() {
    for (var _len = arguments.length, configs = new Array(_len), _key = 0; _key < _len; _key++) {
      configs[_key] = arguments[_key];
    }

    return configs.reduce(function (out, source) {
      for (var key in source) {
        if (key === 'signals') {
          // for signals, we merge the signals arrays
          // source signals take precedence over
          // existing signals with the same name
          out.signals = mergeNamed(out.signals, source.signals);
        } else {
          // otherwise, merge objects subject to recursion constraints
          // for legend block, recurse for the layout entry only
          // for style block, recurse for all properties
          // otherwise, no recursion: objects overwrite, no merging
          var r = key === 'legend' ? {
            layout: 1
          } : key === 'style' ? true : null;
          writeConfig(out, key, source[key], r);
        }
      }

      return out;
    }, {});
  }
  function writeConfig(output, key, value, recurse) {
    if (!isLegalKey(key)) return;
    var k, o;

    if (isObject(value) && !isArray(value)) {
      o = isObject(output[key]) ? output[key] : output[key] = {};

      for (k in value) {
        if (recurse && (recurse === true || recurse[k])) {
          writeConfig(o, k, value[k]);
        } else if (isLegalKey(k)) {
          o[k] = value[k];
        }
      }
    } else {
      output[key] = value;
    }
  }

  function mergeNamed(a, b) {
    if (a == null) return b;
    var map = {},
        out = [];

    function add(_) {
      if (!map[_.name]) {
        map[_.name] = 1;
        out.push(_);
      }
    }

    b.forEach(add);
    a.forEach(add);
    return out;
  }

  function peek (array) {
    return array[array.length - 1];
  }

  function toNumber (_) {
    return _ == null || _ === '' ? null : +_;
  }

  function exp(sign) {
    return function (x) {
      return sign * Math.exp(x);
    };
  }

  function log$1(sign) {
    return function (x) {
      return Math.log(sign * x);
    };
  }

  function symlog(c) {
    return function (x) {
      return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
  }

  function symexp(c) {
    return function (x) {
      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
  }

  function pow(exponent) {
    return function (x) {
      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
  }

  function pan(domain, delta, lift, ground) {
    var d0 = lift(domain[0]),
        d1 = lift(peek(domain)),
        dd = (d1 - d0) * delta;
    return [ground(d0 - dd), ground(d1 - dd)];
  }

  function panLinear(domain, delta) {
    return pan(domain, delta, toNumber, identity);
  }
  function panLog(domain, delta) {
    var sign = Math.sign(domain[0]);
    return pan(domain, delta, log$1(sign), exp(sign));
  }
  function panPow(domain, delta, exponent) {
    return pan(domain, delta, pow(exponent), pow(1 / exponent));
  }
  function panSymlog(domain, delta, constant) {
    return pan(domain, delta, symlog(constant), symexp(constant));
  }

  function zoom(domain, anchor, scale, lift, ground) {
    var d0 = lift(domain[0]),
        d1 = lift(peek(domain)),
        da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
    return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];
  }

  function zoomLinear(domain, anchor, scale) {
    return zoom(domain, anchor, scale, toNumber, identity);
  }
  function zoomLog(domain, anchor, scale) {
    var sign = Math.sign(domain[0]);
    return zoom(domain, anchor, scale, log$1(sign), exp(sign));
  }
  function zoomPow(domain, anchor, scale, exponent) {
    return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));
  }
  function zoomSymlog(domain, anchor, scale, constant) {
    return zoom(domain, anchor, scale, symlog(constant), symexp(constant));
  }

  function quarter(date) {
    return 1 + ~~(new Date(date).getMonth() / 3);
  }
  function utcquarter(date) {
    return 1 + ~~(new Date(date).getUTCMonth() / 3);
  }

  function array (_) {
    return _ != null ? isArray(_) ? _ : [_] : [];
  }

  /**
   * Span-preserving range clamp. If the span of the input range is less
   * than (max - min) and an endpoint exceeds either the min or max value,
   * the range is translated such that the span is preserved and one
   * endpoint touches the boundary of the min/max range.
   * If the span exceeds (max - min), the range [min, max] is returned.
   */
  function clampRange (range, min, max) {
    var lo = range[0],
        hi = range[1],
        span;

    if (hi < lo) {
      span = hi;
      hi = lo;
      lo = span;
    }

    span = hi - lo;
    return span >= max - min ? [min, max] : [lo = Math.min(Math.max(lo, min), max - span), lo + span];
  }

  function isFunction (_) {
    return typeof _ === 'function';
  }

  function compare$2 (fields, orders) {
    var idx = [],
        cmp = (fields = array(fields)).map(function (f, i) {
      if (f == null) {
        return null;
      } else {
        idx.push(i);
        return isFunction(f) ? f : splitAccessPath(f).map($).join('][');
      }
    }),
        n = idx.length - 1,
        ord = array(orders),
        code = 'var u,v;return ',
        i,
        j,
        f,
        u,
        v,
        d,
        t,
        lt,
        gt;
    if (n < 0) return null;

    for (j = 0; j <= n; ++j) {
      i = idx[j];
      f = cmp[i];

      if (isFunction(f)) {
        d = 'f' + i;
        u = '(u=this.' + d + '(a))';
        v = '(v=this.' + d + '(b))';
        (t = t || {})[d] = f;
      } else {
        u = '(u=a[' + f + '])';
        v = '(v=b[' + f + '])';
      }

      d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';

      if (ord[i] !== 'descending') {
        gt = 1;
        lt = -1;
      } else {
        gt = -1;
        lt = 1;
      }

      code += '(' + u + '<' + v + '||u==null)&&v!=null?' + lt + ':(u>v||v==null)&&u!=null?' + gt + ':' + d + '!==u&&v===v?' + lt + ':v!==v&&u===u?' + gt + (i < n ? ':' : ':0');
    }

    f = Function('a', 'b', code + ';');
    if (t) f = f.bind(t);
    fields = fields.reduce(function (map, field) {
      if (isFunction(field)) {
        (accessorFields(field) || []).forEach(function (_) {
          map[_] = 1;
        });
      } else if (field != null) {
        map[field + ''] = 1;
      }

      return map;
    }, {});
    return accessor(f, Object.keys(fields));
  }

  function constant (_) {
    return isFunction(_) ? _ : function () {
      return _;
    };
  }

  function debounce (delay, handler) {
    var tid, evt;

    function callback() {
      handler(evt);
      tid = evt = null;
    }

    return function (e) {
      evt = e;
      if (tid) clearTimeout(tid);
      tid = setTimeout(callback, delay);
    };
  }

  function extend (_) {
    for (var x, k, i = 1, len = arguments.length; i < len; ++i) {
      x = arguments[i];

      for (k in x) {
        _[k] = x[k];
      }
    }

    return _;
  }

  /**
   * Return an array with minimum and maximum values, in the
   * form [min, max]. Ignores null, undefined, and NaN values.
   */
  function extent (array, f) {
    var i = 0,
        n,
        v,
        min,
        max;

    if (array && (n = array.length)) {
      if (f == null) {
        // find first valid value
        for (v = array[i]; i < n && (v == null || v !== v); v = array[++i]) {
        }

        min = max = v; // visit all other values

        for (; i < n; ++i) {
          v = array[i]; // skip null/undefined; NaN will fail all comparisons

          if (v != null) {
            if (v < min) min = v;
            if (v > max) max = v;
          }
        }
      } else {
        // find first valid value
        for (v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i])) {
        }

        min = max = v; // visit all other values

        for (; i < n; ++i) {
          v = f(array[i]); // skip null/undefined; NaN will fail all comparisons

          if (v != null) {
            if (v < min) min = v;
            if (v > max) max = v;
          }
        }
      }
    }

    return [min, max];
  }

  function extentIndex (array, f) {
    var i = -1,
        n = array.length,
        a,
        b,
        c,
        u,
        v;

    if (f == null) {
      while (++i < n) {
        b = array[i];

        if (b != null && b >= b) {
          a = c = b;
          break;
        }
      }

      if (i === n) return [-1, -1];
      u = v = i;

      while (++i < n) {
        b = array[i];

        if (b != null) {
          if (a > b) {
            a = b;
            u = i;
          }

          if (c < b) {
            c = b;
            v = i;
          }
        }
      }
    } else {
      while (++i < n) {
        b = f(array[i], i, array);

        if (b != null && b >= b) {
          a = c = b;
          break;
        }
      }

      if (i === n) return [-1, -1];
      u = v = i;

      while (++i < n) {
        b = f(array[i], i, array);

        if (b != null) {
          if (a > b) {
            a = b;
            u = i;
          }

          if (c < b) {
            c = b;
            v = i;
          }
        }
      }
    }

    return [u, v];
  }

  var hop = Object.prototype.hasOwnProperty;
  function hasOwnProperty$1 (object, property) {
    return hop.call(object, property);
  }

  var NULL = {};
  function fastmap (input) {
    var obj = {},
        map,
        _test;

    function has(key) {
      return hasOwnProperty$1(obj, key) && obj[key] !== NULL;
    }

    map = {
      size: 0,
      empty: 0,
      object: obj,
      has: has,
      get: function get(key) {
        return has(key) ? obj[key] : undefined;
      },
      set: function set(key, value) {
        if (!has(key)) {
          ++map.size;
          if (obj[key] === NULL) --map.empty;
        }

        obj[key] = value;
        return this;
      },
      delete: function _delete(key) {
        if (has(key)) {
          --map.size;
          ++map.empty;
          obj[key] = NULL;
        }

        return this;
      },
      clear: function clear() {
        map.size = map.empty = 0;
        map.object = obj = {};
      },
      test: function test(_) {
        if (arguments.length) {
          _test = _;
          return map;
        } else {
          return _test;
        }
      },
      clean: function clean() {
        var next = {},
            size = 0,
            key,
            value;

        for (key in obj) {
          value = obj[key];

          if (value !== NULL && (!_test || !_test(value))) {
            next[key] = value;
            ++size;
          }
        }

        map.size = size;
        map.empty = 0;
        map.object = obj = next;
      }
    };
    if (input) Object.keys(input).forEach(function (key) {
      map.set(key, input[key]);
    });
    return map;
  }

  function flush (range, value, threshold, left, right, center) {
    if (!threshold && threshold !== 0) return center;
    var a = range[0],
        b = peek(range),
        t = +threshold,
        l,
        r; // swap endpoints if range is reversed

    if (b < a) {
      l = a;
      a = b;
      b = l;
    } // compare value to endpoints


    l = Math.abs(value - a);
    r = Math.abs(b - value); // adjust if value is within threshold distance of endpoint

    return l < r && l <= t ? left : r <= t ? right : center;
  }

  function inherits (child, parent) {
    var proto = child.prototype = Object.create(parent.prototype);
    proto.constructor = child;
    return proto;
  }

  /**
   * Predicate that returns true if the value lies within the span
   * of the given range. The left and right flags control the use
   * of inclusive (true) or exclusive (false) comparisons.
   */
  function inrange (value, range, left, right) {
    var r0 = range[0],
        r1 = range[range.length - 1],
        t;

    if (r0 > r1) {
      t = r0;
      r0 = r1;
      r1 = t;
    }

    left = left === undefined || left;
    right = right === undefined || right;
    return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);
  }

  function isBoolean (_) {
    return typeof _ === 'boolean';
  }

  function isDate (_) {
    return Object.prototype.toString.call(_) === '[object Date]';
  }

  function isNumber (_) {
    return typeof _ === 'number';
  }

  function isRegExp (_) {
    return Object.prototype.toString.call(_) === '[object RegExp]';
  }

  function key (fields, flat) {
    if (fields) {
      fields = flat ? array(fields).map(function (f) {
        return f.replace(/\\(.)/g, '$1');
      }) : array(fields);
    }

    var fn = !(fields && fields.length) ? function () {
      return '';
    } : Function('_', 'return \'\'+' + fields.map(function (f) {
      return '_[' + (flat ? $(f) : splitAccessPath(f).map($).join('][')) + ']';
    }).join('+\'|\'+') + ';');
    return accessor(fn, fields, 'key');
  }

  function lerp (array, frac) {
    var lo = array[0],
        hi = peek(array),
        f = +frac;
    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
  }

  var DEFAULT_MAX_SIZE = 10000; // adapted from https://github.com/dominictarr/hashlru/ (MIT License)

  function lruCache (maxsize) {
    maxsize = +maxsize || DEFAULT_MAX_SIZE;
    var curr, prev, size;

    var clear = function clear() {
      curr = {};
      prev = {};
      size = 0;
    };

    var update = function update(key, value) {
      if (++size > maxsize) {
        prev = curr;
        curr = {};
        size = 1;
      }

      return curr[key] = value;
    };

    clear();
    return {
      clear: clear,
      has: function has(key) {
        return hasOwnProperty$1(curr, key) || hasOwnProperty$1(prev, key);
      },
      get: function get(key) {
        return hasOwnProperty$1(curr, key) ? curr[key] : hasOwnProperty$1(prev, key) ? update(key, prev[key]) : undefined;
      },
      set: function set(key, value) {
        return hasOwnProperty$1(curr, key) ? curr[key] = value : update(key, value);
      }
    };
  }

  function merge (compare, array0, array1, output) {
    var n0 = array0.length,
        n1 = array1.length;
    if (!n1) return array0;
    if (!n0) return array1;
    var merged = output || new array0.constructor(n0 + n1),
        i0 = 0,
        i1 = 0,
        i = 0;

    for (; i0 < n0 && i1 < n1; ++i) {
      merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];
    }

    for (; i0 < n0; ++i0, ++i) {
      merged[i] = array0[i0];
    }

    for (; i1 < n1; ++i1, ++i) {
      merged[i] = array1[i1];
    }

    return merged;
  }

  function repeat (str, reps) {
    var s = '';

    while (--reps >= 0) {
      s += str;
    }

    return s;
  }

  function pad (str, length, padchar, align) {
    var c = padchar || ' ',
        s = str + '',
        n = length - s.length;
    return n <= 0 ? s : align === 'left' ? repeat(c, n) + s : align === 'center' ? repeat(c, ~~(n / 2)) + s + repeat(c, Math.ceil(n / 2)) : s + repeat(c, n);
  }

  /**
   * Return the numerical span of an array: the difference between
   * the last and first values.
   */

  function span (array) {
    return array && peek(array) - array[0] || 0;
  }

  function toBoolean (_) {
    return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
  }

  function defaultParser(_) {
    return isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
  }

  function toDate (_, parser) {
    parser = parser || defaultParser;
    return _ == null || _ === '' ? null : parser(_);
  }

  function toString (_) {
    return _ == null || _ === '' ? null : _ + '';
  }

  function toSet (_) {
    for (var s = {}, i = 0, n = _.length; i < n; ++i) {
      s[_[i]] = true;
    }

    return s;
  }

  function truncate (str, length, align, ellipsis) {
    var e = ellipsis != null ? ellipsis : "\u2026",
        s = str + '',
        n = s.length,
        l = Math.max(0, length - e.length);
    return n <= length ? s : align === 'left' ? e + s.slice(n - l) : align === 'center' ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;
  }

  function visitArray (array, filter, visitor) {
    if (array) {
      var i = 0,
          n = array.length,
          t;

      if (filter) {
        for (; i < n; ++i) {
          if (t = filter(array[i])) visitor(t, i, array);
        }
      } else {
        array.forEach(visitor);
      }
    }
  }

  function UniqueList(idFunc) {
    var $ = idFunc || identity,
        list = [],
        ids = {};

    list.add = function (_) {
      var id = $(_);

      if (!ids[id]) {
        ids[id] = 1;
        list.push(_);
      }

      return list;
    };

    list.remove = function (_) {
      var id = $(_),
          idx;

      if (ids[id]) {
        ids[id] = 0;

        if ((idx = list.indexOf(_)) >= 0) {
          list.splice(idx, 1);
        }
      }

      return list;
    };

    return list;
  }

  function __async(g) {
    return new Promise(function (s, j) {
      function c(a, x) {
        try {
          var r = g[x ? "throw" : "next"](a);
        } catch (e) {
          j(e);
          return;
        }

        r.done ? s(r.value) : Promise.resolve(r.value).then(c, d);
      }

      function d(e) {
        c(e, 1);
      }

      c();
    });
  }

  /**
   * Invoke and await a potentially async callback function. If
   * an error occurs, trap it and route to Dataflow.error.
   * @param {Dataflow} df - The dataflow instance
   * @param {function} callback - A callback function to invoke
   *   and then await. The dataflow will be passed as the single
   *   argument to the function.
   */

  function asyncCallback (df, callback) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return callback(df);

            case 3:
              _context.next = 8;
              break;

            case 5:
              _context.prev = 5;
              _context.t0 = _context["catch"](0);
              df.error(_context.t0);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 5]]);
    })());
  }

  var TUPLE_ID_KEY = Symbol('vega_id'),
      TUPLE_ID = 1;
  /**
   * Checks if an input value is a registered tuple.
   * @param {*} t - The value to check.
   * @return {boolean} True if the input is a tuple, false otherwise.
   */

  function isTuple(t) {
    return !!(t && tupleid(t));
  }
  /**
   * Returns the id of a tuple.
   * @param {object} t - The input tuple.
   * @return {*} the tuple id.
   */

  function tupleid(t) {
    return t[TUPLE_ID_KEY];
  }
  /**
   * Sets the id of a tuple.
   * @param {object} t - The input tuple.
   * @param {*} id - The id value to set.
   * @return {object} the input tuple.
   */

  function setid(t, id) {
    t[TUPLE_ID_KEY] = id;
    return t;
  }
  /**
   * Ingest an object or value as a data tuple.
   * If the input value is an object, an id field will be added to it. For
   * efficiency, the input object is modified directly. A copy is not made.
   * If the input value is a literal, it will be wrapped in a new object
   * instance, with the value accessible as the 'data' property.
   * @param datum - The value to ingest.
   * @return {object} The ingested data tuple.
   */


  function ingest(datum) {
    var t = datum === Object(datum) ? datum : {
      data: datum
    };
    return tupleid(t) ? t : setid(t, TUPLE_ID++);
  }
  /**
   * Given a source tuple, return a derived copy.
   * @param {object} t - The source tuple.
   * @return {object} The derived tuple.
   */

  function derive(t) {
    return rederive(t, ingest({}));
  }
  /**
   * Rederive a derived tuple by copying values from the source tuple.
   * @param {object} t - The source tuple.
   * @param {object} d - The derived tuple.
   * @return {object} The derived tuple.
   */

  function rederive(t, d) {
    for (var k in t) {
      d[k] = t[k];
    }

    return d;
  }
  /**
   * Replace an existing tuple with a new tuple.
   * @param {object} t - The existing data tuple.
   * @param {object} d - The new tuple that replaces the old.
   * @return {object} The new tuple.
   */

  function replace(t, d) {
    return setid(d, tupleid(t));
  }
  /**
   * Generate an augmented comparator function that provides stable
   * sorting by tuple id when the given comparator produces ties.
   * @param {function} cmp - The comparator to augment.
   * @param {function} [f] - Optional tuple accessor function.
   * @return {function} An augmented comparator function.
   */

  function stableCompare(cmp, f) {
    return !cmp ? null : f ? function (a, b) {
      return cmp(a, b) || tupleid(f(a)) - tupleid(f(b));
    } : function (a, b) {
      return cmp(a, b) || tupleid(a) - tupleid(b);
    };
  }

  function isChangeSet(v) {
    return v && v.constructor === changeset;
  }
  function changeset() {
    var add = [],
        // insert tuples
    rem = [],
        // remove tuples
    mod = [],
        // modify tuples
    remp = [],
        // remove by predicate
    modp = [],
        // modify by predicate
    _reflow = false;
    return {
      constructor: changeset,
      insert: function insert(t) {
        var d = array(t),
            i = 0,
            n = d.length;

        for (; i < n; ++i) {
          add.push(d[i]);
        }

        return this;
      },
      remove: function remove(t) {
        var a = isFunction(t) ? remp : rem,
            d = array(t),
            i = 0,
            n = d.length;

        for (; i < n; ++i) {
          a.push(d[i]);
        }

        return this;
      },
      modify: function modify(t, field, value) {
        var m = {
          field: field,
          value: constant(value)
        };

        if (isFunction(t)) {
          m.filter = t;
          modp.push(m);
        } else {
          m.tuple = t;
          mod.push(m);
        }

        return this;
      },
      encode: function encode(t, set) {
        if (isFunction(t)) modp.push({
          filter: t,
          field: set
        });else mod.push({
          tuple: t,
          field: set
        });
        return this;
      },
      reflow: function reflow() {
        _reflow = true;
        return this;
      },
      pulse: function pulse(_pulse, tuples) {
        var cur = {},
            out = {},
            i,
            n,
            m,
            f,
            t,
            id; // build lookup table of current tuples

        for (i = 0, n = tuples.length; i < n; ++i) {
          cur[tupleid(tuples[i])] = 1;
        } // process individual tuples to remove


        for (i = 0, n = rem.length; i < n; ++i) {
          t = rem[i];
          cur[tupleid(t)] = -1;
        } // process predicate-based removals


        for (i = 0, n = remp.length; i < n; ++i) {
          f = remp[i];
          tuples.forEach(function (t) {
            if (f(t)) cur[tupleid(t)] = -1;
          });
        } // process all add tuples


        for (i = 0, n = add.length; i < n; ++i) {
          t = add[i];
          id = tupleid(t);

          if (cur[id]) {
            // tuple already resides in dataset
            // if flagged for both add and remove, cancel
            cur[id] = 1;
          } else {
            // tuple does not reside in dataset, add
            _pulse.add.push(ingest(add[i]));
          }
        } // populate pulse rem list


        for (i = 0, n = tuples.length; i < n; ++i) {
          t = tuples[i];
          if (cur[tupleid(t)] < 0) _pulse.rem.push(t);
        } // modify helper method


        function modify(t, f, v) {
          if (v) {
            t[f] = v(t);
          } else {
            _pulse.encode = f;
          }

          if (!_reflow) out[tupleid(t)] = t;
        } // process individual tuples to modify


        for (i = 0, n = mod.length; i < n; ++i) {
          m = mod[i];
          t = m.tuple;
          f = m.field;
          id = cur[tupleid(t)];

          if (id > 0) {
            modify(t, f, m.value);

            _pulse.modifies(f);
          }
        } // process predicate-based modifications


        for (i = 0, n = modp.length; i < n; ++i) {
          m = modp[i];
          f = m.filter;
          tuples.forEach(function (t) {
            if (f(t) && cur[tupleid(t)] > 0) {
              modify(t, m.field, m.value);
            }
          });

          _pulse.modifies(m.field);
        } // upon reflow request, populate mod with all non-removed tuples
        // otherwise, populate mod with modified tuples only


        if (_reflow) {
          _pulse.mod = rem.length || remp.length ? tuples.filter(function (t) {
            return cur[tupleid(t)] > 0;
          }) : tuples.slice();
        } else {
          for (id in out) {
            _pulse.mod.push(out[id]);
          }
        }

        return _pulse;
      }
    };
  }

  var CACHE = '_:mod:_';
  /**
   * Hash that tracks modifications to assigned values.
   * Callers *must* use the set method to update values.
   */

  function Parameters() {
    Object.defineProperty(this, CACHE, {
      writable: true,
      value: {}
    });
  }
  var prototype = Parameters.prototype;
  /**
   * Set a parameter value. If the parameter value changes, the parameter
   * will be recorded as modified.
   * @param {string} name - The parameter name.
   * @param {number} index - The index into an array-value parameter. Ignored if
   *   the argument is undefined, null or less than zero.
   * @param {*} value - The parameter value to set.
   * @param {boolean} [force=false] - If true, records the parameter as modified
   *   even if the value is unchanged.
   * @return {Parameters} - This parameter object.
   */

  prototype.set = function (name, index, value, force) {
    var o = this,
        v = o[name],
        mod = o[CACHE];

    if (index != null && index >= 0) {
      if (v[index] !== value || force) {
        v[index] = value;
        mod[index + ':' + name] = -1;
        mod[name] = -1;
      }
    } else if (v !== value || force) {
      o[name] = value;
      mod[name] = isArray(value) ? 1 + value.length : -1;
    }

    return o;
  };
  /**
   * Tests if one or more parameters has been modified. If invoked with no
   * arguments, returns true if any parameter value has changed. If the first
   * argument is array, returns trues if any parameter name in the array has
   * changed. Otherwise, tests if the given name and optional array index has
   * changed.
   * @param {string} name - The parameter name to test.
   * @param {number} [index=undefined] - The parameter array index to test.
   * @return {boolean} - Returns true if a queried parameter was modified.
   */


  prototype.modified = function (name, index) {
    var mod = this[CACHE],
        k;

    if (!arguments.length) {
      for (k in mod) {
        if (mod[k]) return true;
      }

      return false;
    } else if (isArray(name)) {
      for (k = 0; k < name.length; ++k) {
        if (mod[name[k]]) return true;
      }

      return false;
    }

    return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];
  };
  /**
   * Clears the modification records. After calling this method,
   * all parameters are considered unmodified.
   */


  prototype.clear = function () {
    this[CACHE] = {};
    return this;
  };

  var OP_ID = 0;
  var PULSE = 'pulse';
  var NO_PARAMS = new Parameters(); // Boolean Flags

  var SKIP = 1,
      MODIFIED = 2;
  /**
   * An Operator is a processing node in a dataflow graph.
   * Each operator stores a value and an optional value update function.
   * Operators can accept a hash of named parameters. Parameter values can
   * either be direct (JavaScript literals, arrays, objects) or indirect
   * (other operators whose values will be pulled dynamically). Operators
   * included as parameters will have this operator added as a dependency.
   * @constructor
   * @param {*} [init] - The initial value for this operator.
   * @param {function(object, Pulse)} [update] - An update function. Upon
   *   evaluation of this operator, the update function will be invoked and the
   *   return value will be used as the new value of this operator.
   * @param {object} [params] - The parameters for this operator.
   * @param {boolean} [react=true] - Flag indicating if this operator should
   *   listen for changes to upstream operators included as parameters.
   * @see parameters
   */

  function Operator(init, update, params, react) {
    this.id = ++OP_ID;
    this.value = init;
    this.stamp = -1;
    this.rank = -1;
    this.qrank = -1;
    this.flags = 0;

    if (update) {
      this._update = update;
    }

    if (params) this.parameters(params, react);
  }
  var prototype$1 = Operator.prototype;
  /**
   * Returns a list of target operators dependent on this operator.
   * If this list does not exist, it is created and then returned.
   * @return {UniqueList}
   */

  prototype$1.targets = function () {
    return this._targets || (this._targets = UniqueList(id));
  };
  /**
   * Sets the value of this operator.
   * @param {*} value - the value to set.
   * @return {Number} Returns 1 if the operator value has changed
   *   according to strict equality, returns 0 otherwise.
   */


  prototype$1.set = function (value) {
    if (this.value !== value) {
      this.value = value;
      return 1;
    } else {
      return 0;
    }
  };

  function flag(bit) {
    return function (state) {
      var f = this.flags;
      if (arguments.length === 0) return !!(f & bit);
      this.flags = state ? f | bit : f & ~bit;
      return this;
    };
  }
  /**
   * Indicates that operator evaluation should be skipped on the next pulse.
   * This operator will still propagate incoming pulses, but its update function
   * will not be invoked. The skip flag is reset after every pulse, so calling
   * this method will affect processing of the next pulse only.
   */


  prototype$1.skip = flag(SKIP);
  /**
   * Indicates that this operator's value has been modified on its most recent
   * pulse. Normally modification is checked via strict equality; however, in
   * some cases it is more efficient to update the internal state of an object.
   * In those cases, the modified flag can be used to trigger propagation. Once
   * set, the modification flag persists across pulses until unset. The flag can
   * be used with the last timestamp to test if a modification is recent.
   */

  prototype$1.modified = flag(MODIFIED);
  /**
   * Sets the parameters for this operator. The parameter values are analyzed for
   * operator instances. If found, this operator will be added as a dependency
   * of the parameterizing operator. Operator values are dynamically marshalled
   * from each operator parameter prior to evaluation. If a parameter value is
   * an array, the array will also be searched for Operator instances. However,
   * the search does not recurse into sub-arrays or object properties.
   * @param {object} params - A hash of operator parameters.
   * @param {boolean} [react=true] - A flag indicating if this operator should
   *   automatically update (react) when parameter values change. In other words,
   *   this flag determines if the operator registers itself as a listener on
   *   any upstream operators included in the parameters.
   * @param {boolean} [initonly=false] - A flag indicating if this operator
   *   should calculate an update only upon its initiatal evaluation, then
   *   deregister dependencies and suppress all future update invocations.
   * @return {Operator[]} - An array of upstream dependencies.
   */

  prototype$1.parameters = function (params, react, initonly) {
    react = react !== false;
    var self = this,
        argval = self._argval = self._argval || new Parameters(),
        argops = self._argops = self._argops || [],
        deps = [],
        name,
        value,
        n,
        i;

    function add(name, index, value) {
      if (value instanceof Operator) {
        if (value !== self) {
          if (react) value.targets().add(self);
          deps.push(value);
        }

        argops.push({
          op: value,
          name: name,
          index: index
        });
      } else {
        argval.set(name, index, value);
      }
    }

    for (name in params) {
      value = params[name];

      if (name === PULSE) {
        array(value).forEach(function (op) {
          if (!(op instanceof Operator)) {
            error('Pulse parameters must be operator instances.');
          } else if (op !== self) {
            op.targets().add(self);
            deps.push(op);
          }
        });
        self.source = value;
      } else if (isArray(value)) {
        argval.set(name, -1, Array(n = value.length));

        for (i = 0; i < n; ++i) {
          add(name, i, value[i]);
        }
      } else {
        add(name, -1, value);
      }
    }

    this.marshall().clear(); // initialize values

    if (initonly) argops.initonly = true;
    return deps;
  };
  /**
   * Internal method for marshalling parameter values.
   * Visits each operator dependency to pull the latest value.
   * @return {Parameters} A Parameters object to pass to the update function.
   */


  prototype$1.marshall = function (stamp) {
    var argval = this._argval || NO_PARAMS,
        argops = this._argops,
        item,
        i,
        n,
        op,
        mod;

    if (argops) {
      for (i = 0, n = argops.length; i < n; ++i) {
        item = argops[i];
        op = item.op;
        mod = op.modified() && op.stamp === stamp;
        argval.set(item.name, item.index, op.value, mod);
      }

      if (argops.initonly) {
        for (i = 0; i < n; ++i) {
          item = argops[i];
          item.op.targets().remove(this);
        }

        this._argops = null;
        this._update = null;
      }
    }

    return argval;
  };
  /**
   * Delegate method to perform operator processing.
   * Subclasses can override this method to perform custom processing.
   * By default, it marshalls parameters and calls the update function
   * if that function is defined. If the update function does not
   * change the operator value then StopPropagation is returned.
   * If no update function is defined, this method does nothing.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return The output pulse or StopPropagation. A falsy return value
   *   (including undefined) will let the input pulse pass through.
   */


  prototype$1.evaluate = function (pulse) {
    var update = this._update;

    if (update) {
      var params = this.marshall(pulse.stamp),
          v = update.call(this, params, pulse);
      params.clear();

      if (v !== this.value) {
        this.value = v;
      } else if (!this.modified()) {
        return pulse.StopPropagation;
      }
    }
  };
  /**
   * Run this operator for the current pulse. If this operator has already
   * been run at (or after) the pulse timestamp, returns StopPropagation.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */


  prototype$1.run = function (pulse) {
    if (pulse.stamp < this.stamp) return pulse.StopPropagation;
    var rv;

    if (this.skip()) {
      this.skip(false);
      rv = 0;
    } else {
      rv = this.evaluate(pulse);
    }

    return this.pulse = rv || pulse;
  };

  /**
   * Add an operator to the dataflow graph. This function accepts a
   * variety of input argument types. The basic signature supports an
   * initial value, update function and parameters. If the first parameter
   * is an Operator instance, it will be added directly. If it is a
   * constructor for an Operator subclass, a new instance will be instantiated.
   * Otherwise, if the first parameter is a function instance, it will be used
   * as the update function and a null initial value is assumed.
   * @param {*} init - One of: the operator to add, the initial value of
   *   the operator, an operator class to instantiate, or an update function.
   * @param {function} [update] - The operator update function.
   * @param {object} [params] - The operator parameters.
   * @param {boolean} [react=true] - Flag indicating if this operator should
   *   listen for changes to upstream operators included as parameters.
   * @return {Operator} - The added operator.
   */

  function add (init, update, params, react) {
    var shift = 1,
        op;

    if (init instanceof Operator) {
      op = init;
    } else if (init && init.prototype instanceof Operator) {
      op = new init();
    } else if (isFunction(init)) {
      op = new Operator(null, init);
    } else {
      shift = 0;
      op = new Operator(init, update);
    }

    this.rank(op);

    if (shift) {
      react = params;
      params = update;
    }

    if (params) this.connect(op, op.parameters(params, react));
    this.touch(op);
    return op;
  }

  /**
   * Connect a target operator as a dependent of source operators.
   * If necessary, this method will rerank the target operator and its
   * dependents to ensure propagation proceeds in a topologically sorted order.
   * @param {Operator} target - The target operator.
   * @param {Array<Operator>} - The source operators that should propagate
   *   to the target operator.
   */
  function connect (target, sources) {
    var targetRank = target.rank,
        i,
        n;

    for (i = 0, n = sources.length; i < n; ++i) {
      if (targetRank < sources[i].rank) {
        this.rerank(target);
        return;
      }
    }
  }

  var STREAM_ID = 0;
  /**
   * Models an event stream.
   * @constructor
   * @param {function(Object, number): boolean} [filter] - Filter predicate.
   *   Events pass through when truthy, events are suppressed when falsy.
   * @param {function(Object): *} [apply] - Applied to input events to produce
   *   new event values.
   * @param {function(Object)} [receive] - Event callback function to invoke
   *   upon receipt of a new event. Use to override standard event processing.
   */

  function EventStream(filter, apply, receive) {
    this.id = ++STREAM_ID;
    this.value = null;
    if (receive) this.receive = receive;
    if (filter) this._filter = filter;
    if (apply) this._apply = apply;
  }
  /**
   * Creates a new event stream instance with the provided
   * (optional) filter, apply and receive functions.
   * @param {function(Object, number): boolean} [filter] - Filter predicate.
   *   Events pass through when truthy, events are suppressed when falsy.
   * @param {function(Object): *} [apply] - Applied to input events to produce
   *   new event values.
   * @see EventStream
   */

  function stream(filter, apply, receive) {
    return new EventStream(filter, apply, receive);
  }
  var prototype$2 = EventStream.prototype;
  prototype$2._filter = truthy;
  prototype$2._apply = identity;

  prototype$2.targets = function () {
    return this._targets || (this._targets = UniqueList(id));
  };

  prototype$2.consume = function (_) {
    if (!arguments.length) return !!this._consume;
    this._consume = !!_;
    return this;
  };

  prototype$2.receive = function (evt) {
    if (this._filter(evt)) {
      var val = this.value = this._apply(evt),
          trg = this._targets,
          n = trg ? trg.length : 0,
          i = 0;

      for (; i < n; ++i) {
        trg[i].receive(val);
      }

      if (this._consume) {
        evt.preventDefault();
        evt.stopPropagation();
      }
    }
  };

  prototype$2.filter = function (filter) {
    var s = stream(filter);
    this.targets().add(s);
    return s;
  };

  prototype$2.apply = function (apply) {
    var s = stream(null, apply);
    this.targets().add(s);
    return s;
  };

  prototype$2.merge = function () {
    var s = stream();
    this.targets().add(s);

    for (var i = 0, n = arguments.length; i < n; ++i) {
      arguments[i].targets().add(s);
    }

    return s;
  };

  prototype$2.throttle = function (pause) {
    var t = -1;
    return this.filter(function () {
      var now = Date.now();

      if (now - t > pause) {
        t = now;
        return 1;
      } else {
        return 0;
      }
    });
  };

  prototype$2.debounce = function (delay) {
    var s = stream();
    this.targets().add(stream(null, null, debounce(delay, function (e) {
      var df = e.dataflow;
      s.receive(e);
      if (df && df.run) df.run();
    })));
    return s;
  };

  prototype$2.between = function (a, b) {
    var active = false;
    a.targets().add(stream(null, null, function () {
      active = true;
    }));
    b.targets().add(stream(null, null, function () {
      active = false;
    }));
    return this.filter(function () {
      return active;
    });
  };

  /**
   * Create a new event stream from an event source.
   * @param {object} source - The event source to monitor. The input must
   *  support the addEventListener method.
   * @param {string} type - The event type.
   * @param {function(object): boolean} [filter] - Event filter function.
   * @param {function(object): *} [apply] - Event application function.
   *   If provided, this function will be invoked and the result will be
   *   used as the downstream event value.
   * @return {EventStream}
   */

  function events (source, type, filter, apply) {
    var df = this,
        s = stream(filter, apply),
        send = function send(e) {
      e.dataflow = df;

      try {
        s.receive(e);
      } catch (error) {
        df.error(error);
      } finally {
        df.run();
      }
    },
        sources;

    if (typeof source === 'string' && typeof document !== 'undefined') {
      sources = document.querySelectorAll(source);
    } else {
      sources = array(source);
    }

    for (var i = 0, n = sources.length; i < n; ++i) {
      sources[i].addEventListener(type, send);
    }

    return s;
  }

  var domain; // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).

  function EventHandlers() {}

  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  // require('events') === require('events').EventEmitter

  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.usingDomains = false;
  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.

  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function () {
    this.domain = null;

    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  }; // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.


  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  }; // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.


  function emitNone(handler, isFn, self) {
    if (isFn) handler.call(self);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self);
      }
    }
  }

  function emitOne(handler, isFn, self, arg1) {
    if (isFn) handler.call(self, arg1);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self, arg1);
      }
    }
  }

  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn) handler.call(self, arg1, arg2);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self, arg1, arg2);
      }
    }
  }

  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn) handler.call(self, arg1, arg2, arg3);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self, arg1, arg2, arg3);
      }
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn) handler.apply(self, args);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].apply(self, args);
      }
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = type === 'error';
    events = this._events;
    if (events) doError = doError && events.error == null;else if (!doError) return false;
    domain = this.domain; // If there is no 'error' event listener then throw.

    if (doError) {
      er = arguments[1];

      if (domain) {
        if (!er) er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }

      return false;
    }

    handler = events[type];
    if (!handler) return false;
    var isFn = typeof handler === 'function';
    len = arguments.length;

    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;

      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;

      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;

      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower

      default:
        args = new Array(len - 1);

        for (i = 1; i < len; i++) {
          args[i - 1] = arguments[i];
        }

        emitMany(handler, isFn, this, args);
    }
    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    events = target._events;

    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object

        events = target._events;
      }

      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      } // Check for listener leak


      if (!existing.warned) {
        m = $getMaxListeners(target);

        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }

  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }

  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
  };

  function _onceWrap(target, type, listener) {
    var fired = false;

    function g() {
      target.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }

    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
  }; // emits a 'removeListener' event iff the listener was removed


  EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    events = this._events;
    if (!events) return this;
    list = events[type];
    if (!list) return this;

    if (list === listener || list.listener && list.listener === listener) {
      if (--this._eventsCount === 0) this._events = new EventHandlers();else {
        delete events[type];
        if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
      }
    } else if (typeof list !== 'function') {
      position = -1;

      for (i = list.length; i-- > 0;) {
        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
          originalListener = list[i].listener;
          position = i;
          break;
        }
      }

      if (position < 0) return this;

      if (list.length === 1) {
        list[0] = undefined;

        if (--this._eventsCount === 0) {
          this._events = new EventHandlers();
          return this;
        } else {
          delete events[type];
        }
      } else {
        spliceOne(list, position);
      }

      if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events;
    events = this._events;
    if (!events) return this; // not listening for removeListener, no need to emit

    if (!events.removeListener) {
      if (arguments.length === 0) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      } else if (events[type]) {
        if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
      }

      return this;
    } // emit removeListener for all listeners on all events


    if (arguments.length === 0) {
      var keys = Object.keys(events);

      for (var i = 0, key; i < keys.length; ++i) {
        key = keys[i];
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }

      this.removeAllListeners('removeListener');
      this._events = new EventHandlers();
      this._eventsCount = 0;
      return this;
    }

    listeners = events[type];

    if (typeof listeners === 'function') {
      this.removeListener(type, listeners);
    } else if (listeners) {
      // LIFO order
      do {
        this.removeListener(type, listeners[listeners.length - 1]);
      } while (listeners[0]);
    }

    return this;
  };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;
    if (!events) ret = [];else {
      evlistener = events[type];
      if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
    }
    return ret;
  };

  EventEmitter.listenerCount = function (emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;

  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  }; // About 1.5x faster than the two-arg version of Array#splice().


  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
      list[i] = list[k];
    }

    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);

    while (i--) {
      copy[i] = arr[i];
    }

    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);

    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }

    return ret;
  }

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js
  function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
  }

  function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
  }

  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;

  if (typeof global.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
  }

  if (typeof global.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
      //normal enviroments in sane situations
      return setTimeout(fun, 0);
    } // if setTimeout wasn't available but was latter defined


    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
      cachedSetTimeout = setTimeout;
      return setTimeout(fun, 0);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedSetTimeout(fun, 0);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
        return cachedSetTimeout.call(null, fun, 0);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
        return cachedSetTimeout.call(this, fun, 0);
      }
    }
  }

  function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
      //normal enviroments in sane situations
      return clearTimeout(marker);
    } // if clearTimeout wasn't available but was latter defined


    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
      cachedClearTimeout = clearTimeout;
      return clearTimeout(marker);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedClearTimeout(marker);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
        return cachedClearTimeout.call(null, marker);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
        return cachedClearTimeout.call(this, marker);
      }
    }
  }

  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }

    draining = false;

    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }

    if (queue.length) {
      drainQueue();
    }
  }

  function drainQueue() {
    if (draining) {
      return;
    }

    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;

    while (len) {
      currentQueue = queue;
      queue = [];

      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }

      queueIndex = -1;
      len = queue.length;
    }

    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
  }

  function nextTick(fun) {
    var args = new Array(arguments.length - 1);

    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }

    queue.push(new Item(fun, args));

    if (queue.length === 1 && !draining) {
      runTimeout(drainQueue);
    }
  } // v8 likes predictible objects

  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }

  Item.prototype.run = function () {
    this.fun.apply(null, this.array);
  };

  var inherits$1;

  if (typeof Object.create === 'function') {
    inherits$1 = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits$1 = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }

  var inherits$2 = inherits$1;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString$1(f)) {
      var objects = [];

      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }

      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function (x) {
      if (x === '%%') return '%';
      if (i >= len) return x;

      switch (x) {
        case '%s':
          return String(args[i++]);

        case '%d':
          return Number(args[i++]);

        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }

        default:
          return x;
      }
    });

    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject$1(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }

    return str;
  }
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.

  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function () {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;

    function deprecated() {
      if (!warned) {
        {
          console.error(msg);
        }

        warned = true;
      }

      return fn.apply(this, arguments);
    }

    return deprecated;
  }
  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron)) debugEnviron =  '';
    set = set.toUpperCase();

    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;

        debugs[set] = function () {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function () {};
      }
    }

    return debugs[set];
  }
  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */

  /* legacy: obj, showHidden, depth, colors*/

  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    }; // legacy...

    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];

    if (isBoolean$1(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    } // set default options


    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  } // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

  inspect.colors = {
    'bold': [1, 22],
    'italic': [3, 23],
    'underline': [4, 24],
    'inverse': [7, 27],
    'white': [37, 39],
    'grey': [90, 39],
    'black': [30, 39],
    'blue': [34, 39],
    'cyan': [36, 39],
    'green': [32, 39],
    'magenta': [35, 39],
    'red': [31, 39],
    'yellow': [33, 39]
  }; // Don't use 'blue' not visible on cmd.exe

  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };

  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};
    array.forEach(function (val, idx) {
      hash[val] = true;
    });
    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction$1(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);

      if (!isString$1(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }

      return ret;
    } // Primitive types cannot have properties


    var primitive = formatPrimitive(ctx, value);

    if (primitive) {
      return primitive;
    } // Look up the keys of the object.


    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    } // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    } // Some type of object without properties can be shortcutted.


    if (keys.length === 0) {
      if (isFunction$1(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }

      if (isRegExp$1(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }

      if (isDate$1(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }

      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}']; // Make Array say that they are Array

    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    } // Make functions say that they are functions


    if (isFunction$1(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    } // Make RegExps say that they are RegExps


    if (isRegExp$1(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    } // Make dates with properties first say the date


    if (isDate$1(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    } // Make error with message first say the error


    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp$1(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);
    var output;

    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

    if (isString$1(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }

    if (isNumber$1(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean$1(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];

    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty$2(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }

    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
      value: value[key]
    };

    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }

    if (!hasOwnProperty$2(visibleKeys, key)) {
      name = '[' + key + ']';
    }

    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }

        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }

    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }

      name = JSON.stringify('' + key);

      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function (prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  } // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.


  function isArray$1(ar) {
    return Array.isArray(ar);
  }
  function isBoolean$1(arg) {
    return typeof arg === 'boolean';
  }
  function isNull(arg) {
    return arg === null;
  }
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  function isNumber$1(arg) {
    return typeof arg === 'number';
  }
  function isString$1(arg) {
    return typeof arg === 'string';
  }
  function isUndefined(arg) {
    return arg === void 0;
  }
  function isRegExp$1(re) {
    return isObject$1(re) && objectToString(re) === '[object RegExp]';
  }
  function isObject$1(arg) {
    return _typeof(arg) === 'object' && arg !== null;
  }
  function isDate$1(d) {
    return isObject$1(d) && objectToString(d) === '[object Date]';
  }
  function isError(e) {
    return isObject$1(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  function isFunction$1(arg) {
    return typeof arg === 'function';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject$1(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;

    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }

    return origin;
  }

  function hasOwnProperty$2(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;

  function init() {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray(b64) {
    if (!inited) {
      init();
    }

    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    } // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice


    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 0xFF;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    if (!inited) {
      init();
    }

    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3
    // go through the array every three bytes, we'll deal with trailing stuff later

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    } // pad the end with zeros, but make sure to not forget the extra bytes


    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 0x3F];
      output += lookup[tmp << 2 & 0x3F];
      output += '=';
    }

    parts.push(output);
    return parts.join('');
  }

  function read(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;

    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;

    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }

    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  }
  function write(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);

      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }

      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }

      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = e << mLen | m;
    eLen += mLen;

    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString$1 = {}.toString;
  var isArray$2 = Array.isArray || function (arr) {
    return toString$1.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  var INSPECT_MAX_BYTES = 50;
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */

  Buffer$1.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : true;

  function kMaxLength() {
    return Buffer$1.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
  }

  function createBuffer(that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length');
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$1(length);
      }

      that.length = length;
    }

    return that;
  }
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */


  function Buffer$1(arg, encodingOrOffset, length) {
    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
      return new Buffer$1(arg, encodingOrOffset, length);
    } // Common case.


    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error('If encoding is specified then the first argument must be a string');
      }

      return allocUnsafe(this, arg);
    }

    return from(this, arg, encodingOrOffset, length);
  }
  Buffer$1.poolSize = 8192; // not used by this implementation
  // TODO: Legacy, not needed anymore. Remove in next major version.

  Buffer$1._augment = function (arr) {
    arr.__proto__ = Buffer$1.prototype;
    return arr;
  };

  function from(that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number');
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length);
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset);
    }

    return fromObject(that, value);
  }
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/


  Buffer$1.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
  };

  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
    Buffer$1.__proto__ = Uint8Array;
  }

  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative');
    }
  }

  function alloc(that, size, fill, encoding) {
    assertSize(size);

    if (size <= 0) {
      return createBuffer(that, size);
    }

    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    }

    return createBuffer(that, size);
  }
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/


  Buffer$1.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding);
  };

  function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }

    return that;
  }
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */


  Buffer$1.allocUnsafe = function (size) {
    return allocUnsafe(null, size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */


  Buffer$1.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size);
  };

  function fromString(that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$1.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding');
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that;
  }

  function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }

    return that;
  }

  function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds');
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds');
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }

    return that;
  }

  function fromObject(that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that;
      }

      obj.copy(that, 0, 0, len);
      return that;
    }

    if (obj) {
      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0);
        }

        return fromArrayLike(that, obj);
      }

      if (obj.type === 'Buffer' && isArray$2(obj.data)) {
        return fromArrayLike(that, obj.data);
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
  }

  function checked(length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
    }

    return length | 0;
  }
  Buffer$1.isBuffer = isBuffer;

  function internalIsBuffer(b) {
    return !!(b != null && b._isBuffer);
  }

  Buffer$1.compare = function compare(a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers');
    }

    if (a === b) return 0;
    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  Buffer$1.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;

      default:
        return false;
    }
  };

  Buffer$1.concat = function concat(list, length) {
    if (!isArray$2(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    if (list.length === 0) {
      return Buffer$1.alloc(0);
    }

    var i;

    if (length === undefined) {
      length = 0;

      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$1.allocUnsafe(length);
    var pos = 0;

    for (i = 0; i < list.length; ++i) {
      var buf = list[i];

      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      buf.copy(buffer, pos);
      pos += buf.length;
    }

    return buffer;
  };

  function byteLength(string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length;
    }

    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength;
    }

    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0; // Use a for loop to avoid recursion

    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;

        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length;

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;

        case 'hex':
          return len >>> 1;

        case 'base64':
          return base64ToBytes(string).length;

        default:
          if (loweredCase) return utf8ToBytes(string).length; // assume utf8

          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer$1.byteLength = byteLength;

  function slowToString(encoding, start, end) {
    var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

    if (start === undefined || start < 0) {
      start = 0;
    } // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.


    if (start > this.length) {
      return '';
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return '';
    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return '';
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);

        case 'ascii':
          return asciiSlice(this, start, end);

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);

        case 'base64':
          return base64Slice(this, start, end);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.


  Buffer$1.prototype._isBuffer = true;

  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$1.prototype.swap16 = function swap16() {
    var len = this.length;

    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }

    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }

    return this;
  };

  Buffer$1.prototype.swap32 = function swap32() {
    var len = this.length;

    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }

    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }

    return this;
  };

  Buffer$1.prototype.swap64 = function swap64() {
    var len = this.length;

    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }

    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }

    return this;
  };

  Buffer$1.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };

  Buffer$1.prototype.equals = function equals(b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer$1.compare(this, b) === 0;
  };

  Buffer$1.prototype.inspect = function inspect() {
    var str = '';
    var max = INSPECT_MAX_BYTES;

    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }

    return '<Buffer ' + str + '>';
  };

  Buffer$1.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer');
    }

    if (start === undefined) {
      start = 0;
    }

    if (end === undefined) {
      end = target ? target.length : 0;
    }

    if (thisStart === undefined) {
      thisStart = 0;
    }

    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }

    if (thisStart >= thisEnd) {
      return -1;
    }

    if (start >= end) {
      return 1;
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf


  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1; // Normalize byteOffset

    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }

    byteOffset = +byteOffset; // Coerce to Number.

    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    } // Normalize byteOffset: negative offsets start from the end of the buffer


    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    } // Normalize val


    if (typeof val === 'string') {
      val = Buffer$1.from(val, encoding);
    } // Finally, search either indexOf (if dir is true) or lastIndexOf


    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }

      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]

      if (Buffer$1.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }

      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }

    throw new TypeError('val must be string, number or Buffer');
  }

  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();

      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }

        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }

    var i;

    if (dir) {
      var foundIndex = -1;

      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

      for (i = byteOffset; i >= 0; i--) {
        var found = true;

        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }

        if (found) return i;
      }
    }

    return -1;
  }

  Buffer$1.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };

  Buffer$1.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };

  Buffer$1.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };

  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;

    if (!length) {
      length = remaining;
    } else {
      length = Number(length);

      if (length > remaining) {
        length = remaining;
      }
    } // must be an even number of digits


    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

    if (length > strLen / 2) {
      length = strLen / 2;
    }

    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }

    return i;
  }

  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }

  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }

  function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }

  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }

  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }

  Buffer$1.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0; // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0; // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;

      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      } // legacy write(string, encoding, offset, length) - remove in v0.13

    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }

    if (!encoding) encoding = 'utf8';
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);

        case 'ascii':
          return asciiWrite(this, string, offset, length);

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length);

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$1.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };

  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf);
    } else {
      return fromByteArray(buf.slice(start, end));
    }
  }

  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;

    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }

            break;

          case 2:
            secondByte = buf[i + 1];

            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }

        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res);
  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety


  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;

    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    } // Decode in chunks to avoid "call stack size exceeded".


    var res = '';
    var i = 0;

    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }

    return res;
  }

  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }

    return ret;
  }

  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }

    return ret;
  }

  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';

    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }

    return out;
  }

  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';

    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }

    return res;
  }

  Buffer$1.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;
    var newBuf;

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$1.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$1(sliceLen, undefined);

      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf;
  };
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */


  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }

  Buffer$1.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val;
  };

  Buffer$1.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;

    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val;
  };

  Buffer$1.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };

  Buffer$1.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };

  Buffer$1.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };

  Buffer$1.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };

  Buffer$1.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };

  Buffer$1.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer$1.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];

    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer$1.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };

  Buffer$1.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer$1.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer$1.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };

  Buffer$1.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };

  Buffer$1.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4);
  };

  Buffer$1.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4);
  };

  Buffer$1.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8);
  };

  Buffer$1.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8);
  };

  function checkInt(buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }

  Buffer$1.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
  };

  function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
    }
  }

  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  Buffer$1.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer$1.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer$1.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  Buffer$1.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer$1.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }

  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }

    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }

  Buffer$1.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };

  Buffer$1.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };

  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }

    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }

  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };

  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


  Buffer$1.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }

    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

    if (end > this.length) end = this.length;

    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    }

    return len;
  }; // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])


  Buffer$1.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }

      if (val.length === 1) {
        var code = val.charCodeAt(0);

        if (code < 256) {
          val = code;
        }
      }

      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }

      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } // Invalid ranges are not set to a default, so can range check early.


    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }

    if (end <= start) {
      return this;
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;

    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$1(val, encoding).toString());
      var len = bytes.length;

      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this;
  }; // HELPER FUNCTIONS
  // ================


  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean(str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

    while (str.length % 4 !== 0) {
      str = str + '=';
    }

    return str;
  }

  function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, '');
  }

  function toHex(n) {
    if (n < 16) return '0' + n.toString(16);
    return n.toString(16);
  }

  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i); // is surrogate component

      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } // valid lead


          leadSurrogate = codePoint;
          continue;
        } // 2 leads in a row


        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        } // valid surrogate pair


        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null; // encode utf8

      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }

    return bytes;
  }

  function asciiToBytes(str) {
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }

    return byteArray;
  }

  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray;
  }

  function base64ToBytes(str) {
    return toByteArray(base64clean(str));
  }

  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }

    return i;
  }

  function isnan(val) {
    return val !== val; // eslint-disable-line no-self-compare
  } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually


  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
  }

  function isFastBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
  } // For Node v0.10 support. Remove this eventually.


  function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
  }

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return Buffer$1.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer$1.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  };

  // Copyright Joyent, Inc. and other Node contributors.

  var isBufferEncoding = Buffer$1.isEncoding || function (encoding) {
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
      case 'raw':
        return true;

      default:
        return false;
    }
  };

  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  } // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.


  function StringDecoder(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);

    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;

      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;

      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;

      default:
        this.write = passThroughWrite;
        return;
    } // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).


    this.charBuffer = new Buffer$1(6); // Number of bytes received for the current incomplete multi-byte character.

    this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.

    this.charLength = 0;
  }
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .

  StringDecoder.prototype.write = function (buffer) {
    var charStr = ''; // if our last write ended with an incomplete multibyte character

    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer

      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      } // remove bytes belonging to the current character from the buffer


      buffer = buffer.slice(available, buffer.length); // get the character that was split

      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

      var charCode = charStr.charCodeAt(charStr.length - 1);

      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }

      this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char

      if (buffer.length === 0) {
        return charStr;
      }

      break;
    } // determine and set charLength / charReceived


    this.detectIncompleteChar(buffer);
    var end = buffer.length;

    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);
    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    } // or just emit the charStr


    return charStr;
  }; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.


  StringDecoder.prototype.detectIncompleteChar = function (buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.

    for (; i > 0; i--) {
      var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
      // 110XXXXX

      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      } // 1110XXXX


      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      } // 11110XXX


      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }

    this.charReceived = i;
  };

  StringDecoder.prototype.end = function (buffer) {
    var res = '';
    if (buffer && buffer.length) res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }

  Readable.ReadableState = ReadableState;
  var debug$1 = debuglog('stream');
  inherits$2(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }
  }

  function listenerCount$1(emitter, type) {
    return emitter.listeners(type).length;
  }

  function ReadableState(options, stream) {
    options = options || {}; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away

    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"

    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

    this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()

    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.

    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.

    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.

    this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.

    this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;

    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    if (!(this instanceof Readable)) return new Readable(options);
    this._readableState = new ReadableState(options, this); // legacy

    this.readable = true;
    if (options && typeof options.read === 'function') this._read = options.read;
    EventEmitter.call(this);
  } // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.

  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  }; // Unshift should *always* be something directly out of read()


  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');

        stream.emit('error', _e);
      } else {
        var skipAdd;

        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode

        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  } // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.


  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  } // backwards compatibility.


  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  }; // Don't raise the hwm > 8MB


  var MAX_HWM = 0x800000;

  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }

    return n;
  } // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;

    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.


    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough

    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }

    return state.length;
  } // you can override either this method, or the async _read(n) below.


  Readable.prototype.read = function (n) {
    debug$1('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.

    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug$1('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.


    var doRead = state.needReadable;
    debug$1('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug$1('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.


    if (state.ended || state.reading) {
      doRead = false;
      debug$1('reading or ended', doRead);
    } else if (doRead) {
      debug$1('do read');
      state.reading = true;
      state.sync = true; // if the length is currently zero, then we *need* a readable event.

      if (state.length === 0) state.needReadable = true; // call internal read method

      this._read(state.highWaterMark);

      state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.

      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);
    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;

    if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }

    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;

    if (state.decoder) {
      var chunk = state.decoder.end();

      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }

    state.ended = true; // emit 'readable' now to make sure it gets picked up.

    emitReadable(stream);
  } // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.


  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;

    if (!state.emittedReadable) {
      debug$1('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug$1('emit readable');
    stream.emit('readable');
    flow(stream);
  } // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.


  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;

    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug$1('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length) // didn't get any data, stop spinning.
        break;else len = state.length;
    }

    state.readingMore = false;
  } // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.


  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;

      case 1:
        state.pipes = [state.pipes, dest];
        break;

      default:
        state.pipes.push(dest);
        break;
    }

    state.pipesCount += 1;
    debug$1('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = !pipeOpts || pipeOpts.end !== false;
    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);
    dest.on('unpipe', onunpipe);

    function onunpipe(readable) {
      debug$1('onunpipe');

      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug$1('onend');
      dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.


    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;

    function cleanup() {
      debug$1('cleanup'); // cleanup event handlers once the pipe is broken

      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);
      cleanedUp = true; // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.

      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    } // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.


    var increasedAwaitDrain = false;
    src.on('data', ondata);

    function ondata(chunk) {
      debug$1('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);

      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug$1('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }

        src.pause();
      }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.


    function onerror(er) {
      debug$1('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
    } // Make sure our error handler is attached before userland ones.


    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }

    dest.once('close', onclose);

    function onfinish() {
      debug$1('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }

    dest.once('finish', onfinish);

    function unpipe() {
      debug$1('unpipe');
      src.unpipe(dest);
    } // tell the dest that it's being piped to


    dest.emit('pipe', src); // start the flow if it hasn't been started already.

    if (!state.flowing) {
      debug$1('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug$1('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;

      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState; // if we're not piping anywhere, then do nothing.

    if (state.pipesCount === 0) return this; // just one destination.  most common case.

    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;
      if (!dest) dest = state.pipes; // got a match.

      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    } // slow case. multiple pipe destinations.


    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }

      return this;
    } // try to find the right one.


    var i = indexOf(state.pipes, dest);
    if (i === -1) return this;
    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this);
    return this;
  }; // set up data events if they are asked for
  // Ensure readable listeners eventually get something


  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;

      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;

        if (!state.reading) {
          nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }

    return res;
  };

  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug$1('readable nexttick read 0');
    self.read(0);
  } // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.


  Readable.prototype.resume = function () {
    var state = this._readableState;

    if (!state.flowing) {
      debug$1('resume');
      state.flowing = true;
      resume(this, state);
    }

    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug$1('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug$1('call pause flowing=%j', this._readableState.flowing);

    if (false !== this._readableState.flowing) {
      debug$1('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }

    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug$1('flow', state.flowing);

    while (state.flowing && stream.read() !== null) {}
  } // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.


  Readable.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;
    var self = this;
    stream.on('end', function () {
      debug$1('wrapped end');

      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });
    stream.on('data', function (chunk) {
      debug$1('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
      var ret = self.push(chunk);

      if (!ret) {
        paused = true;
        stream.pause();
      }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.

    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    } // proxy certain important events.


    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    }); // when we try to consume some more bytes, simply unpause the
    // underlying stream.

    self._read = function (n) {
      debug$1('wrapped _read', n);

      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  }; // exposed for testing purposes only.


  Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.

  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }
    return ret;
  } // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function fromListPartial(n, list, hasStrings) {
    var ret;

    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }

    return ret;
  } // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;

    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;

      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }

        break;
      }

      ++c;
    }

    list.length -= c;
    return ret;
  } // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;

    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;

      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }

        break;
      }

      ++c;
    }

    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.

    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }

    return -1;
  }

  // A bit simpler than readable streams.
  Writable.WritableState = WritableState;
  inherits$2(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {}; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.

    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()

    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

    this.highWaterMark = ~~this.highWaterMark;
    this.needDrain = false; // at the start of calling end()

    this.ending = false; // when end() has been called, and returned

    this.ended = false; // when 'finish' is emitted

    this.finished = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.

    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.

    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.

    this.length = 0; // a flag to see when we're in the middle of a write.

    this.writing = false; // when true all writes will be buffered until .uncork() call

    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.

    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.

    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

    this.onwrite = function (er) {
      onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)


    this.writecb = null; // the amount that is being written when _write is called.

    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted

    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams

    this.prefinished = false; // True if the error was already emitted and should not be thrown again

    this.errorEmitted = false; // count buffered requests

    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two

    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];

    while (current) {
      out.push(current);
      current = current.next;
    }

    return out;
  };
  function Writable(options) {
    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
    this._writableState = new WritableState(options, this); // legacy.

    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;
      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter.call(this);
  } // Otherwise people can pipe Writable streams, which is just wrong.

  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

    stream.emit('error', er);
    nextTick(cb, er);
  } // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.


  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false; // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.

    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }

    if (er) {
      stream.emit('error', er);
      nextTick(cb, er);
      valid = false;
    }

    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }
    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;
    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$1.from(chunk, encoding);
    }

    return chunk;
  } // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.


  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);
    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }

      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick(cb, er);else cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
        nextTick(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  } // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.


  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  } // if there's something in the buffer waiting, then process it


  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;

      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite

      state.pendingcb++;
      state.lastBufferedRequest = null;

      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next; // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.

        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

    if (state.corked) {
      state.corked = 1;
      this.uncork();
    } // ignore unnecessary end() calls.


    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);

    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }

    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);

    if (cb) {
      if (state.finished) nextTick(cb);else stream.once('finish', cb);
    }

    state.ended = true;
    stream.writable = false;
  } // It seems a linked list but it is not
  // there will be only 2 of these for each stream


  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;

      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }

      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$2(Duplex, Readable);
  var keys = Object.keys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false) this.readable = false;
    if (options && options.writable === false) this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
    this.once('end', onend);
  } // the no-half-open enforcer

  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.

    nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  inherits$2(Transform, Duplex);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
    ts.writechunk = null;
    ts.writecb = null;
    if (data !== null && data !== undefined) stream.push(data);
    cb(er);
    var rs = stream._readableState;
    rs.reading = false;

    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.

    var stream = this; // start out asking for a readable event once data is transformed.

    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.

    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;
      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done(stream, er);
      });else done(stream);
    });
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  }; // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.


  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;

    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  }; // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.


  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;

      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided

    var ws = stream._writableState;
    var ts = stream._transformState;
    if (ws.length) throw new Error('Calling transform done when ws.length != 0');
    if (ts.transforming) throw new Error('Calling transform done when still transforming');
    return stream.push(null);
  }

  inherits$2(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$2(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex;
  Stream.Transform = Transform;
  Stream.PassThrough = PassThrough; // Backwards-compat with node 0.4.x

  Stream.Stream = Stream;
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function (dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.

    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;

    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;
      dest.end();
    }

    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;
      if (typeof dest.destroy === 'function') dest.destroy();
    } // don't leave dangling pipes when there are errors.


    function onerror(er) {
      cleanup();

      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror); // remove all the event listeners that were added.

    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);
      source.removeListener('end', onend);
      source.removeListener('close', onclose);
      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);
      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);
      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

    return dest;
  };

  var hasFetch = isFunction$2(global.fetch) && isFunction$2(global.ReadableStream);

  var _blobConstructor;

  function blobConstructor() {
    if (typeof _blobConstructor !== 'undefined') {
      return _blobConstructor;
    }

    try {
      new global.Blob([new ArrayBuffer(1)]);
      _blobConstructor = true;
    } catch (e) {
      _blobConstructor = false;
    }

    return _blobConstructor;
  }
  var xhr;

  function checkTypeSupport(type) {
    if (!xhr) {
      xhr = new global.XMLHttpRequest(); // If location.host is empty, e.g. if this page/worker was loaded
      // from a Blob, then use example.com to avoid an error

      xhr.open('GET', global.location.host ? '/' : 'https://example.com');
    }

    try {
      xhr.responseType = type;
      return xhr.responseType === type;
    } catch (e) {
      return false;
    }
  } // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
  // Safari 7.1 appears to have fixed this bug.


  var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
  var haveSlice = haveArrayBuffer && isFunction$2(global.ArrayBuffer.prototype.slice);
  var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer'); // These next two tests unavoidably show warnings in Chrome. Since fetch will always
  // be used if it's available, just return false for these to avoid the warnings.

  var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
  var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');
  var overrideMimeType = isFunction$2(xhr.overrideMimeType);
  var vbArray = isFunction$2(global.VBArray);

  function isFunction$2(value) {
    return typeof value === 'function';
  }

  xhr = null; // Help gc

  var rStates = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
  };
  function IncomingMessage(xhr, response, mode) {
    var self = this;
    Readable.call(self);
    self._mode = mode;
    self.headers = {};
    self.rawHeaders = [];
    self.trailers = {};
    self.rawTrailers = []; // Fake the 'close' event, but only once 'end' fires

    self.on('end', function () {
      // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
      process.nextTick(function () {
        self.emit('close');
      });
    });

    var _read;

    if (mode === 'fetch') {
      self._fetchResponse = response;
      self.url = response.url;
      self.statusCode = response.status;
      self.statusMessage = response.statusText; // backwards compatible version of for (<item> of <iterable>):
      // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)

      for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
        self.headers[header[0].toLowerCase()] = header[1];
        self.rawHeaders.push(header[0], header[1]);
      } // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed


      var reader = response.body.getReader();

      _read = function read() {
        reader.read().then(function (result) {
          if (self._destroyed) return;

          if (result.done) {
            self.push(null);
            return;
          }

          self.push(new Buffer(result.value));

          _read();
        });
      };

      _read();
    } else {
      self._xhr = xhr;
      self._pos = 0;
      self.url = xhr.responseURL;
      self.statusCode = xhr.status;
      self.statusMessage = xhr.statusText;
      var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
      headers.forEach(function (header) {
        var matches = header.match(/^([^:]+):\s*(.*)/);

        if (matches) {
          var key = matches[1].toLowerCase();

          if (key === 'set-cookie') {
            if (self.headers[key] === undefined) {
              self.headers[key] = [];
            }

            self.headers[key].push(matches[2]);
          } else if (self.headers[key] !== undefined) {
            self.headers[key] += ', ' + matches[2];
          } else {
            self.headers[key] = matches[2];
          }

          self.rawHeaders.push(matches[1], matches[2]);
        }
      });
      self._charset = 'x-user-defined';

      if (!overrideMimeType) {
        var mimeType = self.rawHeaders['mime-type'];

        if (mimeType) {
          var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);

          if (charsetMatch) {
            self._charset = charsetMatch[1].toLowerCase();
          }
        }

        if (!self._charset) self._charset = 'utf-8'; // best guess
      }
    }
  }
  inherits$2(IncomingMessage, Readable);

  IncomingMessage.prototype._read = function () {};

  IncomingMessage.prototype._onXHRProgress = function () {
    var self = this;
    var xhr = self._xhr;
    var response = null;

    switch (self._mode) {
      case 'text:vbarray':
        // For IE9
        if (xhr.readyState !== rStates.DONE) break;

        try {
          // This fails in IE8
          response = new global.VBArray(xhr.responseBody).toArray();
        } catch (e) {// pass
        }

        if (response !== null) {
          self.push(new Buffer(response));
          break;
        }

      // Falls through in IE8

      case 'text':
        try {
          // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
          response = xhr.responseText;
        } catch (e) {
          self._mode = 'text:vbarray';
          break;
        }

        if (response.length > self._pos) {
          var newData = response.substr(self._pos);

          if (self._charset === 'x-user-defined') {
            var buffer = new Buffer(newData.length);

            for (var i = 0; i < newData.length; i++) {
              buffer[i] = newData.charCodeAt(i) & 0xff;
            }

            self.push(buffer);
          } else {
            self.push(newData, self._charset);
          }

          self._pos = response.length;
        }

        break;

      case 'arraybuffer':
        if (xhr.readyState !== rStates.DONE || !xhr.response) break;
        response = xhr.response;
        self.push(new Buffer(new Uint8Array(response)));
        break;

      case 'moz-chunked-arraybuffer':
        // take whole
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING || !response) break;
        self.push(new Buffer(new Uint8Array(response)));
        break;

      case 'ms-stream':
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING) break;
        var reader = new global.MSStreamReader();

        reader.onprogress = function () {
          if (reader.result.byteLength > self._pos) {
            self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
            self._pos = reader.result.byteLength;
          }
        };

        reader.onload = function () {
          self.push(null);
        }; // reader.onerror = ??? // TODO: this


        reader.readAsArrayBuffer(response);
        break;
    } // The ms-stream case handles end separately in reader.onload()


    if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
      self.push(null);
    }
  };

  // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
  function toArrayBuffer (buf) {
    // If the buffer is backed by a Uint8Array, a faster version will work
    if (buf instanceof Uint8Array) {
      // If the buffer isn't a subarray, return the underlying ArrayBuffer
      if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
        return buf.buffer;
      } else if (typeof buf.buffer.slice === 'function') {
        // Otherwise we need to get a proper copy
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      }
    }

    if (isBuffer(buf)) {
      // This is the slow version that will work with any Buffer
      // implementation (even in old browsers)
      var arrayCopy = new Uint8Array(buf.length);
      var len = buf.length;

      for (var i = 0; i < len; i++) {
        arrayCopy[i] = buf[i];
      }

      return arrayCopy.buffer;
    } else {
      throw new Error('Argument must be a Buffer');
    }
  }

  function decideMode(preferBinary, useFetch) {
    if (hasFetch && useFetch) {
      return 'fetch';
    } else if (mozchunkedarraybuffer) {
      return 'moz-chunked-arraybuffer';
    } else if (msstream) {
      return 'ms-stream';
    } else if (arraybuffer && preferBinary) {
      return 'arraybuffer';
    } else if (vbArray && preferBinary) {
      return 'text:vbarray';
    } else {
      return 'text';
    }
  }

  function ClientRequest(opts) {
    var self = this;
    Writable.call(self);
    self._opts = opts;
    self._body = [];
    self._headers = {};
    if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
    Object.keys(opts.headers).forEach(function (name) {
      self.setHeader(name, opts.headers[name]);
    });
    var preferBinary;
    var useFetch = true;

    if (opts.mode === 'disable-fetch') {
      // If the use of XHR should be preferred and includes preserving the 'content-type' header
      useFetch = false;
      preferBinary = true;
    } else if (opts.mode === 'prefer-streaming') {
      // If streaming is a high priority but binary compatibility and
      // the accuracy of the 'content-type' header aren't
      preferBinary = false;
    } else if (opts.mode === 'allow-wrong-content-type') {
      // If streaming is more important than preserving the 'content-type' header
      preferBinary = !overrideMimeType;
    } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
      // Use binary if text streaming may corrupt data or the content-type header, or for speed
      preferBinary = true;
    } else {
      throw new Error('Invalid value for opts.mode');
    }

    self._mode = decideMode(preferBinary, useFetch);
    self.on('finish', function () {
      self._onFinish();
    });
  }

  inherits$2(ClientRequest, Writable); // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method

  var unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'user-agent', 'via'];

  ClientRequest.prototype.setHeader = function (name, value) {
    var self = this;
    var lowerName = name.toLowerCase(); // This check is not necessary, but it prevents warnings from browsers about setting unsafe
    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
    // http-browserify did it, so I will too.

    if (unsafeHeaders.indexOf(lowerName) !== -1) return;
    self._headers[lowerName] = {
      name: name,
      value: value
    };
  };

  ClientRequest.prototype.getHeader = function (name) {
    var self = this;
    return self._headers[name.toLowerCase()].value;
  };

  ClientRequest.prototype.removeHeader = function (name) {
    var self = this;
    delete self._headers[name.toLowerCase()];
  };

  ClientRequest.prototype._onFinish = function () {
    var self = this;
    if (self._destroyed) return;
    var opts = self._opts;
    var headersObj = self._headers;
    var body;

    if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
      if (blobConstructor()) {
        body = new global.Blob(self._body.map(function (buffer) {
          return toArrayBuffer(buffer);
        }), {
          type: (headersObj['content-type'] || {}).value || ''
        });
      } else {
        // get utf8 string
        body = Buffer.concat(self._body).toString();
      }
    }

    if (self._mode === 'fetch') {
      var headers = Object.keys(headersObj).map(function (name) {
        return [headersObj[name].name, headersObj[name].value];
      });
      global.fetch(self._opts.url, {
        method: self._opts.method,
        headers: headers,
        body: body,
        mode: 'cors',
        credentials: opts.withCredentials ? 'include' : 'same-origin'
      }).then(function (response) {
        self._fetchResponse = response;

        self._connect();
      }, function (reason) {
        self.emit('error', reason);
      });
    } else {
      var xhr = self._xhr = new global.XMLHttpRequest();

      try {
        xhr.open(self._opts.method, self._opts.url, true);
      } catch (err) {
        process.nextTick(function () {
          self.emit('error', err);
        });
        return;
      } // Can't set responseType on really old browsers


      if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];
      if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;
      if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');
      Object.keys(headersObj).forEach(function (name) {
        xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
      });
      self._response = null;

      xhr.onreadystatechange = function () {
        switch (xhr.readyState) {
          case rStates.LOADING:
          case rStates.DONE:
            self._onXHRProgress();

            break;
        }
      }; // Necessary for streaming in Firefox, since xhr.response is ONLY defined
      // in onprogress, not in onreadystatechange with xhr.readyState = 3


      if (self._mode === 'moz-chunked-arraybuffer') {
        xhr.onprogress = function () {
          self._onXHRProgress();
        };
      }

      xhr.onerror = function () {
        if (self._destroyed) return;
        self.emit('error', new Error('XHR error'));
      };

      try {
        xhr.send(body);
      } catch (err) {
        process.nextTick(function () {
          self.emit('error', err);
        });
        return;
      }
    }
  };
  /**
   * Checks if xhr.status is readable and non-zero, indicating no error.
   * Even though the spec says it should be available in readyState 3,
   * accessing it throws an exception in IE8
   */


  function statusValid(xhr) {
    try {
      var status = xhr.status;
      return status !== null && status !== 0;
    } catch (e) {
      return false;
    }
  }

  ClientRequest.prototype._onXHRProgress = function () {
    var self = this;
    if (!statusValid(self._xhr) || self._destroyed) return;
    if (!self._response) self._connect();

    self._response._onXHRProgress();
  };

  ClientRequest.prototype._connect = function () {
    var self = this;
    if (self._destroyed) return;
    self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
    self.emit('response', self._response);
  };

  ClientRequest.prototype._write = function (chunk, encoding, cb) {
    var self = this;

    self._body.push(chunk);

    cb();
  };

  ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
    var self = this;
    self._destroyed = true;
    if (self._response) self._response._destroyed = true;
    if (self._xhr) self._xhr.abort(); // Currently, there isn't a way to truly abort a fetch.
    // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
  };

  ClientRequest.prototype.end = function (data, encoding, cb) {
    var self = this;

    if (typeof data === 'function') {
      cb = data;
      data = undefined;
    }

    Writable.prototype.end.call(self, data, encoding, cb);
  };

  ClientRequest.prototype.flushHeaders = function () {};

  ClientRequest.prototype.setTimeout = function () {};

  ClientRequest.prototype.setNoDelay = function () {};

  ClientRequest.prototype.setSocketKeepAlive = function () {};

  /*! https://mths.be/punycode v1.4.1 by @mathias */

  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */

  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80

  var delimiter = '-'; // '\x2D'
  var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars

  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */

  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };
  /** Convenience shortcuts */

  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error$1(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */

  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error$1('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error$1('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */

  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty$3(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var isArray$3 = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };

  function stringifyPrimitive(v) {
    switch (_typeof(v)) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  }

  function stringify(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';

    if (obj === null) {
      obj = undefined;
    }

    if (_typeof(obj) === 'object') {
      return map$1(objectKeys(obj), function (k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

        if (isArray$3(obj[k])) {
          return map$1(obj[k], function (v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);
    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
  }

  function map$1(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];

    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }

    return res;
  }

  var objectKeys = Object.keys || function (obj) {
    var res = [];

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }

    return res;
  };

  function parse$1(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;

    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr,
          vstr,
          k,
          v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty$3(obj, k)) {
        obj[k] = v;
      } else if (isArray$3(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }

  var Url = {
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    Url: Url$1
  };
  function Url$1() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  } // Reference: RFC 3986, RFC 1808, RFC 2396
  // define these here so at least they only have to be
  // compiled once on the first module load.

  var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,
      // Special case for a simple path URL
  simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
      // RFC 2396: characters reserved for delimiting URLs.
  // We actually just auto-escape these.
  delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
      // RFC 2396: characters not allowed for various reasons.
  unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
  // Note that any invalid chars are also handled, but these
  // are the ones that are *expected* to be seen, so we fast-path
  // them.
  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
  unsafeProtocol = {
    'javascript': true,
    'javascript:': true
  },
      // protocols that never have a hostname.
  hostlessProtocol = {
    'javascript': true,
    'javascript:': true
  },
      // protocols that always contain a // bit.
  slashedProtocol = {
    'http': true,
    'https': true,
    'ftp': true,
    'gopher': true,
    'file': true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
  };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject$1(url) && url instanceof Url$1) return url;
    var u = new Url$1();
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }

  Url$1.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
    return parse$2(this, url, parseQueryString, slashesDenoteHost);
  };

  function parse$2(self, url, parseQueryString, slashesDenoteHost) {
    if (!isString$1(url)) {
      throw new TypeError('Parameter \'url\' must be a string, not ' + _typeof(url));
    } // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916


    var queryIndex = url.indexOf('?'),
        splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);
    var rest = url; // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"

    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);

      if (simplePath) {
        self.path = rest;
        self.href = rest;
        self.pathname = simplePath[1];

        if (simplePath[2]) {
          self.search = simplePath[2];

          if (parseQueryString) {
            self.query = parse$1(self.search.substr(1));
          } else {
            self.query = self.search.substr(1);
          }
        } else if (parseQueryString) {
          self.search = '';
          self.query = {};
        }

        return self;
      }
    }

    var proto = protocolPattern.exec(rest);

    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self.protocol = lowerProto;
      rest = rest.substr(proto.length);
    } // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.


    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';

      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self.slashes = true;
      }
    }

    var i, hec, l, p;

    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c
      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.
      // find the first instance of any hostEndingChars
      var hostEnd = -1;

      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
      } // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.


      var auth, atSign;

      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      } // Now we have a portion which is definitely the auth.
      // Pull that off.


      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self.auth = decodeURIComponent(auth);
      } // the host is the remaining to the left of the first non-host char


      hostEnd = -1;

      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
      } // if we still have not hit it, then the entire thing is a host.


      if (hostEnd === -1) hostEnd = rest.length;
      self.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd); // pull out port.

      parseHost(self); // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.

      self.hostname = self.hostname || ''; // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.

      var ipv6Hostname = self.hostname[0] === '[' && self.hostname[self.hostname.length - 1] === ']'; // validate a little.

      if (!ipv6Hostname) {
        var hostparts = self.hostname.split(/\./);

        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;

          if (!part.match(hostnamePartPattern)) {
            var newpart = '';

            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            } // we test again with ASCII char only


            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);

              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }

              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }

              self.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (self.hostname.length > hostnameMaxLen) {
        self.hostname = '';
      } else {
        // hostnames are always lower case.
        self.hostname = self.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        self.hostname = toASCII(self.hostname);
      }

      p = self.port ? ':' + self.port : '';
      var h = self.hostname || '';
      self.host = h + p;
      self.href += self.host; // strip [ and ] from the hostname
      // the host field still retains them, though

      if (ipv6Hostname) {
        self.hostname = self.hostname.substr(1, self.hostname.length - 2);

        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    } // now rest is set to the post-host stuff.
    // chop off any delim chars.


    if (!unsafeProtocol[lowerProto]) {
      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);

        if (esc === ae) {
          esc = escape(ae);
        }

        rest = rest.split(ae).join(esc);
      }
    } // chop off from the tail first.


    var hash = rest.indexOf('#');

    if (hash !== -1) {
      // got a fragment string.
      self.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }

    var qm = rest.indexOf('?');

    if (qm !== -1) {
      self.search = rest.substr(qm);
      self.query = rest.substr(qm + 1);

      if (parseQueryString) {
        self.query = parse$1(self.query);
      }

      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      self.search = '';
      self.query = {};
    }

    if (rest) self.pathname = rest;

    if (slashedProtocol[lowerProto] && self.hostname && !self.pathname) {
      self.pathname = '/';
    } //to support http.request


    if (self.pathname || self.search) {
      p = self.pathname || '';
      var s = self.search || '';
      self.path = p + s;
    } // finally, reconstruct the href based on what has been validated.


    self.href = format$1(self);
    return self;
  } // format a parsed object into a url string


  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString$1(obj)) obj = parse$2({}, obj);
    return format$1(obj);
  }

  function format$1(self) {
    var auth = self.auth || '';

    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = self.protocol || '',
        pathname = self.pathname || '',
        hash = self.hash || '',
        host = false,
        query = '';

    if (self.host) {
      host = auth + self.host;
    } else if (self.hostname) {
      host = auth + (self.hostname.indexOf(':') === -1 ? self.hostname : '[' + this.hostname + ']');

      if (self.port) {
        host += ':' + self.port;
      }
    }

    if (self.query && isObject$1(self.query) && Object.keys(self.query).length) {
      query = stringify(self.query);
    }

    var search = self.search || query && '?' + query || '';
    if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.

    if (self.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;
    pathname = pathname.replace(/[?#]/g, function (match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');
    return protocol + host + pathname + search + hash;
  }

  Url$1.prototype.format = function () {
    return format$1(this);
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url$1.prototype.resolve = function (relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url$1.prototype.resolveObject = function (relative) {
    if (isString$1(relative)) {
      var rel = new Url$1();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url$1();
    var tkeys = Object.keys(this);

    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    } // hash is always overridden, no matter what.
    // even href="" will remove it.


    result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

    if (relative.href === '') {
      result.href = result.format();
      return result;
    } // hrefs like //foo/bar always cut to the protocol.


    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);

      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol') result[rkey] = relative[rkey];
      } //urlParse appends trailing / to urls like http://www.example.com


      if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }

    var relPath;

    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);

        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }

        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;

      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        relPath = (relative.pathname || '').split('/');

        while (relPath.length && !(relative.host = relPath.shift())) {
        }

        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }

      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port; // to support http.request

      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }

      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
        isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
        mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];
    relPath = relative.pathname && relative.pathname.split('/') || []; // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.

    if (psychotic) {
      result.hostname = '';
      result.port = null;

      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
      }

      result.host = '';

      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;

        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
        }

        relative.host = null;
      }

      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }

    var authInHost;

    if (isRelAbs) {
      // it's absolute.
      result.host = relative.host || relative.host === '' ? relative.host : result.host;
      result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath; // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

        authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      result.search = relative.search;
      result.query = relative.query; //to support http.request

      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
      }

      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null; //to support http.request

      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }

      result.href = result.format();
      return result;
    } // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.


    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0

    var up = 0;

    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];

      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    } // if the path is allowed to go above the root, restore leading ..s


    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || result.host && srcPath.length;

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    } //to support request.http


    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url$1.prototype.parseHost = function () {
    return parseHost(this);
  };

  function parseHost(self) {
    var host = self.host;
    var port = portPattern.exec(host);

    if (port) {
      port = port[0];

      if (port !== ':') {
        self.port = port.substr(1);
      }

      host = host.substr(0, host.length - port.length);
    }

    if (host) self.hostname = host;
  }

  /*
  this and http-lib folder

  The MIT License

  Copyright (c) 2015 John Hiesey

  Permission is hereby granted, free of charge,
  to any person obtaining a copy of this software and
  associated documentation files (the "Software"), to
  deal in the Software without restriction, including
  without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom
  the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice
  shall be included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
  ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  */
  function request(opts, cb) {
    if (typeof opts === 'string') opts = urlParse(opts); // Normally, the page is loaded from http or https, so not specifying a protocol
    // will result in a (valid) protocol-relative url. However, this won't work if
    // the protocol is something else, like 'file:'

    var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || '/'; // Necessary for IPv6 addresses

    if (host && host.indexOf(':') !== -1) host = '[' + host + ']'; // This may be a relative url. The browser should always be able to interpret it correctly.

    opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
    opts.method = (opts.method || 'GET').toUpperCase();
    opts.headers = opts.headers || {}; // Also valid opts.auth, opts.mode

    var req = new ClientRequest(opts);
    if (cb) req.on('response', cb);
    return req;
  }
  function get(opts, cb) {
    var req = request(opts, cb);
    req.end();
    return req;
  }
  function Agent() {}
  Agent.defaultMaxSockets = 4;
  var METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];
  var STATUS_CODES = {
    100: 'Continue',
    101: 'Switching Protocols',
    102: 'Processing',
    // RFC 2518, obsoleted by RFC 4918
    200: 'OK',
    201: 'Created',
    202: 'Accepted',
    203: 'Non-Authoritative Information',
    204: 'No Content',
    205: 'Reset Content',
    206: 'Partial Content',
    207: 'Multi-Status',
    // RFC 4918
    300: 'Multiple Choices',
    301: 'Moved Permanently',
    302: 'Moved Temporarily',
    303: 'See Other',
    304: 'Not Modified',
    305: 'Use Proxy',
    307: 'Temporary Redirect',
    400: 'Bad Request',
    401: 'Unauthorized',
    402: 'Payment Required',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    406: 'Not Acceptable',
    407: 'Proxy Authentication Required',
    408: 'Request Time-out',
    409: 'Conflict',
    410: 'Gone',
    411: 'Length Required',
    412: 'Precondition Failed',
    413: 'Request Entity Too Large',
    414: 'Request-URI Too Large',
    415: 'Unsupported Media Type',
    416: 'Requested Range Not Satisfiable',
    417: 'Expectation Failed',
    418: 'I\'m a teapot',
    // RFC 2324
    422: 'Unprocessable Entity',
    // RFC 4918
    423: 'Locked',
    // RFC 4918
    424: 'Failed Dependency',
    // RFC 4918
    425: 'Unordered Collection',
    // RFC 4918
    426: 'Upgrade Required',
    // RFC 2817
    428: 'Precondition Required',
    // RFC 6585
    429: 'Too Many Requests',
    // RFC 6585
    431: 'Request Header Fields Too Large',
    // RFC 6585
    500: 'Internal Server Error',
    501: 'Not Implemented',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Time-out',
    505: 'HTTP Version Not Supported',
    506: 'Variant Also Negotiates',
    // RFC 2295
    507: 'Insufficient Storage',
    // RFC 4918
    509: 'Bandwidth Limit Exceeded',
    510: 'Not Extended',
    // RFC 2774
    511: 'Network Authentication Required' // RFC 6585

  };
  var http = {
    request: request,
    get: get,
    Agent: Agent,
    METHODS: METHODS,
    STATUS_CODES: STATUS_CODES
  };

  var msg = {
    2: 'need dictionary',

    /* Z_NEED_DICT       2  */
    1: 'stream end',

    /* Z_STREAM_END      1  */
    0: '',

    /* Z_OK              0  */
    '-1': 'file error',

    /* Z_ERRNO         (-1) */
    '-2': 'stream error',

    /* Z_STREAM_ERROR  (-2) */
    '-3': 'data error',

    /* Z_DATA_ERROR    (-3) */
    '-4': 'insufficient memory',

    /* Z_MEM_ERROR     (-4) */
    '-5': 'buffer error',

    /* Z_BUF_ERROR     (-5) */
    '-6': 'incompatible version'
    /* Z_VERSION_ERROR (-6) */

  };

  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers

    this.next_in = 0;
    /* number of bytes available at input */

    this.avail_in = 0;
    /* total number of input bytes read so far */

    this.total_in = 0;
    /* next output byte should be put there */

    this.output = null; // JS specific, because we have no pointers

    this.next_out = 0;
    /* remaining free space at output */

    this.avail_out = 0;
    /* total number of bytes output so far */

    this.total_out = 0;
    /* last error message, NULL if no error */

    this.msg = ''
    /*Z_NULL*/
    ;
    /* not visible by applications */

    this.state = null;
    /* best guess about the data type: binary or text */

    this.data_type = 2
    /*Z_UNKNOWN*/
    ;
    /* adler32 value of the uncompressed data */

    this.adler = 0;
  }

  function arraySet(dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    } // Fallback to ordinary array


    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  }
  var Buf8 = Uint8Array;
  var Buf16 = Uint16Array;
  var Buf32 = Int32Array; // Enable/Disable typed arrays use, for testing
  //

  /* Public constants ==========================================================*/

  /* ===========================================================================*/
  //var Z_FILTERED          = 1;
  //var Z_HUFFMAN_ONLY      = 2;
  //var Z_RLE               = 3;

  var Z_FIXED = 4; //var Z_DEFAULT_STRATEGY  = 0;

  /* Possible values of the data_type field (though see inflate()) */

  var Z_BINARY = 0;
  var Z_TEXT = 1; //var Z_ASCII             = 1; // = Z_TEXT

  var Z_UNKNOWN = 2;
  /*============================================================================*/

  function zero$1(buf) {
    var len = buf.length;

    while (--len >= 0) {
      buf[len] = 0;
    }
  } // From zutil.h


  var STORED_BLOCK = 0;
  var STATIC_TREES = 1;
  var DYN_TREES = 2;
  /* The three kinds of block type */

  var MIN_MATCH = 3;
  var MAX_MATCH = 258;
  /* The minimum and maximum match lengths */
  // From deflate.h

  /* ===========================================================================
   * Internal compression state.
   */

  var LENGTH_CODES = 29;
  /* number of length codes, not counting the special END_BLOCK code */

  var LITERALS = 256;
  /* number of literal bytes 0..255 */

  var L_CODES = LITERALS + 1 + LENGTH_CODES;
  /* number of Literal or Length codes, including the END_BLOCK code */

  var D_CODES = 30;
  /* number of distance codes */

  var BL_CODES = 19;
  /* number of codes used to transfer the bit lengths */

  var HEAP_SIZE = 2 * L_CODES + 1;
  /* maximum heap size */

  var MAX_BITS = 15;
  /* All codes must not exceed MAX_BITS bits */

  var Buf_size = 16;
  /* size of bit buffer in bi_buf */

  /* ===========================================================================
   * Constants
   */

  var MAX_BL_BITS = 7;
  /* Bit length codes must not exceed MAX_BL_BITS bits */

  var END_BLOCK = 256;
  /* end of block literal code */

  var REP_3_6 = 16;
  /* repeat previous bit length 3-6 times (2 bits of repeat count) */

  var REPZ_3_10 = 17;
  /* repeat a zero length 3-10 times  (3 bits of repeat count) */

  var REPZ_11_138 = 18;
  /* repeat a zero length 11-138 times  (7 bits of repeat count) */

  /* eslint-disable comma-spacing,array-bracket-spacing */

  var extra_lbits =
  /* extra bits for each length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
  var extra_dbits =
  /* extra bits for each distance code */
  [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
  var extra_blbits =
  /* extra bits for each bit length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
  var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  /* eslint-enable comma-spacing,array-bracket-spacing */

  /* The lengths of the bit length codes are sent in order of decreasing
   * probability, to avoid transmitting the lengths for unused bit length codes.
   */

  /* ===========================================================================
   * Local data. These are initialized only once.
   */
  // We pre-fill arrays with 0 to avoid uninitialized gaps

  var DIST_CODE_LEN = 512;
  /* see definition of array dist_code below */
  // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1

  var static_ltree = new Array((L_CODES + 2) * 2);
  zero$1(static_ltree);
  /* The static literal tree. Since the bit lengths are imposed, there is no
   * need for the L_CODES extra codes used during heap construction. However
   * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
   * below).
   */

  var static_dtree = new Array(D_CODES * 2);
  zero$1(static_dtree);
  /* The static distance tree. (Actually a trivial tree since all codes use
   * 5 bits.)
   */

  var _dist_code = new Array(DIST_CODE_LEN);

  zero$1(_dist_code);
  /* Distance codes. The first 256 values correspond to the distances
   * 3 .. 258, the last 256 values correspond to the top 8 bits of
   * the 15 bit distances.
   */

  var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);

  zero$1(_length_code);
  /* length code for each normalized match length (0 == MIN_MATCH) */

  var base_length = new Array(LENGTH_CODES);
  zero$1(base_length);
  /* First normalized length for each code (0 = MIN_MATCH) */

  var base_dist = new Array(D_CODES);
  zero$1(base_dist);
  /* First normalized distance for each code (0 = distance of 1) */

  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
    this.static_tree = static_tree;
    /* static tree or NULL */

    this.extra_bits = extra_bits;
    /* extra bits for each code or NULL */

    this.extra_base = extra_base;
    /* base index for extra_bits */

    this.elems = elems;
    /* max number of elements in the tree */

    this.max_length = max_length;
    /* max bit length for the codes */
    // show if `static_tree` has data or dummy - needed for monomorphic objects

    this.has_stree = static_tree && static_tree.length;
  }

  var static_l_desc;
  var static_d_desc;
  var static_bl_desc;

  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree;
    /* the dynamic tree */

    this.max_code = 0;
    /* largest code with non zero frequency */

    this.stat_desc = stat_desc;
    /* the corresponding static tree */
  }

  function d_code(dist) {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  }
  /* ===========================================================================
   * Output a short LSB first on the stream.
   * IN assertion: there is enough room in pendingBuf.
   */


  function put_short(s, w) {
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = w & 0xff;
    s.pending_buf[s.pending++] = w >>> 8 & 0xff;
  }
  /* ===========================================================================
   * Send a value on a given number of bits.
   * IN assertion: length <= 16 and value fits in length bits.
   */


  function send_bits(s, value, length) {
    if (s.bi_valid > Buf_size - length) {
      s.bi_buf |= value << s.bi_valid & 0xffff;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> Buf_size - s.bi_valid;
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= value << s.bi_valid & 0xffff;
      s.bi_valid += length;
    }
  }

  function send_code(s, c, tree) {
    send_bits(s, tree[c * 2]
    /*.Code*/
    , tree[c * 2 + 1]
    /*.Len*/
    );
  }
  /* ===========================================================================
   * Reverse the first len bits of a code, using straightforward code (a faster
   * method would use a table)
   * IN assertion: 1 <= len <= 15
   */


  function bi_reverse(code, len) {
    var res = 0;

    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);

    return res >>> 1;
  }
  /* ===========================================================================
   * Flush the bit buffer, keeping at most 7 bits in it.
   */


  function bi_flush(s) {
    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;
    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 0xff;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  }
  /* ===========================================================================
   * Compute the optimal bit lengths for a tree and update the total bit length
   * for the current block.
   * IN assertion: the fields freq and dad are set, heap[heap_max] and
   *    above are the tree nodes sorted by increasing frequency.
   * OUT assertions: the field len is set to the optimal bit length, the
   *     array bl_count contains the frequencies for each bit length.
   *     The length opt_len is updated; static_len is also updated if stree is
   *     not null.
   */


  function gen_bitlen(s, desc) {
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    var tree = desc.dyn_tree;
    var max_code = desc.max_code;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var extra = desc.stat_desc.extra_bits;
    var base = desc.stat_desc.extra_base;
    var max_length = desc.stat_desc.max_length;
    var h;
    /* heap index */

    var n, m;
    /* iterate over the tree elements */

    var bits;
    /* bit length */

    var xbits;
    /* extra bits */

    var f;
    /* frequency */

    var overflow = 0;
    /* number of elements with bit length too large */

    for (bits = 0; bits <= MAX_BITS; bits++) {
      s.bl_count[bits] = 0;
    }
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */


    tree[s.heap[s.heap_max] * 2 + 1]
    /*.Len*/
    = 0;
    /* root of the heap */

    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1]
      /*.Dad*/
      * 2 + 1]
      /*.Len*/
      + 1;

      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }

      tree[n * 2 + 1]
      /*.Len*/
      = bits;
      /* We overwrite tree[n].Dad which is no longer needed */

      if (n > max_code) {
        continue;
      }
      /* not a leaf node */


      s.bl_count[bits]++;
      xbits = 0;

      if (n >= base) {
        xbits = extra[n - base];
      }

      f = tree[n * 2]
      /*.Freq*/
      ;
      s.opt_len += f * (bits + xbits);

      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1]
        /*.Len*/
        + xbits);
      }
    }

    if (overflow === 0) {
      return;
    } // Trace((stderr,"\nbit length overflow\n"));

    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */


    do {
      bits = max_length - 1;

      while (s.bl_count[bits] === 0) {
        bits--;
      }

      s.bl_count[bits]--;
      /* move one leaf down the tree */

      s.bl_count[bits + 1] += 2;
      /* move one overflow item as its brother */

      s.bl_count[max_length]--;
      /* The brother of the overflow item also moves one step up,
       * but this does not affect bl_count[max_length]
       */

      overflow -= 2;
    } while (overflow > 0);
    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */


    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];

      while (n !== 0) {
        m = s.heap[--h];

        if (m > max_code) {
          continue;
        }

        if (tree[m * 2 + 1]
        /*.Len*/
        !== bits) {
          // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
          s.opt_len += (bits - tree[m * 2 + 1]
          /*.Len*/
          ) * tree[m * 2]
          /*.Freq*/
          ;
          tree[m * 2 + 1]
          /*.Len*/
          = bits;
        }

        n--;
      }
    }
  }
  /* ===========================================================================
   * Generate the codes for a given tree and bit counts (which need not be
   * optimal).
   * IN assertion: the array bl_count contains the bit length statistics for
   * the given tree and the field len is set for all tree elements.
   * OUT assertion: the field code is set for all tree elements of non
   *     zero code length.
   */


  function gen_codes(tree, max_code, bl_count) {
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    var next_code = new Array(MAX_BITS + 1);
    /* next code value for each bit length */

    var code = 0;
    /* running code value */

    var bits;
    /* bit index */

    var n;
    /* code index */

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */

    for (bits = 1; bits <= MAX_BITS; bits++) {
      next_code[bits] = code = code + bl_count[bits - 1] << 1;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */
    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));


    for (n = 0; n <= max_code; n++) {
      var len = tree[n * 2 + 1]
      /*.Len*/
      ;

      if (len === 0) {
        continue;
      }
      /* Now reverse the bits */


      tree[n * 2]
      /*.Code*/
      = bi_reverse(next_code[len]++, len); //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
      //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
  }
  /* ===========================================================================
   * Initialize the various 'constant' tables.
   */


  function tr_static_init() {
    var n;
    /* iterates over tree elements */

    var bits;
    /* bit counter */

    var length;
    /* length value */

    var code;
    /* code value */

    var dist;
    /* distance index */

    var bl_count = new Array(MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */
    // do check in _tr_init()
    //if (static_init_done) return;

    /* For some embedded targets, global variables are not initialized: */

    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/

    /* Initialize the mapping length (0..255) -> length code (0..28) */

    length = 0;

    for (code = 0; code < LENGTH_CODES - 1; code++) {
      base_length[code] = length;

      for (n = 0; n < 1 << extra_lbits[code]; n++) {
        _length_code[length++] = code;
      }
    } //Assert (length == 256, "tr_static_init: length != 256");

    /* Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     */


    _length_code[length - 1] = code;
    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */

    dist = 0;

    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;

      for (n = 0; n < 1 << extra_dbits[code]; n++) {
        _dist_code[dist++] = code;
      }
    } //Assert (dist == 256, "tr_static_init: dist != 256");


    dist >>= 7;
    /* from now on, all distances are divided by 128 */

    for (; code < D_CODES; code++) {
      base_dist[code] = dist << 7;

      for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
        _dist_code[256 + dist++] = code;
      }
    } //Assert (dist == 256, "tr_static_init: 256+dist != 512");

    /* Construct the codes of the static literal tree */


    for (bits = 0; bits <= MAX_BITS; bits++) {
      bl_count[bits] = 0;
    }

    n = 0;

    while (n <= 143) {
      static_ltree[n * 2 + 1]
      /*.Len*/
      = 8;
      n++;
      bl_count[8]++;
    }

    while (n <= 255) {
      static_ltree[n * 2 + 1]
      /*.Len*/
      = 9;
      n++;
      bl_count[9]++;
    }

    while (n <= 279) {
      static_ltree[n * 2 + 1]
      /*.Len*/
      = 7;
      n++;
      bl_count[7]++;
    }

    while (n <= 287) {
      static_ltree[n * 2 + 1]
      /*.Len*/
      = 8;
      n++;
      bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     */


    gen_codes(static_ltree, L_CODES + 1, bl_count);
    /* The static distance tree is trivial: */

    for (n = 0; n < D_CODES; n++) {
      static_dtree[n * 2 + 1]
      /*.Len*/
      = 5;
      static_dtree[n * 2]
      /*.Code*/
      = bi_reverse(n, 5);
    } // Now data ready and we can init static trees


    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS); //static_init_done = true;
  }
  /* ===========================================================================
   * Initialize a new block.
   */


  function init_block(s) {
    var n;
    /* iterates over tree elements */

    /* Initialize the trees. */

    for (n = 0; n < L_CODES; n++) {
      s.dyn_ltree[n * 2]
      /*.Freq*/
      = 0;
    }

    for (n = 0; n < D_CODES; n++) {
      s.dyn_dtree[n * 2]
      /*.Freq*/
      = 0;
    }

    for (n = 0; n < BL_CODES; n++) {
      s.bl_tree[n * 2]
      /*.Freq*/
      = 0;
    }

    s.dyn_ltree[END_BLOCK * 2]
    /*.Freq*/
    = 1;
    s.opt_len = s.static_len = 0;
    s.last_lit = s.matches = 0;
  }
  /* ===========================================================================
   * Flush the bit buffer and align the output on a byte boundary
   */


  function bi_windup(s) {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      //put_byte(s, (Byte)s->bi_buf);
      s.pending_buf[s.pending++] = s.bi_buf;
    }

    s.bi_buf = 0;
    s.bi_valid = 0;
  }
  /* ===========================================================================
   * Copy a stored block, storing first the length and its
   * one's complement if requested.
   */


  function copy_block(s, buf, len, header) {
    //DeflateState *s;
    //charf    *buf;    /* the input data */
    //unsigned len;     /* its length */
    //int      header;  /* true if block header must be written */
    bi_windup(s);
    /* align on byte boundary */

    if (header) {
      put_short(s, len);
      put_short(s, ~len);
    } //  while (len--) {
    //    put_byte(s, *buf++);
    //  }


    arraySet(s.pending_buf, s.window, buf, len, s.pending);
    s.pending += len;
  }
  /* ===========================================================================
   * Compares to subtrees, using the tree depth as tie breaker when
   * the subtrees have equal frequency. This minimizes the worst case length.
   */


  function smaller(tree, n, m, depth) {
    var _n2 = n * 2;

    var _m2 = m * 2;

    return tree[_n2]
    /*.Freq*/
    < tree[_m2]
    /*.Freq*/
    || tree[_n2]
    /*.Freq*/
    === tree[_m2]
    /*.Freq*/
    && depth[n] <= depth[m];
  }
  /* ===========================================================================
   * Restore the heap property by moving down the tree starting at node k,
   * exchanging a node with the smallest of its two sons if necessary, stopping
   * when the heap property is re-established (each father smaller than its
   * two sons).
   */


  function pqdownheap(s, tree, k) //    deflate_state *s;
  //    ct_data *tree;  /* the tree to restore */
  //    int k;               /* node to move down */
  {
    var v = s.heap[k];
    var j = k << 1;
    /* left son of k */

    while (j <= s.heap_len) {
      /* Set j to the smallest of the two sons: */
      if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      /* Exit if v is smaller than both sons */


      if (smaller(tree, v, s.heap[j], s.depth)) {
        break;
      }
      /* Exchange v with the smallest son */


      s.heap[k] = s.heap[j];
      k = j;
      /* And continue down the tree, setting j to the left son of k */

      j <<= 1;
    }

    s.heap[k] = v;
  } // inlined manually
  // var SMALLEST = 1;

  /* ===========================================================================
   * Send the block data compressed using the given Huffman trees
   */


  function compress_block(s, ltree, dtree) //    deflate_state *s;
  //    const ct_data *ltree; /* literal tree */
  //    const ct_data *dtree; /* distance tree */
  {
    var dist;
    /* distance of matched string */

    var lc;
    /* match length or unmatched char (if dist == 0) */

    var lx = 0;
    /* running index in l_buf */

    var code;
    /* the code to send */

    var extra;
    /* number of extra bits to send */

    if (s.last_lit !== 0) {
      do {
        dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
        lc = s.pending_buf[s.l_buf + lx];
        lx++;

        if (dist === 0) {
          send_code(s, lc, ltree);
          /* send a literal byte */
          //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
          /* Here, lc is the match length - MIN_MATCH */
          code = _length_code[lc];
          send_code(s, code + LITERALS + 1, ltree);
          /* send the length code */

          extra = extra_lbits[code];

          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra);
            /* send the extra length bits */
          }

          dist--;
          /* dist is now the match distance - 1 */

          code = d_code(dist); //Assert (code < D_CODES, "bad d_code");

          send_code(s, code, dtree);
          /* send the distance code */

          extra = extra_dbits[code];

          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);
            /* send the extra distance bits */
          }
        }
        /* literal or match pair ? */

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
        //       "pendingBuf overflow");

      } while (lx < s.last_lit);
    }

    send_code(s, END_BLOCK, ltree);
  }
  /* ===========================================================================
   * Construct one Huffman tree and assigns the code bit strings and lengths.
   * Update the total bit length for the current block.
   * IN assertion: the field freq is set for all tree elements.
   * OUT assertions: the fields len and code are set to the optimal bit length
   *     and corresponding code. The length opt_len is updated; static_len is
   *     also updated if stree is not null. The field max_code is set.
   */


  function build_tree(s, desc) //    deflate_state *s;
  //    tree_desc *desc; /* the tree descriptor */
  {
    var tree = desc.dyn_tree;
    var stree = desc.stat_desc.static_tree;
    var has_stree = desc.stat_desc.has_stree;
    var elems = desc.stat_desc.elems;
    var n, m;
    /* iterate over heap elements */

    var max_code = -1;
    /* largest code with non zero frequency */

    var node;
    /* new node being created */

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */

    s.heap_len = 0;
    s.heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
      if (tree[n * 2]
      /*.Freq*/
      !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
      } else {
        tree[n * 2 + 1]
        /*.Len*/
        = 0;
      }
    }
    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */


    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
      tree[node * 2]
      /*.Freq*/
      = 1;
      s.depth[node] = 0;
      s.opt_len--;

      if (has_stree) {
        s.static_len -= stree[node * 2 + 1]
        /*.Len*/
        ;
      }
      /* node is 0 or 1 so it does not have extra bits */

    }

    desc.max_code = max_code;
    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */

    for (n = s.heap_len >> 1
    /*int /2*/
    ; n >= 1; n--) {
      pqdownheap(s, tree, n);
    }
    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */


    node = elems;
    /* next internal node of the tree */

    do {
      //pqremove(s, tree, n);  /* n = node of least frequency */

      /*** pqremove ***/
      n = s.heap[1
      /*SMALLEST*/
      ];
      s.heap[1
      /*SMALLEST*/
      ] = s.heap[s.heap_len--];
      pqdownheap(s, tree, 1
      /*SMALLEST*/
      );
      /***/

      m = s.heap[1
      /*SMALLEST*/
      ];
      /* m = node of next least frequency */

      s.heap[--s.heap_max] = n;
      /* keep the nodes sorted by frequency */

      s.heap[--s.heap_max] = m;
      /* Create a new node father of n and m */

      tree[node * 2]
      /*.Freq*/
      = tree[n * 2]
      /*.Freq*/
      + tree[m * 2]
      /*.Freq*/
      ;
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1]
      /*.Dad*/
      = tree[m * 2 + 1]
      /*.Dad*/
      = node;
      /* and insert the new node in the heap */

      s.heap[1
      /*SMALLEST*/
      ] = node++;
      pqdownheap(s, tree, 1
      /*SMALLEST*/
      );
    } while (s.heap_len >= 2);

    s.heap[--s.heap_max] = s.heap[1
    /*SMALLEST*/
    ];
    /* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */

    gen_bitlen(s, desc);
    /* The field len is now set, we can generate the bit codes */

    gen_codes(tree, max_code, s.bl_count);
  }
  /* ===========================================================================
   * Scan a literal or distance tree to determine the frequencies of the codes
   * in the bit length tree.
   */


  function scan_tree(s, tree, max_code) //    deflate_state *s;
  //    ct_data *tree;   /* the tree to be scanned */
  //    int max_code;    /* and its largest code of non zero frequency */
  {
    var n;
    /* iterates over all tree elements */

    var prevlen = -1;
    /* last emitted length */

    var curlen;
    /* length of current code */

    var nextlen = tree[0 * 2 + 1]
    /*.Len*/
    ;
    /* length of next code */

    var count = 0;
    /* repeat count of the current code */

    var max_count = 7;
    /* max repeat count */

    var min_count = 4;
    /* min repeat count */

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    tree[(max_code + 1) * 2 + 1]
    /*.Len*/
    = 0xffff;
    /* guard */

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1]
      /*.Len*/
      ;

      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        s.bl_tree[curlen * 2]
        /*.Freq*/
        += count;
      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          s.bl_tree[curlen * 2] /*.Freq*/++;
        }

        s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
      } else {
        s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
      }

      count = 0;
      prevlen = curlen;

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }
  /* ===========================================================================
   * Send a literal or distance tree in compressed form, using the codes in
   * bl_tree.
   */


  function send_tree(s, tree, max_code) //    deflate_state *s;
  //    ct_data *tree; /* the tree to be scanned */
  //    int max_code;       /* and its largest code of non zero frequency */
  {
    var n;
    /* iterates over all tree elements */

    var prevlen = -1;
    /* last emitted length */

    var curlen;
    /* length of current code */

    var nextlen = tree[0 * 2 + 1]
    /*.Len*/
    ;
    /* length of next code */

    var count = 0;
    /* repeat count of the current code */

    var max_count = 7;
    /* max repeat count */

    var min_count = 4;
    /* min repeat count */

    /* tree[max_code+1].Len = -1; */

    /* guard already set */

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1]
      /*.Len*/
      ;

      if (++count < max_count && curlen === nextlen) {
        continue;
      } else if (count < min_count) {
        do {
          send_code(s, curlen, s.bl_tree);
        } while (--count !== 0);
      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        } //Assert(count >= 3 && count <= 6, " 3_6?");


        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);
      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);
      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }

      count = 0;
      prevlen = curlen;

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;
      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  }
  /* ===========================================================================
   * Construct the Huffman tree for the bit lengths and return the index in
   * bl_order of the last bit length code to send.
   */


  function build_bl_tree(s) {
    var max_blindex;
    /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */

    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    /* Build the bit length tree: */

    build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
     */

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */

    for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1]
      /*.Len*/
      !== 0) {
        break;
      }
    }
    /* Update opt_len to include the bit length tree and counts */


    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));

    return max_blindex;
  }
  /* ===========================================================================
   * Send the header for a block using dynamic Huffman trees: the counts, the
   * lengths of the bit length codes, the literal tree and the distance tree.
   * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
   */


  function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;
  //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
  {
    var rank;
    /* index in bl_order */
    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));

    send_bits(s, lcodes - 257, 5);
    /* not +255 as stated in appnote.txt */

    send_bits(s, dcodes - 1, 5);
    send_bits(s, blcodes - 4, 4);
    /* not -3 as stated in appnote.txt */

    for (rank = 0; rank < blcodes; rank++) {
      //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
      send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]
      /*.Len*/
      , 3);
    } //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));


    send_tree(s, s.dyn_ltree, lcodes - 1);
    /* literal tree */
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_dtree, dcodes - 1);
    /* distance tree */
    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
  }
  /* ===========================================================================
   * Check if the data type is TEXT or BINARY, using the following algorithm:
   * - TEXT if the two conditions below are satisfied:
   *    a) There are no non-portable control characters belonging to the
   *       "black list" (0..6, 14..25, 28..31).
   *    b) There is at least one printable character belonging to the
   *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
   * - BINARY otherwise.
   * - The following partially-portable control characters form a
   *   "gray list" that is ignored in this detection algorithm:
   *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
   * IN assertion: the fields Freq of dyn_ltree are set.
   */


  function detect_data_type(s) {
    /* black_mask is the bit mask of black-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */
    var black_mask = 0xf3ffc07f;
    var n;
    /* Check for non-textual ("black-listed") bytes. */

    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
      if (black_mask & 1 && s.dyn_ltree[n * 2]
      /*.Freq*/
      !== 0) {
        return Z_BINARY;
      }
    }
    /* Check for textual ("white-listed") bytes. */


    if (s.dyn_ltree[9 * 2]
    /*.Freq*/
    !== 0 || s.dyn_ltree[10 * 2]
    /*.Freq*/
    !== 0 || s.dyn_ltree[13 * 2]
    /*.Freq*/
    !== 0) {
      return Z_TEXT;
    }

    for (n = 32; n < LITERALS; n++) {
      if (s.dyn_ltree[n * 2]
      /*.Freq*/
      !== 0) {
        return Z_TEXT;
      }
    }
    /* There are no "black-listed" or "white-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */


    return Z_BINARY;
  }

  var static_init_done = false;
  /* ===========================================================================
   * Initialize the tree data structures for a new zlib stream.
   */

  function _tr_init(s) {
    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }

    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
    s.bi_buf = 0;
    s.bi_valid = 0;
    /* Initialize the first block of the first file: */

    init_block(s);
  }
  /* ===========================================================================
   * Send a stored block
   */

  function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;
  //charf *buf;       /* input block */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
    /* send block type */

    copy_block(s, buf, stored_len, true);
    /* with header */
  }
  /* ===========================================================================
   * Send one empty static block to give enough lookahead for inflate.
   * This takes 10 bits, of which 7 may remain in the bit buffer.
   */

  function _tr_align(s) {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  }
  /* ===========================================================================
   * Determine the best encoding for the current block: dynamic trees, static
   * trees or store, and output the encoded block to the zip file.
   */

  function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;
  //charf *buf;       /* input block, or NULL if too old */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */
  {
    var opt_lenb, static_lenb;
    /* opt_len and static_len in bytes */

    var max_blindex = 0;
    /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */

    if (s.level > 0) {
      /* Check if the file is binary or text */
      if (s.strm.data_type === Z_UNKNOWN) {
        s.strm.data_type = detect_data_type(s);
      }
      /* Construct the literal and distance trees */


      build_tree(s, s.l_desc); // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));

      build_tree(s, s.d_desc); // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));

      /* At this point, opt_len and static_len are the total bit lengths of
       * the compressed block data, excluding the tree representations.
       */

      /* Build the bit length tree for the above two trees, and get the index
       * in bl_order of the last bit length code to send.
       */

      max_blindex = build_bl_tree(s);
      /* Determine the best encoding. Compute the block lengths in bytes. */

      opt_lenb = s.opt_len + 3 + 7 >>> 3;
      static_lenb = s.static_len + 3 + 7 >>> 3; // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
      //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
      //        s->last_lit));

      if (static_lenb <= opt_lenb) {
        opt_lenb = static_lenb;
      }
    } else {
      // Assert(buf != (char*)0, "lost buf");
      opt_lenb = static_lenb = stored_len + 5;
      /* force a stored block */
    }

    if (stored_len + 4 <= opt_lenb && buf !== -1) {
      /* 4: two words for the lengths */

      /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
       * Otherwise we can't have processed more than WSIZE input bytes since
       * the last block flush, because compression would have been
       * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
       * transform a block into a stored block.
       */
      _tr_stored_block(s, buf, stored_len, last);
    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);
    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    } // Assert (s->compressed_len == s->bits_sent, "bad compressed size");

    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */


    init_block(s);

    if (last) {
      bi_windup(s);
    } // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
    //       s->compressed_len-7*last));

  }
  /* ===========================================================================
   * Save the match info and tally the frequency counts. Return true if
   * the current block must be flushed.
   */

  function _tr_tally(s, dist, lc) //    deflate_state *s;
  //    unsigned dist;  /* distance of matched string */
  //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
  {
    //var out_length, in_length, dcode;
    s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
    s.last_lit++;

    if (dist === 0) {
      /* lc is the unmatched char */
      s.dyn_ltree[lc * 2] /*.Freq*/++;
    } else {
      s.matches++;
      /* Here, lc is the match length - MIN_MATCH */

      dist--;
      /* dist = match distance - 1 */
      //Assert((ush)dist < (ush)MAX_DIST(s) &&
      //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
      //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

      s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
      s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
    } // (!) This block is disabled in zlib defailts,
    // don't enable it for binary compatibility
    //#ifdef TRUNCATE_BLOCK
    //  /* Try to guess if it is profitable to stop the current block here */
    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
    //    /* Compute an upper bound for the compressed length */
    //    out_length = s.last_lit*8;
    //    in_length = s.strstart - s.block_start;
    //
    //    for (dcode = 0; dcode < D_CODES; dcode++) {
    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
    //    }
    //    out_length >>>= 3;
    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
    //    //       s->last_lit, in_length, out_length,
    //    //       100L - out_length*100L/in_length));
    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
    //      return true;
    //    }
    //  }
    //#endif


    return s.last_lit === s.lit_bufsize - 1;
    /* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */
  }

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It doesn't worth to make additional optimizationa as in original.
  // Small size is preferable.
  function adler32(adler, buf, len, pos) {
    var s1 = adler & 0xffff | 0,
        s2 = adler >>> 16 & 0xffff | 0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = s1 + buf[pos++] | 0;
        s2 = s2 + s1 | 0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return s1 | s2 << 16 | 0;
  }

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.
  // Use ordinary array, since untyped makes no boost here
  function makeTable() {
    var c,
        table = [];

    for (var n = 0; n < 256; n++) {
      c = n;

      for (var k = 0; k < 8; k++) {
        c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
      }

      table[n] = c;
    }

    return table;
  } // Create table on load. Just 255 signed longs. Not a problem.


  var crcTable = makeTable();

  function crc32(crc, buf, len, pos) {
    var t = crcTable,
        end = pos + len;
    crc ^= -1;

    for (var i = pos; i < end; i++) {
      crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return crc ^ -1; // >>> 0;
  }

  /* Public constants ==========================================================*/

  /* ===========================================================================*/

  /* Allowed flush values; see deflate() and inflate() below for details */

  var Z_NO_FLUSH = 0;
  var Z_PARTIAL_FLUSH = 1; //var Z_SYNC_FLUSH    = 2;

  var Z_FULL_FLUSH = 3;
  var Z_FINISH = 4;
  var Z_BLOCK = 5; //var Z_TREES         = 6;

  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */

  var Z_OK = 0;
  var Z_STREAM_END = 1; //var Z_NEED_DICT     = 2;
  //var Z_ERRNO         = -1;

  var Z_STREAM_ERROR = -2;
  var Z_DATA_ERROR = -3; //var Z_MEM_ERROR     = -4;

  var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

  /* compression levels */
  //var Z_NO_COMPRESSION      = 0;
  //var Z_BEST_SPEED          = 1;
  //var Z_BEST_COMPRESSION    = 9;

  var Z_DEFAULT_COMPRESSION = -1;
  var Z_FILTERED = 1;
  var Z_HUFFMAN_ONLY = 2;
  var Z_RLE = 3;
  var Z_FIXED$1 = 4;
  /* Possible values of the data_type field (though see inflate()) */
  //var Z_BINARY              = 0;
  //var Z_TEXT                = 1;
  //var Z_ASCII               = 1; // = Z_TEXT

  var Z_UNKNOWN$1 = 2;
  /* The deflate compression method */

  var Z_DEFLATED = 8;
  /*============================================================================*/

  var MAX_MEM_LEVEL = 9;
  var LENGTH_CODES$1 = 29;
  /* number of length codes, not counting the special END_BLOCK code */

  var LITERALS$1 = 256;
  /* number of literal bytes 0..255 */

  var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
  /* number of Literal or Length codes, including the END_BLOCK code */

  var D_CODES$1 = 30;
  /* number of distance codes */

  var BL_CODES$1 = 19;
  /* number of codes used to transfer the bit lengths */

  var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
  /* maximum heap size */

  var MAX_BITS$1 = 15;
  /* All codes must not exceed MAX_BITS bits */

  var MIN_MATCH$1 = 3;
  var MAX_MATCH$1 = 258;
  var MIN_LOOKAHEAD = MAX_MATCH$1 + MIN_MATCH$1 + 1;
  var PRESET_DICT = 0x20;
  var INIT_STATE = 42;
  var EXTRA_STATE = 69;
  var NAME_STATE = 73;
  var COMMENT_STATE = 91;
  var HCRC_STATE = 103;
  var BUSY_STATE = 113;
  var FINISH_STATE = 666;
  var BS_NEED_MORE = 1;
  /* block not completed, need more input or more output */

  var BS_BLOCK_DONE = 2;
  /* block flush performed */

  var BS_FINISH_STARTED = 3;
  /* finish started, need only more output at next deflate */

  var BS_FINISH_DONE = 4;
  /* finish done, accept no more input or output */

  var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

  function err(strm, errorCode) {
    strm.msg = msg[errorCode];
    return errorCode;
  }

  function rank(f) {
    return (f << 1) - (f > 4 ? 9 : 0);
  }

  function zero$2(buf) {
    var len = buf.length;

    while (--len >= 0) {
      buf[len] = 0;
    }
  }
  /* =========================================================================
   * Flush as much pending output as possible. All deflate() output goes
   * through this function so some applications may wish to modify it
   * to avoid allocating a large strm->output buffer and copying into it.
   * (See also read_buf()).
   */


  function flush_pending(strm) {
    var s = strm.state; //_tr_flush_bits(s);

    var len = s.pending;

    if (len > strm.avail_out) {
      len = strm.avail_out;
    }

    if (len === 0) {
      return;
    }

    arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;

    if (s.pending === 0) {
      s.pending_out = 0;
    }
  }

  function flush_block_only(s, last) {
    _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);

    s.block_start = s.strstart;
    flush_pending(s.strm);
  }

  function put_byte(s, b) {
    s.pending_buf[s.pending++] = b;
  }
  /* =========================================================================
   * Put a short in the pending buffer. The 16-bit value is put in MSB order.
   * IN assertion: the stream state is correct and there is enough room in
   * pending_buf.
   */


  function putShortMSB(s, b) {
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = b >>> 8 & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
  }
  /* ===========================================================================
   * Read a new buffer from the current input stream, update the adler32
   * and total number of bytes read.  All deflate() input goes through
   * this function so some applications may wish to modify it to avoid
   * allocating a large strm->input buffer and copying from it.
   * (See also flush_pending()).
   */


  function read_buf(strm, buf, start, size) {
    var len = strm.avail_in;

    if (len > size) {
      len = size;
    }

    if (len === 0) {
      return 0;
    }

    strm.avail_in -= len; // zmemcpy(buf, strm->next_in, len);

    arraySet(buf, strm.input, strm.next_in, len, start);

    if (strm.state.wrap === 1) {
      strm.adler = adler32(strm.adler, buf, len, start);
    } else if (strm.state.wrap === 2) {
      strm.adler = crc32(strm.adler, buf, len, start);
    }

    strm.next_in += len;
    strm.total_in += len;
    return len;
  }
  /* ===========================================================================
   * Set match_start to the longest match starting at the given string and
   * return its length. Matches shorter or equal to prev_length are discarded,
   * in which case the result is equal to prev_length and match_start is
   * garbage.
   * IN assertions: cur_match is the head of the hash chain for the current
   *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
   * OUT assertion: the match length is not greater than s->lookahead.
   */


  function longest_match(s, cur_match) {
    var chain_length = s.max_chain_length;
    /* max hash chain length */

    var scan = s.strstart;
    /* current string */

    var match;
    /* matched string */

    var len;
    /* length of current match */

    var best_len = s.prev_length;
    /* best match length so far */

    var nice_match = s.nice_match;
    /* stop if match long enough */

    var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0
    /*NIL*/
    ;
    var _win = s.window; // shortcut

    var wmask = s.w_mask;
    var prev = s.prev;
    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */

    var strend = s.strstart + MAX_MATCH$1;
    var scan_end1 = _win[scan + best_len - 1];
    var scan_end = _win[scan + best_len];
    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
     * It is easy to get rid of this optimization if necessary.
     */
    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */

    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */


    if (nice_match > s.lookahead) {
      nice_match = s.lookahead;
    } // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");


    do {
      // Assert(cur_match < s->strstart, "no future");
      match = cur_match;
      /* Skip to next match if the match length cannot increase
       * or if the match length is less than 2.  Note that the checks below
       * for insufficient lookahead only occur occasionally for performance
       * reasons.  Therefore uninitialized memory will be accessed, and
       * conditional jumps will be made that depend on those values.
       * However the length of the match is limited to the lookahead, so
       * the output of deflate is not affected by the uninitialized values.
       */

      if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
        continue;
      }
      /* The check at best_len-1 can be removed because it will be made
       * again later. (This heuristic is not always a win.)
       * It is not necessary to compare scan[2] and match[2] since they
       * are always equal when the other bytes match, given that
       * the hash keys are equal and that HASH_BITS >= 8.
       */


      scan += 2;
      match++; // Assert(*scan == *match, "match[2]?");

      /* We check for insufficient lookahead only every 8th comparison;
       * the 256th check will be made at strstart+258.
       */

      do {
        /*jshint noempty:false*/
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");


      len = MAX_MATCH$1 - (strend - scan);
      scan = strend - MAX_MATCH$1;

      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;

        if (len >= nice_match) {
          break;
        }

        scan_end1 = _win[scan + best_len - 1];
        scan_end = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

    if (best_len <= s.lookahead) {
      return best_len;
    }

    return s.lookahead;
  }
  /* ===========================================================================
   * Fill the window when the lookahead becomes insufficient.
   * Updates strstart and lookahead.
   *
   * IN assertion: lookahead < MIN_LOOKAHEAD
   * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
   *    At least one byte has been read, or avail_in == 0; reads are
   *    performed for at least two bytes (required for the zip translate_eol
   *    option -- not supported here).
   */


  function fill_window(s) {
    var _w_size = s.w_size;
    var p, n, m, more, str; //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

    do {
      more = s.window_size - s.lookahead - s.strstart; // JS ints have 32 bit, block below not needed

      /* Deal with !@#$% 64K limit: */
      //if (sizeof(int) <= 2) {
      //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
      //        more = wsize;
      //
      //  } else if (more == (unsigned)(-1)) {
      //        /* Very unlikely, but possible on 16 bit machine if
      //         * strstart == 0 && lookahead == 1 (input done a byte at time)
      //         */
      //        more--;
      //    }
      //}

      /* If the window is almost full and there is insufficient lookahead,
       * move the upper half to the lower one to make room in the upper half.
       */

      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
        arraySet(s.window, s.window, _w_size, _w_size, 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        /* we now have strstart >= MAX_DIST */

        s.block_start -= _w_size;
        /* Slide the hash table (could be avoided with 32 bit values
         at the expense of memory usage). We slide even when level == 0
         to keep the hash table consistent if we switch back to level > 0
         later. (Using level 0 permanently is not an optimal usage of
         zlib, so we don't care about this pathological case.)
         */

        n = s.hash_size;
        p = n;

        do {
          m = s.head[--p];
          s.head[p] = m >= _w_size ? m - _w_size : 0;
        } while (--n);

        n = _w_size;
        p = n;

        do {
          m = s.prev[--p];
          s.prev[p] = m >= _w_size ? m - _w_size : 0;
          /* If n is not on any hash chain, prev[n] is garbage but
           * its value will never be used.
           */
        } while (--n);

        more += _w_size;
      }

      if (s.strm.avail_in === 0) {
        break;
      }
      /* If there was no sliding:
       *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
       *    more == window_size - lookahead - strstart
       * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
       * => more >= window_size - 2*WSIZE + 2
       * In the BIG_MEM or MMAP case (not yet supported),
       *   window_size == input_size + MIN_LOOKAHEAD  &&
       *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
       * Otherwise, window_size == 2*WSIZE so more >= 2.
       * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
       */
      //Assert(more >= 2, "more < 2");


      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;
      /* Initialize the hash value now that we have some input: */

      if (s.lookahead + s.insert >= MIN_MATCH$1) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];
        /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */

        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; //#if MIN_MATCH != 3
        //        Call update_hash() MIN_MATCH-3 more times
        //#endif

        while (s.insert) {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH$1 - 1]) & s.hash_mask;
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;

          if (s.lookahead + s.insert < MIN_MATCH$1) {
            break;
          }
        }
      }
      /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
       * but this is not important since only literal bytes will be emitted.
       */

    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
    /* If the WIN_INIT bytes after the end of the current data have never been
     * written, then zero those bytes in order to avoid memory check reports of
     * the use of uninitialized (or uninitialised as Julian writes) bytes by
     * the longest match routines.  Update the high water mark for the next
     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
     */
    //  if (s.high_water < s.window_size) {
    //    var curr = s.strstart + s.lookahead;
    //    var init = 0;
    //
    //    if (s.high_water < curr) {
    //      /* Previous high water mark below current data -- zero WIN_INIT
    //       * bytes or up to end of window, whichever is less.
    //       */
    //      init = s.window_size - curr;
    //      if (init > WIN_INIT)
    //        init = WIN_INIT;
    //      zmemzero(s->window + curr, (unsigned)init);
    //      s->high_water = curr + init;
    //    }
    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
    //      /* High water mark at or above current data, but below current data
    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
    //       * to end of window, whichever is less.
    //       */
    //      init = (ulg)curr + WIN_INIT - s->high_water;
    //      if (init > s->window_size - s->high_water)
    //        init = s->window_size - s->high_water;
    //      zmemzero(s->window + s->high_water, (unsigned)init);
    //      s->high_water += init;
    //    }
    //  }
    //
    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
    //    "not enough room for search");

  }
  /* ===========================================================================
   * Copy without compression as much as possible from the input stream, return
   * the current block state.
   * This function does not insert new strings in the dictionary since
   * uncompressible data is probably not useful. This function is used
   * only for the level=0 compression option.
   * NOTE: this function should be optimized to avoid extra copying from
   * window to pending_buf.
   */


  function deflate_stored(s, flush) {
    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    var max_block_size = 0xffff;

    if (max_block_size > s.pending_buf_size - 5) {
      max_block_size = s.pending_buf_size - 5;
    }
    /* Copy as much as possible from input to output: */


    for (;;) {
      /* Fill the window as much as possible: */
      if (s.lookahead <= 1) {
        //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
        //  s->block_start >= (long)s->w_size, "slide too late");
        //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
        //        s.block_start >= s.w_size)) {
        //        throw  new Error("slide too late");
        //      }
        fill_window(s);

        if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
        }
        /* flush the current block */

      } //Assert(s->block_start >= 0L, "block gone");
      //    if (s.block_start < 0) throw new Error("block gone");


      s.strstart += s.lookahead;
      s.lookahead = 0;
      /* Emit a stored block if pending_buf will be full: */

      var max_start = s.block_start + max_block_size;

      if (s.strstart === 0 || s.strstart >= max_start) {
        /* strstart == 0 is possible when wraparound on 16-bit machine */
        s.lookahead = s.strstart - max_start;
        s.strstart = max_start;
        /*** FLUSH_BLOCK(s, 0); ***/

        flush_block_only(s, false);

        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/

      }
      /* Flush if we may have to slide, otherwise block_start may become
       * negative and the data will be gone:
       */


      if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);

        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/

      }
    }

    s.insert = 0;

    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);

      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/


      return BS_FINISH_DONE;
    }

    if (s.strstart > s.block_start) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }

    return BS_NEED_MORE;
  }
  /* ===========================================================================
   * Compress as much as possible from the input stream, return the current
   * block state.
   * This function does not perform lazy evaluation of matches and inserts
   * new strings in the dictionary only for unmatched strings or for short
   * matches. It is used only for the fast compression options.
   */


  function deflate_fast(s, flush) {
    var hash_head;
    /* head of the hash chain */

    var bflush;
    /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);

        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
          /* flush the current block */
        }
      }
      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */


      hash_head = 0
      /*NIL*/
      ;

      if (s.lookahead >= MIN_MATCH$1) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }
      /* Find the longest match, discarding those <= prev_length.
       * At this point we have always match_length < MIN_MATCH
       */


      if (hash_head !== 0
      /*NIL*/
      && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */
      }

      if (s.match_length >= MIN_MATCH$1) {
        // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

        /*** _tr_tally_dist(s, s.strstart - s.match_start,
                       s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);
        s.lookahead -= s.match_length;
        /* Insert new strings in the hash table only if the match length
         * is not too large. This saves time but degrades compression.
         */

        if (s.match_length <= s.max_lazy_match
        /*max_insert_length*/
        && s.lookahead >= MIN_MATCH$1) {
          s.match_length--;
          /* string at strstart already in table */

          do {
            s.strstart++;
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/

            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/

            /* strstart never exceeds WSIZE-MAX_MATCH, so there are
             * always MIN_MATCH bytes ahead.
             */
          } while (--s.match_length !== 0);

          s.strstart++;
        } else {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */

          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask; //#if MIN_MATCH != 3
          //                Call UPDATE_HASH() MIN_MATCH-3 more times
          //#endif

          /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
           * matter since it will be recomputed at next deflate call.
           */
        }
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s.window[s.strstart]));

        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);

        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/

      }
    }

    s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;

    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);

      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/


      return BS_FINISH_DONE;
    }

    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }

    return BS_BLOCK_DONE;
  }
  /* ===========================================================================
   * Same as above, but achieves better compression. We use a lazy
   * evaluation for matches: a match is finally adopted only if there is
   * no better match at the next window position.
   */


  function deflate_slow(s, flush) {
    var hash_head;
    /* head of hash chain */

    var bflush;
    /* set if current block must be flushed */

    var max_insert;
    /* Process the input block. */

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);

        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
        }
        /* flush the current block */

      }
      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */


      hash_head = 0
      /*NIL*/
      ;

      if (s.lookahead >= MIN_MATCH$1) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }
      /* Find the longest match, discarding those <= prev_length.
       */


      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH$1 - 1;

      if (hash_head !== 0
      /*NIL*/
      && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
      /*MAX_DIST(s)*/
      ) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */

          if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096
          /*TOO_FAR*/
          )) {
            /* If prev_match is also MIN_MATCH, match_start is garbage
             * but we will ignore the current match anyway.
             */
            s.match_length = MIN_MATCH$1 - 1;
          }
        }
      /* If there was a match at the previous step and the current
       * match is not better, output the previous match:
       */


      if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
        /* Do not insert strings in hash table beyond this. */
        //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

        /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                       s.prev_length - MIN_MATCH, bflush);***/

        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
        /* Insert in hash table all strings up to the end of the match.
         * strstart-1 and strstart are already inserted. If there is not
         * enough lookahead, the last two strings are not inserted in
         * the hash table.
         */

        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;

        do {
          if (++s.strstart <= max_insert) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
        } while (--s.prev_length !== 0);

        s.match_available = 0;
        s.match_length = MIN_MATCH$1 - 1;
        s.strstart++;

        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);

          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/

        }
      } else if (s.match_available) {
        /* If there was no match at the previous position, output a
         * single literal. If there was a match but the current match
         * is longer, truncate the previous match to a single literal.
         */
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));

        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        if (bflush) {
          /*** FLUSH_BLOCK_ONLY(s, 0) ***/
          flush_block_only(s, false);
          /***/
        }

        s.strstart++;
        s.lookahead--;

        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        /* There is no previous match to compare with, wait for
         * the next step to decide.
         */
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    } //Assert (flush != Z_NO_FLUSH, "no flush?");


    if (s.match_available) {
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));

      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
      s.match_available = 0;
    }

    s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;

    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);

      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/


      return BS_FINISH_DONE;
    }

    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }

    return BS_BLOCK_DONE;
  }
  /* ===========================================================================
   * For Z_RLE, simply look for runs of bytes, generate matches only of distance
   * one.  Do not maintain a hash table.  (It will be regenerated if this run of
   * deflate switches away from Z_RLE.)
   */


  function deflate_rle(s, flush) {
    var bflush;
    /* set if current block must be flushed */

    var prev;
    /* byte at distance one to match */

    var scan, strend;
    /* scan goes up to strend for length of run */

    var _win = s.window;

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the longest run, plus one for the unrolled loop.
       */
      if (s.lookahead <= MAX_MATCH$1) {
        fill_window(s);

        if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }

        if (s.lookahead === 0) {
          break;
        }
        /* flush the current block */

      }
      /* See how many times the previous byte repeats */


      s.match_length = 0;

      if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];

        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH$1;

          do {
            /*jshint noempty:false*/
          } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);

          s.match_length = MAX_MATCH$1 - (strend - scan);

          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        } //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");

      }
      /* Emit match if have run of MIN_MATCH or longer, else emit literal */


      if (s.match_length >= MIN_MATCH$1) {
        //check_match(s, s.strstart, s.strstart - 1, s.match_length);

        /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH$1);
        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s->window[s->strstart]));

        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
      }

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);

        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/

      }
    }

    s.insert = 0;

    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);

      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/


      return BS_FINISH_DONE;
    }

    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }

    return BS_BLOCK_DONE;
  }
  /* ===========================================================================
   * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
   * (It will be regenerated if this run of deflate switches away from Huffman.)
   */


  function deflate_huff(s, flush) {
    var bflush;
    /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we have a literal to write. */
      if (s.lookahead === 0) {
        fill_window(s);

        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }

          break;
          /* flush the current block */
        }
      }
      /* Output a literal byte */


      s.match_length = 0; //Tracevv((stderr,"%c", s->window[s->strstart]));

      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/

      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);

        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/

      }
    }

    s.insert = 0;

    if (flush === Z_FINISH) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);

      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/


      return BS_FINISH_DONE;
    }

    if (s.last_lit) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);

      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/

    }

    return BS_BLOCK_DONE;
  }
  /* Values for max_lazy_match, good_match and max_chain_length, depending on
   * the desired pack level (0..9). The values given below have been tuned to
   * exclude worst case performance for pathological files. Better values may be
   * found for specific files.
   */


  function Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }

  var configuration_table;
  configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),
  /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),
  /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),
  /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),
  /* 3 */
  new Config(4, 4, 16, 16, deflate_slow),
  /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),
  /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),
  /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),
  /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),
  /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)
  /* 9 max compression */
  ];
  /* ===========================================================================
   * Initialize the "longest match" routines for a new zlib stream
   */

  function lm_init(s) {
    s.window_size = 2 * s.w_size;
    /*** CLEAR_HASH(s); ***/

    zero$2(s.head); // Fill with NIL (= 0);

    /* Set the default configuration parameters:
     */

    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;
    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH$1 - 1;
    s.match_available = 0;
    s.ins_h = 0;
  }

  function DeflateState() {
    this.strm = null;
    /* pointer back to this zlib stream */

    this.status = 0;
    /* as the name implies */

    this.pending_buf = null;
    /* output still pending */

    this.pending_buf_size = 0;
    /* size of pending_buf */

    this.pending_out = 0;
    /* next pending byte to output to the stream */

    this.pending = 0;
    /* nb of bytes in the pending buffer */

    this.wrap = 0;
    /* bit 0 true for zlib, bit 1 true for gzip */

    this.gzhead = null;
    /* gzip header information to write */

    this.gzindex = 0;
    /* where in extra, name, or comment */

    this.method = Z_DEFLATED;
    /* can only be DEFLATED */

    this.last_flush = -1;
    /* value of flush param for previous deflate call */

    this.w_size = 0;
    /* LZ77 window size (32K by default) */

    this.w_bits = 0;
    /* log2(w_size)  (8..16) */

    this.w_mask = 0;
    /* w_size - 1 */

    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
     * and move to the first half later to keep a dictionary of at least wSize
     * bytes. With this organization, matches are limited to a distance of
     * wSize-MAX_MATCH bytes, but this ensures that IO is always
     * performed with a length multiple of the block size.
     */

    this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
     * is directly used as sliding window.
     */

    this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
     * array to 64K, this link is maintained only for the last 32K strings.
     * An index in this array is thus a window index modulo 32K.
     */

    this.head = null;
    /* Heads of the hash chains or NIL. */

    this.ins_h = 0;
    /* hash index of string to be inserted */

    this.hash_size = 0;
    /* number of elements in hash table */

    this.hash_bits = 0;
    /* log2(hash_size) */

    this.hash_mask = 0;
    /* hash_size-1 */

    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
     * step. It must be such that after MIN_MATCH steps, the oldest
     * byte no longer takes part in the hash key, that is:
     *   hash_shift * MIN_MATCH >= hash_bits
     */

    this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
     * negative when the window is moved backwards.
     */

    this.match_length = 0;
    /* length of best match */

    this.prev_match = 0;
    /* previous match */

    this.match_available = 0;
    /* set if previous match exists */

    this.strstart = 0;
    /* start of string to insert */

    this.match_start = 0;
    /* start of matching string */

    this.lookahead = 0;
    /* number of valid bytes ahead in window */

    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
     * are discarded. This is used in the lazy match evaluation.
     */

    this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
     * length.  A higher limit improves compression ratio but degrades the
     * speed.
     */

    this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
     * smaller than this value. This mechanism is used only for compression
     * levels >= 4.
     */
    // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;

    /* Insert new strings in the hash table only if the match length is not
     * greater than this length. This saves time but degrades compression.
     * max_insert_length is used only for compression levels <= 3.
     */

    this.level = 0;
    /* compression level (1..9) */

    this.strategy = 0;
    /* favor or force Huffman coding*/

    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */

    this.nice_match = 0;
    /* Stop searching when current match exceeds this */

    /* used by c: */

    /* Didn't use ct_data typedef below to suppress compiler warning */
    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective

    this.dyn_ltree = new Buf16(HEAP_SIZE$1 * 2);
    this.dyn_dtree = new Buf16((2 * D_CODES$1 + 1) * 2);
    this.bl_tree = new Buf16((2 * BL_CODES$1 + 1) * 2);
    zero$2(this.dyn_ltree);
    zero$2(this.dyn_dtree);
    zero$2(this.bl_tree);
    this.l_desc = null;
    /* desc. for literal tree */

    this.d_desc = null;
    /* desc. for distance tree */

    this.bl_desc = null;
    /* desc. for bit length tree */
    //ush bl_count[MAX_BITS+1];

    this.bl_count = new Buf16(MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */
    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */

    this.heap = new Buf16(2 * L_CODES$1 + 1);
    /* heap used to build the Huffman trees */

    zero$2(this.heap);
    this.heap_len = 0;
    /* number of elements in the heap */

    this.heap_max = 0;
    /* element of largest frequency */

    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
     * The same heap array is used to build all
     */

    this.depth = new Buf16(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];

    zero$2(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
     */

    this.l_buf = 0;
    /* buffer index for literals or lengths */

    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
     * limiting lit_bufsize to 64K:
     *   - frequencies can be kept in 16 bit counters
     *   - if compression is not successful for the first block, all input
     *     data is still in the window so we can still emit a stored block even
     *     when input comes from standard input.  (This can also be done for
     *     all blocks if lit_bufsize is not greater than 32K.)
     *   - if compression is not successful for a file smaller than 64K, we can
     *     even emit a stored file instead of a stored block (saving 5 bytes).
     *     This is applicable only for zip (not gzip or zlib).
     *   - creating new Huffman trees less frequently may not provide fast
     *     adaptation to changes in the input data statistics. (Take for
     *     example a binary file with poorly compressible code followed by
     *     a highly compressible string table.) Smaller buffer sizes give
     *     fast adaptation but have of course the overhead of transmitting
     *     trees more frequently.
     *   - I can't count above 4
     */

    this.last_lit = 0;
    /* running index in l_buf */

    this.d_buf = 0;
    /* Buffer index for distances. To simplify the code, d_buf and l_buf have
     * the same number of elements. To use different lengths, an extra flag
     * array would be necessary.
     */

    this.opt_len = 0;
    /* bit length of current block with optimal trees */

    this.static_len = 0;
    /* bit length of current block with static trees */

    this.matches = 0;
    /* number of string matches in current block */

    this.insert = 0;
    /* bytes at end of window left to insert */

    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
     * significant bits).
     */

    this.bi_valid = 0;
    /* Number of valid bits in bi_buf.  All bits above the last valid bit
     * are always zero.
     */
    // Used for window memory init. We safely ignore it for JS. That makes
    // sense only for pointers and memory check tools.
    //this.high_water = 0;

    /* High water mark offset in window for initialized bytes -- bytes above
     * this are set to zero in order to avoid memory check warnings when
     * longest match routines access bytes past the input.  This is then
     * updated to the new high water mark.
     */
  }

  function deflateResetKeep(strm) {
    var s;

    if (!strm || !strm.state) {
      return err(strm, Z_STREAM_ERROR);
    }

    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN$1;
    s = strm.state;
    s.pending = 0;
    s.pending_out = 0;

    if (s.wrap < 0) {
      s.wrap = -s.wrap;
      /* was made negative by deflate(..., Z_FINISH); */
    }

    s.status = s.wrap ? INIT_STATE : BUSY_STATE;
    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
    : 1; // adler32(0, Z_NULL, 0)

    s.last_flush = Z_NO_FLUSH;

    _tr_init(s);

    return Z_OK;
  }
  function deflateReset(strm) {
    var ret = deflateResetKeep(strm);

    if (ret === Z_OK) {
      lm_init(strm.state);
    }

    return ret;
  }
  function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
    if (!strm) {
      // === Z_NULL
      return Z_STREAM_ERROR;
    }

    var wrap = 1;

    if (level === Z_DEFAULT_COMPRESSION) {
      level = 6;
    }

    if (windowBits < 0) {
      /* suppress zlib wrapper */
      wrap = 0;
      windowBits = -windowBits;
    } else if (windowBits > 15) {
      wrap = 2;
      /* write gzip wrapper instead */

      windowBits -= 16;
    }

    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED$1) {
      return err(strm, Z_STREAM_ERROR);
    }

    if (windowBits === 8) {
      windowBits = 9;
    }
    /* until 256-byte window bug fixed */


    var s = new DeflateState();
    strm.state = s;
    s.strm = strm;
    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;
    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);
    s.window = new Buf8(s.w_size * 2);
    s.head = new Buf16(s.hash_size);
    s.prev = new Buf16(s.w_size); // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */

    s.lit_bufsize = 1 << memLevel + 6;
    /* 16K elements by default */

    s.pending_buf_size = s.lit_bufsize * 4; //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
    //s->pending_buf = (uchf *) overlay;

    s.pending_buf = new Buf8(s.pending_buf_size); // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

    s.d_buf = 1 * s.lit_bufsize; //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

    s.l_buf = (1 + 2) * s.lit_bufsize;
    s.level = level;
    s.strategy = strategy;
    s.method = method;
    return deflateReset(strm);
  }
  function deflate(strm, flush) {
    var old_flush, s;
    var beg, val; // for gzip header write only

    if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
    }

    s = strm.state;

    if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
      return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
    }

    s.strm = strm;
    /* just in case */

    old_flush = s.last_flush;
    s.last_flush = flush;
    /* Write the header */

    if (s.status === INIT_STATE) {
      if (s.wrap === 2) {
        // GZIP header
        strm.adler = 0; //crc32(0L, Z_NULL, 0);

        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);

        if (!s.gzhead) {
          // s->gzhead == Z_NULL
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
        } else {
          put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
          put_byte(s, s.gzhead.time & 0xff);
          put_byte(s, s.gzhead.time >> 8 & 0xff);
          put_byte(s, s.gzhead.time >> 16 & 0xff);
          put_byte(s, s.gzhead.time >> 24 & 0xff);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, s.gzhead.os & 0xff);

          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 0xff);
            put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
          }

          if (s.gzhead.hcrc) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
          }

          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      } else // DEFLATE header
        {
          var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
          var level_flags = -1;

          if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
            level_flags = 0;
          } else if (s.level < 6) {
            level_flags = 1;
          } else if (s.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }

          header |= level_flags << 6;

          if (s.strstart !== 0) {
            header |= PRESET_DICT;
          }

          header += 31 - header % 31;
          s.status = BUSY_STATE;
          putShortMSB(s, header);
          /* Save the adler32 of the preset dictionary: */

          if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 0xffff);
          }

          strm.adler = 1; // adler32(0L, Z_NULL, 0);
        }
    } //#ifdef GZIP


    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra
      /* != Z_NULL*/
      ) {
          beg = s.pending;
          /* start of bytes to update crc */

          while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              flush_pending(strm);
              beg = s.pending;

              if (s.pending === s.pending_buf_size) {
                break;
              }
            }

            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
            s.gzindex++;
          }

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }

          if (s.gzindex === s.gzhead.extra.length) {
            s.gzindex = 0;
            s.status = NAME_STATE;
          }
        } else {
        s.status = NAME_STATE;
      }
    }

    if (s.status === NAME_STATE) {
      if (s.gzhead.name
      /* != Z_NULL*/
      ) {
          beg = s.pending;
          /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              flush_pending(strm);
              beg = s.pending;

              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            } // JS specific: little magic to add zero terminator to end of string


            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }

            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }

          if (val === 0) {
            s.gzindex = 0;
            s.status = COMMENT_STATE;
          }
        } else {
        s.status = COMMENT_STATE;
      }
    }

    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment
      /* != Z_NULL*/
      ) {
          beg = s.pending;
          /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }

              flush_pending(strm);
              beg = s.pending;

              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            } // JS specific: little magic to add zero terminator to end of string


            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }

            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }

          if (val === 0) {
            s.status = HCRC_STATE;
          }
        } else {
        s.status = HCRC_STATE;
      }
    }

    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
        }

        if (s.pending + 2 <= s.pending_buf_size) {
          put_byte(s, strm.adler & 0xff);
          put_byte(s, strm.adler >> 8 & 0xff);
          strm.adler = 0; //crc32(0L, Z_NULL, 0);

          s.status = BUSY_STATE;
        }
      } else {
        s.status = BUSY_STATE;
      }
    } //#endif

    /* Flush as much pending output as possible */


    if (s.pending !== 0) {
      flush_pending(strm);

      if (strm.avail_out === 0) {
        /* Since avail_out is 0, deflate will be called again with
         * more output space, but possibly with both pending and
         * avail_in equal to zero. There won't be anything to do,
         * but this is not an error situation so make sure we
         * return OK instead of BUF_ERROR at next call of deflate:
         */
        s.last_flush = -1;
        return Z_OK;
      }
      /* Make sure there is something to do and avoid duplicate consecutive
       * flushes. For repeated and useless calls with Z_FINISH, we keep
       * returning Z_STREAM_END instead of Z_BUF_ERROR.
       */

    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
      return err(strm, Z_BUF_ERROR);
    }
    /* User must not provide more input after the first FINISH: */


    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR);
    }
    /* Start a new block or continue the current one.
     */


    if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
      var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }

      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          /* avoid BUF_ERROR next call, see above */
        }

        return Z_OK;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
         * of deflate should use the same flush parameter to make sure
         * that the flush is complete. So we don't have to output an
         * empty block here, this will be done at next call. This also
         * ensures that for a very small output buffer, we emit at most
         * one empty block.
         */
      }

      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          _tr_align(s);
        } else if (flush !== Z_BLOCK) {
          /* FULL_FLUSH or SYNC_FLUSH */
          _tr_stored_block(s, 0, 0, false);
          /* For a full flush, this empty block will be recognized
           * as a special marker by inflate_sync().
           */


          if (flush === Z_FULL_FLUSH) {
            /*** CLEAR_HASH(s); ***/

            /* forget history */
            zero$2(s.head); // Fill with NIL (= 0);

            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }

        flush_pending(strm);

        if (strm.avail_out === 0) {
          s.last_flush = -1;
          /* avoid BUF_ERROR at next call, see above */

          return Z_OK;
        }
      }
    } //Assert(strm->avail_out > 0, "bug2");
    //if (strm.avail_out <= 0) { throw new Error("bug2");}


    if (flush !== Z_FINISH) {
      return Z_OK;
    }

    if (s.wrap <= 0) {
      return Z_STREAM_END;
    }
    /* Write the trailer */


    if (s.wrap === 2) {
      put_byte(s, strm.adler & 0xff);
      put_byte(s, strm.adler >> 8 & 0xff);
      put_byte(s, strm.adler >> 16 & 0xff);
      put_byte(s, strm.adler >> 24 & 0xff);
      put_byte(s, strm.total_in & 0xff);
      put_byte(s, strm.total_in >> 8 & 0xff);
      put_byte(s, strm.total_in >> 16 & 0xff);
      put_byte(s, strm.total_in >> 24 & 0xff);
    } else {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }

    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */

    if (s.wrap > 0) {
      s.wrap = -s.wrap;
    }
    /* write the trailer only once! */


    return s.pending !== 0 ? Z_OK : Z_STREAM_END;
  }
  function deflateEnd(strm) {
    var status;

    if (!strm
    /*== Z_NULL*/
    || !strm.state
    /*== Z_NULL*/
    ) {
        return Z_STREAM_ERROR;
      }

    status = strm.state.status;

    if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
      return err(strm, Z_STREAM_ERROR);
    }

    strm.state = null;
    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
  }
  /* Not implemented
  exports.deflateBound = deflateBound;
  exports.deflateCopy = deflateCopy;
  exports.deflateParams = deflateParams;
  exports.deflatePending = deflatePending;
  exports.deflatePrime = deflatePrime;
  exports.deflateTune = deflateTune;
  */

  // See state defs from inflate.js
  var BAD = 30;
  /* got a data error -- remain here until reset */

  var TYPE = 12;
  /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */

  function inflate_fast(strm, start) {
    var state;

    var _in;
    /* local strm.input */


    var last;
    /* have enough input while in < last */

    var _out;
    /* local strm.output */


    var beg;
    /* inflate()'s initial strm.output */

    var end;
    /* while out < end, enough space available */
    //#ifdef INFLATE_STRICT

    var dmax;
    /* maximum distance from zlib header */
    //#endif

    var wsize;
    /* window size or zero if not using window */

    var whave;
    /* valid bytes in the window */

    var wnext;
    /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools

    var s_window;
    /* allocated sliding window, if wsize != 0 */

    var hold;
    /* local strm.hold */

    var bits;
    /* local strm.bits */

    var lcode;
    /* local strm.lencode */

    var dcode;
    /* local strm.distcode */

    var lmask;
    /* mask for first level of length codes */

    var dmask;
    /* mask for first level of distance codes */

    var here;
    /* retrieved table entry */

    var op;
    /* code bits, operation, extra bits, or */

    /*  window position, window bytes to copy */

    var len;
    /* match length, unused bytes */

    var dist;
    /* match distance */

    var from;
    /* where to copy match from */

    var from_source;
    var input, output; // JS specific, because we have no pointers

    /* copy state to local variables */

    state = strm.state; //here = state.here;

    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

    dmax = state.dmax; //#endif

    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;
    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top: do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen: for (;;) {
        // Goto emulation
        op = here >>> 24
        /*here.bits*/
        ;
        hold >>>= op;
        bits -= op;
        op = here >>> 16 & 0xff
        /*here.op*/
        ;

        if (op === 0) {
          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff
          /*here.val*/
          ;
        } else if (op & 16) {
          /* length base */
          len = here & 0xffff
          /*here.val*/
          ;
          op &= 15;
          /* number of extra bits */

          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }

            len += hold & (1 << op) - 1;
            hold >>>= op;
            bits -= op;
          } //Tracevv((stderr, "inflate:         length %u\n", len));


          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }

          here = dcode[hold & dmask];

          dodist: for (;;) {
            // goto emulation
            op = here >>> 24
            /*here.bits*/
            ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff
            /*here.op*/
            ;

            if (op & 16) {
              /* distance base */
              dist = here & 0xffff
              /*here.val*/
              ;
              op &= 15;
              /* number of extra bits */

              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;

                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }

              dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break top;
              } //#endif


              hold >>>= op;
              bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

              op = _out - beg;
              /* max distance in output */

              if (dist > op) {
                /* see if copy from window */
                op = dist - op;
                /* distance back in window */

                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break top;
                  } // (!) This block is disabled in zlib defailts,
                  // don't enable it for binary compatibility
                  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                  //                if (len <= op - whave) {
                  //                  do {
                  //                    output[_out++] = 0;
                  //                  } while (--len);
                  //                  continue top;
                  //                }
                  //                len -= op - whave;
                  //                do {
                  //                  output[_out++] = 0;
                  //                } while (--op > whave);
                  //                if (op === 0) {
                  //                  from = _out - dist;
                  //                  do {
                  //                    output[_out++] = output[from++];
                  //                  } while (--len);
                  //                  continue top;
                  //                }
                  //#endif

                }

                from = 0; // window index

                from_source = s_window;

                if (wnext === 0) {
                  /* very common case */
                  from += wsize - op;

                  if (op < len) {
                    /* some from window */
                    len -= op;

                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);

                    from = _out - dist;
                    /* rest from output */

                    from_source = output;
                  }
                } else if (wnext < op) {
                  /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;

                  if (op < len) {
                    /* some from end of window */
                    len -= op;

                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);

                    from = 0;

                    if (wnext < len) {
                      /* some from start of window */
                      op = wnext;
                      len -= op;

                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);

                      from = _out - dist;
                      /* rest from output */

                      from_source = output;
                    }
                  }
                } else {
                  /* contiguous in window */
                  from += wnext - op;

                  if (op < len) {
                    /* some from window */
                    len -= op;

                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);

                    from = _out - dist;
                    /* rest from output */

                    from_source = output;
                  }
                }

                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }

                if (len) {
                  output[_out++] = from_source[from++];

                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              } else {
                from = _out - dist;
                /* copy direct from output */

                do {
                  /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);

                if (len) {
                  output[_out++] = output[from++];

                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            } else if ((op & 64) === 0) {
              /* 2nd level distance code */
              here = dcode[(here & 0xffff) + (
              /*here.val*/
              hold & (1 << op) - 1)];
              continue dodist;
            } else {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        } else if ((op & 64) === 0) {
          /* 2nd level length code */
          here = lcode[(here & 0xffff) + (
          /*here.val*/
          hold & (1 << op) - 1)];
          continue dolen;
        } else if (op & 32) {
          /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE;
          break top;
        } else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);
    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;
    /* update state and return */

    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
    state.hold = hold;
    state.bits = bits;
    return;
  }

  var MAXBITS = 15;
  var ENOUGH_LENS = 852;
  var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  var CODES = 0;
  var LENS = 1;
  var DISTS = 2;
  var lbase = [
  /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
  var lext = [
  /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
  var dbase = [
  /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
  var dext = [
  /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
  function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
    var bits = opts.bits; //here = opts.here; /* table entry for duplication */

    var len = 0;
    /* a code's length in bits */

    var sym = 0;
    /* index of code symbols */

    var min = 0,
        max = 0;
    /* minimum and maximum code lengths */

    var root = 0;
    /* number of index bits for root table */

    var curr = 0;
    /* number of index bits for current table */

    var drop = 0;
    /* code bits to drop for sub-table */

    var left = 0;
    /* number of prefix codes available */

    var used = 0;
    /* code entries in table used */

    var huff = 0;
    /* Huffman code */

    var incr;
    /* for incrementing code, index */

    var fill;
    /* index for replicating entries */

    var low;
    /* low bits for current root entry */

    var mask;
    /* mask for low root bits */

    var next;
    /* next available space in table */

    var base = null;
    /* base value table to use */

    var base_index = 0; //  var shoextra;    /* extra bits table to use */

    var end;
    /* use base and extra for symbol > end */

    var count = new Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

    var offs = new Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

    var extra = null;
    var extra_index = 0;
    var here_bits, here_op, here_val;
    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.
      This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.
      The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.
      The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }

    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }
    /* bound code lengths, force root to be within code lengths */


    root = bits;

    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) {
        break;
      }
    }

    if (root > max) {
      root = max;
    }

    if (max === 0) {
      /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;

      table[table_index++] = 1 << 24 | 64 << 16 | 0;
      opts.bits = 1;
      return 0;
      /* no symbols, but wait for decoding to report error */
    }

    for (min = 1; min < max; min++) {
      if (count[min] !== 0) {
        break;
      }
    }

    if (root < min) {
      root = min;
    }
    /* check for an over-subscribed or incomplete set of lengths */


    left = 1;

    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];

      if (left < 0) {
        return -1;
      }
      /* over-subscribed */

    }

    if (left > 0 && (type === CODES || max !== 1)) {
      return -1;
      /* incomplete set */
    }
    /* generate offsets into symbol table for each length for sorting */


    offs[1] = 0;

    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }
    /* sort symbols by length, by symbol order within each length */


    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }
    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.
      root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.
      When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.
      used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.
      sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8


    if (type === CODES) {
      base = extra = work;
      /* dummy value--not used */

      end = 19;
    } else if (type === LENS) {
      base = lbase;
      base_index -= 257;
      extra = lext;
      extra_index -= 257;
      end = 256;
    } else {
      /* DISTS */
      base = dbase;
      extra = dext;
      end = -1;
    }
    /* initialize opts for loop */


    huff = 0;
    /* starting code */

    sym = 0;
    /* starting code symbol */

    len = min;
    /* starting code length */

    next = table_index;
    /* current table to fill in */

    curr = root;
    /* current table index bits */

    drop = 0;
    /* current bits to drop from code for index */

    low = -1;
    /* trigger new sub-table when len > root */

    used = 1 << root;
    /* use root table entries */

    mask = used - 1;
    /* mask for comparing low */

    /* check available table space */

    if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
      return 1;
    }
    /* process all codes and make table entries */

    for (;;) {
      /* create table entry */

      here_bits = len - drop;

      if (work[sym] < end) {
        here_op = 0;
        here_val = work[sym];
      } else if (work[sym] > end) {
        here_op = extra[extra_index + work[sym]];
        here_val = base[base_index + work[sym]];
      } else {
        here_op = 32 + 64;
        /* end of block */

        here_val = 0;
      }
      /* replicate for those indices with low len bits equal to huff */


      incr = 1 << len - drop;
      fill = 1 << curr;
      min = fill;
      /* save offset to next table */

      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
      } while (fill !== 0);
      /* backwards increment the len-bit code huff */


      incr = 1 << len - 1;

      while (huff & incr) {
        incr >>= 1;
      }

      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }
      /* go to next symbol, update count, len */


      sym++;

      if (--count[len] === 0) {
        if (len === max) {
          break;
        }

        len = lens[lens_index + work[sym]];
      }
      /* create new sub-table if needed */


      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }
        /* increment past last table */


        next += min;
        /* here min is 1 << curr */

        /* determine length of next table */

        curr = len - drop;
        left = 1 << curr;

        while (curr + drop < max) {
          left -= count[curr + drop];

          if (left <= 0) {
            break;
          }

          curr++;
          left <<= 1;
        }
        /* check for enough space */


        used += 1 << curr;

        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
          return 1;
        }
        /* point entry in root table to sub-table */


        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/

        table[low] = root << 24 | curr << 16 | next - table_index | 0;
      }
    }
    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */


    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = len - drop << 24 | 64 << 16 | 0;
    }
    /* set return parameters */
    //opts.table_index += used;


    opts.bits = root;
    return 0;
  }

  var CODES$1 = 0;
  var LENS$1 = 1;
  var DISTS$1 = 2;
  /* Public constants ==========================================================*/

  /* ===========================================================================*/

  /* Allowed flush values; see deflate() and inflate() below for details */
  //var Z_NO_FLUSH      = 0;
  //var Z_PARTIAL_FLUSH = 1;
  //var Z_SYNC_FLUSH    = 2;
  //var Z_FULL_FLUSH    = 3;

  var Z_FINISH$1 = 4;
  var Z_BLOCK$1 = 5;
  var Z_TREES = 6;
  /* Return codes for the compression/decompression functions. Negative values
   * are errors, positive values are used for special but normal events.
   */

  var Z_OK$1 = 0;
  var Z_STREAM_END$1 = 1;
  var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

  var Z_STREAM_ERROR$1 = -2;
  var Z_DATA_ERROR$1 = -3;
  var Z_MEM_ERROR = -4;
  var Z_BUF_ERROR$1 = -5; //var Z_VERSION_ERROR = -6;

  /* The deflate compression method */

  var Z_DEFLATED$1 = 8;
  /* STATES ====================================================================*/

  /* ===========================================================================*/

  var HEAD = 1;
  /* i: waiting for magic header */

  var FLAGS = 2;
  /* i: waiting for method and flags (gzip) */

  var TIME = 3;
  /* i: waiting for modification time (gzip) */

  var OS = 4;
  /* i: waiting for extra flags and operating system (gzip) */

  var EXLEN = 5;
  /* i: waiting for extra length (gzip) */

  var EXTRA = 6;
  /* i: waiting for extra bytes (gzip) */

  var NAME = 7;
  /* i: waiting for end of file name (gzip) */

  var COMMENT = 8;
  /* i: waiting for end of comment (gzip) */

  var HCRC = 9;
  /* i: waiting for header crc (gzip) */

  var DICTID = 10;
  /* i: waiting for dictionary check value */

  var DICT = 11;
  /* waiting for inflateSetDictionary() call */

  var TYPE$1 = 12;
  /* i: waiting for type bits, including last-flag bit */

  var TYPEDO = 13;
  /* i: same, but skip check to exit inflate on new block */

  var STORED = 14;
  /* i: waiting for stored size (length and complement) */

  var COPY_ = 15;
  /* i/o: same as COPY below, but only first time in */

  var COPY = 16;
  /* i/o: waiting for input or output to copy stored block */

  var TABLE = 17;
  /* i: waiting for dynamic block table lengths */

  var LENLENS = 18;
  /* i: waiting for code length code lengths */

  var CODELENS = 19;
  /* i: waiting for length/lit and distance code lengths */

  var LEN_ = 20;
  /* i: same as LEN below, but only first time in */

  var LEN = 21;
  /* i: waiting for length/lit/eob code */

  var LENEXT = 22;
  /* i: waiting for length extra bits */

  var DIST = 23;
  /* i: waiting for distance code */

  var DISTEXT = 24;
  /* i: waiting for distance extra bits */

  var MATCH = 25;
  /* o: waiting for output space to copy string */

  var LIT = 26;
  /* o: waiting for output space to write literal */

  var CHECK = 27;
  /* i: waiting for 32-bit check value */

  var LENGTH = 28;
  /* i: waiting for 32-bit length (gzip) */

  var DONE = 29;
  /* finished check, done -- remain here until reset */

  var BAD$1 = 30;
  /* got a data error -- remain here until reset */

  var MEM = 31;
  /* got an inflate() memory error -- remain here until reset */

  var SYNC = 32;
  /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/

  var ENOUGH_LENS$1 = 852;
  var ENOUGH_DISTS$1 = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

  function zswap32(q) {
    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
  }

  function InflateState() {
    this.mode = 0;
    /* current inflate mode */

    this.last = false;
    /* true if processing last block */

    this.wrap = 0;
    /* bit 0 true for zlib, bit 1 true for gzip */

    this.havedict = false;
    /* true if dictionary provided */

    this.flags = 0;
    /* gzip header method and flags (0 if zlib) */

    this.dmax = 0;
    /* zlib header max distance (INFLATE_STRICT) */

    this.check = 0;
    /* protected copy of check value */

    this.total = 0;
    /* protected copy of output count */
    // TODO: may be {}

    this.head = null;
    /* where to save gzip header information */

    /* sliding window */

    this.wbits = 0;
    /* log base 2 of requested window size */

    this.wsize = 0;
    /* window size or zero if not using window */

    this.whave = 0;
    /* valid bytes in the window */

    this.wnext = 0;
    /* window write index */

    this.window = null;
    /* allocated sliding window, if needed */

    /* bit accumulator */

    this.hold = 0;
    /* input bit accumulator */

    this.bits = 0;
    /* number of bits in "in" */

    /* for string and stored block copying */

    this.length = 0;
    /* literal or length of data to copy */

    this.offset = 0;
    /* distance back to copy string from */

    /* for table and code decoding */

    this.extra = 0;
    /* extra bits needed */

    /* fixed and dynamic code tables */

    this.lencode = null;
    /* starting table for length/literal codes */

    this.distcode = null;
    /* starting table for distance codes */

    this.lenbits = 0;
    /* index bits for lencode */

    this.distbits = 0;
    /* index bits for distcode */

    /* dynamic table building */

    this.ncode = 0;
    /* number of code length code lengths */

    this.nlen = 0;
    /* number of length code lengths */

    this.ndist = 0;
    /* number of distance code lengths */

    this.have = 0;
    /* number of code lengths in lens[] */

    this.next = null;
    /* next available space in codes[] */

    this.lens = new Buf16(320);
    /* temporary storage for code lengths */

    this.work = new Buf16(288);
    /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new Buf32(ENOUGH);       /* space for code tables */

    this.lendyn = null;
    /* dynamic table for length/literal codes (JS specific) */

    this.distdyn = null;
    /* dynamic table for distance codes (JS specific) */

    this.sane = 0;
    /* if false, allow invalid distance too far */

    this.back = 0;
    /* bits back of last unprocessed length/lit */

    this.was = 0;
    /* initial length of match */
  }

  function inflateResetKeep(strm) {
    var state;

    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = '';
    /*Z_NULL*/

    if (state.wrap) {
      /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }

    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.dmax = 32768;
    state.head = null
    /*Z_NULL*/
    ;
    state.hold = 0;
    state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

    state.lencode = state.lendyn = new Buf32(ENOUGH_LENS$1);
    state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS$1);
    state.sane = 1;
    state.back = -1; //Tracev((stderr, "inflate: reset\n"));

    return Z_OK$1;
  }
  function inflateReset(strm) {
    var state;

    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);
  }
  function inflateReset2(strm, windowBits) {
    var wrap;
    var state;
    /* get the state */

    if (!strm || !strm.state) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;
    /* extract wrap request from windowBits parameter */

    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    } else {
      wrap = (windowBits >> 4) + 1;

      if (windowBits < 48) {
        windowBits &= 15;
      }
    }
    /* set number of window bits, free window if different */


    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR$1;
    }

    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }
    /* update state and reset the rest of it */


    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  }
  function inflateInit2(strm, windowBits) {
    var ret;
    var state;

    if (!strm) {
      return Z_STREAM_ERROR$1;
    } //strm.msg = Z_NULL;                 /* in case we return an error */


    state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));

    strm.state = state;
    state.window = null
    /*Z_NULL*/
    ;
    ret = inflateReset2(strm, windowBits);

    if (ret !== Z_OK$1) {
      strm.state = null
      /*Z_NULL*/
      ;
    }

    return ret;
  }
  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */

  var virgin = true;
  var lenfix, distfix; // We have no pointers in JS, so keep tables separate

  function fixedtables(state) {
    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      var sym;
      lenfix = new Buf32(512);
      distfix = new Buf32(32);
      /* literal/length table */

      sym = 0;

      while (sym < 144) {
        state.lens[sym++] = 8;
      }

      while (sym < 256) {
        state.lens[sym++] = 9;
      }

      while (sym < 280) {
        state.lens[sym++] = 7;
      }

      while (sym < 288) {
        state.lens[sym++] = 8;
      }

      inflate_table(LENS$1, state.lens, 0, 288, lenfix, 0, state.work, {
        bits: 9
      });
      /* distance table */

      sym = 0;

      while (sym < 32) {
        state.lens[sym++] = 5;
      }

      inflate_table(DISTS$1, state.lens, 0, 32, distfix, 0, state.work, {
        bits: 5
      });
      /* do this just once */

      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  }
  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */


  function updatewindow(strm, src, end, copy) {
    var dist;
    var state = strm.state;
    /* if it hasn't been done already, allocate space for the window */

    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;
      state.window = new Buf8(state.wsize);
    }
    /* copy state->wsize or less output bytes into the circular window */


    if (copy >= state.wsize) {
      arraySet(state.window, src, end - state.wsize, state.wsize, 0);
      state.wnext = 0;
      state.whave = state.wsize;
    } else {
      dist = state.wsize - state.wnext;

      if (dist > copy) {
        dist = copy;
      } //zmemcpy(state->window + state->wnext, end - copy, dist);


      arraySet(state.window, src, end - copy, dist, state.wnext);
      copy -= dist;

      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        arraySet(state.window, src, end - copy, copy, 0);
        state.wnext = copy;
        state.whave = state.wsize;
      } else {
        state.wnext += dist;

        if (state.wnext === state.wsize) {
          state.wnext = 0;
        }

        if (state.whave < state.wsize) {
          state.whave += dist;
        }
      }
    }

    return 0;
  }

  function inflate(strm, flush) {
    var state;
    var input, output; // input/output buffers

    var next;
    /* next input INDEX */

    var put;
    /* next output INDEX */

    var have, left;
    /* available input and output */

    var hold;
    /* bit buffer */

    var bits;
    /* bits in bit buffer */

    var _in, _out;
    /* save starting available input and output */


    var copy;
    /* number of stored or match bytes to copy */

    var from;
    /* where to copy match bytes from */

    var from_source;
    var here = 0;
    /* current decoding table entry */

    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //var last;                   /* parent table entry */

    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

    var len;
    /* length to copy for repeats, bits to drop */

    var ret;
    /* return code */

    var hbuf = new Buf8(4);
    /* buffer for gzip header crc calculation */

    var opts;
    var n; // temporary var for NEED_BITS

    var order =
    /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

    if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;

    if (state.mode === TYPE$1) {
      state.mode = TYPEDO;
    }
    /* skip check */
    //--- LOAD() ---


    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits; //---

    _in = have;
    _out = left;
    ret = Z_OK$1;

    inf_leave: // goto emulation
    for (;;) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          } //=== NEEDBITS(16);


          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          if (state.wrap & 2 && hold === 0x8b1f) {
            /* gzip header */
            state.check = 0
            /*crc32(0L, Z_NULL, 0)*/
            ; //=== CRC2(state.check, hold);

            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0); //===//
            //=== INITBITS();

            hold = 0;
            bits = 0; //===//

            state.mode = FLAGS;
            break;
          }

          state.flags = 0;
          /* expect zlib header */

          if (state.head) {
            state.head.done = false;
          }

          if (!(state.wrap & 1) ||
          /* check if zlib header allowed */
          (((hold & 0xff) <<
          /*BITS(8)*/
          8) + (hold >> 8)) % 31) {
            strm.msg = 'incorrect header check';
            state.mode = BAD$1;
            break;
          }

          if ((hold & 0x0f) !==
          /*BITS(4)*/
          Z_DEFLATED$1) {
            strm.msg = 'unknown compression method';
            state.mode = BAD$1;
            break;
          } //--- DROPBITS(4) ---//


          hold >>>= 4;
          bits -= 4; //---//

          len = (hold & 0x0f) +
          /*BITS(4)*/
          8;

          if (state.wbits === 0) {
            state.wbits = len;
          } else if (len > state.wbits) {
            strm.msg = 'invalid window size';
            state.mode = BAD$1;
            break;
          }

          state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

          strm.adler = state.check = 1
          /*adler32(0L, Z_NULL, 0)*/
          ;
          state.mode = hold & 0x200 ? DICTID : TYPE$1; //=== INITBITS();

          hold = 0;
          bits = 0; //===//

          break;

        case FLAGS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          state.flags = hold;

          if ((state.flags & 0xff) !== Z_DEFLATED$1) {
            strm.msg = 'unknown compression method';
            state.mode = BAD$1;
            break;
          }

          if (state.flags & 0xe000) {
            strm.msg = 'unknown header flags set';
            state.mode = BAD$1;
            break;
          }

          if (state.head) {
            state.head.text = hold >> 8 & 1;
          }

          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0); //===//
          } //=== INITBITS();


          hold = 0;
          bits = 0; //===//

          state.mode = TIME;

        /* falls through */

        case TIME:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          if (state.head) {
            state.head.time = hold;
          }

          if (state.flags & 0x0200) {
            //=== CRC4(state.check, hold)
            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            hbuf[2] = hold >>> 16 & 0xff;
            hbuf[3] = hold >>> 24 & 0xff;
            state.check = crc32(state.check, hbuf, 4, 0); //===
          } //=== INITBITS();


          hold = 0;
          bits = 0; //===//

          state.mode = OS;

        /* falls through */

        case OS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          if (state.head) {
            state.head.xflags = hold & 0xff;
            state.head.os = hold >> 8;
          }

          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0); //===//
          } //=== INITBITS();


          hold = 0;
          bits = 0; //===//

          state.mode = EXLEN;

        /* falls through */

        case EXLEN:
          if (state.flags & 0x0400) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8;
            } //===//


            state.length = hold;

            if (state.head) {
              state.head.extra_len = hold;
            }

            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = hold >>> 8 & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0); //===//
            } //=== INITBITS();


            hold = 0;
            bits = 0; //===//
          } else if (state.head) {
            state.head.extra = null
            /*Z_NULL*/
            ;
          }

          state.mode = EXTRA;

        /* falls through */

        case EXTRA:
          if (state.flags & 0x0400) {
            copy = state.length;

            if (copy > have) {
              copy = have;
            }

            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;

                if (!state.head.extra) {
                  // Use untyped array for more conveniend processing later
                  state.head.extra = new Array(state.head.extra_len);
                }

                arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len); //zmemcpy(state.head.extra + len, next,
                //        len + copy > state.head.extra_max ?
                //        state.head.extra_max - len : copy);
              }

              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }

              have -= copy;
              next += copy;
              state.length -= copy;
            }

            if (state.length) {
              break inf_leave;
            }
          }

          state.length = 0;
          state.mode = NAME;

        /* falls through */

        case NAME:
          if (state.flags & 0x0800) {
            if (have === 0) {
              break inf_leave;
            }

            copy = 0;

            do {
              // TODO: 2 or 1 bytes?
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */

              if (state.head && len && state.length < 65536
              /*state.head.name_max*/
              ) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);

            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }

            have -= copy;
            next += copy;

            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }

          state.length = 0;
          state.mode = COMMENT;

        /* falls through */

        case COMMENT:
          if (state.flags & 0x1000) {
            if (have === 0) {
              break inf_leave;
            }

            copy = 0;

            do {
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */

              if (state.head && len && state.length < 65536
              /*state.head.comm_max*/
              ) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);

            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }

            have -= copy;
            next += copy;

            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }

          state.mode = HCRC;

        /* falls through */

        case HCRC:
          if (state.flags & 0x0200) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8;
            } //===//


            if (hold !== (state.check & 0xffff)) {
              strm.msg = 'header crc mismatch';
              state.mode = BAD$1;
              break;
            } //=== INITBITS();


            hold = 0;
            bits = 0; //===//
          }

          if (state.head) {
            state.head.hcrc = state.flags >> 9 & 1;
            state.head.done = true;
          }

          strm.adler = state.check = 0;
          state.mode = TYPE$1;
          break;

        case DICTID:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          strm.adler = state.check = zswap32(hold); //=== INITBITS();

          hold = 0;
          bits = 0; //===//

          state.mode = DICT;

        /* falls through */

        case DICT:
          if (state.havedict === 0) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits; //---

            return Z_NEED_DICT;
          }

          strm.adler = state.check = 1
          /*adler32(0L, Z_NULL, 0)*/
          ;
          state.mode = TYPE$1;

        /* falls through */

        case TYPE$1:
          if (flush === Z_BLOCK$1 || flush === Z_TREES) {
            break inf_leave;
          }

        /* falls through */

        case TYPEDO:
          if (state.last) {
            //--- BYTEBITS() ---//
            hold >>>= bits & 7;
            bits -= bits & 7; //---//

            state.mode = CHECK;
            break;
          } //=== NEEDBITS(3); */


          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          state.last = hold & 0x01
          /*BITS(1)*/
          ; //--- DROPBITS(1) ---//

          hold >>>= 1;
          bits -= 1; //---//

          switch (hold & 0x03) {
            /*BITS(2)*/
            case 0:
              /* stored block */
              //Tracev((stderr, "inflate:     stored block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = STORED;
              break;

            case 1:
              /* fixed block */
              fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
              //        state.last ? " (last)" : ""));

              state.mode = LEN_;
              /* decode codes */

              if (flush === Z_TREES) {
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2; //---//

                break inf_leave;
              }

              break;

            case 2:
              /* dynamic block */
              //Tracev((stderr, "inflate:     dynamic codes block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = TABLE;
              break;

            case 3:
              strm.msg = 'invalid block type';
              state.mode = BAD$1;
          } //--- DROPBITS(2) ---//


          hold >>>= 2;
          bits -= 2; //---//

          break;

        case STORED:
          //--- BYTEBITS() ---// /* go to byte boundary */
          hold >>>= bits & 7;
          bits -= bits & 7; //---//
          //=== NEEDBITS(32); */

          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
            strm.msg = 'invalid stored block lengths';
            state.mode = BAD$1;
            break;
          }

          state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
          //        state.length));
          //=== INITBITS();

          hold = 0;
          bits = 0; //===//

          state.mode = COPY_;

          if (flush === Z_TREES) {
            break inf_leave;
          }

        /* falls through */

        case COPY_:
          state.mode = COPY;

        /* falls through */

        case COPY:
          copy = state.length;

          if (copy) {
            if (copy > have) {
              copy = have;
            }

            if (copy > left) {
              copy = left;
            }

            if (copy === 0) {
              break inf_leave;
            } //--- zmemcpy(put, next, copy); ---


            arraySet(output, input, next, copy, put); //---//

            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          } //Tracev((stderr, "inflate:       stored end\n"));


          state.mode = TYPE$1;
          break;

        case TABLE:
          //=== NEEDBITS(14); */
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8;
          } //===//


          state.nlen = (hold & 0x1f) +
          /*BITS(5)*/
          257; //--- DROPBITS(5) ---//

          hold >>>= 5;
          bits -= 5; //---//

          state.ndist = (hold & 0x1f) +
          /*BITS(5)*/
          1; //--- DROPBITS(5) ---//

          hold >>>= 5;
          bits -= 5; //---//

          state.ncode = (hold & 0x0f) +
          /*BITS(4)*/
          4; //--- DROPBITS(4) ---//

          hold >>>= 4;
          bits -= 4; //---//
          //#ifndef PKZIP_BUG_WORKAROUND

          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = 'too many length or distance symbols';
            state.mode = BAD$1;
            break;
          } //#endif
          //Tracev((stderr, "inflate:       table sizes ok\n"));


          state.have = 0;
          state.mode = LENLENS;

        /* falls through */

        case LENLENS:
          while (state.have < state.ncode) {
            //=== NEEDBITS(3);
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8;
            } //===//


            state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
            //--- DROPBITS(3) ---//

            hold >>>= 3;
            bits -= 3; //---//
          }

          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          } // We have separate tables & no pointers. 2 commented lines below not needed.
          //state.next = state.codes;
          //state.lencode = state.next;
          // Switch to use dynamic table


          state.lencode = state.lendyn;
          state.lenbits = 7;
          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;

          if (ret) {
            strm.msg = 'invalid code lengths set';
            state.mode = BAD$1;
            break;
          } //Tracev((stderr, "inflate:       code lengths ok\n"));


          state.have = 0;
          state.mode = CODELENS;

        /* falls through */

        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (;;) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              /*BITS(state.lenbits)*/

              here_bits = here >>> 24;
              here_op = here >>> 16 & 0xff;
              here_val = here & 0xffff;

              if (here_bits <= bits) {
                break;
              } //--- PULLBYTE() ---//


              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8; //---//
            }

            if (here_val < 16) {
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                //=== NEEDBITS(here.bits + 2);
                n = here_bits + 2;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//
                //--- DROPBITS(here.bits) ---//


                hold >>>= here_bits;
                bits -= here_bits; //---//

                if (state.have === 0) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD$1;
                  break;
                }

                len = state.lens[state.have - 1];
                copy = 3 + (hold & 0x03); //BITS(2);
                //--- DROPBITS(2) ---//

                hold >>>= 2;
                bits -= 2; //---//
              } else if (here_val === 17) {
                //=== NEEDBITS(here.bits + 3);
                n = here_bits + 3;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//
                //--- DROPBITS(here.bits) ---//


                hold >>>= here_bits;
                bits -= here_bits; //---//

                len = 0;
                copy = 3 + (hold & 0x07); //BITS(3);
                //--- DROPBITS(3) ---//

                hold >>>= 3;
                bits -= 3; //---//
              } else {
                //=== NEEDBITS(here.bits + 7);
                n = here_bits + 7;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//
                //--- DROPBITS(here.bits) ---//


                hold >>>= here_bits;
                bits -= here_bits; //---//

                len = 0;
                copy = 11 + (hold & 0x7f); //BITS(7);
                //--- DROPBITS(7) ---//

                hold >>>= 7;
                bits -= 7; //---//
              }

              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD$1;
                break;
              }

              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }
          /* handle error breaks in while */


          if (state.mode === BAD$1) {
            break;
          }
          /* check for end-of-block code (better have one) */


          if (state.lens[256] === 0) {
            strm.msg = 'invalid code -- missing end-of-block';
            state.mode = BAD$1;
            break;
          }
          /* build code tables -- note: do not change the lenbits or distbits
             values here (9 and 6) without reading the comments in inftrees.h
             concerning the ENOUGH constants, which depend on those values */


          state.lenbits = 9;
          opts = {
            bits: state.lenbits
          };
          ret = inflate_table(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;

          state.lenbits = opts.bits; // state.lencode = state.next;

          if (ret) {
            strm.msg = 'invalid literal/lengths set';
            state.mode = BAD$1;
            break;
          }

          state.distbits = 6; //state.distcode.copy(state.codes);
          // Switch to use dynamic table

          state.distcode = state.distdyn;
          opts = {
            bits: state.distbits
          };
          ret = inflate_table(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;

          state.distbits = opts.bits; // state.distcode = state.next;

          if (ret) {
            strm.msg = 'invalid distances set';
            state.mode = BAD$1;
            break;
          } //Tracev((stderr, 'inflate:       codes ok\n'));


          state.mode = LEN_;

          if (flush === Z_TREES) {
            break inf_leave;
          }

        /* falls through */

        case LEN_:
          state.mode = LEN;

        /* falls through */

        case LEN:
          if (have >= 6 && left >= 258) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits; //---

            inflate_fast(strm, _out); //--- LOAD() ---

            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits; //---

            if (state.mode === TYPE$1) {
              state.back = -1;
            }

            break;
          }

          state.back = 0;

          for (;;) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            /*BITS(state.lenbits)*/

            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) {
              break;
            } //--- PULLBYTE() ---//


            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8; //---//
          }

          if (here_op && (here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;

            for (;;) {
              here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
              /*BITS(last.bits + last.op)*/
              last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 0xff;
              here_val = here & 0xffff;

              if (last_bits + here_bits <= bits) {
                break;
              } //--- PULLBYTE() ---//


              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8; //---//
            } //--- DROPBITS(last.bits) ---//


            hold >>>= last_bits;
            bits -= last_bits; //---//

            state.back += last_bits;
          } //--- DROPBITS(here.bits) ---//


          hold >>>= here_bits;
          bits -= here_bits; //---//

          state.back += here_bits;
          state.length = here_val;

          if (here_op === 0) {
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            state.mode = LIT;
            break;
          }

          if (here_op & 32) {
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.back = -1;
            state.mode = TYPE$1;
            break;
          }

          if (here_op & 64) {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD$1;
            break;
          }

          state.extra = here_op & 15;
          state.mode = LENEXT;

        /* falls through */

        case LENEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;

            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8;
            } //===//


            state.length += hold & (1 << state.extra) - 1
            /*BITS(state.extra)*/
            ; //--- DROPBITS(state.extra) ---//

            hold >>>= state.extra;
            bits -= state.extra; //---//

            state.back += state.extra;
          } //Tracevv((stderr, "inflate:         length %u\n", state.length));


          state.was = state.length;
          state.mode = DIST;

        /* falls through */

        case DIST:
          for (;;) {
            here = state.distcode[hold & (1 << state.distbits) - 1];
            /*BITS(state.distbits)*/

            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) {
              break;
            } //--- PULLBYTE() ---//


            if (have === 0) {
              break inf_leave;
            }

            have--;
            hold += input[next++] << bits;
            bits += 8; //---//
          }

          if ((here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;

            for (;;) {
              here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
              /*BITS(last.bits + last.op)*/
              last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 0xff;
              here_val = here & 0xffff;

              if (last_bits + here_bits <= bits) {
                break;
              } //--- PULLBYTE() ---//


              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8; //---//
            } //--- DROPBITS(last.bits) ---//


            hold >>>= last_bits;
            bits -= last_bits; //---//

            state.back += last_bits;
          } //--- DROPBITS(here.bits) ---//


          hold >>>= here_bits;
          bits -= here_bits; //---//

          state.back += here_bits;

          if (here_op & 64) {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break;
          }

          state.offset = here_val;
          state.extra = here_op & 15;
          state.mode = DISTEXT;

        /* falls through */

        case DISTEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;

            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8;
            } //===//


            state.offset += hold & (1 << state.extra) - 1
            /*BITS(state.extra)*/
            ; //--- DROPBITS(state.extra) ---//

            hold >>>= state.extra;
            bits -= state.extra; //---//

            state.back += state.extra;
          } //#ifdef INFLATE_STRICT


          if (state.offset > state.dmax) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD$1;
            break;
          } //#endif
          //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


          state.mode = MATCH;

        /* falls through */

        case MATCH:
          if (left === 0) {
            break inf_leave;
          }

          copy = _out - left;

          if (state.offset > copy) {
            /* copy from window */
            copy = state.offset - copy;

            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break;
              } // (!) This block is disabled in zlib defailts,
              // don't enable it for binary compatibility
              //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
              //          Trace((stderr, "inflate.c too far\n"));
              //          copy -= state.whave;
              //          if (copy > state.length) { copy = state.length; }
              //          if (copy > left) { copy = left; }
              //          left -= copy;
              //          state.length -= copy;
              //          do {
              //            output[put++] = 0;
              //          } while (--copy);
              //          if (state.length === 0) { state.mode = LEN; }
              //          break;
              //#endif

            }

            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            } else {
              from = state.wnext - copy;
            }

            if (copy > state.length) {
              copy = state.length;
            }

            from_source = state.window;
          } else {
            /* copy from output */
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }

          if (copy > left) {
            copy = left;
          }

          left -= copy;
          state.length -= copy;

          do {
            output[put++] = from_source[from++];
          } while (--copy);

          if (state.length === 0) {
            state.mode = LEN;
          }

          break;

        case LIT:
          if (left === 0) {
            break inf_leave;
          }

          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;

        case CHECK:
          if (state.wrap) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }

              have--; // Use '|' insdead of '+' to make sure that result is signed

              hold |= input[next++] << bits;
              bits += 8;
            } //===//


            _out -= left;
            strm.total_out += _out;
            state.total += _out;

            if (_out) {
              strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
            }

            _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too

            if ((state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = 'incorrect data check';
              state.mode = BAD$1;
              break;
            } //=== INITBITS();


            hold = 0;
            bits = 0; //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
          }

          state.mode = LENGTH;

        /* falls through */

        case LENGTH:
          if (state.wrap && state.flags) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }

              have--;
              hold += input[next++] << bits;
              bits += 8;
            } //===//


            if (hold !== (state.total & 0xffffffff)) {
              strm.msg = 'incorrect length check';
              state.mode = BAD$1;
              break;
            } //=== INITBITS();


            hold = 0;
            bits = 0; //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
          }

          state.mode = DONE;

        /* falls through */

        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;

        case BAD$1:
          ret = Z_DATA_ERROR$1;
          break inf_leave;

        case MEM:
          return Z_MEM_ERROR;

        case SYNC:
        /* falls through */

        default:
          return Z_STREAM_ERROR$1;
      }
    } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
    //--- RESTORE() ---


    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits; //---

    if (state.wsize || _out !== strm.avail_out && state.mode < BAD$1 && (state.mode < CHECK || flush !== Z_FINISH$1)) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }

    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;

    if (state.wrap && _out) {
      strm.adler = state.check =
      /*UPDATE(state.check, strm.next_out - _out, _out);*/
      state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
    }

    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE$1 ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

    if ((_in === 0 && _out === 0 || flush === Z_FINISH$1) && ret === Z_OK$1) {
      ret = Z_BUF_ERROR$1;
    }

    return ret;
  }
  function inflateEnd(strm) {
    if (!strm || !strm.state
    /*|| strm->zfree == (free_func)0*/
    ) {
        return Z_STREAM_ERROR$1;
      }

    var state = strm.state;

    if (state.window) {
      state.window = null;
    }

    strm.state = null;
    return Z_OK$1;
  }
  /* Not implemented
  exports.inflateCopy = inflateCopy;
  exports.inflateGetDictionary = inflateGetDictionary;
  exports.inflateMark = inflateMark;
  exports.inflatePrime = inflatePrime;
  exports.inflateSync = inflateSync;
  exports.inflateSyncPoint = inflateSyncPoint;
  exports.inflateUndermine = inflateUndermine;
  */

  // zlib modes

  var NONE = 0;
  var DEFLATE = 1;
  var INFLATE = 2;
  var GZIP = 3;
  var GUNZIP = 4;
  var DEFLATERAW = 5;
  var INFLATERAW = 6;
  var UNZIP = 7;
  var Z_NO_FLUSH$1 = 0,
      Z_PARTIAL_FLUSH$1 = 1,
      Z_SYNC_FLUSH = 2,
      Z_FULL_FLUSH$1 = 3,
      Z_FINISH$2 = 4,
      Z_BLOCK$2 = 5,
      Z_TREES$1 = 6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK$2 = 0,
      Z_STREAM_END$2 = 1,
      Z_NEED_DICT$1 = 2,
      Z_ERRNO = -1,
      Z_STREAM_ERROR$2 = -2,
      Z_DATA_ERROR$2 = -3,
      //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR$2 = -5,
      //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION = 0,
      Z_BEST_SPEED = 1,
      Z_BEST_COMPRESSION = 9,
      Z_DEFAULT_COMPRESSION$1 = -1,
      Z_FILTERED$1 = 1,
      Z_HUFFMAN_ONLY$1 = 2,
      Z_RLE$1 = 3,
      Z_FIXED$2 = 4,
      Z_DEFAULT_STRATEGY = 0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY$1 = 0,
      Z_TEXT$1 = 1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN$2 = 2,

  /* The deflate compression method */
  Z_DEFLATED$2 = 8;
  function Zlib(mode) {
    if (mode < DEFLATE || mode > UNZIP) throw new TypeError('Bad argument');
    this.mode = mode;
    this.init_done = false;
    this.write_in_progress = false;
    this.pending_close = false;
    this.windowBits = 0;
    this.level = 0;
    this.memLevel = 0;
    this.strategy = 0;
    this.dictionary = null;
  }

  Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
    this.windowBits = windowBits;
    this.level = level;
    this.memLevel = memLevel;
    this.strategy = strategy; // dictionary not supported.

    if (this.mode === GZIP || this.mode === GUNZIP) this.windowBits += 16;
    if (this.mode === UNZIP) this.windowBits += 32;
    if (this.mode === DEFLATERAW || this.mode === INFLATERAW) this.windowBits = -this.windowBits;
    this.strm = new ZStream();
    var status;

    switch (this.mode) {
      case DEFLATE:
      case GZIP:
      case DEFLATERAW:
        status = deflateInit2(this.strm, this.level, Z_DEFLATED$2, this.windowBits, this.memLevel, this.strategy);
        break;

      case INFLATE:
      case GUNZIP:
      case INFLATERAW:
      case UNZIP:
        status = inflateInit2(this.strm, this.windowBits);
        break;

      default:
        throw new Error('Unknown mode ' + this.mode);
    }

    if (status !== Z_OK$2) {
      this._error(status);

      return;
    }

    this.write_in_progress = false;
    this.init_done = true;
  };

  Zlib.prototype.params = function () {
    throw new Error('deflateParams Not supported');
  };

  Zlib.prototype._writeCheck = function () {
    if (!this.init_done) throw new Error('write before init');
    if (this.mode === NONE) throw new Error('already finalized');
    if (this.write_in_progress) throw new Error('write already in progress');
    if (this.pending_close) throw new Error('close is pending');
  };

  Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
    this._writeCheck();

    this.write_in_progress = true;
    var self = this;
    process.nextTick(function () {
      self.write_in_progress = false;

      var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);

      self.callback(res[0], res[1]);
      if (self.pending_close) self.close();
    });
    return this;
  }; // set method for Node buffers, used by pako


  function bufferSet(data, offset) {
    for (var i = 0; i < data.length; i++) {
      this[offset + i] = data[i];
    }
  }

  Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
    this._writeCheck();

    return this._write(flush, input, in_off, in_len, out, out_off, out_len);
  };

  Zlib.prototype._write = function (flush, input, in_off, in_len, out, out_off, out_len) {
    this.write_in_progress = true;

    if (flush !== Z_NO_FLUSH$1 && flush !== Z_PARTIAL_FLUSH$1 && flush !== Z_SYNC_FLUSH && flush !== Z_FULL_FLUSH$1 && flush !== Z_FINISH$2 && flush !== Z_BLOCK$2) {
      throw new Error('Invalid flush value');
    }

    if (input == null) {
      input = new Buffer(0);
      in_len = 0;
      in_off = 0;
    }

    if (out._set) out.set = out._set;else out.set = bufferSet;
    var strm = this.strm;
    strm.avail_in = in_len;
    strm.input = input;
    strm.next_in = in_off;
    strm.avail_out = out_len;
    strm.output = out;
    strm.next_out = out_off;
    var status;

    switch (this.mode) {
      case DEFLATE:
      case GZIP:
      case DEFLATERAW:
        status = deflate(strm, flush);
        break;

      case UNZIP:
      case INFLATE:
      case GUNZIP:
      case INFLATERAW:
        status = inflate(strm, flush);
        break;

      default:
        throw new Error('Unknown mode ' + this.mode);
    }

    if (status !== Z_STREAM_END$2 && status !== Z_OK$2) {
      this._error(status);
    }

    this.write_in_progress = false;
    return [strm.avail_in, strm.avail_out];
  };

  Zlib.prototype.close = function () {
    if (this.write_in_progress) {
      this.pending_close = true;
      return;
    }

    this.pending_close = false;

    if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
      deflateEnd(this.strm);
    } else {
      inflateEnd(this.strm);
    }

    this.mode = NONE;
  };

  var status;

  Zlib.prototype.reset = function () {
    switch (this.mode) {
      case DEFLATE:
      case DEFLATERAW:
        status = deflateReset(this.strm);
        break;

      case INFLATE:
      case INFLATERAW:
        status = inflateReset(this.strm);
        break;
    }

    if (status !== Z_OK$2) {
      this._error(status);
    }
  };

  Zlib.prototype._error = function (status) {
    this.onerror(msg[status] + ': ' + this.strm.msg, status);
    this.write_in_progress = false;
    if (this.pending_close) this.close();
  };

  var _binding = /*#__PURE__*/Object.freeze({
    __proto__: null,
    NONE: NONE,
    DEFLATE: DEFLATE,
    INFLATE: INFLATE,
    GZIP: GZIP,
    GUNZIP: GUNZIP,
    DEFLATERAW: DEFLATERAW,
    INFLATERAW: INFLATERAW,
    UNZIP: UNZIP,
    Z_NO_FLUSH: Z_NO_FLUSH$1,
    Z_PARTIAL_FLUSH: Z_PARTIAL_FLUSH$1,
    Z_SYNC_FLUSH: Z_SYNC_FLUSH,
    Z_FULL_FLUSH: Z_FULL_FLUSH$1,
    Z_FINISH: Z_FINISH$2,
    Z_BLOCK: Z_BLOCK$2,
    Z_TREES: Z_TREES$1,
    Z_OK: Z_OK$2,
    Z_STREAM_END: Z_STREAM_END$2,
    Z_NEED_DICT: Z_NEED_DICT$1,
    Z_ERRNO: Z_ERRNO,
    Z_STREAM_ERROR: Z_STREAM_ERROR$2,
    Z_DATA_ERROR: Z_DATA_ERROR$2,
    Z_BUF_ERROR: Z_BUF_ERROR$2,
    Z_NO_COMPRESSION: Z_NO_COMPRESSION,
    Z_BEST_SPEED: Z_BEST_SPEED,
    Z_BEST_COMPRESSION: Z_BEST_COMPRESSION,
    Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
    Z_FILTERED: Z_FILTERED$1,
    Z_HUFFMAN_ONLY: Z_HUFFMAN_ONLY$1,
    Z_RLE: Z_RLE$1,
    Z_FIXED: Z_FIXED$2,
    Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY,
    Z_BINARY: Z_BINARY$1,
    Z_TEXT: Z_TEXT$1,
    Z_UNKNOWN: Z_UNKNOWN$2,
    Z_DEFLATED: Z_DEFLATED$2,
    Zlib: Zlib
  });

  // Copyright Joyent, Inc. and other Node contributors.

  function assert(a, msg) {
    if (!a) {
      throw new Error(msg);
    }
  }

  var binding = {};
  Object.keys(_binding).forEach(function (key) {
    binding[key] = _binding[key];
  }); // zlib doesn't provide these, so kludge them in following the same
  // const naming scheme zlib uses.

  binding.Z_MIN_WINDOWBITS = 8;
  binding.Z_MAX_WINDOWBITS = 15;
  binding.Z_DEFAULT_WINDOWBITS = 15; // fewer than 64 bytes per chunk is stupid.
  // technically it could work with as few as 8, but even 64 bytes
  // is absurdly low.  Usually a MB or more is best.

  binding.Z_MIN_CHUNK = 64;
  binding.Z_MAX_CHUNK = Infinity;
  binding.Z_DEFAULT_CHUNK = 16 * 1024;
  binding.Z_MIN_MEMLEVEL = 1;
  binding.Z_MAX_MEMLEVEL = 9;
  binding.Z_DEFAULT_MEMLEVEL = 8;
  binding.Z_MIN_LEVEL = -1;
  binding.Z_MAX_LEVEL = 9;
  binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION; // translation table for return codes.

  var codes = {
    Z_OK: binding.Z_OK,
    Z_STREAM_END: binding.Z_STREAM_END,
    Z_NEED_DICT: binding.Z_NEED_DICT,
    Z_ERRNO: binding.Z_ERRNO,
    Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
    Z_DATA_ERROR: binding.Z_DATA_ERROR,
    Z_MEM_ERROR: binding.Z_MEM_ERROR,
    Z_BUF_ERROR: binding.Z_BUF_ERROR,
    Z_VERSION_ERROR: binding.Z_VERSION_ERROR
  };
  Object.keys(codes).forEach(function (k) {
    codes[codes[k]] = k;
  });
  function createDeflate(o) {
    return new Deflate(o);
  }
  function createInflate(o) {
    return new Inflate(o);
  }
  function createDeflateRaw(o) {
    return new DeflateRaw(o);
  }
  function createInflateRaw(o) {
    return new InflateRaw(o);
  }
  function createGzip(o) {
    return new Gzip(o);
  }
  function createGunzip(o) {
    return new Gunzip(o);
  }
  function createUnzip(o) {
    return new Unzip(o);
  } // Convenience methods.
  // compress/decompress a string or buffer in one step.

  function deflate$1(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    return zlibBuffer(new Deflate(opts), buffer, callback);
  }
  function deflateSync(buffer, opts) {
    return zlibBufferSync(new Deflate(opts), buffer);
  }
  function gzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    return zlibBuffer(new Gzip(opts), buffer, callback);
  }
  function gzipSync(buffer, opts) {
    return zlibBufferSync(new Gzip(opts), buffer);
  }
  function deflateRaw(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    return zlibBuffer(new DeflateRaw(opts), buffer, callback);
  }
  function deflateRawSync(buffer, opts) {
    return zlibBufferSync(new DeflateRaw(opts), buffer);
  }
  function unzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    return zlibBuffer(new Unzip(opts), buffer, callback);
  }
  function unzipSync(buffer, opts) {
    return zlibBufferSync(new Unzip(opts), buffer);
  }
  function inflate$1(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    return zlibBuffer(new Inflate(opts), buffer, callback);
  }
  function inflateSync(buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  }
  function gunzip(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    return zlibBuffer(new Gunzip(opts), buffer, callback);
  }
  function gunzipSync(buffer, opts) {
    return zlibBufferSync(new Gunzip(opts), buffer);
  }
  function inflateRaw(buffer, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    return zlibBuffer(new InflateRaw(opts), buffer, callback);
  }
  function inflateRawSync(buffer, opts) {
    return zlibBufferSync(new InflateRaw(opts), buffer);
  }

  function zlibBuffer(engine, buffer, callback) {
    var buffers = [];
    var nread = 0;
    engine.on('error', onError);
    engine.on('end', onEnd);
    engine.end(buffer);
    flow();

    function flow() {
      var chunk;

      while (null !== (chunk = engine.read())) {
        buffers.push(chunk);
        nread += chunk.length;
      }

      engine.once('readable', flow);
    }

    function onError(err) {
      engine.removeListener('end', onEnd);
      engine.removeListener('readable', flow);
      callback(err);
    }

    function onEnd() {
      var buf = Buffer.concat(buffers, nread);
      buffers = [];
      callback(null, buf);
      engine.close();
    }
  }

  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === 'string') buffer = new Buffer(buffer);
    if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
    var flushFlag = binding.Z_FINISH;
    return engine._processChunk(buffer, flushFlag);
  } // generic zlib
  // minimal 2-byte header


  function Deflate(opts) {
    if (!(this instanceof Deflate)) return new Deflate(opts);
    Zlib$1.call(this, opts, binding.DEFLATE);
  }
  function Inflate(opts) {
    if (!(this instanceof Inflate)) return new Inflate(opts);
    Zlib$1.call(this, opts, binding.INFLATE);
  } // gzip - bigger header, same deflate compression

  function Gzip(opts) {
    if (!(this instanceof Gzip)) return new Gzip(opts);
    Zlib$1.call(this, opts, binding.GZIP);
  }
  function Gunzip(opts) {
    if (!(this instanceof Gunzip)) return new Gunzip(opts);
    Zlib$1.call(this, opts, binding.GUNZIP);
  } // raw - no header

  function DeflateRaw(opts) {
    if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
    Zlib$1.call(this, opts, binding.DEFLATERAW);
  }
  function InflateRaw(opts) {
    if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
    Zlib$1.call(this, opts, binding.INFLATERAW);
  } // auto-detect header.

  function Unzip(opts) {
    if (!(this instanceof Unzip)) return new Unzip(opts);
    Zlib$1.call(this, opts, binding.UNZIP);
  } // the Zlib class they all inherit from
  // This thing manages the queue of requests, and returns
  // true or false if there is anything in the queue when
  // you call the .write() method.

  function Zlib$1(opts, mode) {
    this._opts = opts = opts || {};
    this._chunkSize = opts.chunkSize || binding.Z_DEFAULT_CHUNK;
    Transform.call(this, opts);

    if (opts.flush) {
      if (opts.flush !== binding.Z_NO_FLUSH && opts.flush !== binding.Z_PARTIAL_FLUSH && opts.flush !== binding.Z_SYNC_FLUSH && opts.flush !== binding.Z_FULL_FLUSH && opts.flush !== binding.Z_FINISH && opts.flush !== binding.Z_BLOCK) {
        throw new Error('Invalid flush flag: ' + opts.flush);
      }
    }

    this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

    if (opts.chunkSize) {
      if (opts.chunkSize < binding.Z_MIN_CHUNK || opts.chunkSize > binding.Z_MAX_CHUNK) {
        throw new Error('Invalid chunk size: ' + opts.chunkSize);
      }
    }

    if (opts.windowBits) {
      if (opts.windowBits < binding.Z_MIN_WINDOWBITS || opts.windowBits > binding.Z_MAX_WINDOWBITS) {
        throw new Error('Invalid windowBits: ' + opts.windowBits);
      }
    }

    if (opts.level) {
      if (opts.level < binding.Z_MIN_LEVEL || opts.level > binding.Z_MAX_LEVEL) {
        throw new Error('Invalid compression level: ' + opts.level);
      }
    }

    if (opts.memLevel) {
      if (opts.memLevel < binding.Z_MIN_MEMLEVEL || opts.memLevel > binding.Z_MAX_MEMLEVEL) {
        throw new Error('Invalid memLevel: ' + opts.memLevel);
      }
    }

    if (opts.strategy) {
      if (opts.strategy != binding.Z_FILTERED && opts.strategy != binding.Z_HUFFMAN_ONLY && opts.strategy != binding.Z_RLE && opts.strategy != binding.Z_FIXED && opts.strategy != binding.Z_DEFAULT_STRATEGY) {
        throw new Error('Invalid strategy: ' + opts.strategy);
      }
    }

    if (opts.dictionary) {
      if (!Buffer.isBuffer(opts.dictionary)) {
        throw new Error('Invalid dictionary: it should be a Buffer instance');
      }
    }

    this._binding = new binding.Zlib(mode);
    var self = this;
    this._hadError = false;

    this._binding.onerror = function (message, errno) {
      // there is no way to cleanly recover.
      // continuing only obscures problems.
      self._binding = null;
      self._hadError = true;
      var error = new Error(message);
      error.errno = errno;
      error.code = binding.codes[errno];
      self.emit('error', error);
    };

    var level = binding.Z_DEFAULT_COMPRESSION;
    if (typeof opts.level === 'number') level = opts.level;
    var strategy = binding.Z_DEFAULT_STRATEGY;
    if (typeof opts.strategy === 'number') strategy = opts.strategy;

    this._binding.init(opts.windowBits || binding.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || binding.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

    this._buffer = new Buffer(this._chunkSize);
    this._offset = 0;
    this._closed = false;
    this._level = level;
    this._strategy = strategy;
    this.once('end', this.close);
  }
  inherits$2(Zlib$1, Transform);

  Zlib$1.prototype.params = function (level, strategy, callback) {
    if (level < binding.Z_MIN_LEVEL || level > binding.Z_MAX_LEVEL) {
      throw new RangeError('Invalid compression level: ' + level);
    }

    if (strategy != binding.Z_FILTERED && strategy != binding.Z_HUFFMAN_ONLY && strategy != binding.Z_RLE && strategy != binding.Z_FIXED && strategy != binding.Z_DEFAULT_STRATEGY) {
      throw new TypeError('Invalid strategy: ' + strategy);
    }

    if (this._level !== level || this._strategy !== strategy) {
      var self = this;
      this.flush(binding.Z_SYNC_FLUSH, function () {
        self._binding.params(level, strategy);

        if (!self._hadError) {
          self._level = level;
          self._strategy = strategy;
          if (callback) callback();
        }
      });
    } else {
      process.nextTick(callback);
    }
  };

  Zlib$1.prototype.reset = function () {
    return this._binding.reset();
  }; // This is the _flush function called by the transform class,
  // internally, when the last chunk has been written.


  Zlib$1.prototype._flush = function (callback) {
    this._transform(new Buffer(0), '', callback);
  };

  Zlib$1.prototype.flush = function (kind, callback) {
    var ws = this._writableState;

    if (typeof kind === 'function' || kind === void 0 && !callback) {
      callback = kind;
      kind = binding.Z_FULL_FLUSH;
    }

    if (ws.ended) {
      if (callback) process.nextTick(callback);
    } else if (ws.ending) {
      if (callback) this.once('end', callback);
    } else if (ws.needDrain) {
      var self = this;
      this.once('drain', function () {
        self.flush(callback);
      });
    } else {
      this._flushFlag = kind;
      this.write(new Buffer(0), '', callback);
    }
  };

  Zlib$1.prototype.close = function (callback) {
    if (callback) process.nextTick(callback);
    if (this._closed) return;
    this._closed = true;

    this._binding.close();

    var self = this;
    process.nextTick(function () {
      self.emit('close');
    });
  };

  Zlib$1.prototype._transform = function (chunk, encoding, cb) {
    var flushFlag;
    var ws = this._writableState;
    var ending = ws.ending || ws.ended;
    var last = ending && (!chunk || ws.length === chunk.length);
    if (!chunk === null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input')); // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
    // If it's explicitly flushing at some other time, then we use
    // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
    // goodness.

    if (last) flushFlag = binding.Z_FINISH;else {
      flushFlag = this._flushFlag; // once we've flushed the last of the queue, stop flushing and
      // go back to the normal behavior.

      if (chunk.length >= ws.length) {
        this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
      }
    }

    this._processChunk(chunk, flushFlag, cb);
  };

  Zlib$1.prototype._processChunk = function (chunk, flushFlag, cb) {
    var availInBefore = chunk && chunk.length;
    var availOutBefore = this._chunkSize - this._offset;
    var inOff = 0;
    var self = this;
    var async = typeof cb === 'function';

    if (!async) {
      var buffers = [];
      var nread = 0;
      var error;
      this.on('error', function (er) {
        error = er;
      });

      do {
        var res = this._binding.writeSync(flushFlag, chunk, // in
        inOff, // in_off
        availInBefore, // in_len
        this._buffer, // out
        this._offset, //out_off
        availOutBefore); // out_len

      } while (!this._hadError && callback(res[0], res[1]));

      if (this._hadError) {
        throw error;
      }

      var buf = Buffer.concat(buffers, nread);
      this.close();
      return buf;
    }

    var req = this._binding.write(flushFlag, chunk, // in
    inOff, // in_off
    availInBefore, // in_len
    this._buffer, // out
    this._offset, //out_off
    availOutBefore); // out_len


    req.buffer = chunk;
    req.callback = callback;

    function callback(availInAfter, availOutAfter) {
      if (self._hadError) return;
      var have = availOutBefore - availOutAfter;
      assert(have >= 0, 'have should not go down');

      if (have > 0) {
        var out = self._buffer.slice(self._offset, self._offset + have);

        self._offset += have; // serve some output to the consumer.

        if (async) {
          self.push(out);
        } else {
          buffers.push(out);
          nread += out.length;
        }
      } // exhausted the output buffer, or used all the input create a new one.


      if (availOutAfter === 0 || self._offset >= self._chunkSize) {
        availOutBefore = self._chunkSize;
        self._offset = 0;
        self._buffer = new Buffer(self._chunkSize);
      }

      if (availOutAfter === 0) {
        // Not actually done.  Need to reprocess.
        // Also, update the availInBefore to the availInAfter value,
        // so that if we have to hit it a third (fourth, etc.) time,
        // it'll have the correct byte counts.
        inOff += availInBefore - availInAfter;
        availInBefore = availInAfter;
        if (!async) return true;

        var newReq = self._binding.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);

        newReq.callback = callback; // this same function

        newReq.buffer = chunk;
        return;
      }

      if (!async) return false; // finished with the chunk.

      cb();
    }
  };

  inherits$2(Deflate, Zlib$1);
  inherits$2(Inflate, Zlib$1);
  inherits$2(Gzip, Zlib$1);
  inherits$2(Gunzip, Zlib$1);
  inherits$2(DeflateRaw, Zlib$1);
  inherits$2(InflateRaw, Zlib$1);
  inherits$2(Unzip, Zlib$1);
  var zlib = {
    codes: codes,
    createDeflate: createDeflate,
    createInflate: createInflate,
    createDeflateRaw: createDeflateRaw,
    createInflateRaw: createInflateRaw,
    createGzip: createGzip,
    createGunzip: createGunzip,
    createUnzip: createUnzip,
    deflate: deflate$1,
    deflateSync: deflateSync,
    gzip: gzip,
    gzipSync: gzipSync,
    deflateRaw: deflateRaw,
    deflateRawSync: deflateRawSync,
    unzip: unzip,
    unzipSync: unzipSync,
    inflate: inflate$1,
    inflateSync: inflateSync,
    gunzip: gunzip,
    gunzipSync: gunzipSync,
    inflateRaw: inflateRaw,
    inflateRawSync: inflateRawSync,
    Deflate: Deflate,
    Inflate: Inflate,
    Gzip: Gzip,
    Gunzip: Gunzip,
    DeflateRaw: DeflateRaw,
    InflateRaw: InflateRaw,
    Unzip: Unzip,
    Zlib: Zlib$1
  };

  // fix for "Readable" isn't a named export issue

  var Readable$1 = Stream.Readable;
  var BUFFER = Symbol('buffer');
  var TYPE$2 = Symbol('type');

  var Blob$1 = /*#__PURE__*/function () {
    function Blob() {
      _classCallCheck(this, Blob);

      this[TYPE$2] = '';
      var blobParts = arguments[0];
      var options = arguments[1];
      var buffers = [];
      var size = 0;

      if (blobParts) {
        var a = blobParts;
        var length = Number(a.length);

        for (var i = 0; i < length; i++) {
          var element = a[i];
          var buffer = void 0;

          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element[BUFFER];
          } else {
            buffer = Buffer.from(typeof element === 'string' ? element : String(element));
          }

          size += buffer.length;
          buffers.push(buffer);
        }
      }

      this[BUFFER] = Buffer.concat(buffers);
      var type = options && options.type !== undefined && String(options.type).toLowerCase();

      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE$2] = type;
      }
    }

    _createClass(Blob, [{
      key: "text",
      value: function text() {
        return Promise.resolve(this[BUFFER].toString());
      }
    }, {
      key: "arrayBuffer",
      value: function arrayBuffer() {
        var buf = this[BUFFER];
        var ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
    }, {
      key: "stream",
      value: function stream() {
        var readable = new Readable$1();

        readable._read = function () {};

        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
    }, {
      key: "toString",
      value: function toString() {
        return '[object Blob]';
      }
    }, {
      key: "slice",
      value: function slice() {
        var size = this.size;
        var start = arguments[0];
        var end = arguments[1];
        var relativeStart, relativeEnd;

        if (start === undefined) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }

        if (end === undefined) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }

        var span = Math.max(relativeEnd - relativeStart, 0);
        var buffer = this[BUFFER];
        var slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        var blob = new Blob([], {
          type: arguments[2]
        });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    }, {
      key: "size",
      get: function get() {
        return this[BUFFER].length;
      }
    }, {
      key: "type",
      get: function get() {
        return this[TYPE$2];
      }
    }]);

    return Blob;
  }();

  Object.defineProperties(Blob$1.prototype, {
    size: {
      enumerable: true
    },
    type: {
      enumerable: true
    },
    slice: {
      enumerable: true
    }
  });
  Object.defineProperty(Blob$1.prototype, Symbol.toStringTag, {
    value: 'Blob',
    writable: false,
    enumerable: false,
    configurable: true
  });
  /**
   * fetch-error.js
   *
   * FetchError interface for operational errors
   */

  /**
   * Create FetchError instance
   *
   * @param   String      message      Error message for human
   * @param   String      type         Error type for machine
   * @param   String      systemError  For Node.js system error
   * @return  FetchError
   */

  function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type; // when err.type is `system`, err.code contains system error code

    if (systemError) {
      this.code = this.errno = systemError.code;
    } // hide custom error implementation details from end-users


    Error.captureStackTrace(this, this.constructor);
  }

  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = 'FetchError';
  var convert;

  try {
    convert = require('encoding').convert;
  } catch (e) {}

  var INTERNALS = Symbol('Body internals'); // fix an issue where "PassThrough" isn't a named export for node <10

  var PassThrough$1 = Stream.PassThrough;
  /**
   * Body mixin
   *
   * Ref: https://fetch.spec.whatwg.org/#body
   *
   * @param   Stream  body  Readable stream
   * @param   Object  opts  Response options
   * @return  Void
   */

  function Body(body) {
    var _this = this;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$size = _ref.size;

    var size = _ref$size === undefined ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    var timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

    if (body == null) {
      // body is undefined or null
      body = null;
    } else if (isURLSearchParams(body)) {
      // body is a URLSearchParams
      body = Buffer.from(body.toString());
    } else if (isBlob(body)) ;else if (Buffer.isBuffer(body)) ;else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
      // body is ArrayBuffer
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      // body is ArrayBufferView
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof Stream) ;else {
      // none of the above
      // coerce to string then buffer
      body = Buffer.from(String(body));
    }

    this[INTERNALS] = {
      body: body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;

    if (body instanceof Stream) {
      body.on('error', function (err) {
        var error = err.name === 'AbortError' ? err : new FetchError("Invalid response body while trying to fetch ".concat(_this.url, ": ").concat(err.message), 'system', err);
        _this[INTERNALS].error = error;
      });
    }
  }

  Body.prototype = {
    get body() {
      return this[INTERNALS].body;
    },

    get bodyUsed() {
      return this[INTERNALS].disturbed;
    },

    /**
     * Decode response as ArrayBuffer
     *
     * @return  Promise
     */
    arrayBuffer: function arrayBuffer() {
      return consumeBody.call(this).then(function (buf) {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      });
    },

    /**
     * Return raw response as Blob
     *
     * @return Promise
     */
    blob: function blob() {
      var ct = this.headers && this.headers.get('content-type') || '';
      return consumeBody.call(this).then(function (buf) {
        return _extends( // Prevent copying
        new Blob$1([], {
          type: ct.toLowerCase()
        }), _defineProperty({}, BUFFER, buf));
      });
    },

    /**
     * Decode response as json
     *
     * @return  Promise
     */
    json: function json() {
      var _this2 = this;

      return consumeBody.call(this).then(function (buffer) {
        try {
          return JSON.parse(buffer.toString());
        } catch (err) {
          return Body.Promise.reject(new FetchError("invalid json response body at ".concat(_this2.url, " reason: ").concat(err.message), 'invalid-json'));
        }
      });
    },

    /**
     * Decode response as text
     *
     * @return  Promise
     */
    text: function text() {
      return consumeBody.call(this).then(function (buffer) {
        return buffer.toString();
      });
    },

    /**
     * Decode response as buffer (non-spec api)
     *
     * @return  Promise
     */
    buffer: function buffer() {
      return consumeBody.call(this);
    },

    /**
     * Decode response as text, while automatically detecting the encoding and
     * trying to decode to UTF-8 (non-spec api)
     *
     * @return  Promise
     */
    textConverted: function textConverted() {
      var _this3 = this;

      return consumeBody.call(this).then(function (buffer) {
        return convertBody(buffer, _this3.headers);
      });
    }
  }; // In browsers, all properties are enumerable.

  Object.defineProperties(Body.prototype, {
    body: {
      enumerable: true
    },
    bodyUsed: {
      enumerable: true
    },
    arrayBuffer: {
      enumerable: true
    },
    blob: {
      enumerable: true
    },
    json: {
      enumerable: true
    },
    text: {
      enumerable: true
    }
  });

  Body.mixIn = function (proto) {
    var _iterator = _createForOfIteratorHelper(Object.getOwnPropertyNames(Body.prototype)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var name = _step.value;

        // istanbul ignore else: future proof
        if (!(name in proto)) {
          var desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
  /**
   * Consume and convert an entire Body to a Buffer.
   *
   * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
   *
   * @return  Promise
   */


  function consumeBody() {
    var _this4 = this;

    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError("body used already for: ".concat(this.url)));
    }

    this[INTERNALS].disturbed = true;

    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }

    var body = this.body; // body is null

    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    } // body is blob


    if (isBlob(body)) {
      body = body.stream();
    } // body is buffer


    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    } // istanbul ignore if: should never happen


    if (!(body instanceof Stream)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    } // body is stream
    // get ready to actually consume the body


    var accum = [];
    var accumBytes = 0;
    var abort = false;
    return new Body.Promise(function (resolve, reject) {
      var resTimeout; // allow timeout on slow response body

      if (_this4.timeout) {
        resTimeout = setTimeout(function () {
          abort = true;
          reject(new FetchError("Response timeout while trying to fetch ".concat(_this4.url, " (over ").concat(_this4.timeout, "ms)"), 'body-timeout'));
        }, _this4.timeout);
      } // handle stream errors


      body.on('error', function (err) {
        if (err.name === 'AbortError') {
          // if the request was aborted, reject with this Error
          abort = true;
          reject(err);
        } else {
          // other errors, such as incorrect content-encoding
          reject(new FetchError("Invalid response body while trying to fetch ".concat(_this4.url, ": ").concat(err.message), 'system', err));
        }
      });
      body.on('data', function (chunk) {
        if (abort || chunk === null) {
          return;
        }

        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError("content size at ".concat(_this4.url, " over limit: ").concat(_this4.size), 'max-size'));
          return;
        }

        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on('end', function () {
        if (abort) {
          return;
        }

        clearTimeout(resTimeout);

        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          // handle streams that have accumulated too much data (issue #414)
          reject(new FetchError("Could not create Buffer from response body for ".concat(_this4.url, ": ").concat(err.message), 'system', err));
        }
      });
    });
  }
  /**
   * Detect buffer encoding and convert to target encoding
   * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
   *
   * @param   Buffer  buffer    Incoming buffer
   * @param   String  encoding  Target encoding
   * @return  String
   */


  function convertBody(buffer, headers) {
    if (typeof convert !== 'function') {
      throw new Error('The package `encoding` must be installed to use the textConverted() function');
    }

    var ct = headers.get('content-type');
    var charset = 'utf-8';
    var res, str; // header

    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    } // no charset in content type, peek at response body for at most 1024 bytes


    str = buffer.slice(0, 1024).toString(); // html5

    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    } // html4


    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    } // xml


    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    } // found charset


    if (res) {
      charset = res.pop(); // prevent decode issues when sites use incorrect encoding
      // ref: https://hsivonen.fi/encoding-menu/

      if (charset === 'gb2312' || charset === 'gbk') {
        charset = 'gb18030';
      }
    } // turn raw buffers into a single utf-8 buffer


    return convert(buffer, 'UTF-8', charset).toString();
  }
  /**
   * Detect a URLSearchParams object
   * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
   *
   * @param   Object  obj     Object to detect by type or brand
   * @return  String
   */


  function isURLSearchParams(obj) {
    // Duck-typing as a necessary condition.
    if (_typeof(obj) !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
      return false;
    } // Brand-checking and more duck-typing as optional condition.


    return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
  }
  /**
   * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
   * @param  {*} obj
   * @return {boolean}
   */


  function isBlob(obj) {
    return _typeof(obj) === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }
  /**
   * Clone body given Res/Req instance
   *
   * @param   Mixed  instance  Response or Request instance
   * @return  Mixed
   */


  function _clone(instance) {
    var p1, p2;
    var body = instance.body; // don't allow cloning a used body

    if (instance.bodyUsed) {
      throw new Error('cannot clone body after it is used');
    } // check that body is a stream and not form-data object
    // note: we can't clone the form-data object without having it as a dependency


    if (body instanceof Stream && typeof body.getBoundary !== 'function') {
      // tee instance body
      p1 = new PassThrough$1();
      p2 = new PassThrough$1();
      body.pipe(p1);
      body.pipe(p2); // set instance body to teed body and return the other teed body

      instance[INTERNALS].body = p1;
      body = p2;
    }

    return body;
  }
  /**
   * Performs the operation "extract a `Content-Type` value from |object|" as
   * specified in the specification:
   * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
   *
   * This function assumes that instance.body is present.
   *
   * @param   Mixed  instance  Any options.body input
   */


  function extractContentType(body) {
    if (body === null) {
      // body is null
      return null;
    } else if (typeof body === 'string') {
      // body is string
      return 'text/plain;charset=UTF-8';
    } else if (isURLSearchParams(body)) {
      // body is a URLSearchParams
      return 'application/x-www-form-urlencoded;charset=UTF-8';
    } else if (isBlob(body)) {
      // body is blob
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      // body is buffer
      return null;
    } else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
      // body is ArrayBuffer
      return null;
    } else if (ArrayBuffer.isView(body)) {
      // body is ArrayBufferView
      return null;
    } else if (typeof body.getBoundary === 'function') {
      // detect form data input from form-data module
      return "multipart/form-data;boundary=".concat(body.getBoundary());
    } else if (body instanceof Stream) {
      // body is stream
      // can't really do much about this
      return null;
    } else {
      // Body constructor defaults other things to string
      return 'text/plain;charset=UTF-8';
    }
  }
  /**
   * The Fetch Standard treats this as if "total bytes" is a property on the body.
   * For us, we have to explicitly get it with a function.
   *
   * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
   *
   * @param   Body    instance   Instance of Body
   * @return  Number?            Number of bytes, or null if not possible
   */


  function getTotalBytes(instance) {
    var body = instance.body;

    if (body === null) {
      // body is null
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      // body is buffer
      return body.length;
    } else if (body && typeof body.getLengthSync === 'function') {
      // detect form data input from form-data module
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
      body.hasKnownLength && body.hasKnownLength()) {
        // 2.x
        return body.getLengthSync();
      }

      return null;
    } else {
      // body is stream
      return null;
    }
  }
  /**
   * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
   *
   * @param   Body    instance   Instance of Body
   * @return  Void
   */


  function writeToStream(dest, instance) {
    var body = instance.body;

    if (body === null) {
      // body is null
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      // body is buffer
      dest.write(body);
      dest.end();
    } else {
      // body is stream
      body.pipe(dest);
    }
  } // expose Promise


  Body.Promise = global.Promise;
  /**
   * headers.js
   *
   * Headers class offers convenient helpers
   */

  var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

  function validateName(name) {
    name = "".concat(name);

    if (invalidTokenRegex.test(name) || name === '') {
      throw new TypeError("".concat(name, " is not a legal HTTP header name"));
    }
  }

  function validateValue(value) {
    value = "".concat(value);

    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError("".concat(value, " is not a legal HTTP header value"));
    }
  }
  /**
   * Find the key in the map object given a header name.
   *
   * Returns undefined if not found.
   *
   * @param   String  name  Header name
   * @return  String|Undefined
   */


  function find(map, name) {
    name = name.toLowerCase();

    for (var key in map) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }

    return undefined;
  }

  var MAP = Symbol('map');

  var Headers = /*#__PURE__*/function () {
    /**
     * Headers class
     *
     * @param   Object  headers  Response headers
     * @return  Void
     */
    function Headers() {
      _classCallCheck(this, Headers);

      var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      this[MAP] = Object.create(null);

      if (init instanceof Headers) {
        var rawHeaders = init.raw();
        var headerNames = Object.keys(rawHeaders);

        for (var _i = 0, _headerNames = headerNames; _i < _headerNames.length; _i++) {
          var headerName = _headerNames[_i];

          var _iterator2 = _createForOfIteratorHelper(rawHeaders[headerName]),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var value = _step2.value;
              this.append(headerName, value);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }

        return;
      } // We don't worry about converting prop to ByteString here as append()
      // will handle it.


      if (init == null) ;else if (_typeof(init) === 'object') {
        var method = init[Symbol.iterator];

        if (method != null) {
          if (typeof method !== 'function') {
            throw new TypeError('Header pairs must be iterable');
          } // sequence<sequence<ByteString>>
          // Note: per spec we have to first exhaust the lists then process them


          var pairs = [];

          var _iterator3 = _createForOfIteratorHelper(init),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _pair = _step3.value;

              if (_typeof(_pair) !== 'object' || typeof _pair[Symbol.iterator] !== 'function') {
                throw new TypeError('Each header pair must be iterable');
              }

              pairs.push(Array.from(_pair));
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          for (var _i2 = 0, _pairs = pairs; _i2 < _pairs.length; _i2++) {
            var pair = _pairs[_i2];

            if (pair.length !== 2) {
              throw new TypeError('Each header pair must be a name/value tuple');
            }

            this.append(pair[0], pair[1]);
          }
        } else {
          // record<ByteString, ByteString>
          for (var _i3 = 0, _Object$keys = Object.keys(init); _i3 < _Object$keys.length; _i3++) {
            var key = _Object$keys[_i3];
            var _value = init[key];
            this.append(key, _value);
          }
        }
      } else {
        throw new TypeError('Provided initializer must be an object');
      }
    }
    /**
     * Return combined header value given name
     *
     * @param   String  name  Header name
     * @return  Mixed
     */


    _createClass(Headers, [{
      key: "get",
      value: function get(name) {
        name = "".concat(name);
        validateName(name);
        var key = find(this[MAP], name);

        if (key === undefined) {
          return null;
        }

        return this[MAP][key].join(', ');
      }
      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */

    }, {
      key: "forEach",
      value: function forEach(callback) {
        var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        var pairs = getHeaders(this);
        var i = 0;

        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          var name = _pairs$i[0],
              value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */

    }, {
      key: "set",
      value: function set(name, value) {
        name = "".concat(name);
        value = "".concat(value);
        validateName(name);
        validateValue(value);
        var key = find(this[MAP], name);
        this[MAP][key !== undefined ? key : name] = [value];
      }
      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */

    }, {
      key: "append",
      value: function append(name, value) {
        name = "".concat(name);
        value = "".concat(value);
        validateName(name);
        validateValue(value);
        var key = find(this[MAP], name);

        if (key !== undefined) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */

    }, {
      key: "has",
      value: function has(name) {
        name = "".concat(name);
        validateName(name);
        return find(this[MAP], name) !== undefined;
      }
      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */

    }, {
      key: "delete",
      value: function _delete(name) {
        name = "".concat(name);
        validateName(name);
        var key = find(this[MAP], name);

        if (key !== undefined) {
          delete this[MAP][key];
        }
      }
      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */

    }, {
      key: "raw",
      value: function raw() {
        return this[MAP];
      }
      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */

    }, {
      key: "keys",
      value: function keys() {
        return createHeadersIterator(this, 'key');
      }
      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */

    }, {
      key: "values",
      value: function values() {
        return createHeadersIterator(this, 'value');
      }
      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */

    }, {
      key: Symbol.iterator,
      value: function value() {
        return createHeadersIterator(this, 'key+value');
      }
    }]);

    return Headers;
  }();

  Headers.prototype.entries = Headers.prototype[Symbol.iterator];
  Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
    value: 'Headers',
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Headers.prototype, {
    get: {
      enumerable: true
    },
    forEach: {
      enumerable: true
    },
    set: {
      enumerable: true
    },
    append: {
      enumerable: true
    },
    has: {
      enumerable: true
    },
    delete: {
      enumerable: true
    },
    keys: {
      enumerable: true
    },
    values: {
      enumerable: true
    },
    entries: {
      enumerable: true
    }
  });

  function getHeaders(headers) {
    var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
    var keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === 'key' ? function (k) {
      return k.toLowerCase();
    } : kind === 'value' ? function (k) {
      return headers[MAP][k].join(', ');
    } : function (k) {
      return [k.toLowerCase(), headers[MAP][k].join(', ')];
    });
  }

  var INTERNAL = Symbol('internal');

  function createHeadersIterator(target, kind) {
    var iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target: target,
      kind: kind,
      index: 0
    };
    return iterator;
  }

  var HeadersIteratorPrototype = Object.setPrototypeOf({
    next: function next() {
      // istanbul ignore if
      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
        throw new TypeError('Value of `this` is not a HeadersIterator');
      }

      var _INTERNAL = this[INTERNAL];
      var target = _INTERNAL.target,
          kind = _INTERNAL.kind,
          index = _INTERNAL.index;
      var values = getHeaders(target, kind);
      var len = values.length;

      if (index >= len) {
        return {
          value: undefined,
          done: true
        };
      }

      this[INTERNAL].index = index + 1;
      return {
        value: values[index],
        done: false
      };
    }
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: 'HeadersIterator',
    writable: false,
    enumerable: false,
    configurable: true
  });
  /**
   * Export the Headers object in a form that Node.js can consume.
   *
   * @param   Headers  headers
   * @return  Object
   */

  function exportNodeCompatibleHeaders(headers) {
    var obj = _extends({
      __proto__: null
    }, headers[MAP]); // http.request() only supports string as Host header. This hack makes
    // specifying custom Host header possible.


    var hostHeaderKey = find(headers[MAP], 'Host');

    if (hostHeaderKey !== undefined) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }

    return obj;
  }
  /**
   * Create a Headers object from an object of headers, ignoring those that do
   * not conform to HTTP grammar productions.
   *
   * @param   Object  obj  Object of headers
   * @return  Headers
   */


  function createHeadersLenient(obj) {
    var headers = new Headers();

    for (var _i4 = 0, _Object$keys2 = Object.keys(obj); _i4 < _Object$keys2.length; _i4++) {
      var name = _Object$keys2[_i4];

      if (invalidTokenRegex.test(name)) {
        continue;
      }

      if (Array.isArray(obj[name])) {
        var _iterator4 = _createForOfIteratorHelper(obj[name]),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var val = _step4.value;

            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }

            if (headers[MAP][name] === undefined) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }

    return headers;
  }

  var INTERNALS$1 = Symbol('Response internals'); // fix an issue where "STATUS_CODES" aren't a named export for node <10

  var STATUS_CODES$1 = http.STATUS_CODES;
  /**
   * Response class
   *
   * @param   Stream  body  Readable stream
   * @param   Object  opts  Response options
   * @return  Void
   */

  var Response = /*#__PURE__*/function () {
    function Response() {
      _classCallCheck(this, Response);

      var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      Body.call(this, body, opts);
      var status = opts.status || 200;
      var headers = new Headers(opts.headers);

      if (body != null && !headers.has('Content-Type')) {
        var contentType = extractContentType(body);

        if (contentType) {
          headers.append('Content-Type', contentType);
        }
      }

      this[INTERNALS$1] = {
        url: opts.url,
        status: status,
        statusText: opts.statusText || STATUS_CODES$1[status],
        headers: headers,
        counter: opts.counter
      };
    }

    _createClass(Response, [{
      key: "clone",

      /**
       * Clone this response
       *
       * @return  Response
       */
      value: function clone() {
        return new Response(_clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    }, {
      key: "url",
      get: function get() {
        return this[INTERNALS$1].url || '';
      }
    }, {
      key: "status",
      get: function get() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */

    }, {
      key: "ok",
      get: function get() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
    }, {
      key: "redirected",
      get: function get() {
        return this[INTERNALS$1].counter > 0;
      }
    }, {
      key: "statusText",
      get: function get() {
        return this[INTERNALS$1].statusText;
      }
    }, {
      key: "headers",
      get: function get() {
        return this[INTERNALS$1].headers;
      }
    }]);

    return Response;
  }();

  Body.mixIn(Response.prototype);
  Object.defineProperties(Response.prototype, {
    url: {
      enumerable: true
    },
    status: {
      enumerable: true
    },
    ok: {
      enumerable: true
    },
    redirected: {
      enumerable: true
    },
    statusText: {
      enumerable: true
    },
    headers: {
      enumerable: true
    },
    clone: {
      enumerable: true
    }
  });
  Object.defineProperty(Response.prototype, Symbol.toStringTag, {
    value: 'Response',
    writable: false,
    enumerable: false,
    configurable: true
  });
  var INTERNALS$2 = Symbol('Request internals'); // fix an issue where "format", "parse" aren't a named export for node <10

  var parse_url = Url.parse;
  var format_url = Url.format;
  var streamDestructionSupported = ('destroy' in Stream.Readable.prototype);
  /**
   * Check if a value is an instance of Request.
   *
   * @param   Mixed   input
   * @return  Boolean
   */

  function isRequest(input) {
    return _typeof(input) === 'object' && _typeof(input[INTERNALS$2]) === 'object';
  }

  function isAbortSignal(signal) {
    var proto = signal && _typeof(signal) === 'object' && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === 'AbortSignal');
  }
  /**
   * Request class
   *
   * @param   Mixed   input  Url or Request instance
   * @param   Object  init   Custom options
   * @return  Void
   */


  var Request = /*#__PURE__*/function () {
    function Request(input) {
      _classCallCheck(this, Request);

      var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parsedURL; // normalize input

      if (!isRequest(input)) {
        if (input && input.href) {
          // in order to support Node.js' Url objects; though WHATWG's URL objects
          // will fall into this branch also (since their `toString()` will return
          // `href` property anyway)
          parsedURL = parse_url(input.href);
        } else {
          // coerce input to a string before attempting to parse
          parsedURL = parse_url("".concat(input));
        }

        input = {};
      } else {
        parsedURL = parse_url(input.url);
      }

      var method = init.method || input.method || 'GET';
      method = method.toUpperCase();

      if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
        throw new TypeError('Request with GET/HEAD method cannot have body');
      }

      var inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? _clone(input) : null;
      Body.call(this, inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      });
      var headers = new Headers(init.headers || input.headers || {});

      if (inputBody != null && !headers.has('Content-Type')) {
        var contentType = extractContentType(inputBody);

        if (contentType) {
          headers.append('Content-Type', contentType);
        }
      }

      var signal = isRequest(input) ? input.signal : null;
      if ('signal' in init) signal = init.signal;

      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError('Expected signal to be an instanceof AbortSignal');
      }

      this[INTERNALS$2] = {
        method: method,
        redirect: init.redirect || input.redirect || 'follow',
        headers: headers,
        parsedURL: parsedURL,
        signal: signal
      }; // node-fetch-only options

      this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
      this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
    }

    _createClass(Request, [{
      key: "clone",

      /**
       * Clone this request
       *
       * @return  Request
       */
      value: function clone() {
        return new Request(this);
      }
    }, {
      key: "method",
      get: function get() {
        return this[INTERNALS$2].method;
      }
    }, {
      key: "url",
      get: function get() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
    }, {
      key: "headers",
      get: function get() {
        return this[INTERNALS$2].headers;
      }
    }, {
      key: "redirect",
      get: function get() {
        return this[INTERNALS$2].redirect;
      }
    }, {
      key: "signal",
      get: function get() {
        return this[INTERNALS$2].signal;
      }
    }]);

    return Request;
  }();

  Body.mixIn(Request.prototype);
  Object.defineProperty(Request.prototype, Symbol.toStringTag, {
    value: 'Request',
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Request.prototype, {
    method: {
      enumerable: true
    },
    url: {
      enumerable: true
    },
    headers: {
      enumerable: true
    },
    redirect: {
      enumerable: true
    },
    clone: {
      enumerable: true
    },
    signal: {
      enumerable: true
    }
  });
  /**
   * Convert a Request to Node.js http request options.
   *
   * @param   Request  A Request instance
   * @return  Object   The options object to be passed to http.request
   */

  function getNodeRequestOptions(request) {
    var parsedURL = request[INTERNALS$2].parsedURL;
    var headers = new Headers(request[INTERNALS$2].headers); // fetch step 1.3

    if (!headers.has('Accept')) {
      headers.set('Accept', '*/*');
    } // Basic fetch


    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError('Only absolute URLs are supported');
    }

    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError('Only HTTP(S) protocols are supported');
    }

    if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
      throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
    } // HTTP-network-or-cache fetch steps 2.4-2.7


    var contentLengthValue = null;

    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = '0';
    }

    if (request.body != null) {
      var totalBytes = getTotalBytes(request);

      if (typeof totalBytes === 'number') {
        contentLengthValue = String(totalBytes);
      }
    }

    if (contentLengthValue) {
      headers.set('Content-Length', contentLengthValue);
    } // HTTP-network-or-cache fetch step 2.11


    if (!headers.has('User-Agent')) {
      headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
    } // HTTP-network-or-cache fetch step 2.15


    if (request.compress && !headers.has('Accept-Encoding')) {
      headers.set('Accept-Encoding', 'gzip,deflate');
    }

    var agent = request.agent;

    if (typeof agent === 'function') {
      agent = agent(parsedURL);
    }

    if (!headers.has('Connection') && !agent) {
      headers.set('Connection', 'close');
    } // HTTP-network fetch step 4.2
    // chunked encoding is handled by Node.js


    return _extends({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent: agent
    });
  }
  /**
   * abort-error.js
   *
   * AbortError interface for cancelled requests
   */

  /**
   * Create AbortError instance
   *
   * @param   String      message      Error message for human
   * @return  AbortError
   */


  function AbortError(message) {
    Error.call(this, message);
    this.type = 'aborted';
    this.message = message; // hide custom error implementation details from end-users

    Error.captureStackTrace(this, this.constructor);
  }

  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = 'AbortError'; // fix an issue where "PassThrough", "resolve" aren't a named export for node <10

  var PassThrough$1$1 = Stream.PassThrough;
  var resolve_url = Url.resolve;
  /**
   * Fetch function
   *
   * @param   Mixed    url   Absolute url or Request instance
   * @param   Object   opts  Fetch options
   * @return  Promise
   */

  function fetch(url, opts) {
    // allow custom promise
    if (!fetch.Promise) {
      throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
    }

    Body.Promise = fetch.Promise; // wrap http.request into fetch

    return new fetch.Promise(function (resolve, reject) {
      // build request object
      var request = new Request(url, opts);
      var options = getNodeRequestOptions(request);
      var send = (options.protocol === 'https:' ? http : http).request;
      var signal = request.signal;
      var response = null;

      var abort = function abort() {
        var error = new AbortError('The user aborted a request.');
        reject(error);

        if (request.body && request.body instanceof Stream.Readable) {
          request.body.destroy(error);
        }

        if (!response || !response.body) return;
        response.body.emit('error', error);
      };

      if (signal && signal.aborted) {
        abort();
        return;
      }

      var abortAndFinalize = function abortAndFinalize() {
        abort();
        finalize();
      }; // send request


      var req = send(options);
      var reqTimeout;

      if (signal) {
        signal.addEventListener('abort', abortAndFinalize);
      }

      function finalize() {
        req.abort();
        if (signal) signal.removeEventListener('abort', abortAndFinalize);
        clearTimeout(reqTimeout);
      }

      if (request.timeout) {
        req.once('socket', function (socket) {
          reqTimeout = setTimeout(function () {
            reject(new FetchError("network timeout at: ".concat(request.url), 'request-timeout'));
            finalize();
          }, request.timeout);
        });
      }

      req.on('error', function (err) {
        reject(new FetchError("request to ".concat(request.url, " failed, reason: ").concat(err.message), 'system', err));
        finalize();
      });
      req.on('response', function (res) {
        clearTimeout(reqTimeout);
        var headers = createHeadersLenient(res.headers); // HTTP fetch step 5

        if (fetch.isRedirect(res.statusCode)) {
          // HTTP fetch step 5.2
          var location = headers.get('Location'); // HTTP fetch step 5.3

          var locationURL = location === null ? null : resolve_url(request.url, location); // HTTP fetch step 5.5

          switch (request.redirect) {
            case 'error':
              reject(new FetchError("redirect mode is set to error: ".concat(request.url), 'no-redirect'));
              finalize();
              return;

            case 'manual':
              // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
              if (locationURL !== null) {
                // handle corrupted header
                try {
                  headers.set('Location', locationURL);
                } catch (err) {
                  // istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
                  reject(err);
                }
              }

              break;

            case 'follow':
              // HTTP-redirect fetch step 2
              if (locationURL === null) {
                break;
              } // HTTP-redirect fetch step 5


              if (request.counter >= request.follow) {
                reject(new FetchError("maximum redirect reached at: ".concat(request.url), 'max-redirect'));
                finalize();
                return;
              } // HTTP-redirect fetch step 6 (counter increment)
              // Create a new Request object.


              var requestOpts = {
                headers: new Headers(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout
              }; // HTTP-redirect fetch step 9

              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
                finalize();
                return;
              } // HTTP-redirect fetch step 11


              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
                requestOpts.method = 'GET';
                requestOpts.body = undefined;
                requestOpts.headers.delete('content-length');
              } // HTTP-redirect fetch step 15


              resolve(fetch(new Request(locationURL, requestOpts)));
              finalize();
              return;
          }
        } // prepare response


        res.once('end', function () {
          if (signal) signal.removeEventListener('abort', abortAndFinalize);
        });
        var body = res.pipe(new PassThrough$1$1());
        var response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers: headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        }; // HTTP-network fetch step 12.1.1.3

        var codings = headers.get('Content-Encoding'); // HTTP-network fetch step 12.1.1.4: handle content codings
        // in following scenarios we ignore compression support
        // 1. compression support is disabled
        // 2. HEAD request
        // 3. no Content-Encoding header
        // 4. no content response (204)
        // 5. content not modified response (304)

        if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response(body, response_options);
          resolve(response);
          return;
        } // For Node v6+
        // Be less strict when decoding compressed responses, since sometimes
        // servers send slightly invalid responses that are still accepted
        // by common browsers.
        // Always using Z_SYNC_FLUSH is what cURL does.


        var zlibOptions = {
          flush: zlib.Z_SYNC_FLUSH,
          finishFlush: zlib.Z_SYNC_FLUSH
        }; // for gzip

        if (codings == 'gzip' || codings == 'x-gzip') {
          body = body.pipe(zlib.createGunzip(zlibOptions));
          response = new Response(body, response_options);
          resolve(response);
          return;
        } // for deflate


        if (codings == 'deflate' || codings == 'x-deflate') {
          // handle the infamous raw deflate response from old servers
          // a hack for old IIS and Apache servers
          var raw = res.pipe(new PassThrough$1$1());
          raw.once('data', function (chunk) {
            // see http://stackoverflow.com/questions/37519828
            if ((chunk[0] & 0x0F) === 0x08) {
              body = body.pipe(zlib.createInflate());
            } else {
              body = body.pipe(zlib.createInflateRaw());
            }

            response = new Response(body, response_options);
            resolve(response);
          });
          return;
        } // for br


        if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
          body = body.pipe(zlib.createBrotliDecompress());
          response = new Response(body, response_options);
          resolve(response);
          return;
        } // otherwise, use response as-is


        response = new Response(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  /**
   * Redirect code matching
   *
   * @param   Number   code  Status code
   * @return  Boolean
   */


  fetch.isRedirect = function (code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  }; // expose Promise


  fetch.Promise = global.Promise;

  var lib = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': fetch,
    Headers: Headers,
    Request: Request,
    Response: Response,
    FetchError: FetchError
  });

  var require$$1 = {};

  var require$$0 = getCjsExportFromNamespace(lib);

  //   https://...    file://...    //...

  var protocol_re = /^([A-Za-z]+:)?\/\//; // Matches allowed URIs. From https://github.com/cure53/DOMPurify/blob/master/src/regexp.js with added file://

  var allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i; // eslint-disable-line no-useless-escape

  var whitespace_re = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g; // eslint-disable-line no-control-regex
  // Special treatment in node.js for the file: protocol

  var fileProtocol = 'file://';
  /**
   * Factory for a loader constructor that provides methods for requesting
   * files from either the network or disk, and for sanitizing request URIs.
   * @param {function} fetch - The Fetch API for HTTP network requests.
   *   If null or undefined, HTTP loading will be disabled.
   * @param {object} fs - The file system interface for file loading.
   *   If null or undefined, local file loading will be disabled.
   * @return {function} A loader constructor with the following signature:
   *   param {object} [options] - Optional default loading options to use.
   *   return {object} - A new loader instance.
   */

  function loaderFactory (fetch, fs) {
    return function (options) {
      return {
        options: options || {},
        sanitize: sanitize,
        load: load,
        fileAccess: !!fs,
        file: fileLoader(fs),
        http: httpLoader(fetch)
      };
    };
  }
  /**
   * Load an external resource, typically either from the web or from the local
   * filesystem. This function uses {@link sanitize} to first sanitize the uri,
   * then calls either {@link http} (for web requests) or {@link file} (for
   * filesystem loading).
   * @param {string} uri - The resource indicator (e.g., URL or filename).
   * @param {object} [options] - Optional loading options. These options will
   *   override any existing default options.
   * @return {Promise} - A promise that resolves to the loaded content.
   */

  function load(uri, options) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var opt, url;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.sanitize(uri, options);

            case 2:
              opt = _context.sent;
              url = opt.href;
              return _context.abrupt("return", opt.localFile ? this.file(url) : this.http(url, options));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }).call(this));
  }
  /**
   * URI sanitizer function.
   * @param {string} uri - The uri (url or filename) to sanity check.
   * @param {object} options - An options hash.
   * @return {Promise} - A promise that resolves to an object containing
   *  sanitized uri data, or rejects it the input uri is deemed invalid.
   *  The properties of the resolved object are assumed to be
   *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
   *  provided by the 'href' property of the returned object.
   */


  function sanitize(uri, options) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var fileAccess, result, isFile, loadFile, base, isAllowed, hasProtocol;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = extend({}, this.options, options);
              fileAccess = this.fileAccess, result = {
                href: null
              };
              isAllowed = allowed_re.test(uri.replace(whitespace_re, ''));

              if (uri == null || typeof uri !== 'string' || !isAllowed) {
                error('Sanitize failure, invalid URI: ' + $(uri));
              }

              hasProtocol = protocol_re.test(uri); // if relative url (no protocol/host), prepend baseURL

              if ((base = options.baseURL) && !hasProtocol) {
                // Ensure that there is a slash between the baseURL (e.g. hostname) and url
                if (!uri.startsWith('/') && base[base.length - 1] !== '/') {
                  uri = '/' + uri;
                }

                uri = base + uri;
              } // should we load from file system?


              loadFile = (isFile = uri.startsWith(fileProtocol)) || options.mode === 'file' || options.mode !== 'http' && !hasProtocol && fileAccess;

              if (isFile) {
                // strip file protocol
                uri = uri.slice(fileProtocol.length);
              } else if (uri.startsWith('//')) {
                if (options.defaultProtocol === 'file') {
                  // if is file, strip protocol and set loadFile flag
                  uri = uri.slice(2);
                  loadFile = true;
                } else {
                  // if relative protocol (starts with '//'), prepend default protocol
                  uri = (options.defaultProtocol || 'http') + ':' + uri;
                }
              } // set non-enumerable mode flag to indicate local file load


              Object.defineProperty(result, 'localFile', {
                value: !!loadFile
              }); // set uri

              result.href = uri; // set default result target, if specified

              if (options.target) {
                result.target = options.target + '';
              } // set default result rel, if specified (#1542)


              if (options.rel) {
                result.rel = options.rel + '';
              } // provide control over cross-origin image handling (#2238)
              // https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image


              if (options.context === 'image' && options.crossOrigin) {
                result.crossOrigin = options.crossOrigin + '';
              } // return


              return _context2.abrupt("return", result);

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }).call(this));
  }
  /**
   * File system loader factory.
   * @param {object} fs - The file system interface.
   * @return {function} - A file loader with the following signature:
   *   param {string} filename - The file system path to load.
   *   param {string} filename - The file system path to load.
   *   return {Promise} A promise that resolves to the file contents.
   */


  function fileLoader(fs) {
    return fs ? function (filename) {
      return new Promise(function (accept, reject) {
        fs.readFile(filename, function (error, data) {
          if (error) reject(error);else accept(data);
        });
      });
    } : fileReject;
  }
  /**
   * Default file system loader that simply rejects.
   */


  function fileReject() {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              error('No file system access.');

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })());
  }
  /**
   * HTTP request handler factory.
   * @param {function} fetch - The Fetch API method.
   * @return {function} - An http loader with the following signature:
   *   param {string} url - The url to request.
   *   param {object} options - An options hash.
   *   return {Promise} - A promise that resolves to the file contents.
   */


  function httpLoader(fetch) {
    return fetch ? function (url, options) {
      return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var opt, type, response;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                opt = extend({}, this.options.http, options);
                type = options && options.response;
                _context4.next = 4;
                return fetch(url, opt);

              case 4:
                response = _context4.sent;
                return _context4.abrupt("return", !response.ok ? error(response.status + '' + response.statusText) : isFunction(response[type]) ? response[type]() : response.text());

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }).call(this));
    } : httpReject;
  }
  /**
   * Default http request handler that simply rejects.
   */


  function httpReject() {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              error('No HTTP fetch method available.');

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })());
  }

  var typeParsers = {
    boolean: toBoolean,
    integer: toNumber,
    number: toNumber,
    date: toDate,
    string: toString,
    unknown: identity
  };
  var typeTests = [isBoolean$2, isInteger$1, isNumber$2, isDate$2];
  var typeList = ['boolean', 'integer', 'number', 'date'];
  function inferType(values, field) {
    if (!values || !values.length) return 'unknown';
    var value,
        i,
        j,
        t = 0,
        n = values.length,
        m = typeTests.length,
        a = typeTests.map(function (_, i) {
      return i + 1;
    });

    for (i = 0, n = values.length; i < n; ++i) {
      value = field ? values[i][field] : values[i];

      for (j = 0; j < m; ++j) {
        if (a[j] && isValid(value) && !typeTests[j](value)) {
          a[j] = 0;
          ++t;
          if (t === typeTests.length) return 'string';
        }
      }
    }

    t = a.reduce(function (u, v) {
      return u === 0 ? v : u;
    }, 0) - 1;
    return typeList[t];
  }
  function inferTypes(data, fields) {
    return fields.reduce(function (types, field) {
      types[field] = inferType(data, field);
      return types;
    }, {});
  } // -- Type Checks ----

  function isValid(_) {
    return _ != null && _ === _;
  }

  function isBoolean$2(_) {
    return _ === 'true' || _ === 'false' || _ === true || _ === false;
  }

  function isDate$2(_) {
    return !Number.isNaN(Date.parse(_));
  }

  function isNumber$2(_) {
    return !Number.isNaN(+_) && !(_ instanceof Date);
  }

  function isInteger$1(_) {
    return isNumber$2(_) && Number.isInteger(+_);
  }

  var EOL = {},
      EOF = {},
      QUOTE = 34,
      NEWLINE = 10,
      RETURN = 13;

  function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function (name, i) {
      return JSON.stringify(name) + ": d[" + i + "] || \"\"";
    }).join(",") + "}");
  }

  function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function (row, i) {
      return f(object(row), i, columns);
    };
  } // Compute unique columns in order of discovery.


  function inferColumns(rows) {
    var columnSet = Object.create(null),
        columns = [];
    rows.forEach(function (row) {
      for (var column in row) {
        if (!(column in columnSet)) {
          columns.push(columnSet[column] = column);
        }
      }
    });
    return columns;
  }

  function pad$1(value, width) {
    var s = value + "",
        length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
  }

  function formatYear(year) {
    return year < 0 ? "-" + pad$1(-year, 6) : year > 9999 ? "+" + pad$1(year, 6) : pad$1(year, 4);
  }

  function formatDate(date) {
    var hours = date.getUTCHours(),
        minutes = date.getUTCMinutes(),
        seconds = date.getUTCSeconds(),
        milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear()) + "-" + pad$1(date.getUTCMonth() + 1, 2) + "-" + pad$1(date.getUTCDate(), 2) + (milliseconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "." + pad$1(milliseconds, 3) + "Z" : seconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "Z" : minutes || hours ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + "Z" : "");
  }

  function dsvFormat (delimiter) {
    var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
        DELIMITER = delimiter.charCodeAt(0);

    function parse(text, f) {
      var convert,
          columns,
          rows = parseRows(text, function (row, i) {
        if (convert) return convert(row, i - 1);
        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
      });
      rows.columns = columns || [];
      return rows;
    }

    function parseRows(text, f) {
      var rows = [],
          // output rows
      N = text.length,
          I = 0,
          // current character index
      n = 0,
          // current line number
      t,
          // current token
      eof = N <= 0,
          // current token followed by EOF?
      eol = false; // current token followed by EOL?
      // Strip the trailing newline.

      if (text.charCodeAt(N - 1) === NEWLINE) --N;
      if (text.charCodeAt(N - 1) === RETURN) --N;

      function token() {
        if (eof) return EOF;
        if (eol) return eol = false, EOL; // Unescape quotes.

        var i,
            j = I,
            c;

        if (text.charCodeAt(j) === QUOTE) {
          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE) {
          }

          if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
            eol = true;
            if (text.charCodeAt(I) === NEWLINE) ++I;
          }
          return text.slice(j + 1, i - 1).replace(/""/g, "\"");
        } // Find next delimiter or newline.


        while (I < N) {
          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
            eol = true;
            if (text.charCodeAt(I) === NEWLINE) ++I;
          } else if (c !== DELIMITER) continue;
          return text.slice(j, i);
        } // Return last token before EOF.


        return eof = true, text.slice(j, N);
      }

      while ((t = token()) !== EOF) {
        var row = [];

        while (t !== EOL && t !== EOF) {
          row.push(t), t = token();
        }

        if (f && (row = f(row, n++)) == null) continue;
        rows.push(row);
      }

      return rows;
    }

    function preformatBody(rows, columns) {
      return rows.map(function (row) {
        return columns.map(function (column) {
          return formatValue(row[column]);
        }).join(delimiter);
      });
    }

    function format(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
    }

    function formatBody(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return preformatBody(rows, columns).join("\n");
    }

    function formatRows(rows) {
      return rows.map(formatRow).join("\n");
    }

    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }

    function formatValue(value) {
      return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
    }

    return {
      parse: parse,
      parseRows: parseRows,
      format: format,
      formatBody: formatBody,
      formatRows: formatRows,
      formatRow: formatRow,
      formatValue: formatValue
    };
  }

  function delimitedFormat(delimiter) {
    var parse = function parse(data, format) {
      var delim = {
        delimiter: delimiter
      };
      return dsv(data, format ? extend(format, delim) : delim);
    };

    parse.responseType = 'text';
    return parse;
  }
  function dsv(data, format) {
    if (format.header) {
      data = format.header.map($).join(format.delimiter) + '\n' + data;
    }

    return dsvFormat(format.delimiter).parse(data + '');
  }
  dsv.responseType = 'text';

  function isBuffer$1(_) {
    return typeof Buffer === 'function' && isFunction(Buffer.isBuffer) ? Buffer.isBuffer(_) : false;
  }

  function json(data, format) {
    var prop = format && format.property ? field(format.property) : identity;
    return isObject(data) && !isBuffer$1(data) ? parseJSON(prop(data)) : prop(JSON.parse(data));
  }
  json.responseType = 'json';

  function parseJSON(data, format) {
    return format && format.copy ? JSON.parse(JSON.stringify(data)) : data;
  }

  function identity$1 (x) {
    return x;
  }

  function transform (transform) {
    if (transform == null) return identity$1;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function (input, i) {
      if (!i) x0 = y0 = 0;
      var j = 2,
          n = input.length,
          output = new Array(n);
      output[0] = (x0 += input[0]) * kx + dx;
      output[1] = (y0 += input[1]) * ky + dy;

      while (j < n) {
        output[j] = input[j], ++j;
      }

      return output;
    };
  }

  function reverse (array, n) {
    var t,
        j = array.length,
        i = j - n;

    while (i < --j) {
      t = array[i], array[i++] = array[j], array[j] = t;
    }
  }

  function feature (topology, o) {
    if (typeof o === "string") o = topology.objects[o];
    return o.type === "GeometryCollection" ? {
      type: "FeatureCollection",
      features: o.geometries.map(function (o) {
        return feature$1(topology, o);
      })
    } : feature$1(topology, o);
  }

  function feature$1(topology, o) {
    var id = o.id,
        bbox = o.bbox,
        properties = o.properties == null ? {} : o.properties,
        geometry = object(topology, o);
    return id == null && bbox == null ? {
      type: "Feature",
      properties: properties,
      geometry: geometry
    } : bbox == null ? {
      type: "Feature",
      id: id,
      properties: properties,
      geometry: geometry
    } : {
      type: "Feature",
      id: id,
      bbox: bbox,
      properties: properties,
      geometry: geometry
    };
  }

  function object(topology, o) {
    var transformPoint = transform(topology.transform),
        arcs = topology.arcs;

    function arc(i, points) {
      if (points.length) points.pop();

      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
        points.push(transformPoint(a[k], k));
      }

      if (i < 0) reverse(points, n);
    }

    function point(p) {
      return transformPoint(p);
    }

    function line(arcs) {
      var points = [];

      for (var i = 0, n = arcs.length; i < n; ++i) {
        arc(arcs[i], points);
      }

      if (points.length < 2) points.push(points[0]); // This should never happen per the specification.

      return points;
    }

    function ring(arcs) {
      var points = line(arcs);

      while (points.length < 4) {
        points.push(points[0]);
      } // This may happen if an arc has only two points.


      return points;
    }

    function polygon(arcs) {
      return arcs.map(ring);
    }

    function geometry(o) {
      var type = o.type,
          coordinates;

      switch (type) {
        case "GeometryCollection":
          return {
            type: type,
            geometries: o.geometries.map(geometry)
          };

        case "Point":
          coordinates = point(o.coordinates);
          break;

        case "MultiPoint":
          coordinates = o.coordinates.map(point);
          break;

        case "LineString":
          coordinates = line(o.arcs);
          break;

        case "MultiLineString":
          coordinates = o.arcs.map(line);
          break;

        case "Polygon":
          coordinates = polygon(o.arcs);
          break;

        case "MultiPolygon":
          coordinates = o.arcs.map(polygon);
          break;

        default:
          return null;
      }

      return {
        type: type,
        coordinates: coordinates
      };
    }

    return geometry(o);
  }

  function stitch (topology, arcs) {
    var stitchedArcs = {},
        fragmentByStart = {},
        fragmentByEnd = {},
        fragments = [],
        emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.

    arcs.forEach(function (i, j) {
      var arc = topology.arcs[i < 0 ? ~i : i],
          t;

      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
      }
    });
    arcs.forEach(function (i) {
      var e = ends(i),
          start = e[0],
          end = e[1],
          f,
          g;

      if (f = fragmentByEnd[start]) {
        delete fragmentByEnd[f.end];
        f.push(i);
        f.end = end;

        if (g = fragmentByStart[end]) {
          delete fragmentByStart[g.start];
          var fg = g === f ? f : f.concat(g);
          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else if (f = fragmentByStart[end]) {
        delete fragmentByStart[f.start];
        f.unshift(i);
        f.start = start;

        if (g = fragmentByEnd[start]) {
          delete fragmentByEnd[g.end];
          var gf = g === f ? f : g.concat(f);
          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else {
        f = [i];
        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
      }
    });

    function ends(i) {
      var arc = topology.arcs[i < 0 ? ~i : i],
          p0 = arc[0],
          p1;
      if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
        p1[0] += dp[0], p1[1] += dp[1];
      });else p1 = arc[arc.length - 1];
      return i < 0 ? [p1, p0] : [p0, p1];
    }

    function flush(fragmentByEnd, fragmentByStart) {
      for (var k in fragmentByEnd) {
        var f = fragmentByEnd[k];
        delete fragmentByStart[f.start];
        delete f.start;
        delete f.end;
        f.forEach(function (i) {
          stitchedArcs[i < 0 ? ~i : i] = 1;
        });
        fragments.push(f);
      }
    }

    flush(fragmentByEnd, fragmentByStart);
    flush(fragmentByStart, fragmentByEnd);
    arcs.forEach(function (i) {
      if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
    });
    return fragments;
  }

  function mesh (topology) {
    return object(topology, meshArcs.apply(this, arguments));
  }
  function meshArcs(topology, object, filter) {
    var arcs, i, n;
    if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) {
      arcs[i] = i;
    }
    return {
      type: "MultiLineString",
      arcs: stitch(topology, arcs)
    };
  }

  function extractArcs(topology, object, filter) {
    var arcs = [],
        geomsByArc = [],
        geom;

    function extract0(i) {
      var j = i < 0 ? ~i : i;
      (geomsByArc[j] || (geomsByArc[j] = [])).push({
        i: i,
        g: geom
      });
    }

    function extract1(arcs) {
      arcs.forEach(extract0);
    }

    function extract2(arcs) {
      arcs.forEach(extract1);
    }

    function extract3(arcs) {
      arcs.forEach(extract2);
    }

    function geometry(o) {
      switch (geom = o, o.type) {
        case "GeometryCollection":
          o.geometries.forEach(geometry);
          break;

        case "LineString":
          extract1(o.arcs);
          break;

        case "MultiLineString":
        case "Polygon":
          extract2(o.arcs);
          break;

        case "MultiPolygon":
          extract3(o.arcs);
          break;
      }
    }

    geometry(object);
    geomsByArc.forEach(filter == null ? function (geoms) {
      arcs.push(geoms[0].i);
    } : function (geoms) {
      if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
    });
    return arcs;
  }

  var filters = {
    interior: function interior(a, b) {
      return a !== b;
    },
    exterior: function exterior(a, b) {
      return a === b;
    }
  };
  function topojson(data, format) {
    var method, object, property, filter;
    data = json(data, format);

    if (format && format.feature) {
      method = feature;
      property = format.feature;
    } else if (format && format.mesh) {
      method = mesh;
      property = format.mesh;
      filter = filters[format.filter];
    } else {
      error('Missing TopoJSON feature or mesh parameter.');
    }

    object = (object = data.objects[property]) ? method(data, object, filter) : error('Invalid TopoJSON object: ' + property);
    return object && object.features || [object];
  }
  topojson.responseType = 'json';

  var format$2 = {
    dsv: dsv,
    csv: delimitedFormat(','),
    tsv: delimitedFormat('\t'),
    json: json,
    topojson: topojson
  };
  function formats(name, reader) {
    if (arguments.length > 1) {
      format$2[name] = reader;
      return this;
    } else {
      return hasOwnProperty$1(format$2, name) ? format$2[name] : null;
    }
  }
  function responseType(type) {
    var f = formats(type);
    return f && f.responseType || 'text';
  }

  var t0 = new Date(),
      t1 = new Date();
  function newInterval(floori, offseti, count, field) {
    function interval(date) {
      return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
    }

    interval.floor = function (date) {
      return floori(date = new Date(+date)), date;
    };

    interval.ceil = function (date) {
      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };

    interval.round = function (date) {
      var d0 = interval(date),
          d1 = interval.ceil(date);
      return date - d0 < d1 - date ? d0 : d1;
    };

    interval.offset = function (date, step) {
      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };

    interval.range = function (start, stop, step) {
      var range = [],
          previous;
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

      do {
        range.push(previous = new Date(+start)), offseti(start, step), floori(start);
      } while (previous < start && start < stop);

      return range;
    };

    interval.filter = function (test) {
      return newInterval(function (date) {
        if (date >= date) while (floori(date), !test(date)) {
          date.setTime(date - 1);
        }
      }, function (date, step) {
        if (date >= date) {
          if (step < 0) while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

          } else while (--step >= 0) {
            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

          }
        }
      });
    };

    if (count) {
      interval.count = function (start, end) {
        t0.setTime(+start), t1.setTime(+end);
        floori(t0), floori(t1);
        return Math.floor(count(t0, t1));
      };

      interval.every = function (step) {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
          return field(d) % step === 0;
        } : function (d) {
          return interval.count(0, d) % step === 0;
        });
      };
    }

    return interval;
  }

  var millisecond = newInterval(function () {// noop
  }, function (date, step) {
    date.setTime(+date + step);
  }, function (start, end) {
    return end - start;
  }); // An optimized implementation for this simple case.

  millisecond.every = function (k) {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return newInterval(function (date) {
      date.setTime(Math.floor(date / k) * k);
    }, function (date, step) {
      date.setTime(+date + step * k);
    }, function (start, end) {
      return (end - start) / k;
    });
  };

  var durationSecond = 1e3;
  var durationMinute = 6e4;
  var durationHour = 36e5;
  var durationDay = 864e5;
  var durationWeek = 6048e5;

  var second = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds());
  }, function (date, step) {
    date.setTime(+date + step * durationSecond);
  }, function (start, end) {
    return (end - start) / durationSecond;
  }, function (date) {
    return date.getUTCSeconds();
  });

  var minute = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
  }, function (date, step) {
    date.setTime(+date + step * durationMinute);
  }, function (start, end) {
    return (end - start) / durationMinute;
  }, function (date) {
    return date.getMinutes();
  });

  var hour = newInterval(function (date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
  }, function (date, step) {
    date.setTime(+date + step * durationHour);
  }, function (start, end) {
    return (end - start) / durationHour;
  }, function (date) {
    return date.getHours();
  });

  var day = newInterval(function (date) {
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
  }, function (date) {
    return date.getDate() - 1;
  });

  function weekday(i) {
    return newInterval(function (date) {
      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
      date.setHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setDate(date.getDate() + step * 7);
    }, function (start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }

  var sunday = weekday(0);
  var monday = weekday(1);
  var tuesday = weekday(2);
  var wednesday = weekday(3);
  var thursday = weekday(4);
  var friday = weekday(5);
  var saturday = weekday(6);

  var month = newInterval(function (date) {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setMonth(date.getMonth() + step);
  }, function (start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, function (date) {
    return date.getMonth();
  });

  var year = newInterval(function (date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step);
  }, function (start, end) {
    return end.getFullYear() - start.getFullYear();
  }, function (date) {
    return date.getFullYear();
  }); // An optimized implementation for this simple case.

  year.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
      date.setFullYear(Math.floor(date.getFullYear() / k) * k);
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setFullYear(date.getFullYear() + step * k);
    });
  };

  var utcMinute = newInterval(function (date) {
    date.setUTCSeconds(0, 0);
  }, function (date, step) {
    date.setTime(+date + step * durationMinute);
  }, function (start, end) {
    return (end - start) / durationMinute;
  }, function (date) {
    return date.getUTCMinutes();
  });

  var utcHour = newInterval(function (date) {
    date.setUTCMinutes(0, 0, 0);
  }, function (date, step) {
    date.setTime(+date + step * durationHour);
  }, function (start, end) {
    return (end - start) / durationHour;
  }, function (date) {
    return date.getUTCHours();
  });

  var utcDay = newInterval(function (date) {
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step);
  }, function (start, end) {
    return (end - start) / durationDay;
  }, function (date) {
    return date.getUTCDate() - 1;
  });

  function utcWeekday(i) {
    return newInterval(function (date) {
      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
      date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setUTCDate(date.getUTCDate() + step * 7);
    }, function (start, end) {
      return (end - start) / durationWeek;
    });
  }

  var utcSunday = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);

  var utcMonth = newInterval(function (date) {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCMonth(date.getUTCMonth() + step);
  }, function (start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, function (date) {
    return date.getUTCMonth();
  });

  var utcYear = newInterval(function (date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
  }, function (start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, function (date) {
    return date.getUTCFullYear();
  }); // An optimized implementation for this simple case.

  utcYear.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
  };

  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date.setFullYear(d.y);
      return date;
    }

    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }

  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date.setUTCFullYear(d.y);
      return date;
    }

    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }

  function newDate(y, m, d) {
    return {
      y: y,
      m: m,
      d: d,
      H: 0,
      M: 0,
      S: 0,
      L: 0
    };
  }

  function formatLocale(locale) {
    var locale_dateTime = locale.dateTime,
        locale_date = locale.date,
        locale_time = locale.time,
        locale_periods = locale.periods,
        locale_weekdays = locale.days,
        locale_shortWeekdays = locale.shortDays,
        locale_months = locale.months,
        locale_shortMonths = locale.shortMonths;
    var periodRe = formatRe(locale_periods),
        periodLookup = formatLookup(locale_periods),
        weekdayRe = formatRe(locale_weekdays),
        weekdayLookup = formatLookup(locale_weekdays),
        shortWeekdayRe = formatRe(locale_shortWeekdays),
        shortWeekdayLookup = formatLookup(locale_shortWeekdays),
        monthRe = formatRe(locale_months),
        monthLookup = formatLookup(locale_months),
        shortMonthRe = formatRe(locale_shortMonths),
        shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear$1,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    }; // These recursive directive definitions must be deferred.

    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);

    function newFormat(specifier, formats) {
      return function (date) {
        var string = [],
            i = -1,
            j = 0,
            n = specifier.length,
            c,
            pad,
            format;
        if (!(date instanceof Date)) date = new Date(+date);

        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i));
            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
            if (format = formats[c]) c = format(date, pad);
            string.push(c);
            j = i + 1;
          }
        }

        string.push(specifier.slice(j, i));
        return string.join("");
      };
    }

    function newParse(specifier, Z) {
      return function (string) {
        var d = newDate(1900, undefined, 1),
            i = parseSpecifier(d, specifier, string += "", 0),
            week,
            day$1;
        if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

        if ("Q" in d) return new Date(d.Q);
        if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

        if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

        if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

        if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

        if ("V" in d) {
          if (d.V < 1 || d.V > 53) return null;
          if (!("w" in d)) d.w = 1;

          if ("Z" in d) {
            week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
            week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay.offset(week, (d.V - 1) * 7);
            d.y = week.getUTCFullYear();
            d.m = week.getUTCMonth();
            d.d = week.getUTCDate() + (d.w + 6) % 7;
          } else {
            week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
            week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
            week = day.offset(week, (d.V - 1) * 7);
            d.y = week.getFullYear();
            d.m = week.getMonth();
            d.d = week.getDate() + (d.w + 6) % 7;
          }
        } else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
          day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
        } // If a time zone is specified, all fields are interpreted as UTC and then
        // offset according to the specified time zone.


        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        } // Otherwise, all fields are in local time.


        return localDate(d);
      };
    }

    function parseSpecifier(d, specifier, string, j) {
      var i = 0,
          n = specifier.length,
          m = string.length,
          c,
          parse;

      while (i < n) {
        if (j >= m) return -1;
        c = specifier.charCodeAt(i++);

        if (c === 37) {
          c = specifier.charAt(i++);
          parse = parses[c in pads ? specifier.charAt(i++) : c];
          if (!parse || (j = parse(d, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }

      return j;
    }

    function parsePeriod(d, string, i) {
      var n = periodRe.exec(string.slice(i));
      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseShortWeekday(d, string, i) {
      var n = shortWeekdayRe.exec(string.slice(i));
      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseWeekday(d, string, i) {
      var n = weekdayRe.exec(string.slice(i));
      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseShortMonth(d, string, i) {
      var n = shortMonthRe.exec(string.slice(i));
      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseMonth(d, string, i) {
      var n = monthRe.exec(string.slice(i));
      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i);
    }

    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i);
    }

    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i);
    }

    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }

    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }

    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }

    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }

    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }

    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }

    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }

    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }

    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }

    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }

    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }

    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }

    return {
      format: function format(specifier) {
        var f = newFormat(specifier += "", formats);

        f.toString = function () {
          return specifier;
        };

        return f;
      },
      parse: function parse(specifier) {
        var p = newParse(specifier += "", false);

        p.toString = function () {
          return specifier;
        };

        return p;
      },
      utcFormat: function utcFormat(specifier) {
        var f = newFormat(specifier += "", utcFormats);

        f.toString = function () {
          return specifier;
        };

        return f;
      },
      utcParse: function utcParse(specifier) {
        var p = newParse(specifier += "", true);

        p.toString = function () {
          return specifier;
        };

        return p;
      }
    };
  }
  var pads = {
    "-": "",
    "_": " ",
    "0": "0"
  },
      numberRe = /^\s*\d+/,
      // note: ignores next directive
  percentRe = /^%/,
      requoteRe = /[\\^$*+?|[\]().{}]/g;

  function pad$2(value, fill, width) {
    var sign = value < 0 ? "-" : "",
        string = (sign ? -value : value) + "",
        length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }

  function requote(s) {
    return s.replace(requoteRe, "\\$&");
  }

  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }

  function formatLookup(names) {
    var map = {},
        i = -1,
        n = names.length;

    while (++i < n) {
      map[names[i].toLowerCase()] = i;
    }

    return map;
  }

  function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }

  function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }

  function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }

  function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
  }

  function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }

  function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  }

  function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }

  function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }

  function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }

  function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }

  function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }

  function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }

  function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }

  function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
  }

  function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }

  function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }

  function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
  }

  function formatDayOfMonth(d, p) {
    return pad$2(d.getDate(), p, 2);
  }

  function formatHour24(d, p) {
    return pad$2(d.getHours(), p, 2);
  }

  function formatHour12(d, p) {
    return pad$2(d.getHours() % 12 || 12, p, 2);
  }

  function formatDayOfYear(d, p) {
    return pad$2(1 + day.count(year(d), d), p, 3);
  }

  function formatMilliseconds(d, p) {
    return pad$2(d.getMilliseconds(), p, 3);
  }

  function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
  }

  function formatMonthNumber(d, p) {
    return pad$2(d.getMonth() + 1, p, 2);
  }

  function formatMinutes(d, p) {
    return pad$2(d.getMinutes(), p, 2);
  }

  function formatSeconds(d, p) {
    return pad$2(d.getSeconds(), p, 2);
  }

  function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
  }

  function formatWeekNumberSunday(d, p) {
    return pad$2(sunday.count(year(d) - 1, d), p, 2);
  }

  function formatWeekNumberISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
    return pad$2(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
  }

  function formatWeekdayNumberSunday(d) {
    return d.getDay();
  }

  function formatWeekNumberMonday(d, p) {
    return pad$2(monday.count(year(d) - 1, d), p, 2);
  }

  function formatYear$1(d, p) {
    return pad$2(d.getFullYear() % 100, p, 2);
  }

  function formatFullYear(d, p) {
    return pad$2(d.getFullYear() % 10000, p, 4);
  }

  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad$2(z / 60 | 0, "0", 2) + pad$2(z % 60, "0", 2);
  }

  function formatUTCDayOfMonth(d, p) {
    return pad$2(d.getUTCDate(), p, 2);
  }

  function formatUTCHour24(d, p) {
    return pad$2(d.getUTCHours(), p, 2);
  }

  function formatUTCHour12(d, p) {
    return pad$2(d.getUTCHours() % 12 || 12, p, 2);
  }

  function formatUTCDayOfYear(d, p) {
    return pad$2(1 + utcDay.count(utcYear(d), d), p, 3);
  }

  function formatUTCMilliseconds(d, p) {
    return pad$2(d.getUTCMilliseconds(), p, 3);
  }

  function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
  }

  function formatUTCMonthNumber(d, p) {
    return pad$2(d.getUTCMonth() + 1, p, 2);
  }

  function formatUTCMinutes(d, p) {
    return pad$2(d.getUTCMinutes(), p, 2);
  }

  function formatUTCSeconds(d, p) {
    return pad$2(d.getUTCSeconds(), p, 2);
  }

  function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }

  function formatUTCWeekNumberSunday(d, p) {
    return pad$2(utcSunday.count(utcYear(d) - 1, d), p, 2);
  }

  function formatUTCWeekNumberISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
    return pad$2(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
  }

  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
  }

  function formatUTCWeekNumberMonday(d, p) {
    return pad$2(utcMonday.count(utcYear(d) - 1, d), p, 2);
  }

  function formatUTCYear(d, p) {
    return pad$2(d.getUTCFullYear() % 100, p, 2);
  }

  function formatUTCFullYear(d, p) {
    return pad$2(d.getUTCFullYear() % 10000, p, 4);
  }

  function formatUTCZone() {
    return "+0000";
  }

  function formatLiteralPercent() {
    return "%";
  }

  function formatUnixTimestamp(d) {
    return +d;
  }

  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000);
  }

  var locale;
  var timeFormat;
  var timeParse;
  var utcFormat;
  var utcParse;
  defaultLocale({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale(definition) {
    locale = formatLocale(definition);
    timeFormat = locale.format;
    timeParse = locale.parse;
    utcFormat = locale.utcFormat;
    utcParse = locale.utcParse;
    return locale;
  }

  function read$1 (data, schema, dateParse) {
    schema = schema || {};
    var reader = formats(schema.type || 'json');
    if (!reader) error('Unknown data format type: ' + schema.type);
    data = reader(data, schema);
    if (schema.parse) parse$3(data, schema.parse, dateParse);
    if (hasOwnProperty$1(data, 'columns')) delete data.columns;
    return data;
  }

  function parse$3(data, types, dateParse) {
    if (!data.length) return; // early exit for empty data

    dateParse = dateParse || timeParse;
    var fields = data.columns || Object.keys(data[0]),
        parsers,
        datum,
        field,
        i,
        j,
        n,
        m;
    if (types === 'auto') types = inferTypes(data, fields);
    fields = Object.keys(types);
    parsers = fields.map(function (field) {
      var type = types[field],
          parts,
          pattern;

      if (type && (type.startsWith('date:') || type.startsWith('utc:'))) {
        parts = type.split(/:(.+)?/, 2); // split on first :

        pattern = parts[1];

        if (pattern[0] === '\'' && pattern[pattern.length - 1] === '\'' || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
          pattern = pattern.slice(1, -1);
        }

        return parts[0] === 'utc' ? utcParse(pattern) : dateParse(pattern);
      }

      if (!typeParsers[type]) {
        throw Error('Illegal format pattern: ' + field + ':' + type);
      }

      return typeParsers[type];
    });

    for (i = 0, n = data.length, m = fields.length; i < n; ++i) {
      datum = data[i];

      for (j = 0; j < m; ++j) {
        field = fields[j];
        datum[field] = parsers[j](datum[field]);
      }
    }
  }

  var loader = loaderFactory(require$$0, require$$1);

  var parse$4 = read$1;
  /**
   * Ingests new data into the dataflow. First parses the data using the
   * vega-loader read method, then pulses a changeset to the target operator.
   * @param {Operator} target - The Operator to target with ingested data,
   *   typically a Collect transform instance.
   * @param {*} data - The input data, prior to parsing. For JSON this may
   *   be a string or an object. For CSV, TSV, etc should be a string.
   * @param {object} format - The data format description for parsing
   *   loaded data. This object is passed to the vega-loader read method.
   * @returns {Dataflow}
   */

  function ingest$1(target, data, format) {
    return this.pulse(target, this.changeset().insert(parse$4(data, format)));
  }
  /**
   * Request data from an external source, parse it, and return a Promise.
   * @param {string} url - The URL from which to load the data. This string
   *   is passed to the vega-loader load method.
   * @param {object} [format] - The data format description for parsing
   *   loaded data. This object is passed to the vega-loader read method.
   * @return {Promise} A Promise that resolves upon completion of the request.
   *   The resolved object contains the following properties:
   *   - data: an array of parsed data (or null upon error)
   *   - status: a code for success (0), load fail (-1), or parse fail (-2)
   */

  function request$1(url, format) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var df, status, data;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              df = this;
              status = 0;
              _context.prev = 2;
              _context.next = 5;
              return df.loader().load(url, {
                context: 'dataflow',
                response: responseType(format && format.type)
              });

            case 5:
              data = _context.sent;

              try {
                data = parse$4(data, format);
              } catch (err) {
                status = -2;
                df.warn('Data ingestion failed', url, err);
              }

              _context.next = 13;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](2);
              status = -1;
              df.warn('Loading failed', url, _context.t0);

            case 13:
              return _context.abrupt("return", {
                data: data,
                status: status
              });

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[2, 9]]);
    }).call(this));
  }
  function preload(target, url, format) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var df, pending, res;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              df = this, pending = df._pending || loadPending(df);
              pending.requests += 1;
              _context2.next = 4;
              return df.request(url, format);

            case 4:
              res = _context2.sent;
              df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));
              pending.done();
              return _context2.abrupt("return", res);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }).call(this));
  }

  function loadPending(df) {
    var pending = new Promise(function (a) {
      accept = a;
    }),
        accept;
    pending.requests = 0;

    pending.done = function () {
      if (--pending.requests === 0) {
        df._pending = null;
        accept(df);
      }
    };

    return df._pending = pending;
  }

  var SKIP$1 = {
    skip: true
  };
  /**
   * Perform operator updates in response to events. Applies an
   * update function to compute a new operator value. If the update function
   * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
   * changes. Otherwise, the operator value will be updated to the return value.
   * @param {EventStream|Operator} source - The event source to react to.
   *   This argument can be either an EventStream or an Operator.
   * @param {Operator|function(object):Operator} target - The operator to update.
   *   This argument can either be an Operator instance or (if the source
   *   argument is an EventStream), a function that accepts an event object as
   *   input and returns an Operator to target.
   * @param {function(Parameters,Event): *} [update] - Optional update function
   *   to compute the new operator value, or a literal value to set. Update
   *   functions expect to receive a parameter object and event as arguments.
   *   This function can either return a new operator value or (if the source
   *   argument is an EventStream) a {@link ChangeSet} instance to pulse
   *   the target operator with tuple changes.
   * @param {object} [params] - The update function parameters.
   * @param {object} [options] - Additional options hash. If not overridden,
   *   updated operators will be skipped by default.
   * @param {boolean} [options.skip] - If true, the operator will
   *  be skipped: it will not be evaluated, but its dependents will be.
   * @param {boolean} [options.force] - If true, the operator will
   *   be re-evaluated even if its value has not changed.
   * @return {Dataflow}
   */

  function on (source, target, update, params, options) {
    var fn = source instanceof Operator ? onOperator : onStream;
    fn(this, source, target, update, params, options);
    return this;
  }

  function onStream(df, stream, target, update, params, options) {
    var opt = extend({}, options, SKIP$1),
        func,
        op;
    if (!isFunction(target)) target = constant(target);

    if (update === undefined) {
      func = function func(e) {
        return df.touch(target(e));
      };
    } else if (isFunction(update)) {
      op = new Operator(null, update, params, false);

      func = function func(e) {
        op.evaluate(e);
        var t = target(e),
            v = op.value;
        isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);
      };
    } else {
      func = function func(e) {
        return df.update(target(e), update, opt);
      };
    }

    stream.apply(func);
  }

  function onOperator(df, source, target, update, params, options) {
    if (update === undefined) {
      source.targets().add(target);
    } else {
      var opt = options || {},
          op = new Operator(null, updater(target, update), params, false);
      op.modified(opt.force);
      op.rank = source.rank; // immediately follow source

      source.targets().add(op); // add dependency

      if (target) {
        op.skip(true); // skip first invocation

        op.value = target.value; // initialize value

        op.targets().add(target); // chain dependencies

        df.connect(target, [op]); // rerank as needed, #1672
      }
    }
  }

  function updater(target, update) {
    update = isFunction(update) ? update : constant(update);
    return target ? function (_, pulse) {
      var value = update(_, pulse);

      if (!target.skip()) {
        target.skip(value !== this.value).value = value;
      }

      return value;
    } : update;
  }

  /**
   * Assigns a rank to an operator. Ranks are assigned in increasing order
   * by incrementing an internal rank counter.
   * @param {Operator} op - The operator to assign a rank.
   */

  function rank$1(op) {
    op.rank = ++this._rank;
  }
  /**
   * Re-ranks an operator and all downstream target dependencies. This
   * is necessary when upstream dependencies of higher rank are added to
   * a target operator.
   * @param {Operator} op - The operator to re-rank.
   */

  function rerank(op) {
    var queue = [op],
        cur,
        list,
        i;

    while (queue.length) {
      this.rank(cur = queue.pop());

      if (list = cur._targets) {
        for (i = list.length; --i >= 0;) {
          queue.push(cur = list[i]);
          if (cur === op) error('Cycle detected in dataflow graph.');
        }
      }
    }
  }

  /**
   * Sentinel value indicating pulse propagation should stop.
   */

  var StopPropagation = {}; // Pulse visit type flags

  var ADD = 1 << 0,
      REM = 1 << 1,
      MOD = 1 << 2,
      ADD_REM = ADD | REM,
      ADD_MOD = ADD | MOD,
      ALL = ADD | REM | MOD,
      REFLOW = 1 << 3,
      SOURCE = 1 << 4,
      NO_SOURCE = 1 << 5,
      NO_FIELDS = 1 << 6;
  /**
   * A Pulse enables inter-operator communication during a run of the
   * dataflow graph. In addition to the current timestamp, a pulse may also
   * contain a change-set of added, removed or modified data tuples, as well as
   * a pointer to a full backing data source. Tuple change sets may not
   * be fully materialized; for example, to prevent needless array creation
   * a change set may include larger arrays and corresponding filter functions.
   * The pulse provides a {@link visit} method to enable proper and efficient
   * iteration over requested data tuples.
   *
   * In addition, each pulse can track modification flags for data tuple fields.
   * Responsible transform operators should call the {@link modifies} method to
   * indicate changes to data fields. The {@link modified} method enables
   * querying of this modification state.
   *
   * @constructor
   * @param {Dataflow} dataflow - The backing dataflow instance.
   * @param {number} stamp - The current propagation timestamp.
   * @param {string} [encode] - An optional encoding set name, which is then
   *   accessible as Pulse.encode. Operators can respond to (or ignore) this
   *   setting as appropriate. This parameter can be used in conjunction with
   *   the Encode transform in the vega-encode module.
   */

  function Pulse(dataflow, stamp, encode) {
    this.dataflow = dataflow;
    this.stamp = stamp == null ? -1 : stamp;
    this.add = [];
    this.rem = [];
    this.mod = [];
    this.fields = null;
    this.encode = encode || null;
  }
  var prototype$3 = Pulse.prototype;
  /**
   * Sentinel value indicating pulse propagation should stop.
   */

  prototype$3.StopPropagation = StopPropagation;
  /**
   * Boolean flag indicating ADD (added) tuples.
   */

  prototype$3.ADD = ADD;
  /**
   * Boolean flag indicating REM (removed) tuples.
   */

  prototype$3.REM = REM;
  /**
   * Boolean flag indicating MOD (modified) tuples.
   */

  prototype$3.MOD = MOD;
  /**
   * Boolean flag indicating ADD (added) and REM (removed) tuples.
   */

  prototype$3.ADD_REM = ADD_REM;
  /**
   * Boolean flag indicating ADD (added) and MOD (modified) tuples.
   */

  prototype$3.ADD_MOD = ADD_MOD;
  /**
   * Boolean flag indicating ADD, REM and MOD tuples.
   */

  prototype$3.ALL = ALL;
  /**
   * Boolean flag indicating all tuples in a data source
   * except for the ADD, REM and MOD tuples.
   */

  prototype$3.REFLOW = REFLOW;
  /**
   * Boolean flag indicating a 'pass-through' to a
   * backing data source, ignoring ADD, REM and MOD tuples.
   */

  prototype$3.SOURCE = SOURCE;
  /**
   * Boolean flag indicating that source data should be
   * suppressed when creating a forked pulse.
   */

  prototype$3.NO_SOURCE = NO_SOURCE;
  /**
   * Boolean flag indicating that field modifications should be
   * suppressed when creating a forked pulse.
   */

  prototype$3.NO_FIELDS = NO_FIELDS;
  /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created.
   * @return {Pulse} - The forked pulse instance.
   * @see init
   */

  prototype$3.fork = function (flags) {
    return new Pulse(this.dataflow).init(this, flags);
  };
  /**
   * Creates a copy of this pulse with new materialized array
   * instances for the ADD, REM, MOD, and SOURCE arrays.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse} - The cloned pulse instance.
   * @see init
   */


  prototype$3.clone = function () {
    var p = this.fork(ALL);
    p.add = p.add.slice();
    p.rem = p.rem.slice();
    p.mod = p.mod.slice();
    if (p.source) p.source = p.source.slice();
    return p.materialize(ALL | SOURCE);
  };
  /**
   * Returns a pulse that adds all tuples from a backing source. This is
   * useful for cases where operators are added to a dataflow after an
   * upstream data pipeline has already been processed, ensuring that
   * new operators can observe all tuples within a stream.
   * @return {Pulse} - A pulse instance with all source tuples included
   *   in the add array. If the current pulse already has all source
   *   tuples in its add array, it is returned directly. If the current
   *   pulse does not have a backing source, it is returned directly.
   */


  prototype$3.addAll = function () {
    var p = this;

    if (!this.source || this.source.length === this.add.length) {
      return p;
    } else {
      p = new Pulse(this.dataflow).init(this);
      p.add = p.source;
      return p;
    }
  };
  /**
   * Initialize this pulse based on the values of another pulse. This method
   * is used internally by {@link fork} to initialize a new forked tuple.
   * The dataflow, time stamp and field modification values are copied over.
   * By default, new empty ADD, REM and MOD arrays are created.
   * @param {Pulse} src - The source pulse to copy from.
   * @param {number} flags - Integer of boolean flags indicating which (if any)
   *   tuple arrays should be copied to the new pulse. The supported flag values
   *   are ADD, REM and MOD. Array references are copied directly: new array
   *   instances are not created. By default, source data arrays are copied
   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
   * @return {Pulse} - Returns this Pulse instance.
   */


  prototype$3.init = function (src, flags) {
    var p = this;
    p.stamp = src.stamp;
    p.encode = src.encode;

    if (src.fields && !(flags & NO_FIELDS)) {
      p.fields = src.fields;
    }

    if (flags & ADD) {
      p.addF = src.addF;
      p.add = src.add;
    } else {
      p.addF = null;
      p.add = [];
    }

    if (flags & REM) {
      p.remF = src.remF;
      p.rem = src.rem;
    } else {
      p.remF = null;
      p.rem = [];
    }

    if (flags & MOD) {
      p.modF = src.modF;
      p.mod = src.mod;
    } else {
      p.modF = null;
      p.mod = [];
    }

    if (flags & NO_SOURCE) {
      p.srcF = null;
      p.source = null;
    } else {
      p.srcF = src.srcF;
      p.source = src.source;
    }

    return p;
  };
  /**
   * Schedules a function to run after pulse propagation completes.
   * @param {function} func - The function to run.
   */


  prototype$3.runAfter = function (func) {
    this.dataflow.runAfter(func);
  };
  /**
   * Indicates if tuples have been added, removed or modified.
   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
   *   Defaults to ALL, returning true if any tuple type has changed.
   * @return {boolean} - Returns true if one or more queried tuple types have
   *   changed, false otherwise.
   */


  prototype$3.changed = function (flags) {
    var f = flags || ALL;
    return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;
  };
  /**
   * Forces a "reflow" of tuple values, such that all tuples in the backing
   * source are added to the MOD set, unless already present in the ADD set.
   * @param {boolean} [fork=false] - If true, returns a forked copy of this
   *   pulse, and invokes reflow on that derived pulse.
   * @return {Pulse} - The reflowed pulse instance.
   */


  prototype$3.reflow = function (fork) {
    if (fork) return this.fork(ALL).reflow();
    var len = this.add.length,
        src = this.source && this.source.length;

    if (src && src !== len) {
      this.mod = this.source;
      if (len) this.filter(MOD, filter(this, ADD));
    }

    return this;
  };
  /**
   * Marks one or more data field names as modified to assist dependency
   * tracking and incremental processing by transform operators.
   * @param {string|Array<string>} _ - The field(s) to mark as modified.
   * @return {Pulse} - This pulse instance.
   */


  prototype$3.modifies = function (_) {
    var hash = this.fields || (this.fields = {});

    if (isArray(_)) {
      _.forEach(function (f) {
        return hash[f] = true;
      });
    } else {
      hash[_] = true;
    }

    return this;
  };
  /**
   * Checks if one or more data fields have been modified during this pulse
   * propagation timestamp.
   * @param {string|Array<string>} _ - The field(s) to check for modified.
   * @param {boolean} nomod - If true, will check the modified flag even if
   *   no mod tuples exist. If false (default), mod tuples must be present.
   * @return {boolean} - Returns true if any of the provided fields has been
   *   marked as modified, false otherwise.
   */


  prototype$3.modified = function (_, nomod) {
    var fields = this.fields;
    return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some(function (f) {
      return fields[f];
    }) : fields[_];
  };
  /**
   * Adds a filter function to one more tuple sets. Filters are applied to
   * backing tuple arrays, to determine the actual set of tuples considered
   * added, removed or modified. They can be used to delay materialization of
   * a tuple set in order to avoid expensive array copies. In addition, the
   * filter functions can serve as value transformers: unlike standard predicate
   * function (which return boolean values), Pulse filters should return the
   * actual tuple value to process. If a tuple set is already filtered, the
   * new filter function will be appended into a conjuntive ('and') query.
   * @param {number} flags - Flags indicating the tuple set(s) to filter.
   * @param {function(*):object} filter - Filter function that will be applied
   *   to the tuple set array, and should return a data tuple if the value
   *   should be included in the tuple set, and falsy (or null) otherwise.
   * @return {Pulse} - Returns this pulse instance.
   */


  prototype$3.filter = function (flags, filter) {
    var p = this;
    if (flags & ADD) p.addF = addFilter(p.addF, filter);
    if (flags & REM) p.remF = addFilter(p.remF, filter);
    if (flags & MOD) p.modF = addFilter(p.modF, filter);
    if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);
    return p;
  };

  function addFilter(a, b) {
    return a ? function (t, i) {
      return a(t, i) && b(t, i);
    } : b;
  }
  /**
   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
   * a registered filter function, it will be applied and the tuple set(s) will
   * be replaced with materialized tuple arrays.
   * @param {number} flags - Flags indicating the tuple set(s) to materialize.
   * @return {Pulse} - Returns this pulse instance.
   */


  prototype$3.materialize = function (flags) {
    flags = flags || ALL;
    var p = this;

    if (flags & ADD && p.addF) {
      p.add = materialize(p.add, p.addF);
      p.addF = null;
    }

    if (flags & REM && p.remF) {
      p.rem = materialize(p.rem, p.remF);
      p.remF = null;
    }

    if (flags & MOD && p.modF) {
      p.mod = materialize(p.mod, p.modF);
      p.modF = null;
    }

    if (flags & SOURCE && p.srcF) {
      p.source = p.source.filter(p.srcF);
      p.srcF = null;
    }

    return p;
  };

  function materialize(data, filter) {
    var out = [];
    visitArray(data, filter, function (_) {
      out.push(_);
    });
    return out;
  }

  function filter(pulse, flags) {
    var map = {};
    pulse.visit(flags, function (t) {
      map[tupleid(t)] = 1;
    });
    return function (t) {
      return map[tupleid(t)] ? null : t;
    };
  }
  /**
   * Visit one or more tuple sets in this pulse.
   * @param {number} flags - Flags indicating the tuple set(s) to visit.
   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
   *   has been set).
   * @param {function(object):*} - Visitor function invoked per-tuple.
   * @return {Pulse} - Returns this pulse instance.
   */


  prototype$3.visit = function (flags, visitor) {
    var p = this,
        v = visitor,
        src,
        sum;

    if (flags & SOURCE) {
      visitArray(p.source, p.srcF, v);
      return p;
    }

    if (flags & ADD) visitArray(p.add, p.addF, v);
    if (flags & REM) visitArray(p.rem, p.remF, v);
    if (flags & MOD) visitArray(p.mod, p.modF, v);

    if (flags & REFLOW && (src = p.source)) {
      sum = p.add.length + p.mod.length;

      if (sum === src.length) ; else if (sum) {
        visitArray(src, filter(p, ADD_MOD), v);
      } else {
        // if no add/rem/mod tuples, visit source
        visitArray(src, p.srcF, v);
      }
    }

    return p;
  };

  /**
   * Represents a set of multiple pulses. Used as input for operators
   * that accept multiple pulses at a time. Contained pulses are
   * accessible via the public "pulses" array property. This pulse doe
   * not carry added, removed or modified tuples directly. However,
   * the visit method can be used to traverse all such tuples contained
   * in sub-pulses with a timestamp matching this parent multi-pulse.
   * @constructor
   * @param {Dataflow} dataflow - The backing dataflow instance.
   * @param {number} stamp - The timestamp.
   * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
   */

  function MultiPulse(dataflow, stamp, pulses, encode) {
    var p = this,
        c = 0,
        pulse,
        hash,
        i,
        n,
        f;
    this.dataflow = dataflow;
    this.stamp = stamp;
    this.fields = null;
    this.encode = encode || null;
    this.pulses = pulses;

    for (i = 0, n = pulses.length; i < n; ++i) {
      pulse = pulses[i];
      if (pulse.stamp !== stamp) continue;

      if (pulse.fields) {
        hash = p.fields || (p.fields = {});

        for (f in pulse.fields) {
          hash[f] = 1;
        }
      }

      if (pulse.changed(p.ADD)) c |= p.ADD;
      if (pulse.changed(p.REM)) c |= p.REM;
      if (pulse.changed(p.MOD)) c |= p.MOD;
    }

    this.changes = c;
  }
  var prototype$4 = inherits(MultiPulse, Pulse);
  /**
   * Creates a new pulse based on the values of this pulse.
   * The dataflow, time stamp and field modification values are copied over.
   * @return {Pulse}
   */

  prototype$4.fork = function (flags) {
    var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);

    if (flags !== undefined) {
      if (flags & p.ADD) {
        this.visit(p.ADD, function (t) {
          return p.add.push(t);
        });
      }

      if (flags & p.REM) {
        this.visit(p.REM, function (t) {
          return p.rem.push(t);
        });
      }

      if (flags & p.MOD) {
        this.visit(p.MOD, function (t) {
          return p.mod.push(t);
        });
      }
    }

    return p;
  };

  prototype$4.changed = function (flags) {
    return this.changes & flags;
  };

  prototype$4.modified = function (_) {
    var p = this,
        fields = p.fields;
    return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(function (f) {
      return fields[f];
    }) : fields[_];
  };

  prototype$4.filter = function () {
    error('MultiPulse does not support filtering.');
  };

  prototype$4.materialize = function () {
    error('MultiPulse does not support materialization.');
  };

  prototype$4.visit = function (flags, visitor) {
    var p = this,
        pulses = p.pulses,
        n = pulses.length,
        i = 0;

    if (flags & p.SOURCE) {
      for (; i < n; ++i) {
        pulses[i].visit(flags, visitor);
      }
    } else {
      for (; i < n; ++i) {
        if (pulses[i].stamp === p.stamp) {
          pulses[i].visit(flags, visitor);
        }
      }
    }

    return p;
  };

  /**
   * Evaluates the dataflow and returns a Promise that resolves when pulse
   * propagation completes. This method will increment the current timestamp
   * and process all updated, pulsed and touched operators. When invoked for
   * the first time, all registered operators will be processed. This method
   * should not be invoked by third-party clients, use {@link runAsync} or
   * {@link run} instead.
   * @param {string} [encode] - The name of an encoding set to invoke during
   *   propagation. This value is added to generated Pulse instances;
   *   operators can then respond to (or ignore) this setting as appropriate.
   *   This parameter can be used in conjunction with the Encode transform in
   *   the vega-encode package.
   * @param {function} [prerun] - An optional callback function to invoke
   *   immediately before dataflow evaluation commences.
   * @param {function} [postrun] - An optional callback function to invoke
   *   after dataflow evaluation completes. The callback will be invoked
   *   after those registered via {@link runAfter}.
   * @return {Promise} - A promise that resolves to this dataflow after
   *   evaluation completes.
   */

  function evaluate(encode, prerun, postrun) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var df, level, async, stamp, count, op, next, dt, error, pr, i;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              df = this, level = df.logLevel(), async = []; // if the pulse value is set, this is a re-entrant call

              if (!df._pulse) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", reentrant(df));

            case 3:
              if (!df._pending) {
                _context.next = 6;
                break;
              }

              _context.next = 6;
              return df._pending;

            case 6:
              if (!prerun) {
                _context.next = 9;
                break;
              }

              _context.next = 9;
              return asyncCallback(df, prerun);

            case 9:
              if (df._touched.length) {
                _context.next = 12;
                break;
              }

              df.info('Dataflow invoked, but nothing to do.');
              return _context.abrupt("return", df);

            case 12:
              // increment timestamp clock
              stamp = ++df._clock, count = 0; // set the current pulse

              df._pulse = new Pulse(df, stamp, encode);

              if (level >= Info) {
                dt = Date.now();
                df.debug('-- START PROPAGATION (' + stamp + ') -----');
              } // initialize priority queue, reset touched operators


              df._touched.forEach(function (op) {
                return df._enqueue(op, true);
              });

              df._touched = UniqueList(id);
              _context.prev = 17;

            case 18:
              if (!(df._heap.size() > 0)) {
                _context.next = 36;
                break;
              }

              // dequeue operator with highest priority
              op = df._heap.pop(); // re-queue if rank changed

              if (!(op.rank !== op.qrank)) {
                _context.next = 23;
                break;
              }

              df._enqueue(op, true);

              return _context.abrupt("continue", 18);

            case 23:
              // otherwise, evaluate the operator
              next = op.run(df._getPulse(op, encode));

              if (!next.then) {
                _context.next = 30;
                break;
              }

              _context.next = 27;
              return next;

            case 27:
              next = _context.sent;
              _context.next = 31;
              break;

            case 30:
              if (next.async) {
                // queue parallel asynchronous execution
                async.push(next.async);
                next = StopPropagation;
              }

            case 31:
              if (level >= Debug) {
                df.debug(op.id, next === StopPropagation ? 'STOP' : next, op);
              } // propagate evaluation, enqueue dependent operators


              if (next !== StopPropagation) {
                if (op._targets) op._targets.forEach(function (op) {
                  return df._enqueue(op);
                });
              } // increment visit counter


              ++count;
              _context.next = 18;
              break;

            case 36:
              _context.next = 42;
              break;

            case 38:
              _context.prev = 38;
              _context.t0 = _context["catch"](17);

              df._heap.clear();

              error = _context.t0;

            case 42:
              // reset pulse map
              df._input = {};
              df._pulse = null;

              if (level >= Info) {
                dt = Date.now() - dt;
                df.info('> Pulse ' + stamp + ': ' + count + ' operators; ' + dt + 'ms');
              }

              if (error) {
                df._postrun = [];
                df.error(error);
              } // invoke callbacks queued via runAfter


              if (!df._postrun.length) {
                _context.next = 56;
                break;
              }

              pr = df._postrun.sort(function (a, b) {
                return b.priority - a.priority;
              });
              df._postrun = [];
              i = 0;

            case 50:
              if (!(i < pr.length)) {
                _context.next = 56;
                break;
              }

              _context.next = 53;
              return asyncCallback(df, pr[i].callback);

            case 53:
              ++i;
              _context.next = 50;
              break;

            case 56:
              if (!postrun) {
                _context.next = 59;
                break;
              }

              _context.next = 59;
              return asyncCallback(df, postrun);

            case 59:
              // handle non-blocking asynchronous callbacks
              if (async.length) {
                Promise.all(async).then(function (cb) {
                  return df.runAsync(null, function () {
                    cb.forEach(function (f) {
                      try {
                        f(df);
                      } catch (err) {
                        df.error(err);
                      }
                    });
                  });
                });
              }

              return _context.abrupt("return", df);

            case 61:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[17, 38]]);
    }).call(this));
  }
  /**
   * Queues dataflow evaluation to run once any other queued evaluations have
   * completed and returns a Promise that resolves when the queued pulse
   * propagation completes. If provided, a callback function will be invoked
   * immediately before evaluation commences. This method will ensure a
   * separate evaluation is invoked for each time it is called.
   * @param {string} [encode] - The name of an encoding set to invoke during
   *   propagation. This value is added to generated Pulse instances;
   *   operators can then respond to (or ignore) this setting as appropriate.
   *   This parameter can be used in conjunction with the Encode transform in
   *   the vega-encode package.
   * @param {function} [prerun] - An optional callback function to invoke
   *   immediately before dataflow evaluation commences.
   * @param {function} [postrun] - An optional callback function to invoke
   *   after dataflow evaluation completes. The callback will be invoked
   *   after those registered via {@link runAfter}.
   * @return {Promise} - A promise that resolves to this dataflow after
   *   evaluation completes.
   */

  function runAsync(encode, prerun, postrun) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      var clear;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this._running) {
                _context2.next = 5;
                break;
              }

              _context2.next = 3;
              return this._running;

            case 3:
              _context2.next = 0;
              break;

            case 5:
              // run dataflow, manage running promise
              clear = function clear() {
                return _this._running = null;
              };

              (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);
              return _context2.abrupt("return", this._running);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }).call(this));
  }
  /**
   * Requests dataflow evaluation and the immediately returns this dataflow
   * instance. If there are pending data loading or other asynchronous
   * operations, the dataflow will evaluate asynchronously after this method
   * has been invoked. To track when dataflow evaluation completes, use the
   * {@link runAsync} method instead. This method will raise an error if
   * invoked while the dataflow is already in the midst of evaluation.
   * @param {string} [encode] - The name of an encoding set to invoke during
   *   propagation. This value is added to generated Pulse instances;
   *   operators can then respond to (or ignore) this setting as appropriate.
   *   This parameter can be used in conjunction with the Encode transform in
   *   the vega-encode module.
   * @param {function} [prerun] - An optional callback function to invoke
   *   immediately before dataflow evaluation commences.
   * @param {function} [postrun] - An optional callback function to invoke
   *   after dataflow evaluation completes. The callback will be invoked
   *   after those registered via {@link runAfter}.
   * @return {Dataflow} - This dataflow instance.
   */

  function run(encode, prerun, postrun) {
    return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);
  }
  /**
   * Schedules a callback function to be invoked after the current pulse
   * propagation completes. If no propagation is currently occurring,
   * the function is invoked immediately. Callbacks scheduled via runAfter
   * are invoked immediately upon completion of the current cycle, before
   * any request queued via runAsync. This method is primarily intended for
   * internal use. Third-party callers using runAfter to schedule a callback
   * that invokes {@link run} or {@link runAsync} should not use this method,
   * but instead use {@link runAsync} with prerun or postrun arguments.
   * @param {function(Dataflow)} callback - The callback function to run.
   *   The callback will be invoked with this Dataflow instance as its
   *   sole argument.
   * @param {boolean} enqueue - A boolean flag indicating that the
   *   callback should be queued up to run after the next propagation
   *   cycle, suppressing immediate invocation when propagation is not
   *   currently occurring.
   * @param {number} [priority] - A priority value used to sort registered
   *   callbacks to determine execution order. This argument is intended
   *   for internal Vega use only.
   */

  function runAfter(callback, enqueue, priority) {
    if (this._pulse || enqueue) {
      // pulse propagation is currently running, queue to run after
      this._postrun.push({
        priority: priority || 0,
        callback: callback
      });
    } else {
      // pulse propagation already complete, invoke immediately
      try {
        callback(this);
      } catch (err) {
        this.error(err);
      }
    }
  }
  /**
   * Raise an error for re-entrant dataflow evaluation.
   */

  function reentrant(df) {
    df.error('Dataflow already running. Use runAsync() to chain invocations.');
    return df;
  }
  /**
   * Enqueue an operator into the priority queue for evaluation. The operator
   * will be enqueued if it has no registered pulse for the current cycle, or if
   * the force argument is true. Upon enqueue, this method also sets the
   * operator's qrank to the current rank value.
   * @param {Operator} op - The operator to enqueue.
   * @param {boolean} [force] - A flag indicating if the operator should be
   *   forceably added to the queue, even if it has already been previously
   *   enqueued during the current pulse propagation. This is useful when the
   *   dataflow graph is dynamically modified and the operator rank changes.
   */


  function enqueue(op, force) {
    var q = op.stamp < this._clock;
    if (q) op.stamp = this._clock;

    if (q || force) {
      op.qrank = op.rank;

      this._heap.push(op);
    }
  }
  /**
   * Provide a correct pulse for evaluating an operator. If the operator has an
   * explicit source operator, we will try to pull the pulse(s) from it.
   * If there is an array of source operators, we build a multi-pulse.
   * Otherwise, we return a current pulse with correct source data.
   * If the pulse is the pulse map has an explicit target set, we use that.
   * Else if the pulse on the upstream source operator is current, we use that.
   * Else we use the pulse from the pulse map, but copy the source tuple array.
   * @param {Operator} op - The operator for which to get an input pulse.
   * @param {string} [encode] - An (optional) encoding set name with which to
   *   annotate the returned pulse. See {@link run} for more information.
   */

  function getPulse(op, encode) {
    var s = op.source,
        stamp = this._clock;
    return s && isArray(s) ? new MultiPulse(this, stamp, s.map(function (_) {
      return _.pulse;
    }), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);
  }

  function singlePulse(p, s) {
    if (s && s.stamp === p.stamp) {
      return s;
    }

    p = p.fork();

    if (s && s !== StopPropagation) {
      p.source = s.source;
    }

    return p;
  }

  var NO_OPT = {
    skip: false,
    force: false
  };
  /**
   * Touches an operator, scheduling it to be evaluated. If invoked outside of
   * a pulse propagation, the operator will be evaluated the next time this
   * dataflow is run. If invoked in the midst of pulse propagation, the operator
   * will be queued for evaluation if and only if the operator has not yet been
   * evaluated on the current propagation timestamp.
   * @param {Operator} op - The operator to touch.
   * @param {object} [options] - Additional options hash.
   * @param {boolean} [options.skip] - If true, the operator will
   *   be skipped: it will not be evaluated, but its dependents will be.
   * @return {Dataflow}
   */

  function touch(op, options) {
    var opt = options || NO_OPT;

    if (this._pulse) {
      // if in midst of propagation, add to priority queue
      this._enqueue(op);
    } else {
      // otherwise, queue for next propagation
      this._touched.add(op);
    }

    if (opt.skip) op.skip(true);
    return this;
  }
  /**
   * Updates the value of the given operator.
   * @param {Operator} op - The operator to update.
   * @param {*} value - The value to set.
   * @param {object} [options] - Additional options hash.
   * @param {boolean} [options.force] - If true, the operator will
   *   be re-evaluated even if its value has not changed.
   * @param {boolean} [options.skip] - If true, the operator will
   *   be skipped: it will not be evaluated, but its dependents will be.
   * @return {Dataflow}
   */

  function update(op, value, options) {
    var opt = options || NO_OPT;

    if (op.set(value) || opt.force) {
      this.touch(op, opt);
    }

    return this;
  }
  /**
   * Pulses an operator with a changeset of tuples. If invoked outside of
   * a pulse propagation, the pulse will be applied the next time this
   * dataflow is run. If invoked in the midst of pulse propagation, the pulse
   * will be added to the set of active pulses and will be applied if and
   * only if the target operator has not yet been evaluated on the current
   * propagation timestamp.
   * @param {Operator} op - The operator to pulse.
   * @param {ChangeSet} value - The tuple changeset to apply.
   * @param {object} [options] - Additional options hash.
   * @param {boolean} [options.skip] - If true, the operator will
   *   be skipped: it will not be evaluated, but its dependents will be.
   * @return {Dataflow}
   */

  function pulse(op, changeset, options) {
    this.touch(op, options || NO_OPT);
    var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),
        t = op.pulse && op.pulse.source || [];
    p.target = op;
    this._input[op.id] = changeset.pulse(p, t);
    return this;
  }

  function Heap(cmp) {
    var nodes = [];
    return {
      clear: function clear() {
        return nodes = [];
      },
      size: function size() {
        return nodes.length;
      },
      peek: function peek() {
        return nodes[0];
      },
      push: function push(x) {
        nodes.push(x);
        return siftdown(nodes, 0, nodes.length - 1, cmp);
      },
      pop: function pop() {
        var last = nodes.pop(),
            item;

        if (nodes.length) {
          item = nodes[0];
          nodes[0] = last;
          siftup(nodes, 0, cmp);
        } else {
          item = last;
        }

        return item;
      }
    };
  }

  function siftdown(array, start, idx, cmp) {
    var item, parent, pidx;
    item = array[idx];

    while (idx > start) {
      pidx = idx - 1 >> 1;
      parent = array[pidx];

      if (cmp(item, parent) < 0) {
        array[idx] = parent;
        idx = pidx;
        continue;
      }

      break;
    }

    return array[idx] = item;
  }

  function siftup(array, idx, cmp) {
    var start = idx,
        end = array.length,
        item = array[idx],
        cidx = (idx << 1) + 1,
        ridx;

    while (cidx < end) {
      ridx = cidx + 1;

      if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {
        cidx = ridx;
      }

      array[idx] = array[cidx];
      idx = cidx;
      cidx = (idx << 1) + 1;
    }

    array[idx] = item;
    return siftdown(array, start, idx, cmp);
  }

  /**
   * A dataflow graph for reactive processing of data streams.
   * @constructor
   */

  function Dataflow() {
    this.logger(logger());
    this.logLevel(Error$1);
    this._clock = 0;
    this._rank = 0;

    try {
      this._loader = loader();
    } catch (e) {// do nothing if loader module is unavailable
    }

    this._touched = UniqueList(id);
    this._input = {};
    this._pulse = null;
    this._heap = Heap(function (a, b) {
      return a.qrank - b.qrank;
    });
    this._postrun = [];
  }
  var prototype$5 = Dataflow.prototype;
  /**
   * The current timestamp of this dataflow. This value reflects the
   * timestamp of the previous dataflow run. The dataflow is initialized
   * with a stamp value of 0. The initial run of the dataflow will have
   * a timestap of 1, and so on. This value will match the
   * {@link Pulse.stamp} property.
   * @return {number} - The current timestamp value.
   */

  prototype$5.stamp = function () {
    return this._clock;
  };
  /**
   * Gets or sets the loader instance to use for data file loading. A
   * loader object must provide a "load" method for loading files and a
   * "sanitize" method for checking URL/filename validity. Both methods
   * should accept a URI and options hash as arguments, and return a Promise
   * that resolves to the loaded file contents (load) or a hash containing
   * sanitized URI data with the sanitized url assigned to the "href" property
   * (sanitize).
   * @param {object} _ - The loader instance to use.
   * @return {object|Dataflow} - If no arguments are provided, returns
   *   the current loader instance. Otherwise returns this Dataflow instance.
   */


  prototype$5.loader = function (_) {
    if (arguments.length) {
      this._loader = _;
      return this;
    } else {
      return this._loader;
    }
  };
  /**
   * Empty entry threshold for garbage cleaning. Map data structures will
   * perform cleaning once the number of empty entries exceeds this value.
   */


  prototype$5.cleanThreshold = 1e4; // OPERATOR REGISTRATION

  prototype$5.add = add;
  prototype$5.connect = connect;
  prototype$5.rank = rank$1;
  prototype$5.rerank = rerank; // OPERATOR UPDATES

  prototype$5.pulse = pulse;
  prototype$5.touch = touch;
  prototype$5.update = update;
  prototype$5.changeset = changeset; // DATA LOADING

  prototype$5.ingest = ingest$1;
  prototype$5.parse = parse$4;
  prototype$5.preload = preload;
  prototype$5.request = request$1; // EVENT HANDLING

  prototype$5.events = events;
  prototype$5.on = on; // PULSE PROPAGATION

  prototype$5.evaluate = evaluate;
  prototype$5.run = run;
  prototype$5.runAsync = runAsync;
  prototype$5.runAfter = runAfter;
  prototype$5._enqueue = enqueue;
  prototype$5._getPulse = getPulse; // LOGGING AND ERROR HANDLING

  function logMethod(method) {
    return function () {
      return this._log[method].apply(this, arguments);
    };
  }
  /**
   * Get or set the logger instance used to log messages. If no arguments are
   * provided, returns the current logger instance. Otherwise, sets the logger
   * and return this Dataflow instance. Provided loggers must support the full
   * API of logger objects generated by the vega-util logger method. Note that
   * by default the log level of the new logger will be used; use the logLevel
   * method to adjust the log level as needed.
   */


  prototype$5.logger = function (logger) {
    if (arguments.length) {
      this._log = logger;
      return this;
    } else {
      return this._log;
    }
  };
  /**
   * Logs an error message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit error messages.
   */


  prototype$5.error = logMethod('error');
  /**
   * Logs a warning message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit warning messages.
   */

  prototype$5.warn = logMethod('warn');
  /**
   * Logs a information message. By default, logged messages are written to
   * console output. The message will only be logged if the current log level is
   * high enough to permit information messages.
   */

  prototype$5.info = logMethod('info');
  /**
   * Logs a debug message. By default, logged messages are written to console
   * output. The message will only be logged if the current log level is high
   * enough to permit debug messages.
   */

  prototype$5.debug = logMethod('debug');
  /**
   * Get or set the current log level. If an argument is provided, it
   * will be used as the new log level.
   * @param {number} [level] - Should be one of None, Warn, Info
   * @return {number} - The current log level.
   */

  prototype$5.logLevel = logMethod('level');

  /**
   * Abstract class for operators that process data tuples.
   * Subclasses must provide a {@link transform} method for operator processing.
   * @constructor
   * @param {*} [init] - The initial value for this operator.
   * @param {object} [params] - The parameters for this operator.
   * @param {Operator} [source] - The operator from which to receive pulses.
   */

  function Transform$1(init, params) {
    Operator.call(this, init, null, params);
  }
  var prototype$6 = inherits(Transform$1, Operator);
  /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Internally, this method calls {@link evaluate} to perform processing.
   * If {@link evaluate} returns a falsy value, the input pulse is returned.
   * This method should NOT be overridden, instead overrride {@link evaluate}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return the output pulse for this operator (or StopPropagation)
   */

  prototype$6.run = function (pulse) {
    var _this = this;

    if (pulse.stamp < this.stamp) return pulse.StopPropagation;
    var rv;

    if (this.skip()) {
      this.skip(false);
    } else {
      rv = this.evaluate(pulse);
    }

    rv = rv || pulse;

    if (rv.then) {
      rv = rv.then(function (_) {
        return _this.pulse = _;
      });
    } else if (rv !== pulse.StopPropagation) {
      this.pulse = rv;
    }

    return rv;
  };
  /**
   * Overrides {@link Operator.evaluate} for transform operators.
   * Marshalls parameter values and then invokes {@link transform}.
   * @param {Pulse} pulse - the current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
       value (including undefined) will let the input pulse pass through.
   */


  prototype$6.evaluate = function (pulse) {
    var params = this.marshall(pulse.stamp),
        out = this.transform(params, pulse);
    params.clear();
    return out;
  };
  /**
   * Process incoming pulses.
   * Subclasses should override this method to implement transforms.
   * @param {Parameters} _ - The operator parameter values.
   * @param {Pulse} pulse - The current dataflow pulse.
   * @return {Pulse} The output pulse (or StopPropagation). A falsy return
   *   value (including undefined) will let the input pulse pass through.
   */


  prototype$6.transform = function () {};

  var transforms = {};
  function definition(type) {
    var t = transform$1(type);
    return t && t.Definition || null;
  }
  function transform$1(type) {
    type = type && type.toLowerCase();
    return hasOwnProperty$1(transforms, type) ? transforms[type] : null;
  }

  function multikey(f) {
    return function (x) {
      var n = f.length,
          i = 1,
          k = String(f[0](x));

      for (; i < n; ++i) {
        k += '|' + f[i](x);
      }

      return k;
    };
  }
  function groupkey(fields) {
    return !fields || !fields.length ? function () {
      return '';
    } : fields.length === 1 ? fields[0] : multikey(fields);
  }

  function measureName(op, field, as) {
    return as || op + (!field ? '' : '_' + field);
  }
  var AggregateOps = {
    'values': measure({
      name: 'values',
      init: 'cell.store = true;',
      set: 'cell.data.values()',
      idx: -1
    }),
    'count': measure({
      name: 'count',
      set: 'cell.num'
    }),
    '__count__': measure({
      name: 'count',
      set: 'this.missing + this.valid'
    }),
    'missing': measure({
      name: 'missing',
      set: 'this.missing'
    }),
    'valid': measure({
      name: 'valid',
      set: 'this.valid'
    }),
    'sum': measure({
      name: 'sum',
      init: 'this.sum = 0;',
      add: 'this.sum += +v;',
      rem: 'this.sum -= v;',
      set: 'this.sum'
    }),
    'product': measure({
      name: 'product',
      init: 'this.product = 1;',
      add: 'this.product *= v;',
      rem: 'this.product /= v;',
      set: 'this.valid ? this.product : undefined'
    }),
    'mean': measure({
      name: 'mean',
      init: 'this.mean = 0;',
      add: 'var d = v - this.mean; this.mean += d / this.valid;',
      rem: 'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',
      set: 'this.valid ? this.mean : undefined'
    }),
    'average': measure({
      name: 'average',
      set: 'this.valid ? this.mean : undefined',
      req: ['mean'],
      idx: 1
    }),
    'variance': measure({
      name: 'variance',
      init: 'this.dev = 0;',
      add: 'this.dev += d * (v - this.mean);',
      rem: 'this.dev -= d * (v - this.mean);',
      set: 'this.valid > 1 ? this.dev / (this.valid-1) : undefined',
      req: ['mean'],
      idx: 1
    }),
    'variancep': measure({
      name: 'variancep',
      set: 'this.valid > 1 ? this.dev / this.valid : undefined',
      req: ['variance'],
      idx: 2
    }),
    'stdev': measure({
      name: 'stdev',
      set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',
      req: ['variance'],
      idx: 2
    }),
    'stdevp': measure({
      name: 'stdevp',
      set: 'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',
      req: ['variance'],
      idx: 2
    }),
    'stderr': measure({
      name: 'stderr',
      set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',
      req: ['variance'],
      idx: 2
    }),
    'distinct': measure({
      name: 'distinct',
      set: 'cell.data.distinct(this.get)',
      req: ['values'],
      idx: 3
    }),
    'ci0': measure({
      name: 'ci0',
      set: 'cell.data.ci0(this.get)',
      req: ['values'],
      idx: 3
    }),
    'ci1': measure({
      name: 'ci1',
      set: 'cell.data.ci1(this.get)',
      req: ['values'],
      idx: 3
    }),
    'median': measure({
      name: 'median',
      set: 'cell.data.q2(this.get)',
      req: ['values'],
      idx: 3
    }),
    'q1': measure({
      name: 'q1',
      set: 'cell.data.q1(this.get)',
      req: ['values'],
      idx: 3
    }),
    'q3': measure({
      name: 'q3',
      set: 'cell.data.q3(this.get)',
      req: ['values'],
      idx: 3
    }),
    'argmin': measure({
      name: 'argmin',
      init: 'this.argmin = undefined;',
      add: 'if (v < this.min) this.argmin = t;',
      rem: 'if (v <= this.min) this.argmin = undefined;',
      set: 'this.argmin || cell.data.argmin(this.get)',
      req: ['min'],
      str: ['values'],
      idx: 3
    }),
    'argmax': measure({
      name: 'argmax',
      init: 'this.argmax = undefined;',
      add: 'if (v > this.max) this.argmax = t;',
      rem: 'if (v >= this.max) this.argmax = undefined;',
      set: 'this.argmax || cell.data.argmax(this.get)',
      req: ['max'],
      str: ['values'],
      idx: 3
    }),
    'min': measure({
      name: 'min',
      init: 'this.min = undefined;',
      add: 'if (v < this.min || this.min === undefined) this.min = v;',
      rem: 'if (v <= this.min) this.min = NaN;',
      set: 'this.min = (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)',
      str: ['values'],
      idx: 4
    }),
    'max': measure({
      name: 'max',
      init: 'this.max = undefined;',
      add: 'if (v > this.max || this.max === undefined) this.max = v;',
      rem: 'if (v >= this.max) this.max = NaN;',
      set: 'this.max = (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)',
      str: ['values'],
      idx: 4
    })
  };
  var ValidAggregateOps = Object.keys(AggregateOps);
  function createMeasure(op, name) {
    return AggregateOps[op](name);
  }

  function measure(base) {
    return function (out) {
      var m = extend({
        init: '',
        add: '',
        rem: '',
        idx: 0
      }, base);
      m.out = out || base.name;
      return m;
    };
  }

  function compareIndex(a, b) {
    return a.idx - b.idx;
  }

  function resolve(agg, stream) {
    function collect(m, a) {
      function helper(r) {
        if (!m[r]) collect(m, m[r] = AggregateOps[r]());
      }

      if (a.req) a.req.forEach(helper);
      if (stream && a.str) a.str.forEach(helper);
      return m;
    }

    var map = agg.reduce(collect, agg.reduce(function (m, a) {
      m[a.name] = a;
      return m;
    }, {}));
    var values = [],
        key;

    for (key in map) {
      values.push(map[key]);
    }

    return values.sort(compareIndex);
  }

  function compileMeasures(agg, field) {
    var get = field || identity,
        all = resolve(agg, true),
        // assume streaming removes may occur
    init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',
        ctr = 'this.cell = cell; this.init();',
        add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',
        rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',
        set = 'var cell = this.cell;';
    all.forEach(function (a) {
      init += a.init;
      add += a.add;
      rem += a.rem;
    });
    agg.slice().sort(compareIndex).forEach(function (a) {
      set += 't[' + $(a.out) + ']=' + a.set + ';';
    });
    set += 'return t;';
    ctr = Function('cell', ctr);
    ctr.prototype.init = Function(init);
    ctr.prototype.add = Function('v', 't', add);
    ctr.prototype.rem = Function('v', 't', rem);
    ctr.prototype.set = Function('t', set);
    ctr.prototype.get = get;
    ctr.fields = agg.map(function (_) {
      return _.out;
    });
    return ctr;
  }

  var _marked = /*#__PURE__*/regeneratorRuntime.mark(_callee);

  function _callee(values, valueof) {
    var _iterator, _step, value, index, _iterator2, _step2, _value;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(valueof === undefined)) {
              _context.next = 21;
              break;
            }

            _iterator = _createForOfIteratorHelper(values);
            _context.prev = 2;

            _iterator.s();

          case 4:
            if ((_step = _iterator.n()).done) {
              _context.next = 11;
              break;
            }

            value = _step.value;

            if (!(value != null && (value = +value) >= value)) {
              _context.next = 9;
              break;
            }

            _context.next = 9;
            return value;

          case 9:
            _context.next = 4;
            break;

          case 11:
            _context.next = 16;
            break;

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](2);

            _iterator.e(_context.t0);

          case 16:
            _context.prev = 16;

            _iterator.f();

            return _context.finish(16);

          case 19:
            _context.next = 40;
            break;

          case 21:
            index = -1;
            _iterator2 = _createForOfIteratorHelper(values);
            _context.prev = 23;

            _iterator2.s();

          case 25:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 32;
              break;
            }

            _value = _step2.value;

            if (!((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value)) {
              _context.next = 30;
              break;
            }

            _context.next = 30;
            return _value;

          case 30:
            _context.next = 25;
            break;

          case 32:
            _context.next = 37;
            break;

          case 34:
            _context.prev = 34;
            _context.t1 = _context["catch"](23);

            _iterator2.e(_context.t1);

          case 37:
            _context.prev = 37;

            _iterator2.f();

            return _context.finish(37);

          case 40:
          case "end":
            return _context.stop();
        }
      }
    }, _marked, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
  }

  function ascending (a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function bisector (compare) {
    if (compare.length === 1) compare = ascendingComparator(compare);
    return {
      left: function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;

        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
        }

        return lo;
      },
      right: function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;

        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
        }

        return lo;
      }
    };
  }

  function ascendingComparator(f) {
    return function (d, x) {
      return ascending(f(d), x);
    };
  }

  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;

  function variance(values, valueof) {
    var count = 0;
    var delta;
    var mean = 0;
    var sum = 0;

    if (valueof === undefined) {
      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;

      var _iterator2 = _createForOfIteratorHelper(values),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {
            delta = _value - mean;
            mean += delta / ++count;
            sum += delta * (_value - mean);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    if (count > 1) return sum / (count - 1);
  }

  function deviation(values, valueof) {
    var v = variance(values, valueof);
    return v ? Math.sqrt(v) : v;
  }

  function sequence (start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1,
        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
        range = new Array(n);

    while (++i < n) {
      range[i] = start + i * step;
    }

    return range;
  }

  var e10 = Math.sqrt(50),
      e5 = Math.sqrt(10),
      e2 = Math.sqrt(2);
  function ticks (start, stop, count) {
    var reverse,
        i = -1,
        n,
        ticks,
        step;
    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0) return [start];
    if (reverse = stop < start) n = start, start = stop, stop = n;
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

    if (step > 0) {
      start = Math.ceil(start / step);
      stop = Math.floor(stop / step);
      ticks = new Array(n = Math.ceil(stop - start + 1));

      while (++i < n) {
        ticks[i] = (start + i) * step;
      }
    } else {
      start = Math.floor(start * step);
      stop = Math.ceil(stop * step);
      ticks = new Array(n = Math.ceil(start - stop + 1));

      while (++i < n) {
        ticks[i] = (start - i) / step;
      }
    }

    if (reverse) ticks.reverse();
    return ticks;
  }
  function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count),
        power = Math.floor(Math.log(step) / Math.LN10),
        error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
  }
  function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count),
        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
        error = step0 / step1;
    if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
  }

  function max(values, valueof) {
    var max;

    if (valueof === undefined) {
      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (value != null && (max < value || max === undefined && value >= value)) {
            max = value;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;

      var _iterator2 = _createForOfIteratorHelper(values),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if ((_value = valueof(_value, ++index, values)) != null && (max < _value || max === undefined && _value >= _value)) {
            max = _value;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    return max;
  }

  function min(values, valueof) {
    var min;

    if (valueof === undefined) {
      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (value != null && (min > value || min === undefined && value >= value)) {
            min = value;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;

      var _iterator2 = _createForOfIteratorHelper(values),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if ((_value = valueof(_value, ++index, values)) != null && (min > _value || min === undefined && _value >= _value)) {
            min = _value;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    return min;
  }

  // ISC license, Copyright 2018 Vladimir Agafonkin.

  function quickselect(array, k) {
    var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length - 1;
    var compare = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ascending;

    while (right > left) {
      if (right - left > 600) {
        var n = right - left + 1;
        var m = k - left + 1;
        var z = Math.log(n);
        var s = 0.5 * Math.exp(2 * z / 3);
        var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
        var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
        var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
        quickselect(array, k, newLeft, newRight, compare);
      }

      var t = array[k];
      var i = left;
      var j = right;
      swap$1(array, left, k);
      if (compare(array[right], t) > 0) swap$1(array, left, right);

      while (i < j) {
        swap$1(array, i, j), ++i, --j;

        while (compare(array[i], t) < 0) {
          ++i;
        }

        while (compare(array[j], t) > 0) {
          --j;
        }
      }

      if (compare(array[left], t) === 0) swap$1(array, left, j);else ++j, swap$1(array, j, right);
      if (j <= k) left = j + 1;
      if (k <= j) right = j - 1;
    }

    return array;
  }

  function swap$1(array, i, j) {
    var t = array[i];
    array[i] = array[j];
    array[j] = t;
  }

  var _marked$1 = /*#__PURE__*/regeneratorRuntime.mark(numbers);

  function number (x) {
    return x === null ? NaN : +x;
  }
  function numbers(values, valueof) {
    var _iterator, _step, value, index, _iterator2, _step2, _value;

    return regeneratorRuntime.wrap(function numbers$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(valueof === undefined)) {
              _context.next = 21;
              break;
            }

            _iterator = _createForOfIteratorHelper(values);
            _context.prev = 2;

            _iterator.s();

          case 4:
            if ((_step = _iterator.n()).done) {
              _context.next = 11;
              break;
            }

            value = _step.value;

            if (!(value != null && (value = +value) >= value)) {
              _context.next = 9;
              break;
            }

            _context.next = 9;
            return value;

          case 9:
            _context.next = 4;
            break;

          case 11:
            _context.next = 16;
            break;

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](2);

            _iterator.e(_context.t0);

          case 16:
            _context.prev = 16;

            _iterator.f();

            return _context.finish(16);

          case 19:
            _context.next = 40;
            break;

          case 21:
            index = -1;
            _iterator2 = _createForOfIteratorHelper(values);
            _context.prev = 23;

            _iterator2.s();

          case 25:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 32;
              break;
            }

            _value = _step2.value;

            if (!((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value)) {
              _context.next = 30;
              break;
            }

            _context.next = 30;
            return _value;

          case 30:
            _context.next = 25;
            break;

          case 32:
            _context.next = 37;
            break;

          case 34:
            _context.prev = 34;
            _context.t1 = _context["catch"](23);

            _iterator2.e(_context.t1);

          case 37:
            _context.prev = 37;

            _iterator2.f();

            return _context.finish(37);

          case 40:
          case "end":
            return _context.stop();
        }
      }
    }, _marked$1, null, [[2, 13, 16, 19], [23, 34, 37, 40]]);
  }

  function quantile(values, p, valueof) {
    values = Float64Array.from(numbers(values, valueof));
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return min(values);
    if (p >= 1) return max(values);
    var n,
        i = (n - 1) * p,
        i0 = Math.floor(i),
        value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
        value1 = min(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileSorted(values, p) {
    var valueof = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : number;
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n,
        i = (n - 1) * p,
        i0 = Math.floor(i),
        value0 = +valueof(values[i0], i0, values),
        value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
  }

  function mean(values, valueof) {
    var count = 0;
    var sum = 0;

    if (valueof === undefined) {
      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (value != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;

      var _iterator2 = _createForOfIteratorHelper(values),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if ((_value = valueof(_value, ++index, values)) != null && (_value = +_value) >= _value) {
            ++count, sum += _value;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    if (count) return sum / count;
  }

  function median (values, valueof) {
    return quantile(values, 0.5, valueof);
  }

  function permute (source, keys) {
    return Array.from(keys, function (key) {
      return source[key];
    });
  }

  function sum(values, valueof) {
    var sum = 0;

    if (valueof === undefined) {
      var _iterator = _createForOfIteratorHelper(values),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;

          if (value = +value) {
            sum += value;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var index = -1;

      var _iterator2 = _createForOfIteratorHelper(values),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _value = _step2.value;

          if (_value = +valueof(_value, ++index, values)) {
            sum += _value;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    return sum;
  }

  function quantiles (array, p, f) {
    var values = Float64Array.from(_callee(array, f)); // don't depend on return value from typed array sort call
    // protects against undefined sort results in Safari (vega/vega-lite#4964)

    values.sort(ascending);
    return p.map(function (_) {
      return quantileSorted(values, _);
    });
  }

  function quartiles (array, f) {
    return quantiles(array, [0.25, 0.50, 0.75], f);
  }

  // Theory, Practice, and Visualization. Wiley.

  function bandwidthNRD (array, f) {
    var n = array.length,
        v = deviation(array, f),
        q = quartiles(array, f),
        h = (q[2] - q[0]) / 1.34;
    v = Math.min(v, h) || v || Math.abs(q[0]) || 1;
    return 1.06 * v * Math.pow(n, -0.2);
  }

  function bin (_) {
    // determine range
    var maxb = _.maxbins || 20,
        base = _.base || 10,
        logb = Math.log(base),
        div = _.divide || [5, 2],
        min = _.extent[0],
        max = _.extent[1],
        span = _.span || max - min || Math.abs(min) || 1,
        step,
        level,
        minstep,
        precision,
        v,
        i,
        n,
        eps;

    if (_.step) {
      // if step size is explicitly given, use that
      step = _.step;
    } else if (_.steps) {
      // if provided, limit choice to acceptable step sizes
      v = span / maxb;

      for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i) {
      }

      step = _.steps[Math.max(0, i - 1)];
    } else {
      // else use span to determine step size
      level = Math.ceil(Math.log(maxb) / logb);
      minstep = _.minstep || 0;
      step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins

      while (Math.ceil(span / step) > maxb) {
        step *= base;
      } // decrease step size if allowed


      for (i = 0, n = div.length; i < n; ++i) {
        v = step / div[i];
        if (v >= minstep && span / v <= maxb) step = v;
      }
    } // update precision, min and max


    v = Math.log(step);
    precision = v >= 0 ? 0 : ~~(-v / logb) + 1;
    eps = Math.pow(base, -precision - 1);

    if (_.nice || _.nice === undefined) {
      v = Math.floor(min / step + eps) * step;
      min = min < v ? v - step : v;
      max = Math.ceil(max / step) * step;
    }

    return {
      start: min,
      stop: max === min ? min + step : max,
      step: step
    };
  }

  var random = Math.random;
  function setRandom(r) {
    random = r;
  }

  function bootstrapCI (array, samples, alpha, f) {
    if (!array.length) return [undefined, undefined];
    var values = Float64Array.from(_callee(array, f)),
        n = values.length,
        m = samples,
        a,
        i,
        j,
        mu;

    for (j = 0, mu = Array(m); j < m; ++j) {
      for (a = 0, i = 0; i < n; ++i) {
        a += values[~~(random() * n)];
      }

      mu[j] = a / n;
    }

    mu.sort(ascending);
    return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];
  }

  // Dot density binning for dot plot construction.
  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
  function dotbin (array, step, smooth, f) {
    f = f || function (_) {
      return _;
    };

    var i = 0,
        j = 1,
        n = array.length,
        v = new Float64Array(n),
        a = f(array[0]),
        b = a,
        w = a + step,
        x;

    for (; j < n; ++j) {
      x = f(array[j]);

      if (x >= w) {
        b = (a + b) / 2;

        for (; i < j; ++i) {
          v[i] = b;
        }

        w = x + step;
        a = x;
      }

      b = x;
    }

    b = (a + b) / 2;

    for (; i < j; ++i) {
      v[i] = b;
    }

    return smooth ? smoothing(v, step + step / 4) : v;
  } // perform smoothing to reduce variance
  // swap points between "adjacent" stacks
  // Wilkinson defines adjacent as within step/4 units

  function smoothing(v, thresh) {
    var n = v.length,
        a = 0,
        b = 1,
        c,
        d; // get left stack

    while (v[a] === v[b]) {
      ++b;
    }

    while (b < n) {
      // get right stack
      c = b + 1;

      while (v[b] === v[c]) {
        ++c;
      } // are stacks adjacent?
      // if so, compare sizes and swap as needed


      if (v[b] - v[b - 1] < thresh) {
        d = b + (a + c - b - b >> 1);

        while (d < b) {
          v[d++] = v[b];
        }

        while (d > b) {
          v[d--] = v[a];
        }
      } // update left stack indices


      a = b;
      b = c;
    }

    return v;
  }

  function lcg (seed) {
    // Random numbers using a Linear Congruential Generator with seed value
    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator
    return function () {
      seed = (1103515245 * seed + 12345) % 2147483647;
      return seed / 2147483647;
    };
  }

  function integer (min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }

    var dist = {},
        a,
        b,
        d;

    dist.min = function (_) {
      if (arguments.length) {
        a = _ || 0;
        d = b - a;
        return dist;
      } else {
        return a;
      }
    };

    dist.max = function (_) {
      if (arguments.length) {
        b = _ || 0;
        d = b - a;
        return dist;
      } else {
        return b;
      }
    };

    dist.sample = function () {
      return a + Math.floor(d * random());
    };

    dist.pdf = function (x) {
      return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;
    };

    dist.cdf = function (x) {
      var v = Math.floor(x);
      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;
    };

    dist.icdf = function (p) {
      return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;
    };

    return dist.min(min).max(max);
  }

  var SQRT2PI = Math.sqrt(2 * Math.PI);
  var SQRT2 = Math.SQRT2;

  var nextSample = NaN;
  function sampleNormal(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    var x = 0,
        y = 0,
        rds,
        c;

    if (nextSample === nextSample) {
      x = nextSample;
      nextSample = NaN;
    } else {
      do {
        x = random() * 2 - 1;
        y = random() * 2 - 1;
        rds = x * x + y * y;
      } while (rds === 0 || rds > 1);

      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform

      x *= c;
      nextSample = y * c;
    }

    return mean + x * stdev;
  }
  function densityNormal(value, mean, stdev) {
    stdev = stdev == null ? 1 : stdev;
    var z = (value - (mean || 0)) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);
  } // Approximation from West (2009)
  // Better Approximations to Cumulative Normal Functions

  function cumulativeNormal(value, mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    var cd,
        z = (value - mean) / stdev,
        Z = Math.abs(z);

    if (Z > 37) {
      cd = 0;
    } else {
      var sum,
          exp = Math.exp(-Z * Z / 2);

      if (Z < 7.07106781186547) {
        sum = 3.52624965998911e-02 * Z + 0.700383064443688;
        sum = sum * Z + 6.37396220353165;
        sum = sum * Z + 33.912866078383;
        sum = sum * Z + 112.079291497871;
        sum = sum * Z + 221.213596169931;
        sum = sum * Z + 220.206867912376;
        cd = exp * sum;
        sum = 8.83883476483184e-02 * Z + 1.75566716318264;
        sum = sum * Z + 16.064177579207;
        sum = sum * Z + 86.7807322029461;
        sum = sum * Z + 296.564248779674;
        sum = sum * Z + 637.333633378831;
        sum = sum * Z + 793.826512519948;
        sum = sum * Z + 440.413735824752;
        cd = cd / sum;
      } else {
        sum = Z + 0.65;
        sum = Z + 4 / sum;
        sum = Z + 3 / sum;
        sum = Z + 2 / sum;
        sum = Z + 1 / sum;
        cd = exp / sum / 2.506628274631;
      }
    }

    return z > 0 ? 1 - cd : cd;
  } // Approximation of Probit function using inverse error function.

  function quantileNormal(p, mean, stdev) {
    if (p < 0 || p > 1) return NaN;
    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);
  } // Approximate inverse error function. Implementation from "Approximating
  // the erfinv function" by Mike Giles, GPU Computing Gems, volume 2, 2010.
  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0

  function erfinv(x) {
    // beware that the logarithm argument must be
    // commputed as (1.0 - x) * (1.0 + x),
    // it must NOT be simplified as 1.0 - x * x as this
    // would induce rounding errors near the boundaries +/-1
    var w = -Math.log((1 - x) * (1 + x)),
        p;

    if (w < 6.25) {
      w -= 3.125;
      p = -3.6444120640178196996e-21;
      p = -1.685059138182016589e-19 + p * w;
      p = 1.2858480715256400167e-18 + p * w;
      p = 1.115787767802518096e-17 + p * w;
      p = -1.333171662854620906e-16 + p * w;
      p = 2.0972767875968561637e-17 + p * w;
      p = 6.6376381343583238325e-15 + p * w;
      p = -4.0545662729752068639e-14 + p * w;
      p = -8.1519341976054721522e-14 + p * w;
      p = 2.6335093153082322977e-12 + p * w;
      p = -1.2975133253453532498e-11 + p * w;
      p = -5.4154120542946279317e-11 + p * w;
      p = 1.051212273321532285e-09 + p * w;
      p = -4.1126339803469836976e-09 + p * w;
      p = -2.9070369957882005086e-08 + p * w;
      p = 4.2347877827932403518e-07 + p * w;
      p = -1.3654692000834678645e-06 + p * w;
      p = -1.3882523362786468719e-05 + p * w;
      p = 0.0001867342080340571352 + p * w;
      p = -0.00074070253416626697512 + p * w;
      p = -0.0060336708714301490533 + p * w;
      p = 0.24015818242558961693 + p * w;
      p = 1.6536545626831027356 + p * w;
    } else if (w < 16.0) {
      w = Math.sqrt(w) - 3.25;
      p = 2.2137376921775787049e-09;
      p = 9.0756561938885390979e-08 + p * w;
      p = -2.7517406297064545428e-07 + p * w;
      p = 1.8239629214389227755e-08 + p * w;
      p = 1.5027403968909827627e-06 + p * w;
      p = -4.013867526981545969e-06 + p * w;
      p = 2.9234449089955446044e-06 + p * w;
      p = 1.2475304481671778723e-05 + p * w;
      p = -4.7318229009055733981e-05 + p * w;
      p = 6.8284851459573175448e-05 + p * w;
      p = 2.4031110387097893999e-05 + p * w;
      p = -0.0003550375203628474796 + p * w;
      p = 0.00095328937973738049703 + p * w;
      p = -0.0016882755560235047313 + p * w;
      p = 0.0024914420961078508066 + p * w;
      p = -0.0037512085075692412107 + p * w;
      p = 0.005370914553590063617 + p * w;
      p = 1.0052589676941592334 + p * w;
      p = 3.0838856104922207635 + p * w;
    } else if (Number.isFinite(w)) {
      w = Math.sqrt(w) - 5.0;
      p = -2.7109920616438573243e-11;
      p = -2.5556418169965252055e-10 + p * w;
      p = 1.5076572693500548083e-09 + p * w;
      p = -3.7894654401267369937e-09 + p * w;
      p = 7.6157012080783393804e-09 + p * w;
      p = -1.4960026627149240478e-08 + p * w;
      p = 2.9147953450901080826e-08 + p * w;
      p = -6.7711997758452339498e-08 + p * w;
      p = 2.2900482228026654717e-07 + p * w;
      p = -9.9298272942317002539e-07 + p * w;
      p = 4.5260625972231537039e-06 + p * w;
      p = -1.9681778105531670567e-05 + p * w;
      p = 7.5995277030017761139e-05 + p * w;
      p = -0.00021503011930044477347 + p * w;
      p = -0.00013871931833623122026 + p * w;
      p = 1.0103004648645343977 + p * w;
      p = 4.8499064014085844221 + p * w;
    } else {
      p = Infinity;
    }

    return p * x;
  }

  function randomNormal (mean, stdev) {
    var mu,
        sigma,
        dist = {
      mean: function mean(_) {
        if (arguments.length) {
          mu = _ || 0;
          return dist;
        } else {
          return mu;
        }
      },
      stdev: function stdev(_) {
        if (arguments.length) {
          sigma = _ == null ? 1 : _;
          return dist;
        } else {
          return sigma;
        }
      },
      sample: function sample() {
        return sampleNormal(mu, sigma);
      },
      pdf: function pdf(value) {
        return densityNormal(value, mu, sigma);
      },
      cdf: function cdf(value) {
        return cumulativeNormal(value, mu, sigma);
      },
      icdf: function icdf(p) {
        return quantileNormal(p, mu, sigma);
      }
    };
    return dist.mean(mean).stdev(stdev);
  }

  function randomKDE (support, bandwidth) {
    var kernel = randomNormal(),
        dist = {},
        n = 0;

    dist.data = function (_) {
      if (arguments.length) {
        support = _;
        n = _ ? _.length : 0;
        return dist.bandwidth(bandwidth);
      } else {
        return support;
      }
    };

    dist.bandwidth = function (_) {
      if (!arguments.length) return bandwidth;
      bandwidth = _;
      if (!bandwidth && support) bandwidth = bandwidthNRD(support);
      return dist;
    };

    dist.sample = function () {
      return support[~~(random() * n)] + bandwidth * kernel.sample();
    };

    dist.pdf = function (x) {
      for (var y = 0, i = 0; i < n; ++i) {
        y += kernel.pdf((x - support[i]) / bandwidth);
      }

      return y / bandwidth / n;
    };

    dist.cdf = function (x) {
      for (var y = 0, i = 0; i < n; ++i) {
        y += kernel.cdf((x - support[i]) / bandwidth);
      }

      return y / n;
    };

    dist.icdf = function () {
      throw Error('KDE icdf not supported.');
    };

    return dist.data(support);
  }

  function sampleLogNormal(mean, stdev) {
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    return Math.exp(mean + sampleNormal() * stdev);
  }
  function densityLogNormal(value, mean, stdev) {
    if (value <= 0) return 0;
    mean = mean || 0;
    stdev = stdev == null ? 1 : stdev;
    var z = (Math.log(value) - mean) / stdev;
    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);
  }
  function cumulativeLogNormal(value, mean, stdev) {
    return cumulativeNormal(Math.log(value), mean, stdev);
  }
  function quantileLogNormal(p, mean, stdev) {
    return Math.exp(quantileNormal(p, mean, stdev));
  }
  function randomLogNormal (mean, stdev) {
    var mu,
        sigma,
        dist = {
      mean: function mean(_) {
        if (arguments.length) {
          mu = _ || 0;
          return dist;
        } else {
          return mu;
        }
      },
      stdev: function stdev(_) {
        if (arguments.length) {
          sigma = _ == null ? 1 : _;
          return dist;
        } else {
          return sigma;
        }
      },
      sample: function sample() {
        return sampleLogNormal(mu, sigma);
      },
      pdf: function pdf(value) {
        return densityLogNormal(value, mu, sigma);
      },
      cdf: function cdf(value) {
        return cumulativeLogNormal(value, mu, sigma);
      },
      icdf: function icdf(p) {
        return quantileLogNormal(p, mu, sigma);
      }
    };
    return dist.mean(mean).stdev(stdev);
  }

  function randomMixture (dists, weights) {
    var dist = {},
        m = 0,
        w;

    function normalize(x) {
      var w = [],
          sum = 0,
          i;

      for (i = 0; i < m; ++i) {
        sum += w[i] = x[i] == null ? 1 : +x[i];
      }

      for (i = 0; i < m; ++i) {
        w[i] /= sum;
      }

      return w;
    }

    dist.weights = function (_) {
      if (arguments.length) {
        w = normalize(weights = _ || []);
        return dist;
      }

      return weights;
    };

    dist.distributions = function (_) {
      if (arguments.length) {
        if (_) {
          m = _.length;
          dists = _;
        } else {
          m = 0;
          dists = [];
        }

        return dist.weights(weights);
      }

      return dists;
    };

    dist.sample = function () {
      var r = random(),
          d = dists[m - 1],
          v = w[0],
          i = 0; // first select distribution

      for (; i < m - 1; v += w[++i]) {
        if (r < v) {
          d = dists[i];
          break;
        }
      } // then sample from it


      return d.sample();
    };

    dist.pdf = function (x) {
      for (var p = 0, i = 0; i < m; ++i) {
        p += w[i] * dists[i].pdf(x);
      }

      return p;
    };

    dist.cdf = function (x) {
      for (var p = 0, i = 0; i < m; ++i) {
        p += w[i] * dists[i].cdf(x);
      }

      return p;
    };

    dist.icdf = function () {
      throw Error('Mixture icdf not supported.');
    };

    return dist.distributions(dists).weights(weights);
  }

  function sampleUniform(min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }

    return min + (max - min) * random();
  }
  function densityUniform(value, min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }

    return value >= min && value <= max ? 1 / (max - min) : 0;
  }
  function cumulativeUniform(value, min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }

    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);
  }
  function quantileUniform(p, min, max) {
    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }

    return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;
  }
  function randomUniform (min, max) {
    var a,
        b,
        dist = {
      min: function min(_) {
        if (arguments.length) {
          a = _ || 0;
          return dist;
        } else {
          return a;
        }
      },
      max: function max(_) {
        if (arguments.length) {
          b = _ == null ? 1 : _;
          return dist;
        } else {
          return b;
        }
      },
      sample: function sample() {
        return sampleUniform(a, b);
      },
      pdf: function pdf(value) {
        return densityUniform(value, a, b);
      },
      cdf: function cdf(value) {
        return cumulativeUniform(value, a, b);
      },
      icdf: function icdf(p) {
        return quantileUniform(p, a, b);
      }
    };

    if (max == null) {
      max = min == null ? 1 : min;
      min = 0;
    }

    return dist.min(min).max(max);
  }

  // Ordinary Least Squares
  function ols (uX, uY, uXY, uX2) {
    var delta = uX2 - uX * uX,
        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,
        intercept = uY - slope * uX;
    return [intercept, slope];
  }

  function points(data, x, y, sort) {
    data = data.filter(function (d) {
      var u = x(d),
          v = y(d);
      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;
    });

    if (sort) {
      data.sort(function (a, b) {
        return x(a) - x(b);
      });
    }

    var n = data.length,
        X = new Float64Array(n),
        Y = new Float64Array(n); // extract values, calculate means

    var i = 0,
        ux = 0,
        uy = 0,
        xv,
        yv,
        d;

    var _iterator = _createForOfIteratorHelper(data),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        d = _step.value;
        X[i] = xv = +x(d);
        Y[i] = yv = +y(d);
        ++i;
        ux += (xv - ux) / i;
        uy += (yv - uy) / i;
      } // mean center the data

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    for (i = 0; i < n; ++i) {
      X[i] -= ux;
      Y[i] -= uy;
    }

    return [X, Y, ux, uy];
  }
  function visitPoints(data, x, y, callback) {
    var i = -1,
        u,
        v;

    var _iterator2 = _createForOfIteratorHelper(data),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var d = _step2.value;
        u = x(d);
        v = y(d);

        if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {
          callback(u, v, ++i);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE

  function rSquared (data, x, y, uY, predict) {
    var SSE = 0,
        SST = 0;
    visitPoints(data, x, y, function (dx, dy) {
      var sse = dy - predict(dx),
          sst = dy - uY;
      SSE += sse * sse;
      SST += sst * sst;
    });
    return 1 - SSE / SST;
  }

  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE

  function regressionLinear (data, x, y) {
    var X = 0,
        Y = 0,
        XY = 0,
        X2 = 0,
        n = 0;
    visitPoints(data, x, y, function (dx, dy) {
      ++n;
      X += (dx - X) / n;
      Y += (dy - Y) / n;
      XY += (dx * dy - XY) / n;
      X2 += (dx * dx - X2) / n;
    });

    var coef = ols(X, Y, XY, X2),
        predict = function predict(x) {
      return coef[0] + coef[1] * x;
    };

    return {
      coef: coef,
      predict: predict,
      rSquared: rSquared(data, x, y, Y, predict)
    };
  }

  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE

  function regressionLog (data, x, y) {
    var X = 0,
        Y = 0,
        XY = 0,
        X2 = 0,
        n = 0;
    visitPoints(data, x, y, function (dx, dy) {
      ++n;
      dx = Math.log(dx);
      X += (dx - X) / n;
      Y += (dy - Y) / n;
      XY += (dx * dy - XY) / n;
      X2 += (dx * dx - X2) / n;
    });

    var coef = ols(X, Y, XY, X2),
        predict = function predict(x) {
      return coef[0] + coef[1] * Math.log(x);
    };

    return {
      coef: coef,
      predict: predict,
      rSquared: rSquared(data, x, y, Y, predict)
    };
  }

  function regressionExp (data, x, y) {
    // eslint-disable-next-line no-unused-vars
    var _points = points(data, x, y),
        _points2 = _slicedToArray(_points, 4),
        xv = _points2[0],
        yv = _points2[1],
        ux = _points2[2],
        uy = _points2[3];

    var YL = 0,
        XY = 0,
        XYL = 0,
        X2Y = 0,
        n = 0,
        dx,
        ly,
        xy;
    visitPoints(data, x, y, function (_, dy) {
      dx = xv[n++];
      ly = Math.log(dy);
      xy = dx * dy;
      YL += (dy * ly - YL) / n;
      XY += (xy - XY) / n;
      XYL += (xy * ly - XYL) / n;
      X2Y += (dx * xy - X2Y) / n;
    });

    var _ols = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),
        _ols2 = _slicedToArray(_ols, 2),
        c0 = _ols2[0],
        c1 = _ols2[1],
        predict = function predict(x) {
      return Math.exp(c0 + c1 * (x - ux));
    };

    return {
      coef: [Math.exp(c0 - c1 * ux), c1],
      predict: predict,
      rSquared: rSquared(data, x, y, uy, predict)
    };
  }

  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE

  function regressionPow (data, x, y) {
    var X = 0,
        Y = 0,
        XY = 0,
        X2 = 0,
        YS = 0,
        n = 0;
    visitPoints(data, x, y, function (dx, dy) {
      var lx = Math.log(dx),
          ly = Math.log(dy);
      ++n;
      X += (lx - X) / n;
      Y += (ly - Y) / n;
      XY += (lx * ly - XY) / n;
      X2 += (lx * lx - X2) / n;
      YS += (dy - YS) / n;
    });

    var coef = ols(X, Y, XY, X2),
        predict = function predict(x) {
      return coef[0] * Math.pow(x, coef[1]);
    };

    coef[0] = Math.exp(coef[0]);
    return {
      coef: coef,
      predict: predict,
      rSquared: rSquared(data, x, y, YS, predict)
    };
  }

  function regressionQuad (data, x, y) {
    var _points = points(data, x, y),
        _points2 = _slicedToArray(_points, 4),
        xv = _points2[0],
        yv = _points2[1],
        ux = _points2[2],
        uy = _points2[3],
        n = xv.length;

    var X2 = 0,
        X3 = 0,
        X4 = 0,
        XY = 0,
        X2Y = 0,
        i,
        dx,
        dy,
        x2;

    for (i = 0; i < n;) {
      dx = xv[i];
      dy = yv[i++];
      x2 = dx * dx;
      X2 += (x2 - X2) / i;
      X3 += (x2 * dx - X3) / i;
      X4 += (x2 * x2 - X4) / i;
      XY += (dx * dy - XY) / i;
      X2Y += (x2 * dy - X2Y) / i;
    }

    var X2X2 = X4 - X2 * X2,
        d = X2 * X2X2 - X3 * X3,
        a = (X2Y * X2 - XY * X3) / d,
        b = (XY * X2X2 - X2Y * X3) / d,
        c = -a * X2,
        predict = function predict(x) {
      x = x - ux;
      return a * x * x + b * x + c + uy;
    }; // transform coefficients back from mean-centered space


    return {
      coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],
      predict: predict,
      rSquared: rSquared(data, x, y, uy, predict)
    };
  }

  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE
  // ... which was adapted from regression-js by Tom Alexander
  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246
  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE

  function regressionPoly (data, x, y, order) {
    // use more efficient methods for lower orders
    if (order === 1) return regressionLinear(data, x, y);
    if (order === 2) return regressionQuad(data, x, y);

    var _points = points(data, x, y),
        _points2 = _slicedToArray(_points, 4),
        xv = _points2[0],
        yv = _points2[1],
        ux = _points2[2],
        uy = _points2[3],
        n = xv.length,
        lhs = [],
        rhs = [],
        k = order + 1;

    var i, j, l, v, c;

    for (i = 0; i < k; ++i) {
      for (l = 0, v = 0; l < n; ++l) {
        v += Math.pow(xv[l], i) * yv[l];
      }

      lhs.push(v);
      c = new Float64Array(k);

      for (j = 0; j < k; ++j) {
        for (l = 0, v = 0; l < n; ++l) {
          v += Math.pow(xv[l], i + j);
        }

        c[j] = v;
      }

      rhs.push(c);
    }

    rhs.push(lhs);

    var coef = gaussianElimination(rhs),
        predict = function predict(x) {
      x -= ux;
      var y = uy + coef[0] + coef[1] * x + coef[2] * x * x;

      for (i = 3; i < k; ++i) {
        y += coef[i] * Math.pow(x, i);
      }

      return y;
    };

    return {
      coef: uncenter(k, coef, -ux, uy),
      predict: predict,
      rSquared: rSquared(data, x, y, uy, predict)
    };
  }

  function uncenter(k, a, x, y) {
    var z = Array(k);
    var i, j, v, c; // initialize to zero

    for (i = 0; i < k; ++i) {
      z[i] = 0;
    } // polynomial expansion


    for (i = k - 1; i >= 0; --i) {
      v = a[i];
      c = 1;
      z[i] += v;

      for (j = 1; j <= i; ++j) {
        c *= (i + 1 - j) / j; // binomial coefficent

        z[i - j] += v * Math.pow(x, j) * c;
      }
    } // bias term


    z[0] += y;
    return z;
  } // Given an array for a two-dimensional matrix and the polynomial order,
  // solve A * x = b using Gaussian elimination.


  function gaussianElimination(matrix) {
    var n = matrix.length - 1,
        coef = [];
    var i, j, k, r, t;

    for (i = 0; i < n; ++i) {
      r = i; // max row

      for (j = i + 1; j < n; ++j) {
        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {
          r = j;
        }
      }

      for (k = i; k < n + 1; ++k) {
        t = matrix[k][i];
        matrix[k][i] = matrix[k][r];
        matrix[k][r] = t;
      }

      for (j = i + 1; j < n; ++j) {
        for (k = n; k >= i; k--) {
          matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];
        }
      }
    }

    for (j = n - 1; j >= 0; --j) {
      t = 0;

      for (k = j + 1; k < n; ++k) {
        t += matrix[k][j] * coef[k];
      }

      coef[j] = (matrix[n][j] - t) / matrix[j][j];
    }

    return coef;
  }

  var maxiters = 2,
      epsilon = 1e-12; // Adapted from science.js by Jason Davies
  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js
  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE

  function regressionLoess (data, x, y, bandwidth) {
    var _points = points(data, x, y, true),
        _points2 = _slicedToArray(_points, 4),
        xv = _points2[0],
        yv = _points2[1],
        ux = _points2[2],
        uy = _points2[3],
        n = xv.length,
        bw = Math.max(2, ~~(bandwidth * n)),
        yhat = new Float64Array(n),
        residuals = new Float64Array(n),
        robustWeights = new Float64Array(n).fill(1);

    for (var iter = -1; ++iter <= maxiters;) {
      var interval = [0, bw - 1];

      for (var i = 0; i < n; ++i) {
        var dx = xv[i],
            i0 = interval[0],
            i1 = interval[1],
            edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;
        var W = 0,
            X = 0,
            Y = 0,
            XY = 0,
            X2 = 0,
            denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!

        for (var k = i0; k <= i1; ++k) {
          var xk = xv[k],
              yk = yv[k],
              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],
              xkw = xk * w;
          W += w;
          X += xkw;
          Y += yk * w;
          XY += yk * xkw;
          X2 += xk * xkw;
        } // linear regression fit


        var _ols = ols(X / W, Y / W, XY / W, X2 / W),
            _ols2 = _slicedToArray(_ols, 2),
            a = _ols2[0],
            b = _ols2[1];

        yhat[i] = a + b * dx;
        residuals[i] = Math.abs(yv[i] - yhat[i]);
        updateInterval(xv, i + 1, interval);
      }

      if (iter === maxiters) {
        break;
      }

      var medianResidual = median(residuals);
      if (Math.abs(medianResidual) < epsilon) break;

      for (var _i = 0, arg, _w; _i < n; ++_i) {
        arg = residuals[_i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations
        // keeping weights tiny but non-zero prevents singularites

        robustWeights[_i] = arg >= 1 ? epsilon : (_w = 1 - arg * arg) * _w;
      }
    }

    return output(xv, yhat, ux, uy);
  } // weighting kernel for local regression

  function tricube(x) {
    return (x = 1 - x * x * x) * x * x;
  } // advance sliding window interval of nearest neighbors


  function updateInterval(xv, i, interval) {
    var val = xv[i],
        left = interval[0],
        right = interval[1] + 1;
    if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge
    // step when distance is equal to ensure movement over duplicate x values

    while (i > left && xv[right] - val <= val - xv[left]) {
      interval[0] = ++left;
      interval[1] = right;
      ++right;
    }
  } // generate smoothed output points
  // average points with repeated x values


  function output(xv, yhat, ux, uy) {
    var n = xv.length,
        out = [];
    var i = 0,
        cnt = 0,
        prev = [],
        v;

    for (; i < n; ++i) {
      v = xv[i] + ux;

      if (prev[0] === v) {
        // average output values via online update
        prev[1] += (yhat[i] - prev[1]) / ++cnt;
      } else {
        // add new output point
        cnt = 0;
        prev[1] += uy;
        prev = [v, yhat[i]];
        out.push(prev);
      }
    }

    prev[1] += uy;
    return out;
  }

  // subdivide up to accuracy of 0.1 degrees
  var MIN_RADIANS = 0.1 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent

  function sampleCurve (f, extent, minSteps, maxSteps) {
    minSteps = minSteps || 25;
    maxSteps = Math.max(minSteps, maxSteps || 200);

    var point = function point(x) {
      return [x, f(x)];
    },
        minX = extent[0],
        maxX = extent[1],
        span = maxX - minX,
        stop = span / maxSteps,
        prev = [point(minX)],
        next = [];

    if (minSteps === maxSteps) {
      // no adaptation, sample uniform grid directly and return
      for (var i = 1; i < maxSteps; ++i) {
        prev.push(point(minX + i / minSteps * span));
      }

      prev.push(point(maxX));
      return prev;
    } else {
      // sample minimum points on uniform grid
      // then move on to perform adaptive refinement
      next.push(point(maxX));

      for (var _i = minSteps; --_i > 0;) {
        next.push(point(minX + _i / minSteps * span));
      }
    }

    var p0 = prev[0],
        p1 = next[next.length - 1];

    while (p1) {
      // midpoint for potential curve subdivision
      var pm = point((p0[0] + p1[0]) / 2);

      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {
        // maximum resolution has not yet been met, and
        // subdivision midpoint sufficiently different from endpoint
        // save subdivision, push midpoint onto the visitation stack
        next.push(pm);
      } else {
        // subdivision midpoint sufficiently similar to endpoint
        // skip subdivision, store endpoint, move to next point on the stack
        p0 = p1;
        prev.push(p1);
        next.pop();
      }

      p1 = next[next.length - 1];
    }

    return prev;
  }

  function angleDelta(p, q, r) {
    var a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),
        a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);
    return Math.abs(a0 - a1);
  }

  function TupleStore(key) {
    this._key = key ? field(key) : tupleid;
    this.reset();
  }
  var prototype$7 = TupleStore.prototype;

  prototype$7.reset = function () {
    this._add = [];
    this._rem = [];
    this._ext = null;
    this._get = null;
    this._q = null;
  };

  prototype$7.add = function (v) {
    this._add.push(v);
  };

  prototype$7.rem = function (v) {
    this._rem.push(v);
  };

  prototype$7.values = function () {
    this._get = null;
    if (this._rem.length === 0) return this._add;
    var a = this._add,
        r = this._rem,
        k = this._key,
        n = a.length,
        m = r.length,
        x = Array(n - m),
        map = {},
        i,
        j,
        v; // use unique key field to clear removed values

    for (i = 0; i < m; ++i) {
      map[k(r[i])] = 1;
    }

    for (i = 0, j = 0; i < n; ++i) {
      if (map[k(v = a[i])]) {
        map[k(v)] = 0;
      } else {
        x[j++] = v;
      }
    }

    this._rem = [];
    return this._add = x;
  }; // memoizing statistics methods


  prototype$7.distinct = function (get) {
    var v = this.values(),
        n = v.length,
        map = {},
        count = 0,
        s;

    while (--n >= 0) {
      s = get(v[n]) + '';

      if (!hasOwnProperty$1(map, s)) {
        map[s] = 1;
        ++count;
      }
    }

    return count;
  };

  prototype$7.extent = function (get) {
    if (this._get !== get || !this._ext) {
      var v = this.values(),
          i = extentIndex(v, get);
      this._ext = [v[i[0]], v[i[1]]];
      this._get = get;
    }

    return this._ext;
  };

  prototype$7.argmin = function (get) {
    return this.extent(get)[0] || {};
  };

  prototype$7.argmax = function (get) {
    return this.extent(get)[1] || {};
  };

  prototype$7.min = function (get) {
    var m = this.extent(get)[0];
    return m != null ? get(m) : undefined;
  };

  prototype$7.max = function (get) {
    var m = this.extent(get)[1];
    return m != null ? get(m) : undefined;
  };

  prototype$7.quartile = function (get) {
    if (this._get !== get || !this._q) {
      this._q = quartiles(this.values(), get);
      this._get = get;
    }

    return this._q;
  };

  prototype$7.q1 = function (get) {
    return this.quartile(get)[0];
  };

  prototype$7.q2 = function (get) {
    return this.quartile(get)[1];
  };

  prototype$7.q3 = function (get) {
    return this.quartile(get)[2];
  };

  prototype$7.ci = function (get) {
    if (this._get !== get || !this._ci) {
      this._ci = bootstrapCI(this.values(), 1000, 0.05, get);
      this._get = get;
    }

    return this._ci;
  };

  prototype$7.ci0 = function (get) {
    return this.ci(get)[0];
  };

  prototype$7.ci1 = function (get) {
    return this.ci(get)[1];
  };

  /**
   * Group-by aggregation operator.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
   * @param {boolean} [params.cross=false] - A flag indicating that the full
   *   cross-product of groupby values should be generated, including empty cells.
   *   If true, the drop parameter is ignored and empty cells are retained.
   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
   */

  function Aggregate(params) {
    Transform$1.call(this, null, params);
    this._adds = []; // array of added output tuples

    this._mods = []; // array of modified output tuples

    this._alen = 0; // number of active added tuples

    this._mlen = 0; // number of active modified tuples

    this._drop = true; // should empty aggregation cells be removed

    this._cross = false; // produce full cross-product of group-by values

    this._dims = []; // group-by dimension accessors

    this._dnames = []; // group-by dimension names

    this._measures = []; // collection of aggregation monoids

    this._countOnly = false; // flag indicating only count aggregation

    this._counts = null; // collection of count fields

    this._prev = null; // previous aggregation cells

    this._inputs = null; // array of dependent input tuple field names

    this._outputs = null; // array of output tuple field names
  }
  Aggregate.Definition = {
    "type": "Aggregate",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "ops",
      "type": "enum",
      "array": true,
      "values": ValidAggregateOps
    }, {
      "name": "fields",
      "type": "field",
      "null": true,
      "array": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }, {
      "name": "drop",
      "type": "boolean",
      "default": true
    }, {
      "name": "cross",
      "type": "boolean",
      "default": false
    }, {
      "name": "key",
      "type": "field"
    }]
  };
  var prototype$8 = inherits(Aggregate, Transform$1);

  prototype$8.transform = function (_, pulse) {
    var aggr = this,
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        mod = _.modified();

    aggr.stamp = out.stamp;

    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
      aggr._prev = aggr.value;
      aggr.value = mod ? aggr.init(_) : {};
      pulse.visit(pulse.SOURCE, function (t) {
        return aggr.add(t);
      });
    } else {
      aggr.value = aggr.value || aggr.init(_);
      pulse.visit(pulse.REM, function (t) {
        return aggr.rem(t);
      });
      pulse.visit(pulse.ADD, function (t) {
        return aggr.add(t);
      });
    } // Indicate output fields and return aggregate tuples.


    out.modifies(aggr._outputs); // Should empty cells be dropped?

    aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed
    // and ensure that empty cells are not dropped

    if (_.cross && aggr._dims.length > 1) {
      aggr._drop = false;
      aggr.cross();
    }

    return aggr.changes(out);
  };

  prototype$8.cross = function () {
    var aggr = this,
        curr = aggr.value,
        dims = aggr._dnames,
        vals = dims.map(function () {
      return {};
    }),
        n = dims.length; // collect all group-by domain values

    function collect(cells) {
      var key, i, t, v;

      for (key in cells) {
        t = cells[key].tuple;

        for (i = 0; i < n; ++i) {
          vals[i][v = t[dims[i]]] = v;
        }
      }
    }

    collect(aggr._prev);
    collect(curr); // iterate over key cross-product, create cells as needed

    function generate(base, tuple, index) {
      var name = dims[index],
          v = vals[index++],
          k,
          key;

      for (k in v) {
        tuple[name] = v[k];
        key = base ? base + '|' + k : k;
        if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);
      }
    }

    generate('', {}, 0);
  };

  prototype$8.init = function (_) {
    // initialize input and output fields
    var inputs = this._inputs = [],
        outputs = this._outputs = [],
        inputMap = {};

    function inputVisit(get) {
      var fields = array(accessorFields(get)),
          i = 0,
          n = fields.length,
          f;

      for (; i < n; ++i) {
        if (!inputMap[f = fields[i]]) {
          inputMap[f] = 1;
          inputs.push(f);
        }
      }
    } // initialize group-by dimensions


    this._dims = array(_.groupby);
    this._dnames = this._dims.map(function (d) {
      var dname = accessorName(d);
      inputVisit(d);
      outputs.push(dname);
      return dname;
    });
    this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures

    this._countOnly = true;
    this._counts = [];
    this._measures = [];
    var fields = _.fields || [null],
        ops = _.ops || ['count'],
        as = _.as || [],
        n = fields.length,
        map = {},
        field,
        op,
        m,
        mname,
        outname,
        i;

    if (n !== ops.length) {
      error('Unmatched number of fields and aggregate ops.');
    }

    for (i = 0; i < n; ++i) {
      field = fields[i];
      op = ops[i];

      if (field == null && op !== 'count') {
        error('Null aggregate field specified.');
      }

      mname = accessorName(field);
      outname = measureName(op, mname, as[i]);
      outputs.push(outname);

      if (op === 'count') {
        this._counts.push(outname);

        continue;
      }

      m = map[mname];

      if (!m) {
        inputVisit(field);
        m = map[mname] = [];
        m.field = field;

        this._measures.push(m);
      }

      if (op !== 'count') this._countOnly = false;
      m.push(createMeasure(op, outname));
    }

    this._measures = this._measures.map(function (m) {
      return compileMeasures(m, m.field);
    });
    return {}; // aggregation cells (this.value)
  }; // -- Cell Management -----


  prototype$8.cellkey = groupkey();

  prototype$8.cell = function (key, t) {
    var cell = this.value[key];

    if (!cell) {
      cell = this.value[key] = this.newcell(key, t);
      this._adds[this._alen++] = cell;
    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
      cell.stamp = this.stamp;
      this._adds[this._alen++] = cell;
    } else if (cell.stamp < this.stamp) {
      cell.stamp = this.stamp;
      this._mods[this._mlen++] = cell;
    }

    return cell;
  };

  prototype$8.newcell = function (key, t) {
    var cell = {
      key: key,
      num: 0,
      agg: null,
      tuple: this.newtuple(t, this._prev && this._prev[key]),
      stamp: this.stamp,
      store: false
    };

    if (!this._countOnly) {
      var measures = this._measures,
          n = measures.length,
          i;
      cell.agg = Array(n);

      for (i = 0; i < n; ++i) {
        cell.agg[i] = new measures[i](cell);
      }
    }

    if (cell.store) {
      cell.data = new TupleStore();
    }

    return cell;
  };

  prototype$8.newtuple = function (t, p) {
    var names = this._dnames,
        dims = this._dims,
        x = {},
        i,
        n;

    for (i = 0, n = dims.length; i < n; ++i) {
      x[names[i]] = dims[i](t);
    }

    return p ? replace(p.tuple, x) : ingest(x);
  }; // -- Process Tuples -----


  prototype$8.add = function (t) {
    var key = this.cellkey(t),
        cell = this.cell(key, t),
        agg,
        i,
        n;
    cell.num += 1;
    if (this._countOnly) return;
    if (cell.store) cell.data.add(t);
    agg = cell.agg;

    for (i = 0, n = agg.length; i < n; ++i) {
      agg[i].add(agg[i].get(t), t);
    }
  };

  prototype$8.rem = function (t) {
    var key = this.cellkey(t),
        cell = this.cell(key, t),
        agg,
        i,
        n;
    cell.num -= 1;
    if (this._countOnly) return;
    if (cell.store) cell.data.rem(t);
    agg = cell.agg;

    for (i = 0, n = agg.length; i < n; ++i) {
      agg[i].rem(agg[i].get(t), t);
    }
  };

  prototype$8.celltuple = function (cell) {
    var tuple = cell.tuple,
        counts = this._counts,
        agg,
        i,
        n; // consolidate stored values

    if (cell.store) {
      cell.data.values();
    } // update tuple properties


    for (i = 0, n = counts.length; i < n; ++i) {
      tuple[counts[i]] = cell.num;
    }

    if (!this._countOnly) {
      agg = cell.agg;

      for (i = 0, n = agg.length; i < n; ++i) {
        agg[i].set(tuple);
      }
    }

    return tuple;
  };

  prototype$8.changes = function (out) {
    var adds = this._adds,
        mods = this._mods,
        prev = this._prev,
        drop = this._drop,
        add = out.add,
        rem = out.rem,
        mod = out.mod,
        cell,
        key,
        i,
        n;
    if (prev) for (key in prev) {
      cell = prev[key];
      if (!drop || cell.num) rem.push(cell.tuple);
    }

    for (i = 0, n = this._alen; i < n; ++i) {
      add.push(this.celltuple(adds[i]));
      adds[i] = null; // for garbage collection
    }

    for (i = 0, n = this._mlen; i < n; ++i) {
      cell = mods[i];
      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
      mods[i] = null; // for garbage collection
    }

    this._alen = this._mlen = 0; // reset list of active cells

    this._prev = null;
    return out;
  };

  var EPSILON = 1e-14;
  /**
   * Generates a binning function for discretizing data.
   * @constructor
   * @param {object} params - The parameters for this operator. The
   *   provided values should be valid options for the {@link bin} function.
   * @param {function(object): *} params.field - The data field to bin.
   */

  function Bin(params) {
    Transform$1.call(this, null, params);
  }
  Bin.Definition = {
    "type": "Bin",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "interval",
      "type": "boolean",
      "default": true
    }, {
      "name": "anchor",
      "type": "number"
    }, {
      "name": "maxbins",
      "type": "number",
      "default": 20
    }, {
      "name": "base",
      "type": "number",
      "default": 10
    }, {
      "name": "divide",
      "type": "number",
      "array": true,
      "default": [5, 2]
    }, {
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2,
      "required": true
    }, {
      "name": "span",
      "type": "number"
    }, {
      "name": "step",
      "type": "number"
    }, {
      "name": "steps",
      "type": "number",
      "array": true
    }, {
      "name": "minstep",
      "type": "number",
      "default": 0
    }, {
      "name": "nice",
      "type": "boolean",
      "default": true
    }, {
      "name": "name",
      "type": "string"
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["bin0", "bin1"]
    }]
  };
  var prototype$9 = inherits(Bin, Transform$1);

  prototype$9.transform = function (_, pulse) {
    var band = _.interval !== false,
        bins = this._bins(_),
        start = bins.start,
        step = bins.step,
        as = _.as || ['bin0', 'bin1'],
        b0 = as[0],
        b1 = as[1],
        flag;

    if (_.modified()) {
      pulse = pulse.reflow(true);
      flag = pulse.SOURCE;
    } else {
      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;
    }

    pulse.visit(flag, band ? function (t) {
      var v = bins(t); // minimum bin value (inclusive)

      t[b0] = v; // maximum bin value (exclusive)
      // use convoluted math for better floating point agreement
      // see https://github.com/vega/vega/issues/830
      // infinite values propagate through this formula! #2227

      t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
    } : function (t) {
      t[b0] = bins(t);
    });
    return pulse.modifies(band ? as : b0);
  };

  prototype$9._bins = function (_) {
    if (this.value && !_.modified()) {
      return this.value;
    }

    var field = _.field,
        bins = bin(_),
        step = bins.step,
        start = bins.start,
        stop = start + Math.ceil((bins.stop - start) / step) * step,
        a,
        d;

    if ((a = _.anchor) != null) {
      d = a - (start + step * Math.floor((a - start) / step));
      start += d;
      stop += d;
    }

    var f = function f(t) {
      var v = field(t);
      return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(+v, stop - step)), start + step * Math.floor(EPSILON + (v - start) / step));
    };

    f.start = start;
    f.stop = bins.stop;
    f.step = step;
    return this.value = accessor(f, accessorFields(field), _.name || 'bin_' + accessorName(field));
  };

  function SortedList (idFunc, source, input) {
    var $ = idFunc,
        _data = source || [],
        _add = input || [],
        rem = {},
        cnt = 0;

    return {
      add: function add(t) {
        _add.push(t);
      },
      remove: function remove(t) {
        rem[$(t)] = ++cnt;
      },
      size: function size() {
        return _data.length;
      },
      data: function data(compare, resort) {
        if (cnt) {
          _data = _data.filter(function (t) {
            return !rem[$(t)];
          });
          rem = {};
          cnt = 0;
        }

        if (resort && compare) {
          _data.sort(compare);
        }

        if (_add.length) {
          _data = compare ? merge(compare, _data, _add.sort(compare)) : _data.concat(_add);
          _add = [];
        }

        return _data;
      }
    };
  }

  /**
   * Collects all data tuples that pass through this operator.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(*,*): number} [params.sort] - An optional
   *   comparator function for additionally sorting the collected tuples.
   */

  function Collect(params) {
    Transform$1.call(this, [], params);
  }
  Collect.Definition = {
    "type": "Collect",
    "metadata": {
      "source": true
    },
    "params": [{
      "name": "sort",
      "type": "compare"
    }]
  };
  var prototype$a = inherits(Collect, Transform$1);

  prototype$a.transform = function (_, pulse) {
    var out = pulse.fork(pulse.ALL),
        list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),
        sort = _.sort,
        mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));
    out.visit(out.REM, list.remove);
    this.modified(mod);
    this.value = out.source = list.data(stableCompare(sort), mod); // propagate tree root if defined

    if (pulse.source && pulse.source.root) {
      this.value.root = pulse.source.root;
    }

    return out;
  };

  /**
   * Generates a comparator function.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<string|function>} params.fields - The fields to compare.
   * @param {Array<string>} [params.orders] - The sort orders.
   *   Each entry should be one of "ascending" (default) or "descending".
   */

  function Compare(params) {
    Operator.call(this, null, update$1, params);
  }
  inherits(Compare, Operator);

  function update$1(_) {
    return this.value && !_.modified() ? this.value : compare$2(_.fields, _.orders);
  }

  /**
   * Count regexp-defined pattern occurrences in a text field.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - An accessor for the text field.
   * @param {string} [params.pattern] - RegExp string defining the text pattern.
   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
   * @param {string} [params.stopwords] - RegExp string of words to ignore.
   */

  function CountPattern(params) {
    Transform$1.call(this, null, params);
  }
  CountPattern.Definition = {
    "type": "CountPattern",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "case",
      "type": "enum",
      "values": ["upper", "lower", "mixed"],
      "default": "mixed"
    }, {
      "name": "pattern",
      "type": "string",
      "default": "[\\w\"]+"
    }, {
      "name": "stopwords",
      "type": "string",
      "default": ""
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["text", "count"]
    }]
  };

  function tokenize(text, tcase, match) {
    switch (tcase) {
      case 'upper':
        text = text.toUpperCase();
        break;

      case 'lower':
        text = text.toLowerCase();
        break;
    }

    return text.match(match);
  }

  var prototype$b = inherits(CountPattern, Transform$1);

  prototype$b.transform = function (_, pulse) {
    function process(update) {
      return function (tuple) {
        var tokens = tokenize(get(tuple), _.case, match) || [],
            t;

        for (var i = 0, n = tokens.length; i < n; ++i) {
          if (!stop.test(t = tokens[i])) update(t);
        }
      };
    }

    var init = this._parameterCheck(_, pulse),
        counts = this._counts,
        match = this._match,
        stop = this._stop,
        get = _.field,
        as = _.as || ['text', 'count'],
        add = process(function (t) {
      counts[t] = 1 + (counts[t] || 0);
    }),
        rem = process(function (t) {
      counts[t] -= 1;
    });

    if (init) {
      pulse.visit(pulse.SOURCE, add);
    } else {
      pulse.visit(pulse.ADD, add);
      pulse.visit(pulse.REM, rem);
    }

    return this._finish(pulse, as); // generate output tuples
  };

  prototype$b._parameterCheck = function (_, pulse) {
    var init = false;

    if (_.modified('stopwords') || !this._stop) {
      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');
      init = true;
    }

    if (_.modified('pattern') || !this._match) {
      this._match = new RegExp(_.pattern || '[\\w\']+', 'g');
      init = true;
    }

    if (_.modified('field') || pulse.modified(_.field.fields)) {
      init = true;
    }

    if (init) this._counts = {};
    return init;
  };

  prototype$b._finish = function (pulse, as) {
    var counts = this._counts,
        tuples = this._tuples || (this._tuples = {}),
        text = as[0],
        count = as[1],
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        w,
        t,
        c;

    for (w in counts) {
      t = tuples[w];
      c = counts[w] || 0;

      if (!t && c) {
        tuples[w] = t = ingest({});
        t[text] = w;
        t[count] = c;
        out.add.push(t);
      } else if (c === 0) {
        if (t) out.rem.push(t);
        counts[w] = null;
        tuples[w] = null;
      } else if (t[count] !== c) {
        t[count] = c;
        out.mod.push(t);
      }
    }

    return out.modifies(as);
  };

  /**
   * Perform a cross-product of a tuple stream with itself.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object):boolean} [params.filter] - An optional filter
   *   function for selectively including tuples in the cross product.
   * @param {Array<string>} [params.as] - The names of the output fields.
   */

  function Cross(params) {
    Transform$1.call(this, null, params);
  }
  Cross.Definition = {
    "type": "Cross",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "filter",
      "type": "expr"
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["a", "b"]
    }]
  };
  var prototype$c = inherits(Cross, Transform$1);

  prototype$c.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        data = this.value,
        as = _.as || ['a', 'b'],
        a = as[0],
        b = as[1],
        reset = !data || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');

    if (reset) {
      if (data) out.rem = data;
      data = pulse.materialize(pulse.SOURCE).source;
      out.add = this.value = cross(data, a, b, _.filter || truthy);
    } else {
      out.mod = data;
    }

    out.source = this.value;
    return out.modifies(as);
  };

  function cross(input, a, b, filter) {
    var data = [],
        t = {},
        n = input.length,
        i = 0,
        j,
        left;

    for (; i < n; ++i) {
      t[a] = left = input[i];

      for (j = 0; j < n; ++j) {
        t[b] = input[j];

        if (filter(t)) {
          data.push(ingest(t));
          t = {};
          t[a] = left;
        }
      }
    }

    return data;
  }

  var Distributions = {
    kde: randomKDE,
    mixture: randomMixture,
    normal: randomNormal,
    lognormal: randomLogNormal,
    uniform: randomUniform
  };
  var DISTRIBUTIONS = 'distributions',
      FUNCTION = 'function',
      FIELD = 'field';
  /**
   * Parse a parameter object for a probability distribution.
   * @param {object} def - The distribution parameter object.
   * @param {function():Array<object>} - A method for requesting
   *   source data. Used for distributions (such as KDE) that
   *   require sample data points. This method will only be
   *   invoked if the 'from' parameter for a target data source
   *   is not provided. Typically this method returns backing
   *   source data for a Pulse object.
   * @return {object} - The output distribution object.
   */

  function parse$5(def, data) {
    var func = def[FUNCTION];

    if (!hasOwnProperty$1(Distributions, func)) {
      error('Unknown distribution function: ' + func);
    }

    var d = Distributions[func]();

    for (var name in def) {
      // if data field, extract values
      if (name === FIELD) {
        d.data((def.from || data()).map(def[name]));
      } // if distribution mixture, recurse to parse each definition
      else if (name === DISTRIBUTIONS) {
          d[name](def[name].map(function (_) {
            return parse$5(_, data);
          }));
        } // otherwise, simply set the parameter
        else if (_typeof(d[name]) === FUNCTION) {
            d[name](def[name]);
          }
    }

    return d;
  }

  /**
   * Grid sample points for a probability density. Given a distribution and
   * a sampling extent, will generate points suitable for plotting either
   * PDF (probability density function) or CDF (cumulative distribution
   * function) curves.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {object} params.distribution - The probability distribution. This
   *   is an object parameter dependent on the distribution type.
   * @param {string} [params.method='pdf'] - The distribution method to sample.
   *   One of 'pdf' or 'cdf'.
   * @param {Array<number>} [params.extent] - The [min, max] extent over which
   *   to sample the distribution. This argument is required in most cases, but
   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
   *   that returns numerical sample points from which the extent can be deduced.
   * @param {number} [params.minsteps=25] - The minimum number of curve samples
   *   for plotting the density.
   * @param {number} [params.maxsteps=200] - The maximum number of curve samples
   *   for plotting the density.
   * @param {number} [params.steps] - The exact number of curve samples for
   *   plotting the density. If specified, overrides both minsteps and maxsteps
   *   to set an exact number of uniform samples. Useful in conjunction with
   *   a fixed extent to ensure consistent sample points for stacked densities.
   */

  function Density(params) {
    Transform$1.call(this, null, params);
  }
  var distributions = [{
    "key": {
      "function": "normal"
    },
    "params": [{
      "name": "mean",
      "type": "number",
      "default": 0
    }, {
      "name": "stdev",
      "type": "number",
      "default": 1
    }]
  }, {
    "key": {
      "function": "lognormal"
    },
    "params": [{
      "name": "mean",
      "type": "number",
      "default": 0
    }, {
      "name": "stdev",
      "type": "number",
      "default": 1
    }]
  }, {
    "key": {
      "function": "uniform"
    },
    "params": [{
      "name": "min",
      "type": "number",
      "default": 0
    }, {
      "name": "max",
      "type": "number",
      "default": 1
    }]
  }, {
    "key": {
      "function": "kde"
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "from",
      "type": "data"
    }, {
      "name": "bandwidth",
      "type": "number",
      "default": 0
    }]
  }];
  var mixture = {
    "key": {
      "function": "mixture"
    },
    "params": [{
      "name": "distributions",
      "type": "param",
      "array": true,
      "params": distributions
    }, {
      "name": "weights",
      "type": "number",
      "array": true
    }]
  };
  Density.Definition = {
    "type": "Density",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "steps",
      "type": "number"
    }, {
      "name": "minsteps",
      "type": "number",
      "default": 25
    }, {
      "name": "maxsteps",
      "type": "number",
      "default": 200
    }, {
      "name": "method",
      "type": "string",
      "default": "pdf",
      "values": ["pdf", "cdf"]
    }, {
      "name": "distribution",
      "type": "param",
      "params": distributions.concat(mixture)
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "default": ["value", "density"]
    }]
  };
  var prototype$d = inherits(Density, Transform$1);

  prototype$d.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var dist = parse$5(_.distribution, source(pulse)),
          minsteps = _.steps || _.minsteps || 25,
          maxsteps = _.steps || _.maxsteps || 200,
          method = _.method || 'pdf';

      if (method !== 'pdf' && method !== 'cdf') {
        error('Invalid density method: ' + method);
      }

      if (!_.extent && !dist.data) {
        error('Missing density extent parameter.');
      }

      method = dist[method];
      var as = _.as || ['value', 'density'],
          domain = _.extent || extent(dist.data()),
          values = sampleCurve(method, domain, minsteps, maxsteps).map(function (v) {
        var tuple = {};
        tuple[as[0]] = v[0];
        tuple[as[1]] = v[1];
        return ingest(tuple);
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  };

  function source(pulse) {
    return function () {
      return pulse.materialize(pulse.SOURCE).source;
    };
  }

  function fieldNames(fields, as) {
    if (!fields) return null;
    return fields.map(function (f, i) {
      return as[i] || accessorName(f);
    });
  }
  function partition(data, groupby, field) {
    var groups = [],
        get = function get(f) {
      return f(t);
    },
        map,
        i,
        n,
        t,
        k,
        g; // partition data points into groups


    if (groupby == null) {
      groups.push(data.map(field));
    } else {
      for (map = {}, i = 0, n = data.length; i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];

        if (!g) {
          map[k] = g = [];
          g.dims = k;
          groups.push(g);
        }

        g.push(field(t));
      }
    }

    return groups;
  }

  var Output = 'bin';
  /**
   * Dot density binning for dot plot construction.
   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.
   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The value field to bin.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
   * @param {number} [params.step] - The step size (bin width) within which dots should be
   *   stacked. Defaults to 1/30 of the extent of the data *field*.
   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density
   *   stacks should be smoothed to reduce variance.
   */

  function DotBin(params) {
    Transform$1.call(this, null, params);
  }
  DotBin.Definition = {
    "type": "DotBin",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "step",
      "type": "number"
    }, {
      "name": "smooth",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "default": Output
    }]
  };
  var prototype$e = inherits(DotBin, Transform$1);

  prototype$e.transform = function (_, pulse) {
    if (this.value && !(_.modified() || pulse.changed())) {
      return pulse; // early exit
    }

    var source = pulse.materialize(pulse.SOURCE).source,
        groups = partition(pulse.source, _.groupby, identity),
        smooth = _.smooth || false,
        field = _.field,
        step = _.step || autostep(source, field),
        sort = stableCompare(function (a, b) {
      return field(a) - field(b);
    }),
        as = _.as || Output,
        n = groups.length; // compute dotplot bins per group

    var min = Infinity,
        max = -Infinity,
        i = 0,
        j;

    for (; i < n; ++i) {
      var g = groups[i].sort(sort);
      j = -1;

      var _iterator = _createForOfIteratorHelper(dotbin(g, step, smooth, field)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var v = _step.value;
          if (v < min) min = v;
          if (v > max) max = v;
          g[++j][as] = v;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    this.value = {
      start: min,
      stop: max,
      step: step
    };
    return pulse.reflow(true).modifies(as);
  };

  function autostep(data, field) {
    return span(extent(data, field)) / 30;
  }

  /**
   * Wraps an expression function with access to external parameters.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function} params.expr - The expression function. The
   *  function should accept both a datum and a parameter object.
   *  This operator's value will be a new function that wraps the
   *  expression function with access to this operator's parameters.
   */

  function Expression(params) {
    Operator.call(this, null, update$2, params);
    this.modified(true);
  }
  inherits(Expression, Operator);

  function update$2(_) {
    var expr = _.expr;
    return this.value && !_.modified('expr') ? this.value : accessor(function (datum) {
      return expr(datum, _);
    }, accessorFields(expr), accessorName(expr));
  }

  /**
   * Computes extents (min/max) for a data field.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The field over which to compute extends.
   */

  function Extent(params) {
    Transform$1.call(this, [undefined, undefined], params);
  }
  Extent.Definition = {
    "type": "Extent",
    "metadata": {},
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }]
  };
  var prototype$f = inherits(Extent, Transform$1);

  prototype$f.transform = function (_, pulse) {
    var extent = this.value,
        field = _.field,
        min = extent[0],
        max = extent[1],
        mod;
    mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');

    if (mod || min == null) {
      min = +Infinity;
      max = -Infinity;
    }

    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function (t) {
      var v = field(t);

      if (v != null) {
        // coerce to number
        v = +v; // NaNs will fail all comparisons!

        if (v < min) min = v;
        if (v > max) max = v;
      }
    });

    if (!Number.isFinite(min) || !Number.isFinite(max)) {
      var name = accessorName(field);
      if (name) name = " for field \"".concat(name, "\"");
      pulse.dataflow.warn("Infinite extent".concat(name, ": [").concat(min, ", ").concat(max, "]"));
      min = max = undefined;
    }

    this.value = [min, max];
  };

  /**
   * Provides a bridge between a parent transform and a target subflow that
   * consumes only a subset of the tuples that pass through the parent.
   * @constructor
   * @param {Pulse} pulse - A pulse to use as the value of this operator.
   * @param {Transform} parent - The parent transform (typically a Facet instance).
   * @param {Transform} target - A transform that receives the subflow of tuples.
   */

  function Subflow(pulse, parent) {
    Operator.call(this, pulse);
    this.parent = parent;
  }
  var prototype$g = inherits(Subflow, Operator);

  prototype$g.connect = function (target) {
    this.targets().add(target);
    return target.source = this;
  };
  /**
   * Add an 'add' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being added.
   */


  prototype$g.add = function (t) {
    this.value.add.push(t);
  };
  /**
   * Add a 'rem' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being removed.
   */


  prototype$g.rem = function (t) {
    this.value.rem.push(t);
  };
  /**
   * Add a 'mod' tuple to the subflow pulse.
   * @param {Tuple} t - The tuple being modified.
   */


  prototype$g.mod = function (t) {
    this.value.mod.push(t);
  };
  /**
   * Re-initialize this operator's pulse value.
   * @param {Pulse} pulse - The pulse to copy from.
   * @see Pulse.init
   */


  prototype$g.init = function (pulse) {
    this.value.init(pulse, pulse.NO_SOURCE);
  };
  /**
   * Evaluate this operator. This method overrides the
   * default behavior to simply return the contained pulse value.
   * @return {Pulse}
   */


  prototype$g.evaluate = function () {
    // assert: this.value.stamp === pulse.stamp
    return this.value;
  };

  /**
   * Facets a dataflow into a set of subflows based on a key.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(Dataflow, string): Operator} params.subflow - A function
   *   that generates a subflow of operators and returns its root operator.
   * @param {function(object): *} params.key - The key field to facet by.
   */

  function Facet(params) {
    Transform$1.call(this, {}, params);
    this._keys = fastmap(); // cache previously calculated key values
    // keep track of active subflows, use as targets array for listeners
    // this allows us to limit propagation to only updated subflows

    var a = this._targets = [];
    a.active = 0;

    a.forEach = function (f) {
      for (var i = 0, n = a.active; i < n; ++i) {
        f(a[i], i, a);
      }
    };
  }
  var prototype$h = inherits(Facet, Transform$1);

  prototype$h.activate = function (flow) {
    this._targets[this._targets.active++] = flow;
  };

  prototype$h.subflow = function (key, flow, pulse, parent) {
    var flows = this.value,
        sf = hasOwnProperty$1(flows, key) && flows[key],
        df,
        p;

    if (!sf) {
      p = parent || (p = this._group[key]) && p.tuple;
      df = pulse.dataflow;
      sf = df.add(new Subflow(pulse.fork(pulse.NO_SOURCE), this)).connect(flow(df, key, p));
      flows[key] = sf;
      this.activate(sf);
    } else if (sf.value.stamp < pulse.stamp) {
      sf.init(pulse);
      this.activate(sf);
    }

    return sf;
  };

  prototype$h.transform = function (_, pulse) {
    var df = pulse.dataflow,
        self = this,
        key = _.key,
        flow = _.subflow,
        cache = this._keys,
        rekey = _.modified('key');

    function subflow(key) {
      return self.subflow(key, flow, pulse);
    }

    this._group = _.group || {};
    this._targets.active = 0; // reset list of active subflows

    pulse.visit(pulse.REM, function (t) {
      var id = tupleid(t),
          k = cache.get(id);

      if (k !== undefined) {
        cache.delete(id);
        subflow(k).rem(t);
      }
    });
    pulse.visit(pulse.ADD, function (t) {
      var k = key(t);
      cache.set(tupleid(t), k);
      subflow(k).add(t);
    });

    if (rekey || pulse.modified(key.fields)) {
      pulse.visit(pulse.MOD, function (t) {
        var id = tupleid(t),
            k0 = cache.get(id),
            k1 = key(t);

        if (k0 === k1) {
          subflow(k1).mod(t);
        } else {
          cache.set(id, k1);
          subflow(k0).rem(t);
          subflow(k1).add(t);
        }
      });
    } else if (pulse.changed(pulse.MOD)) {
      pulse.visit(pulse.MOD, function (t) {
        subflow(cache.get(tupleid(t))).mod(t);
      });
    }

    if (rekey) {
      pulse.visit(pulse.REFLOW, function (t) {
        var id = tupleid(t),
            k0 = cache.get(id),
            k1 = key(t);

        if (k0 !== k1) {
          cache.set(id, k1);
          subflow(k0).rem(t);
          subflow(k1).add(t);
        }
      });
    }

    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
    return pulse;
  };

  /**
   * Generates one or more field accessor functions.
   * If the 'name' parameter is an array, an array of field accessors
   * will be created and the 'as' parameter will be ignored.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {string} params.name - The field name(s) to access.
   * @param {string} params.as - The accessor function name.
   */

  function Field(params) {
    Operator.call(this, null, update$3, params);
  }
  inherits(Field, Operator);

  function update$3(_) {
    return this.value && !_.modified() ? this.value : isArray(_.name) ? array(_.name).map(function (f) {
      return field(f);
    }) : field(_.name, _.as);
  }

  /**
   * Filters data tuples according to a predicate function.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.expr - The predicate expression function
   *   that determines a tuple's filter status. Truthy values pass the filter.
   */

  function Filter(params) {
    Transform$1.call(this, fastmap(), params);
  }
  Filter.Definition = {
    "type": "Filter",
    "metadata": {
      "changes": true
    },
    "params": [{
      "name": "expr",
      "type": "expr",
      "required": true
    }]
  };
  var prototype$i = inherits(Filter, Transform$1);

  prototype$i.transform = function (_, pulse) {
    var df = pulse.dataflow,
        cache = this.value,
        // cache ids of filtered tuples
    output = pulse.fork(),
        add = output.add,
        rem = output.rem,
        mod = output.mod,
        test = _.expr,
        isMod = true;
    pulse.visit(pulse.REM, function (t) {
      var id = tupleid(t);
      if (!cache.has(id)) rem.push(t);else cache.delete(id);
    });
    pulse.visit(pulse.ADD, function (t) {
      if (test(t, _)) add.push(t);else cache.set(tupleid(t), 1);
    });

    function revisit(t) {
      var id = tupleid(t),
          b = test(t, _),
          s = cache.get(id);

      if (b && s) {
        cache.delete(id);
        add.push(t);
      } else if (!b && !s) {
        cache.set(id, 1);
        rem.push(t);
      } else if (isMod && b && !s) {
        mod.push(t);
      }
    }

    pulse.visit(pulse.MOD, revisit);

    if (_.modified()) {
      isMod = false;
      pulse.visit(pulse.REFLOW, revisit);
    }

    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
    return output;
  };

  /**
   * Flattens array-typed field values into new data objects.
   * If multiple fields are specified, they are treated as parallel arrays,
   * with output values included for each matching index (or null if missing).
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<function(object): *>} params.fields - An array of field
   *   accessors for the tuple fields that should be flattened.
   * @param {string} [params.index] - Optional output field name for index
   *   value. If unspecified, no index field is included in the output.
   * @param {Array<string>} [params.as] - Output field names for flattened
   *   array fields. Any unspecified fields will use the field name provided
   *   by the fields accessors.
   */

  function Flatten(params) {
    Transform$1.call(this, [], params);
  }
  Flatten.Definition = {
    "type": "Flatten",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "index",
      "type": "string"
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }]
  };
  var prototype$j = inherits(Flatten, Transform$1);

  prototype$j.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        fields = _.fields,
        as = fieldNames(fields, _.as || []),
        index = _.index || null,
        m = as.length; // remove any previous results

    out.rem = this.value; // generate flattened tuples

    pulse.visit(pulse.SOURCE, function (t) {
      var arrays = fields.map(function (f) {
        return f(t);
      }),
          maxlen = arrays.reduce(function (l, a) {
        return Math.max(l, a.length);
      }, 0),
          i = 0,
          j,
          d,
          v;

      for (; i < maxlen; ++i) {
        d = derive(t);

        for (j = 0; j < m; ++j) {
          d[as[j]] = (v = arrays[j][i]) == null ? null : v;
        }

        if (index) {
          d[index] = i;
        }

        out.add.push(d);
      }
    });
    this.value = out.source = out.add;
    if (index) out.modifies(index);
    return out.modifies(as);
  };

  /**
   * Folds one more tuple fields into multiple tuples in which the field
   * name and values are available under new 'key' and 'value' fields.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.fields - An array of field accessors
   *   for the tuple fields that should be folded.
   * @param {Array<string>} [params.as] - Output field names for folded key
   *   and value fields, defaults to ['key', 'value'].
   */

  function Fold(params) {
    Transform$1.call(this, [], params);
  }
  Fold.Definition = {
    "type": "Fold",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["key", "value"]
    }]
  };
  var prototype$k = inherits(Fold, Transform$1);

  prototype$k.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        fields = _.fields,
        fnames = fields.map(accessorName),
        as = _.as || ['key', 'value'],
        k = as[0],
        v = as[1],
        n = fields.length;
    out.rem = this.value;
    pulse.visit(pulse.SOURCE, function (t) {
      for (var i = 0, d; i < n; ++i) {
        d = derive(t);
        d[k] = fnames[i];
        d[v] = fields[i](t);
        out.add.push(d);
      }
    });
    this.value = out.source = out.add;
    return out.modifies(as);
  };

  /**
   * Invokes a function for each data tuple and saves the results as a new field.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
   * @param {string} params.as - The field name under which to save the result.
   * @param {boolean} [params.initonly=false] - If true, the formula is applied to
   *   added tuples only, and does not update in response to modifications.
   */

  function Formula(params) {
    Transform$1.call(this, null, params);
  }
  Formula.Definition = {
    "type": "Formula",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "expr",
      "type": "expr",
      "required": true
    }, {
      "name": "as",
      "type": "string",
      "required": true
    }, {
      "name": "initonly",
      "type": "boolean"
    }]
  };
  var prototype$l = inherits(Formula, Transform$1);

  prototype$l.transform = function (_, pulse) {
    var func = _.expr,
        as = _.as,
        mod = _.modified(),
        flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;

    if (mod) {
      // parameters updated, need to reflow
      pulse = pulse.materialize().reflow(true);
    }

    if (!_.initonly) {
      pulse.modifies(as);
    }

    return pulse.visit(flag, function (t) {
      return t[as] = func(t, _);
    });
  };

  /**
   * Generates data tuples using a provided generator function.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(Parameters): object} params.generator - A tuple generator
   *   function. This function is given the operator parameters as input.
   *   Changes to any additional parameters will not trigger re-calculation
   *   of previously generated tuples. Only future tuples are affected.
   * @param {number} params.size - The number of tuples to produce.
   */

  function Generate(params) {
    Transform$1.call(this, [], params);
  }
  var prototype$m = inherits(Generate, Transform$1);

  prototype$m.transform = function (_, pulse) {
    var data = this.value,
        out = pulse.fork(pulse.ALL),
        num = _.size - data.length,
        gen = _.generator,
        add,
        rem,
        t;

    if (num > 0) {
      // need more tuples, generate and add
      for (add = []; --num >= 0;) {
        add.push(t = ingest(gen(_)));
        data.push(t);
      }

      out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;
    } else {
      // need fewer tuples, remove
      rem = data.slice(0, -num);
      out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;
      data = data.slice(-num);
    }

    out.source = this.value = data;
    return out;
  };

  var Methods = {
    value: 'value',
    median: median,
    mean: mean,
    min: min,
    max: max
  };
  var Empty = [];
  /**
   * Impute missing values.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The value field to impute.
   * @param {Array<function(object): *>} [params.groupby] - An array of
   *   accessors to determine series within which to perform imputation.
   * @param {function(object): *} params.key - An accessor for a key value.
   *   Each key value should be unique within a group. New tuples will be
   *   imputed for any key values that are not found within a group.
   * @param {Array<*>} [params.keyvals] - Optional array of required key
   *   values. New tuples will be imputed for any key values that are not
   *   found within a group. In addition, these values will be automatically
   *   augmented with the key values observed in the input data.
   * @param {string} [method='value'] - The imputation method to use. One of
   *   'value', 'mean', 'median', 'max', 'min'.
   * @param {*} [value=0] - The constant value to use for imputation
   *   when using method 'value'.
   */

  function Impute(params) {
    Transform$1.call(this, [], params);
  }
  Impute.Definition = {
    "type": "Impute",
    "metadata": {
      "changes": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "key",
      "type": "field",
      "required": true
    }, {
      "name": "keyvals",
      "array": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "method",
      "type": "enum",
      "default": "value",
      "values": ["value", "mean", "median", "max", "min"]
    }, {
      "name": "value",
      "default": 0
    }]
  };
  var prototype$n = inherits(Impute, Transform$1);

  function getValue(_) {
    var m = _.method || Methods.value,
        v;

    if (Methods[m] == null) {
      error('Unrecognized imputation method: ' + m);
    } else if (m === Methods.value) {
      v = _.value !== undefined ? _.value : 0;
      return function () {
        return v;
      };
    } else {
      return Methods[m];
    }
  }

  function getField(_) {
    var f = _.field;
    return function (t) {
      return t ? f(t) : NaN;
    };
  }

  prototype$n.transform = function (_, pulse) {
    var out = pulse.fork(pulse.ALL),
        impute = getValue(_),
        field = getField(_),
        fName = accessorName(_.field),
        kName = accessorName(_.key),
        gNames = (_.groupby || []).map(accessorName),
        groups = partition$1(pulse.source, _.groupby, _.key, _.keyvals),
        curr = [],
        prev = this.value,
        m = groups.domain.length,
        group,
        value,
        gVals,
        kVal,
        g,
        i,
        j,
        l,
        n,
        t;

    for (g = 0, l = groups.length; g < l; ++g) {
      group = groups[g];
      gVals = group.values;
      value = NaN; // add tuples for missing values

      for (j = 0; j < m; ++j) {
        if (group[j] != null) continue;
        kVal = groups.domain[j];
        t = {
          _impute: true
        };

        for (i = 0, n = gVals.length; i < n; ++i) {
          t[gNames[i]] = gVals[i];
        }

        t[kName] = kVal;
        t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;
        curr.push(ingest(t));
      }
    } // update pulse with imputed tuples


    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
    this.value = curr;
    return out;
  };

  function partition$1(data, groupby, key, keyvals) {
    var get = function get(f) {
      return f(t);
    },
        groups = [],
        domain = keyvals ? keyvals.slice() : [],
        kMap = {},
        gMap = {},
        gVals,
        gKey,
        group,
        i,
        j,
        k,
        n,
        t;

    domain.forEach(function (k, i) {
      kMap[k] = i + 1;
    });

    for (i = 0, n = data.length; i < n; ++i) {
      t = data[i];
      k = key(t);
      j = kMap[k] || (kMap[k] = domain.push(k));
      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';

      if (!(group = gMap[gKey])) {
        group = gMap[gKey] = [];
        groups.push(group);
        group.values = gVals;
      }

      group[j - 1] = t;
    }

    groups.domain = domain;
    return groups;
  }

  /**
   * Extend input tuples with aggregate values.
   * Calcuates aggregate values and joins them with the input stream.
   * @constructor
   */

  function JoinAggregate(params) {
    Aggregate.call(this, params);
  }
  JoinAggregate.Definition = {
    "type": "JoinAggregate",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "fields",
      "type": "field",
      "null": true,
      "array": true
    }, {
      "name": "ops",
      "type": "enum",
      "array": true,
      "values": ValidAggregateOps
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }, {
      "name": "key",
      "type": "field"
    }]
  };
  var prototype$o = inherits(JoinAggregate, Aggregate);

  prototype$o.transform = function (_, pulse) {
    var aggr = this,
        mod = _.modified(),
        cells; // process all input tuples to calculate aggregates


    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {
      cells = aggr.value = mod ? aggr.init(_) : {};
      pulse.visit(pulse.SOURCE, function (t) {
        aggr.add(t);
      });
    } else {
      cells = aggr.value = aggr.value || this.init(_);
      pulse.visit(pulse.REM, function (t) {
        aggr.rem(t);
      });
      pulse.visit(pulse.ADD, function (t) {
        aggr.add(t);
      });
    } // update aggregation cells


    aggr.changes(); // write aggregate values to input tuples

    pulse.visit(pulse.SOURCE, function (t) {
      extend(t, cells[aggr.cellkey(t)].tuple);
    });
    return pulse.reflow(mod).modifies(this._outputs);
  };

  prototype$o.changes = function () {
    var adds = this._adds,
        mods = this._mods,
        i,
        n;

    for (i = 0, n = this._alen; i < n; ++i) {
      this.celltuple(adds[i]);
      adds[i] = null; // for garbage collection
    }

    for (i = 0, n = this._mlen; i < n; ++i) {
      this.celltuple(mods[i]);
      mods[i] = null; // for garbage collection
    }

    this._alen = this._mlen = 0; // reset list of active cells
  };

  /**
   * Compute kernel density estimates (KDE) for one or more data groups.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors
   *   to groupby.
   * @param {function(object): *} params.field - An accessor for the data field
   *   to estimate.
   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.
   *   If zero or unspecified, the bandwidth is automatically determined.
   * @param {boolean} [params.counts=false] - A boolean flag indicating if the
   *   output values should be probability estimates (false, default) or
   *   smoothed counts (true).
   * @param {string} [params.cumulative=false] - A boolean flag indicating if a
   *   density (false) or cumulative distribution (true) should be generated.
   * @param {Array<number>} [params.extent] - The domain extent over which to
   *   plot the density. If unspecified, the [min, max] data extent is used.
   * @param {string} [params.resolve='independent'] - Indicates how parameters for
   *   multiple densities should be resolved. If "independent" (the default), each
   *   density may have its own domain extent and dynamic number of curve sample
   *   steps. If "shared", the KDE transform will ensure that all densities are
   *   defined over a shared domain and curve steps, enabling stacking.
   * @param {number} [params.minsteps=25] - The minimum number of curve samples
   *   for plotting the density.
   * @param {number} [params.maxsteps=200] - The maximum number of curve samples
   *   for plotting the density.
   * @param {number} [params.steps] - The exact number of curve samples for
   *   plotting the density. If specified, overrides both minsteps and maxsteps
   *   to set an exact number of uniform samples. Useful in conjunction with
   *   a fixed extent to ensure consistent sample points for stacked densities.
   */

  function KDE(params) {
    Transform$1.call(this, null, params);
  }
  KDE.Definition = {
    "type": "KDE",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "cumulative",
      "type": "boolean",
      "default": false
    }, {
      "name": "counts",
      "type": "boolean",
      "default": false
    }, {
      "name": "bandwidth",
      "type": "number",
      "default": 0
    }, {
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "resolve",
      "type": "enum",
      "values": ["shared", "independent"],
      "default": "independent"
    }, {
      "name": "steps",
      "type": "number"
    }, {
      "name": "minsteps",
      "type": "number",
      "default": 25
    }, {
      "name": "maxsteps",
      "type": "number",
      "default": 200
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "default": ["value", "density"]
    }]
  };
  var prototype$p = inherits(KDE, Transform$1);

  prototype$p.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var source = pulse.materialize(pulse.SOURCE).source,
          groups = partition(source, _.groupby, _.field),
          names = (_.groupby || []).map(accessorName),
          bandwidth = _.bandwidth,
          method = _.cumulative ? 'cdf' : 'pdf',
          as = _.as || ['value', 'density'],
          values = [];
      var domain = _.extent,
          minsteps = _.steps || _.minsteps || 25,
          maxsteps = _.steps || _.maxsteps || 200;

      if (method !== 'pdf' && method !== 'cdf') {
        error('Invalid density method: ' + method);
      }

      if (_.resolve === 'shared') {
        if (!domain) domain = extent(source, _.field);
        minsteps = maxsteps = _.steps || maxsteps;
      }

      groups.forEach(function (g) {
        var density = randomKDE(g, bandwidth)[method],
            scale = _.counts ? g.length : 1,
            local = domain || extent(g);
        sampleCurve(density, local, minsteps, maxsteps).forEach(function (v) {
          var t = {};

          for (var i = 0; i < names.length; ++i) {
            t[names[i]] = g.dims[i];
          }

          t[as[0]] = v[0];
          t[as[1]] = v[1] * scale;
          values.push(ingest(t));
        });
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  };

  /**
   * Generates a key function.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<string>} params.fields - The field name(s) for the key function.
   * @param {boolean} params.flat - A boolean flag indicating if the field names
   *  should be treated as flat property names, side-stepping nested field
   *  lookups normally indicated by dot or bracket notation.
   */

  function Key(params) {
    Operator.call(this, null, update$4, params);
  }
  inherits(Key, Operator);

  function update$4(_) {
    return this.value && !_.modified() ? this.value : key(_.fields, _.flat);
  }

  /**
   * Load and parse data from an external source. Marshalls parameter
   * values and then invokes the Dataflow request method.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {string} params.url - The URL to load from.
   * @param {object} params.format - The data format options.
   */

  function Load(params) {
    Transform$1.call(this, [], params);
    this._pending = null;
  }
  var prototype$q = inherits(Load, Transform$1);

  prototype$q.transform = function (_, pulse) {
    var _this = this;

    var df = pulse.dataflow;

    if (this._pending) {
      // update state and return pulse
      return output$1(this, pulse, this._pending);
    }

    if (stop(_)) return pulse.StopPropagation;

    if (_.values) {
      // parse and ingest values, return output pulse
      return output$1(this, pulse, df.parse(_.values, _.format));
    } else if (_.async) {
      // return promise for non-blocking async loading
      var p = df.request(_.url, _.format).then(function (res) {
        _this._pending = array(res.data);
        return function (df) {
          return df.touch(_this);
        };
      });
      return {
        async: p
      };
    } else {
      // return promise for synchronous loading
      return df.request(_.url, _.format).then(function (res) {
        return output$1(_this, pulse, array(res.data));
      });
    }
  };

  function stop(_) {
    return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));
  }

  function output$1(op, pulse, data) {
    data.forEach(ingest);
    var out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);
    out.rem = op.value;
    op.value = out.source = out.add = data;
    op._pending = null;
    return out;
  }

  /**
   * Extend tuples by joining them with values from a lookup table.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Map} params.index - The lookup table map.
   * @param {Array<function(object): *} params.fields - The fields to lookup.
   * @param {Array<string>} params.as - Output field names for each lookup value.
   * @param {*} [params.default] - A default value to use if lookup fails.
   */

  function Lookup(params) {
    Transform$1.call(this, {}, params);
  }
  Lookup.Definition = {
    "type": "Lookup",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "index",
      "type": "index",
      "params": [{
        "name": "from",
        "type": "data",
        "required": true
      }, {
        "name": "key",
        "type": "field",
        "required": true
      }]
    }, {
      "name": "values",
      "type": "field",
      "array": true
    }, {
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }, {
      "name": "default",
      "default": null
    }]
  };
  var prototype$r = inherits(Lookup, Transform$1);

  prototype$r.transform = function (_, pulse) {
    var out = pulse,
        as = _.as,
        keys = _.fields,
        index = _.index,
        values = _.values,
        defaultValue = _.default == null ? null : _.default,
        reset = _.modified(),
        flag = reset ? pulse.SOURCE : pulse.ADD,
        n = keys.length,
        set,
        m,
        mods;

    if (values) {
      m = values.length;

      if (n > 1 && !as) {
        error('Multi-field lookup requires explicit "as" parameter.');
      }

      if (as && as.length !== n * m) {
        error('The "as" parameter has too few output field names.');
      }

      as = as || values.map(accessorName);

      set = function set(t) {
        for (var i = 0, k = 0, j, v; i < n; ++i) {
          v = index.get(keys[i](t));
          if (v == null) for (j = 0; j < m; ++j, ++k) {
            t[as[k]] = defaultValue;
          } else for (j = 0; j < m; ++j, ++k) {
            t[as[k]] = values[j](v);
          }
        }
      };
    } else {
      if (!as) {
        error('Missing output field names.');
      }

      set = function set(t) {
        for (var i = 0, v; i < n; ++i) {
          v = index.get(keys[i](t));
          t[as[i]] = v == null ? defaultValue : v;
        }
      };
    }

    if (reset) {
      out = pulse.reflow(true);
    } else {
      mods = keys.some(function (k) {
        return pulse.modified(k.fields);
      });
      flag |= mods ? pulse.MOD : 0;
    }

    pulse.visit(flag, set);
    return out.modifies(as);
  };

  /**
   * Computes global min/max extents over a collection of extents.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<Array<number>>} params.extents - The input extents.
   */

  function MultiExtent(params) {
    Operator.call(this, null, update$5, params);
  }
  inherits(MultiExtent, Operator);

  function update$5(_) {
    if (this.value && !_.modified()) {
      return this.value;
    }

    var min = +Infinity,
        max = -Infinity,
        ext = _.extents,
        i,
        n,
        e;

    for (i = 0, n = ext.length; i < n; ++i) {
      e = ext[i];
      if (e[0] < min) min = e[0];
      if (e[1] > max) max = e[1];
    }

    return [min, max];
  }

  /**
   * Merge a collection of value arrays.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<Array<*>>} params.values - The input value arrrays.
   */

  function MultiValues(params) {
    Operator.call(this, null, update$6, params);
  }
  inherits(MultiValues, Operator);

  function update$6(_) {
    return this.value && !_.modified() ? this.value : _.values.reduce(function (data, _) {
      return data.concat(_);
    }, []);
  }

  /**
   * Operator whose value is simply its parameter hash. This operator is
   * useful for enabling reactive updates to values of nested objects.
   * @constructor
   * @param {object} params - The parameters for this operator.
   */

  function Params(params) {
    Transform$1.call(this, null, params);
  }
  inherits(Params, Transform$1);

  Params.prototype.transform = function (_, pulse) {
    this.modified(_.modified());
    this.value = _;
    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples
  };

  /**
   * Aggregate and pivot selected field values to become new fields.
   * This operator is useful to construction cross-tabulations.
   * @constructor
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors
   *  to groupby. These fields act just like groupby fields of an Aggregate transform.
   * @param {function(object): *} params.field - The field to pivot on. The unique
   *  values of this field become new field names in the output stream.
   * @param {function(object): *} params.value - The field to populate pivoted fields.
   *  The aggregate values of this field become the values of the new pivoted fields.
   * @param {string} [params.op] - The aggregation operation for the value field,
   *  applied per cell in the output stream. The default is "sum".
   * @param {number} [params.limit] - An optional parameter indicating the maximum
   *  number of pivoted fields to generate. The pivoted field names are sorted in
   *  ascending order prior to enforcing the limit.
   */

  function Pivot(params) {
    Aggregate.call(this, params);
  }
  Pivot.Definition = {
    "type": "Pivot",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "value",
      "type": "field",
      "required": true
    }, {
      "name": "op",
      "type": "enum",
      "values": ValidAggregateOps,
      "default": "sum"
    }, {
      "name": "limit",
      "type": "number",
      "default": 0
    }, {
      "name": "key",
      "type": "field"
    }]
  };
  var prototype$s = inherits(Pivot, Aggregate);
  prototype$s._transform = prototype$s.transform;

  prototype$s.transform = function (_, pulse) {
    return this._transform(aggregateParams(_, pulse), pulse);
  }; // Shoehorn a pivot transform into an aggregate transform!
  // First collect all unique pivot field values.
  // Then generate aggregate fields for each output pivot field.


  function aggregateParams(_, pulse) {
    var key = _.field,
        value = _.value,
        op = (_.op === 'count' ? '__count__' : _.op) || 'sum',
        fields = accessorFields(key).concat(accessorFields(value)),
        keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change
    // flag parameter modification to ensure re-initialization

    if (pulse.changed()) _.set('__pivot__', null, null, true);
    return {
      key: _.key,
      groupby: _.groupby,
      ops: keys.map(function () {
        return op;
      }),
      fields: keys.map(function (k) {
        return get$1(k, key, value, fields);
      }),
      as: keys.map(function (k) {
        return k + '';
      }),
      modified: _.modified.bind(_)
    };
  } // Generate aggregate field accessor.
  // Output NaN for non-existent values; aggregator will ignore!


  function get$1(k, key, value, fields) {
    return accessor(function (d) {
      return key(d) === k ? value(d) : NaN;
    }, fields, k + '');
  } // Collect (and optionally limit) all unique pivot values.


  function pivotKeys(key, limit, pulse) {
    var map = {},
        list = [];
    pulse.visit(pulse.SOURCE, function (t) {
      var k = key(t);

      if (!map[k]) {
        map[k] = 1;
        list.push(k);
      }
    }); // TODO? Move this comparator to vega-util?

    list.sort(function (u, v) {
      return (u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;
    });
    return limit ? list.slice(0, limit) : list;
  }

  /**
   * Partitions pre-faceted data into tuple subflows.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(Dataflow, string): Operator} params.subflow - A function
   *   that generates a subflow of operators and returns its root operator.
   * @param {function(object): Array<object>} params.field - The field
   *   accessor for an array of subflow tuple objects.
   */

  function PreFacet(params) {
    Facet.call(this, params);
  }
  var prototype$t = inherits(PreFacet, Facet);

  prototype$t.transform = function (_, pulse) {
    var self = this,
        flow = _.subflow,
        field = _.field;

    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {
      error('PreFacet does not support field modification.');
    }

    this._targets.active = 0; // reset list of active subflows

    pulse.visit(pulse.MOD, function (t) {
      var sf = self.subflow(tupleid(t), flow, pulse, t);
      field ? field(t).forEach(function (_) {
        sf.mod(_);
      }) : sf.mod(t);
    });
    pulse.visit(pulse.ADD, function (t) {
      var sf = self.subflow(tupleid(t), flow, pulse, t);
      field ? field(t).forEach(function (_) {
        sf.add(ingest(_));
      }) : sf.add(t);
    });
    pulse.visit(pulse.REM, function (t) {
      var sf = self.subflow(tupleid(t), flow, pulse, t);
      field ? field(t).forEach(function (_) {
        sf.rem(_);
      }) : sf.rem(t);
    });
    return pulse;
  };

  /**
   * Performs a relational projection, copying selected fields from source
   * tuples to a new set of derived tuples.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<function(object): *} params.fields - The fields to project,
   *   as an array of field accessors. If unspecified, all fields will be
   *   copied with names unchanged.
   * @param {Array<string>} [params.as] - Output field names for each projected
   *   field. Any unspecified fields will use the field name provided by
   *   the field accessor.
   */

  function Project(params) {
    Transform$1.call(this, null, params);
  }
  Project.Definition = {
    "type": "Project",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }]
  };
  var prototype$u = inherits(Project, Transform$1);

  prototype$u.transform = function (_, pulse) {
    var fields = _.fields,
        as = fieldNames(_.fields, _.as || []),
        derive = fields ? function (s, t) {
      return project(s, t, fields, as);
    } : rederive,
        out,
        lut;

    if (this.value) {
      lut = this.value;
    } else {
      pulse = pulse.addAll();
      lut = this.value = {};
    }

    out = pulse.fork(pulse.NO_SOURCE);
    pulse.visit(pulse.REM, function (t) {
      var id = tupleid(t);
      out.rem.push(lut[id]);
      lut[id] = null;
    });
    pulse.visit(pulse.ADD, function (t) {
      var dt = derive(t, ingest({}));
      lut[tupleid(t)] = dt;
      out.add.push(dt);
    });
    pulse.visit(pulse.MOD, function (t) {
      out.mod.push(derive(t, lut[tupleid(t)]));
    });
    return out;
  };

  function project(s, t, fields, as) {
    for (var i = 0, n = fields.length; i < n; ++i) {
      t[as[i]] = fields[i](s);
    }

    return t;
  }

  /**
   * Proxy the value of another operator as a pure signal value.
   * Ensures no tuples are propagated.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {*} params.value - The value to proxy, becomes the value of this operator.
   */

  function Proxy$1(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$v = inherits(Proxy$1, Transform$1);

  prototype$v.transform = function (_, pulse) {
    this.value = _.value;
    return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
  };

  /**
   * Generates sample quantile values from an input data stream.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - An accessor for the data field
   *   over which to calculate quantile values.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors
   *   to groupby.
   * @param {Array<number>} [params.probs] - An array of probabilities in
   *   the range (0, 1) for which to compute quantile values. If not specified,
   *   the *step* parameter will be used.
   * @param {Array<number>} [params.step=0.01] - A probability step size for
   *   sampling quantile values. All values from one-half the step size up to
   *   1 (exclusive) will be sampled. This parameter is only used if the
   *   *quantiles* parameter is not provided.
   */

  function Quantile(params) {
    Transform$1.call(this, null, params);
  }
  Quantile.Definition = {
    "type": "Quantile",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "probs",
      "type": "number",
      "array": true
    }, {
      "name": "step",
      "type": "number",
      "default": 0.01
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "default": ["prob", "value"]
    }]
  };
  var prototype$w = inherits(Quantile, Transform$1);
  var EPSILON$1 = 1e-14;

  prototype$w.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        as = _.as || ['prob', 'value'];

    if (this.value && !_.modified() && !pulse.changed()) {
      out.source = this.value;
      return out;
    }

    var source = pulse.materialize(pulse.SOURCE).source,
        groups = partition(source, _.groupby, _.field),
        names = (_.groupby || []).map(accessorName),
        values = [],
        step = _.step || 0.01,
        p = _.probs || sequence(step / 2, 1 - EPSILON$1, step),
        n = p.length;
    groups.forEach(function (g) {
      var q = quantiles(g, p);

      for (var i = 0; i < n; ++i) {
        var t = {};

        for (var _i = 0; _i < names.length; ++_i) {
          t[names[_i]] = g.dims[_i];
        }

        t[as[0]] = p[i];
        t[as[1]] = q[i];
        values.push(ingest(t));
      }
    });
    if (this.value) out.rem = this.value;
    this.value = out.add = out.source = values;
    return out;
  };

  /**
   * Relays a data stream between data processing pipelines.
   * If the derive parameter is set, this transform will create derived
   * copies of observed tuples. This provides derived data streams in which
   * modifications to the tuples do not pollute an upstream data source.
   * @param {object} params - The parameters for this operator.
   * @param {number} [params.derive=false] - Boolean flag indicating if
   *   the transform should make derived copies of incoming tuples.
   * @constructor
   */

  function Relay(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$x = inherits(Relay, Transform$1);

  prototype$x.transform = function (_, pulse) {
    var out, lut;

    if (this.value) {
      lut = this.value;
    } else {
      out = pulse = pulse.addAll();
      lut = this.value = {};
    }

    if (_.derive) {
      out = pulse.fork(pulse.NO_SOURCE);
      pulse.visit(pulse.REM, function (t) {
        var id = tupleid(t);
        out.rem.push(lut[id]);
        lut[id] = null;
      });
      pulse.visit(pulse.ADD, function (t) {
        var dt = derive(t);
        lut[tupleid(t)] = dt;
        out.add.push(dt);
      });
      pulse.visit(pulse.MOD, function (t) {
        var dt = lut[tupleid(t)],
            k;

        for (k in t) {
          dt[k] = t[k]; // down stream writes may overwrite re-derived tuples
          // conservatively mark all source fields as modified

          out.modifies(k);
        }

        out.mod.push(dt);
      });
    }

    return out;
  };

  /**
   * Samples tuples passing through this operator.
   * Uses reservoir sampling to maintain a representative sample.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {number} [params.size=1000] - The maximum number of samples.
   */

  function Sample(params) {
    Transform$1.call(this, [], params);
    this.count = 0;
  }
  Sample.Definition = {
    "type": "Sample",
    "metadata": {},
    "params": [{
      "name": "size",
      "type": "number",
      "default": 1000
    }]
  };
  var prototype$y = inherits(Sample, Transform$1);

  prototype$y.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE),
        mod = _.modified('size'),
        num = _.size,
        res = this.value,
        cnt = this.count,
        cap = 0,
        map = res.reduce(function (m, t) {
      m[tupleid(t)] = 1;
      return m;
    }, {}); // sample reservoir update function


    function update(t) {
      var p, idx;

      if (res.length < num) {
        res.push(t);
      } else {
        idx = ~~((cnt + 1) * random());

        if (idx < res.length && idx >= cap) {
          p = res[idx];
          if (map[tupleid(p)]) out.rem.push(p); // eviction

          res[idx] = t;
        }
      }

      ++cnt;
    }

    if (pulse.rem.length) {
      // find all tuples that should be removed, add to output
      pulse.visit(pulse.REM, function (t) {
        var id = tupleid(t);

        if (map[id]) {
          map[id] = -1;
          out.rem.push(t);
        }

        --cnt;
      }); // filter removed tuples out of the sample reservoir

      res = res.filter(function (t) {
        return map[tupleid(t)] !== -1;
      });
    }

    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
      // replenish sample if backing data source is available
      cap = cnt = res.length;
      pulse.visit(pulse.SOURCE, function (t) {
        // update, but skip previously sampled tuples
        if (!map[tupleid(t)]) update(t);
      });
      cap = -1;
    }

    if (mod && res.length > num) {
      for (var i = 0, n = res.length - num; i < n; ++i) {
        map[tupleid(res[i])] = -1;
        out.rem.push(res[i]);
      }

      res = res.slice(n);
    }

    if (pulse.mod.length) {
      // propagate modified tuples in the sample reservoir
      pulse.visit(pulse.MOD, function (t) {
        if (map[tupleid(t)]) out.mod.push(t);
      });
    }

    if (pulse.add.length) {
      // update sample reservoir
      pulse.visit(pulse.ADD, update);
    }

    if (pulse.add.length || cap < 0) {
      // output newly added tuples
      out.add = res.filter(function (t) {
        return !map[tupleid(t)];
      });
    }

    this.count = cnt;
    this.value = out.source = res;
    return out;
  };

  /**
   * Generates data tuples for a specified sequence range of numbers.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {number} params.start - The first number in the sequence.
   * @param {number} params.stop - The last number (exclusive) in the sequence.
   * @param {number} [params.step=1] - The step size between numbers in the sequence.
   */

  function Sequence(params) {
    Transform$1.call(this, null, params);
  }
  Sequence.Definition = {
    "type": "Sequence",
    "metadata": {
      "generates": true,
      "changes": true
    },
    "params": [{
      "name": "start",
      "type": "number",
      "required": true
    }, {
      "name": "stop",
      "type": "number",
      "required": true
    }, {
      "name": "step",
      "type": "number",
      "default": 1
    }, {
      "name": "as",
      "type": "string",
      "default": "data"
    }]
  };
  var prototype$z = inherits(Sequence, Transform$1);

  prototype$z.transform = function (_, pulse) {
    if (this.value && !_.modified()) return;
    var out = pulse.materialize().fork(pulse.MOD),
        as = _.as || 'data';
    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;
    this.value = sequence(_.start, _.stop, _.step || 1).map(function (v) {
      var t = {};
      t[as] = v;
      return ingest(t);
    });
    out.add = pulse.add.concat(this.value);
    return out;
  };

  /**
   * Propagates a new pulse without any tuples so long as the input
   * pulse contains some added, removed or modified tuples.
   * @param {object} params - The parameters for this operator.
   * @constructor
   */

  function Sieve(params) {
    Transform$1.call(this, null, params);
    this.modified(true); // always treat as modified
  }
  var prototype$A = inherits(Sieve, Transform$1);

  prototype$A.transform = function (_, pulse) {
    this.value = pulse.source;
    return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;
  };

  var YEAR = 'year';
  var QUARTER = 'quarter';
  var MONTH = 'month';
  var WEEK = 'week';
  var DATE = 'date';
  var DAY = 'day';
  var HOURS = 'hours';
  var MINUTES = 'minutes';
  var SECONDS = 'seconds';
  var MILLISECONDS = 'milliseconds';
  var UNITS = [YEAR, QUARTER, MONTH, WEEK, DATE, DAY, HOURS, MINUTES, SECONDS, MILLISECONDS].reduce(function (o, u, i) {
    return o[u] = 1 + i, o;
  }, {});
  function timeUnits(units) {
    var u = array(units).slice(),
        m = {}; // check validity

    if (!u.length) error('Missing time unit.');
    u.forEach(function (unit) {
      if (hasOwnProperty$1(UNITS, unit)) {
        m[unit] = 1;
      } else {
        error("Invalid time unit: ".concat(unit, "."));
      }
    });

    if ((m[WEEK] || m[DAY]) && (m[QUARTER] || m[MONTH] || m[DATE])) {
      error("Incompatible time units: ".concat(units));
    } // ensure proper sort order


    u.sort(function (a, b) {
      return UNITS[a] - UNITS[b];
    });
    return u;
  }

  var _localGet, _utcGet;
  var t0$1 = new Date();

  function floor$1(units, step, fn, newDate) {
    var s = step || 1,
        b = peek(units),
        _ = function _(unit, p, key) {
      return skip(fn[key || unit], unit === b && s, p);
    };

    var t = new Date(),
        u = toSet(units),
        y = u[YEAR] ? _(YEAR) : constant(2012),
        m = u[MONTH] ? _(MONTH) : u[QUARTER] ? _(QUARTER) : zero,
        d = u[WEEK] && u[DAY] ? _(DAY, 1, WEEK + DAY) : u[WEEK] ? _(WEEK, 1) : u[DAY] ? _(DAY, 1) : u[DATE] ? _(DATE, 1) : one,
        H = u[HOURS] ? _(HOURS) : zero,
        M = u[MINUTES] ? _(MINUTES) : zero,
        S = u[SECONDS] ? _(SECONDS) : zero,
        L = u[MILLISECONDS] ? _(MILLISECONDS) : zero;
    return function (v) {
      t.setTime(+v);
      var year = y(t);
      return newDate(year, m(t), d(t, year), H(t), M(t), S(t), L(t));
    };
  }

  function skip(f, step, phase) {
    return step <= 1 ? f : phase ? function (d, y) {
      return phase + step * Math.floor((f(d, y) - phase) / step);
    } : function (d, y) {
      return step * Math.floor(f(d, y) / step);
    };
  } // returns the day of the year based on week number, day of week,
  // and the day of the week for the first day of the year


  function weekday$1(week, day, firstDay) {
    return day + week * 7 - (firstDay + 6) % 7;
  } // -- LOCAL TIME --


  var localGet = (_localGet = {}, _defineProperty(_localGet, YEAR, function (d) {
    return d.getFullYear();
  }), _defineProperty(_localGet, QUARTER, function (d) {
    return 3 * ~~(d.getMonth() / 3);
  }), _defineProperty(_localGet, MONTH, function (d) {
    return d.getMonth();
  }), _defineProperty(_localGet, DATE, function (d) {
    return d.getDate();
  }), _defineProperty(_localGet, HOURS, function (d) {
    return d.getHours();
  }), _defineProperty(_localGet, MINUTES, function (d) {
    return d.getMinutes();
  }), _defineProperty(_localGet, SECONDS, function (d) {
    return d.getSeconds();
  }), _defineProperty(_localGet, MILLISECONDS, function (d) {
    return d.getMilliseconds();
  }), _defineProperty(_localGet, DAY, function (d, y) {
    return weekday$1(1, d.getDay(), localFirst(y));
  }), _defineProperty(_localGet, WEEK, function (d, y) {
    return weekday$1(localWeekNum(d), 0, localFirst(y));
  }), _defineProperty(_localGet, WEEK + DAY, function (d, y) {
    return weekday$1(localWeekNum(d), d.getDay(), localFirst(y));
  }), _localGet);

  function localYear(y) {
    t0$1.setFullYear(y);
    t0$1.setMonth(0);
    t0$1.setDate(1);
    t0$1.setHours(0, 0, 0, 0);
    return t0$1;
  }

  function localWeekNum(d) {
    return sunday.count(localYear(d.getFullYear()) - 1, d);
  }

  function localFirst(y) {
    return localYear(y).getDay();
  }

  function localDate$1(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
      var date = new Date(-1, m, d, H, M, S, L);
      date.setFullYear(y);
      return date;
    }

    return new Date(y, m, d, H, M, S, L);
  }

  function timeFloor(units, step) {
    return floor$1(units, step || 1, localGet, localDate$1);
  } // -- UTC TIME --

  var utcGet = (_utcGet = {}, _defineProperty(_utcGet, YEAR, function (d) {
    return d.getUTCFullYear();
  }), _defineProperty(_utcGet, QUARTER, function (d) {
    return 3 * ~~(d.getUTCMonth() / 3);
  }), _defineProperty(_utcGet, MONTH, function (d) {
    return d.getUTCMonth();
  }), _defineProperty(_utcGet, DATE, function (d) {
    return d.getUTCDate();
  }), _defineProperty(_utcGet, HOURS, function (d) {
    return d.getUTCHours();
  }), _defineProperty(_utcGet, MINUTES, function (d) {
    return d.getUTCMinutes();
  }), _defineProperty(_utcGet, SECONDS, function (d) {
    return d.getUTCSeconds();
  }), _defineProperty(_utcGet, MILLISECONDS, function (d) {
    return d.getUTCMilliseconds();
  }), _defineProperty(_utcGet, DAY, function (d, y) {
    return weekday$1(1, d.getUTCDay(), utcFirst(y));
  }), _defineProperty(_utcGet, WEEK, function (d, y) {
    return weekday$1(utcWeekNum(d), 0, utcFirst(y));
  }), _defineProperty(_utcGet, WEEK + DAY, function (d, y) {
    return weekday$1(utcWeekNum(d), d.getUTCDay(), utcFirst(y));
  }), _utcGet);

  function utcWeekNum(d) {
    var y = Date.UTC(d.getUTCFullYear(), 0, 1);
    return utcSunday.count(y - 1, d);
  }

  function utcFirst(y) {
    t0$1.setTime(Date.UTC(y, 0, 1));
    return t0$1.getUTCDay();
  }

  function utcDate$1(y, m, d, H, M, S, L) {
    if (0 <= y && y < 100) {
      var date = new Date(Date.UTC(-1, m, d, H, M, S, L));
      date.setUTCFullYear(d.y);
      return date;
    }

    return new Date(Date.UTC(y, m, d, H, M, S, L));
  }

  function utcFloor(units, step) {
    return floor$1(units, step || 1, utcGet, utcDate$1);
  }

  var _timeIntervals, _utcIntervals;
  var timeIntervals = (_timeIntervals = {}, _defineProperty(_timeIntervals, YEAR, year), _defineProperty(_timeIntervals, QUARTER, month.every(3)), _defineProperty(_timeIntervals, MONTH, month), _defineProperty(_timeIntervals, WEEK, sunday), _defineProperty(_timeIntervals, DATE, day), _defineProperty(_timeIntervals, DAY, day), _defineProperty(_timeIntervals, HOURS, hour), _defineProperty(_timeIntervals, MINUTES, minute), _defineProperty(_timeIntervals, SECONDS, second), _defineProperty(_timeIntervals, MILLISECONDS, millisecond), _timeIntervals);
  var utcIntervals = (_utcIntervals = {}, _defineProperty(_utcIntervals, YEAR, utcYear), _defineProperty(_utcIntervals, QUARTER, utcMonth.every(3)), _defineProperty(_utcIntervals, MONTH, utcMonth), _defineProperty(_utcIntervals, WEEK, utcSunday), _defineProperty(_utcIntervals, DATE, utcDay), _defineProperty(_utcIntervals, DAY, utcDay), _defineProperty(_utcIntervals, HOURS, utcHour), _defineProperty(_utcIntervals, MINUTES, utcMinute), _defineProperty(_utcIntervals, SECONDS, second), _defineProperty(_utcIntervals, MILLISECONDS, millisecond), _utcIntervals);
  function timeInterval(unit) {
    return timeIntervals[unit];
  }
  function utcInterval(unit) {
    return utcIntervals[unit];
  }

  function offset(ival, date, step) {
    return ival ? ival.offset(date, step) : undefined;
  }

  function timeOffset(unit, date, step) {
    return offset(timeInterval(unit), date, step);
  }
  function utcOffset(unit, date, step) {
    return offset(utcInterval(unit), date, step);
  }

  function sequence$1(ival, start, stop, step) {
    return ival ? ival.range(start, stop, step) : undefined;
  }

  function timeSequence(unit, start, stop, step) {
    return sequence$1(timeInterval(unit), start, stop, step);
  }
  function utcSequence(unit, start, stop, step) {
    return sequence$1(utcInterval(unit), start, stop, step);
  }

  var _defaultSpecifiers;
  var defaultSpecifiers = (_defaultSpecifiers = {}, _defineProperty(_defaultSpecifiers, YEAR, '%Y '), _defineProperty(_defaultSpecifiers, QUARTER, 'Q%q '), _defineProperty(_defaultSpecifiers, MONTH, '%b '), _defineProperty(_defaultSpecifiers, DATE, '%d '), _defineProperty(_defaultSpecifiers, WEEK, 'W%U '), _defineProperty(_defaultSpecifiers, DAY, '%a '), _defineProperty(_defaultSpecifiers, HOURS, '%H:00'), _defineProperty(_defaultSpecifiers, MINUTES, '00:%M'), _defineProperty(_defaultSpecifiers, SECONDS, ':%S'), _defineProperty(_defaultSpecifiers, MILLISECONDS, '.%L'), _defineProperty(_defaultSpecifiers, "".concat(YEAR, "-").concat(MONTH), '%Y-%m '), _defineProperty(_defaultSpecifiers, "".concat(YEAR, "-").concat(MONTH, "-").concat(DATE), '%Y-%m-%d '), _defineProperty(_defaultSpecifiers, "".concat(HOURS, "-").concat(MINUTES), '%H:%M'), _defaultSpecifiers);
  function timeUnitSpecifier(units, specifiers) {
    var s = extend({}, defaultSpecifiers, specifiers),
        u = timeUnits(units),
        n = u.length;
    var fmt = '',
        start = 0,
        end,
        key;

    for (start = 0; start < n;) {
      for (end = u.length; end > start; --end) {
        key = u.slice(start, end).join('-');

        if (s[key] != null) {
          fmt += s[key];
          start = end;
          break;
        }
      }
    }

    return fmt.trim();
  }
  function timeFormat$1(specifier) {
    return formatter(timeFormat, timeInterval, specifier);
  }
  function utcFormat$1(specifier) {
    return formatter(utcFormat, utcInterval, specifier);
  }

  function formatter(format, interval, specifier) {
    return isString(specifier) ? format(specifier) : multiFormat(format, interval, specifier);
  }

  function multiFormat(format, interval, spec) {
    spec = spec || {};

    if (!isObject(spec)) {
      error("Invalid time multi-format specifier: ".concat(spec));
    }

    var second = interval(SECONDS),
        minute = interval(MINUTES),
        hour = interval(HOURS),
        day = interval(DATE),
        week = interval(WEEK),
        month = interval(MONTH),
        quarter = interval(QUARTER),
        year = interval(YEAR),
        L = format(spec[MILLISECONDS] || '.%L'),
        S = format(spec[SECONDS] || ':%S'),
        M = format(spec[MINUTES] || '%I:%M'),
        H = format(spec[HOURS] || '%I %p'),
        d = format(spec[DATE] || spec[DAY] || '%a %d'),
        w = format(spec[WEEK] || '%b %d'),
        m = format(spec[MONTH] || '%B'),
        q = format(spec[QUARTER] || '%B'),
        y = format(spec[YEAR] || '%Y');
    return function (date) {
      return (second(date) < date ? L : minute(date) < date ? S : hour(date) < date ? M : day(date) < date ? H : month(date) < date ? week(date) < date ? d : w : year(date) < date ? quarter(date) < date ? m : q : y)(date);
    };
  }

  var durationSecond$1 = 1000,
      durationMinute$1 = durationSecond$1 * 60,
      durationHour$1 = durationMinute$1 * 60,
      durationDay$1 = durationHour$1 * 24,
      durationWeek$1 = durationDay$1 * 7,
      durationMonth = durationDay$1 * 30,
      durationYear = durationDay$1 * 365;
  var Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS],
      Seconds = Milli.slice(0, -1),
      Minutes = Seconds.slice(0, -1),
      Hours = Minutes.slice(0, -1),
      Day = Hours.slice(0, -1),
      Week = [YEAR, WEEK],
      Month = [YEAR, MONTH],
      Year = [YEAR];
  var intervals = [[Seconds, 1, durationSecond$1], [Seconds, 5, 5 * durationSecond$1], [Seconds, 15, 15 * durationSecond$1], [Seconds, 30, 30 * durationSecond$1], [Minutes, 1, durationMinute$1], [Minutes, 5, 5 * durationMinute$1], [Minutes, 15, 15 * durationMinute$1], [Minutes, 30, 30 * durationMinute$1], [Hours, 1, durationHour$1], [Hours, 3, 3 * durationHour$1], [Hours, 6, 6 * durationHour$1], [Hours, 12, 12 * durationHour$1], [Day, 1, durationDay$1], [Week, 1, durationWeek$1], [Month, 1, durationMonth], [Month, 3, 3 * durationMonth], [Year, 1, durationYear]];
  function timeBin (opt) {
    var ext = opt.extent,
        max = opt.maxbins || 40,
        target = Math.abs(span(ext)) / max;
    var i = bisector(function (i) {
      return i[2];
    }).right(intervals, target),
        units,
        step;

    if (i === intervals.length) {
      units = Year, step = tickStep(ext[0] / durationYear, ext[1] / durationYear, max);
    } else if (i) {
      i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];
      units = i[0];
      step = i[1];
    } else {
      units = Milli;
      step = Math.max(tickStep(ext[0], ext[1], max), 1);
    }

    return {
      units: units,
      step: step
    };
  }

  /**
   * Discretize dates to specific time units.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The data field containing date/time values.
   */

  function TimeUnit(params) {
    Transform$1.call(this, null, params);
  }
  var OUTPUT = ['unit0', 'unit1'];
  TimeUnit.Definition = {
    "type": "TimeUnit",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field",
      "required": true
    }, {
      "name": "interval",
      "type": "boolean",
      "default": true
    }, {
      "name": "units",
      "type": "string",
      "array": true
    }, {
      "name": "step",
      "type": "number",
      "default": 1
    }, {
      "name": "maxbins",
      "type": "number",
      "default": 40
    }, {
      "name": "extent",
      "type": "date",
      "array": true
    }, {
      "name": "timezone",
      "type": "enum",
      "default": "local",
      "values": ["local", "utc"]
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": OUTPUT
    }]
  };
  var prototype$B = inherits(TimeUnit, Transform$1);

  prototype$B.transform = function (_, pulse) {
    var field = _.field,
        band = _.interval !== false,
        utc = _.timezone === 'utc',
        floor = this._floor(_, pulse),
        offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,
        as = _.as || OUTPUT,
        u0 = as[0],
        u1 = as[1],
        min = floor.start || Infinity,
        max = floor.stop || -Infinity,
        step = floor.step,
        flag = pulse.ADD;

    if (_.modified() || pulse.modified(accessorFields(field))) {
      pulse = pulse.reflow(true);
      flag = pulse.SOURCE;
      min = Infinity;
      max = -Infinity;
    }

    pulse.visit(flag, function (t) {
      var v = field(t),
          a,
          b;

      if (v == null) {
        t[u0] = null;
        if (band) t[u1] = null;
      } else {
        t[u0] = a = b = floor(v);
        if (band) t[u1] = b = offset(a, step);
        if (a < min) min = a;
        if (b > max) max = b;
      }
    });
    floor.start = min;
    floor.stop = max;
    return pulse.modifies(band ? as : u0);
  };

  prototype$B._floor = function (_, pulse) {
    var utc = _.timezone === 'utc'; // get parameters

    var _ref = _.units ? {
      units: _.units,
      step: _.step || 1
    } : timeBin({
      extent: _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),
      maxbins: _.maxbins
    }),
        units = _ref.units,
        step = _ref.step; // check / standardize time units


    units = timeUnits(units);
    var prev = this.value || {},
        floor = (utc ? utcFloor : timeFloor)(units, step);
    floor.unit = peek(units);
    floor.units = units;
    floor.step = step;
    floor.start = prev.start;
    floor.stop = prev.stop;
    return this.value = floor;
  };

  /**
   * An index that maps from unique, string-coerced, field values to tuples.
   * Assumes that the field serves as a unique key with no duplicate values.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The field accessor to index.
   */

  function TupleIndex(params) {
    Transform$1.call(this, fastmap(), params);
  }
  var prototype$C = inherits(TupleIndex, Transform$1);

  prototype$C.transform = function (_, pulse) {
    var df = pulse.dataflow,
        field = _.field,
        index = this.value,
        mod = true;

    function set(t) {
      index.set(field(t), t);
    }

    if (_.modified('field') || pulse.modified(field.fields)) {
      index.clear();
      pulse.visit(pulse.SOURCE, set);
    } else if (pulse.changed()) {
      pulse.visit(pulse.REM, function (t) {
        index.delete(field(t));
      });
      pulse.visit(pulse.ADD, set);
    } else {
      mod = false;
    }

    this.modified(mod);
    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
    return pulse.fork();
  };

  /**
   * Extracts an array of values. Assumes the source data has already been
   * reduced as needed (e.g., by an upstream Aggregate transform).
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The domain field to extract.
   * @param {function(*,*): number} [params.sort] - An optional
   *   comparator function for sorting the values. The comparator will be
   *   applied to backing tuples prior to value extraction.
   */

  function Values(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$D = inherits(Values, Transform$1);

  prototype$D.transform = function (_, pulse) {
    var run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);

    if (run) {
      this.value = (_.sort ? pulse.source.slice().sort(stableCompare(_.sort)) : pulse.source).map(_.field);
    }
  };

  function WindowOp(op, field, param, as) {
    var fn = WindowOps[op](field, param);
    return {
      init: fn.init || zero,
      update: function update(w, t) {
        t[as] = fn.next(w);
      }
    };
  }
  var WindowOps = {
    row_number: function row_number() {
      return {
        next: function next(w) {
          return w.index + 1;
        }
      };
    },
    rank: function rank() {
      var rank;
      return {
        init: function init() {
          return rank = 1;
        },
        next: function next(w) {
          var i = w.index,
              data = w.data;
          return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;
        }
      };
    },
    dense_rank: function dense_rank() {
      var drank;
      return {
        init: function init() {
          return drank = 1;
        },
        next: function next(w) {
          var i = w.index,
              d = w.data;
          return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;
        }
      };
    },
    percent_rank: function percent_rank() {
      var rank = WindowOps.rank(),
          _next = rank.next;
      return {
        init: rank.init,
        next: function next(w) {
          return (_next(w) - 1) / (w.data.length - 1);
        }
      };
    },
    cume_dist: function cume_dist() {
      var cume;
      return {
        init: function init() {
          return cume = 0;
        },
        next: function next(w) {
          var i = w.index,
              d = w.data,
              c = w.compare;

          if (cume < i) {
            while (i + 1 < d.length && !c(d[i], d[i + 1])) {
              ++i;
            }

            cume = i;
          }

          return (1 + cume) / d.length;
        }
      };
    },
    ntile: function ntile(field, num) {
      num = +num;
      if (!(num > 0)) error('ntile num must be greater than zero.');
      var cume = WindowOps.cume_dist(),
          _next2 = cume.next;
      return {
        init: cume.init,
        next: function next(w) {
          return Math.ceil(num * _next2(w));
        }
      };
    },
    lag: function lag(field, offset) {
      offset = +offset || 1;
      return {
        next: function next(w) {
          var i = w.index - offset;
          return i >= 0 ? field(w.data[i]) : null;
        }
      };
    },
    lead: function lead(field, offset) {
      offset = +offset || 1;
      return {
        next: function next(w) {
          var i = w.index + offset,
              d = w.data;
          return i < d.length ? field(d[i]) : null;
        }
      };
    },
    first_value: function first_value(field) {
      return {
        next: function next(w) {
          return field(w.data[w.i0]);
        }
      };
    },
    last_value: function last_value(field) {
      return {
        next: function next(w) {
          return field(w.data[w.i1 - 1]);
        }
      };
    },
    nth_value: function nth_value(field, nth) {
      nth = +nth;
      if (!(nth > 0)) error('nth_value nth must be greater than zero.');
      return {
        next: function next(w) {
          var i = w.i0 + (nth - 1);
          return i < w.i1 ? field(w.data[i]) : null;
        }
      };
    },
    prev_value: function prev_value(field) {
      var prev;
      return {
        init: function init() {
          return prev = null;
        },
        next: function next(w) {
          var v = field(w.data[w.index]);
          return v != null ? prev = v : prev;
        }
      };
    },
    next_value: function next_value(field) {
      var v, i;
      return {
        init: function init() {
          return v = null, i = -1;
        },
        next: function next(w) {
          var d = w.data;
          return w.index <= i ? v : (i = find$1(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);
        }
      };
    }
  };

  function find$1(field, data, index) {
    for (var n = data.length; index < n; ++index) {
      var v = field(data[index]);
      if (v != null) return index;
    }

    return -1;
  }

  var ValidWindowOps = Object.keys(WindowOps);

  function WindowState(_) {
    var self = this,
        ops = array(_.ops),
        fields = array(_.fields),
        params = array(_.params),
        as = array(_.as),
        outputs = self.outputs = [],
        windows = self.windows = [],
        inputs = {},
        map = {},
        countOnly = true,
        counts = [],
        measures = [];

    function visitInputs(f) {
      array(accessorFields(f)).forEach(function (_) {
        return inputs[_] = 1;
      });
    }

    visitInputs(_.sort);
    ops.forEach(function (op, i) {
      var field = fields[i],
          mname = accessorName(field),
          name = measureName(op, mname, as[i]);
      visitInputs(field);
      outputs.push(name); // Window operation

      if (hasOwnProperty$1(WindowOps, op)) {
        windows.push(WindowOp(op, fields[i], params[i], name));
      } // Aggregate operation
      else {
          if (field == null && op !== 'count') {
            error('Null aggregate field specified.');
          }

          if (op === 'count') {
            counts.push(name);
            return;
          }

          countOnly = false;
          var m = map[mname];

          if (!m) {
            m = map[mname] = [];
            m.field = field;
            measures.push(m);
          }

          m.push(createMeasure(op, name));
        }
    });

    if (counts.length || measures.length) {
      self.cell = cell(measures, counts, countOnly);
    }

    self.inputs = Object.keys(inputs);
  }
  var prototype$E = WindowState.prototype;

  prototype$E.init = function () {
    this.windows.forEach(function (_) {
      return _.init();
    });
    if (this.cell) this.cell.init();
  };

  prototype$E.update = function (w, t) {
    var self = this,
        cell = self.cell,
        wind = self.windows,
        data = w.data,
        m = wind && wind.length,
        j;

    if (cell) {
      for (j = w.p0; j < w.i0; ++j) {
        cell.rem(data[j]);
      }

      for (j = w.p1; j < w.i1; ++j) {
        cell.add(data[j]);
      }

      cell.set(t);
    }

    for (j = 0; j < m; ++j) {
      wind[j].update(w, t);
    }
  };

  function cell(measures, counts, countOnly) {
    measures = measures.map(function (m) {
      return compileMeasures(m, m.field);
    });
    var cell = {
      num: 0,
      agg: null,
      store: false,
      count: counts
    };

    if (!countOnly) {
      var n = measures.length,
          a = cell.agg = Array(n),
          i = 0;

      for (; i < n; ++i) {
        a[i] = new measures[i](cell);
      }
    }

    if (cell.store) {
      var store = cell.data = new TupleStore();
    }

    cell.add = function (t) {
      cell.num += 1;
      if (countOnly) return;
      if (store) store.add(t);

      for (var _i = 0; _i < n; ++_i) {
        a[_i].add(a[_i].get(t), t);
      }
    };

    cell.rem = function (t) {
      cell.num -= 1;
      if (countOnly) return;
      if (store) store.rem(t);

      for (var _i2 = 0; _i2 < n; ++_i2) {
        a[_i2].rem(a[_i2].get(t), t);
      }
    };

    cell.set = function (t) {
      var i, n; // consolidate stored values

      if (store) store.values(); // update tuple properties

      for (i = 0, n = counts.length; i < n; ++i) {
        t[counts[i]] = cell.num;
      }

      if (!countOnly) for (i = 0, n = a.length; i < n; ++i) {
        a[i].set(t);
      }
    };

    cell.init = function () {
      cell.num = 0;
      if (store) store.reset();

      for (var _i3 = 0; _i3 < n; ++_i3) {
        a[_i3].init();
      }
    };

    return cell;
  }

  /**
   * Perform window calculations and write results to the input stream.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
   * @param {Array<function(object): *>} [params.fields] - An array of accessors
   *   for data fields to use as inputs to window operations.
   * @param {Array<*>} [params.params] - An array of parameter values for window operations.
   * @param {Array<string>} [params.as] - An array of output field names for window operations.
   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
   *   number alone, ignoring peers with identical sort values. If false (default),
   *   the window boundaries will be adjusted to include peer values.
   */

  function Window(params) {
    Transform$1.call(this, {}, params);
    this._mlen = 0;
    this._mods = [];
  }
  Window.Definition = {
    "type": "Window",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "sort",
      "type": "compare"
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "ops",
      "type": "enum",
      "array": true,
      "values": ValidWindowOps.concat(ValidAggregateOps)
    }, {
      "name": "params",
      "type": "number",
      "null": true,
      "array": true
    }, {
      "name": "fields",
      "type": "field",
      "null": true,
      "array": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "array": true
    }, {
      "name": "frame",
      "type": "number",
      "null": true,
      "array": true,
      "length": 2,
      "default": [null, 0]
    }, {
      "name": "ignorePeers",
      "type": "boolean",
      "default": false
    }]
  };
  var prototype$F = inherits(Window, Transform$1);

  prototype$F.transform = function (_, pulse) {
    var self = this,
        state = self.state,
        mod = _.modified(),
        cmp = stableCompare(_.sort),
        i,
        n;

    this.stamp = pulse.stamp; // initialize window state

    if (!state || mod) {
      state = self.state = new WindowState(_);
    } // retrieve group for a tuple


    var key = groupkey(_.groupby);

    function group(t) {
      return self.group(key(t));
    } // partition input tuples


    if (mod || pulse.modified(state.inputs)) {
      self.value = {};
      pulse.visit(pulse.SOURCE, function (t) {
        group(t).add(t);
      });
    } else {
      pulse.visit(pulse.REM, function (t) {
        group(t).remove(t);
      });
      pulse.visit(pulse.ADD, function (t) {
        group(t).add(t);
      });
    } // perform window calculations for each modified partition


    for (i = 0, n = self._mlen; i < n; ++i) {
      processPartition(self._mods[i], state, cmp, _);
    }

    self._mlen = 0;
    self._mods = []; // TODO don't reflow everything?

    return pulse.reflow(mod).modifies(state.outputs);
  };

  prototype$F.group = function (key) {
    var self = this,
        group = self.value[key];

    if (!group) {
      group = self.value[key] = SortedList(tupleid);
      group.stamp = -1;
    }

    if (group.stamp < self.stamp) {
      group.stamp = self.stamp;
      self._mods[self._mlen++] = group;
    }

    return group;
  };

  function processPartition(list, state, cmp, _) {
    var sort = _.sort,
        range = sort && !_.ignorePeers,
        frame = _.frame || [null, 0],
        data = list.data(cmp),
        // use cmp for stable sort
    n = data.length,
        i = 0,
        b = range ? bisector(sort) : null,
        w = {
      i0: 0,
      i1: 0,
      p0: 0,
      p1: 0,
      index: 0,
      data: data,
      compare: sort || constant(-1)
    };

    for (state.init(); i < n; ++i) {
      setWindow(w, frame, i, n);
      if (range) adjustRange(w, b);
      state.update(w, data[i]);
    }
  }

  function setWindow(w, f, i, n) {
    w.p0 = w.i0;
    w.p1 = w.i1;
    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
    w.index = i;
  } // if frame type is 'range', adjust window for peer values


  function adjustRange(w, bisect) {
    var r0 = w.i0,
        r1 = w.i1 - 1,
        c = w.compare,
        d = w.data,
        n = d.length - 1;
    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);
    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);
  }



  var tx = /*#__PURE__*/Object.freeze({
    __proto__: null,
    aggregate: Aggregate,
    bin: Bin,
    collect: Collect,
    compare: Compare,
    countpattern: CountPattern,
    cross: Cross,
    density: Density,
    dotbin: DotBin,
    expression: Expression,
    extent: Extent,
    facet: Facet,
    field: Field,
    filter: Filter,
    flatten: Flatten,
    fold: Fold,
    formula: Formula,
    generate: Generate,
    impute: Impute,
    joinaggregate: JoinAggregate,
    kde: KDE,
    key: Key,
    load: Load,
    lookup: Lookup,
    multiextent: MultiExtent,
    multivalues: MultiValues,
    params: Params,
    pivot: Pivot,
    prefacet: PreFacet,
    project: Project,
    proxy: Proxy$1,
    quantile: Quantile,
    relay: Relay,
    sample: Sample,
    sequence: Sequence,
    sieve: Sieve,
    subflow: Subflow,
    timeunit: TimeUnit,
    tupleindex: TupleIndex,
    values: Values,
    window: Window
  });

  var Top = 'top';
  var Left = 'left';
  var Right = 'right';
  var Bottom = 'bottom';
  var TopLeft = 'top-left';
  var TopRight = 'top-right';
  var BottomLeft = 'bottom-left';
  var BottomRight = 'bottom-right';
  var Start = 'start';
  var Middle = 'middle';
  var End = 'end';
  var X = 'x';
  var Y = 'y';
  var Group = 'group';
  var AxisRole = 'axis';
  var TitleRole = 'title';
  var FrameRole = 'frame';
  var ScopeRole = 'scope';
  var LegendRole = 'legend';
  var RowHeader = 'row-header';
  var RowFooter = 'row-footer';
  var RowTitle = 'row-title';
  var ColHeader = 'column-header';
  var ColFooter = 'column-footer';
  var ColTitle = 'column-title';
  var Padding = 'padding';
  var Symbols = 'symbol';
  var Fit = 'fit';
  var FitX = 'fit-x';
  var FitY = 'fit-y';
  var Pad = 'pad';
  var None$1 = 'none';
  var All = 'all';
  var Each = 'each';
  var Flush = 'flush';
  var Column = 'column';
  var Row = 'row';

  function Bounds(b) {
    this.clear();
    if (b) this.union(b);
  }
  var prototype$G = Bounds.prototype;

  prototype$G.clone = function () {
    return new Bounds(this);
  };

  prototype$G.clear = function () {
    this.x1 = +Number.MAX_VALUE;
    this.y1 = +Number.MAX_VALUE;
    this.x2 = -Number.MAX_VALUE;
    this.y2 = -Number.MAX_VALUE;
    return this;
  };

  prototype$G.empty = function () {
    return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;
  };

  prototype$G.equals = function (b) {
    return this.x1 === b.x1 && this.y1 === b.y1 && this.x2 === b.x2 && this.y2 === b.y2;
  };

  prototype$G.set = function (x1, y1, x2, y2) {
    if (x2 < x1) {
      this.x2 = x1;
      this.x1 = x2;
    } else {
      this.x1 = x1;
      this.x2 = x2;
    }

    if (y2 < y1) {
      this.y2 = y1;
      this.y1 = y2;
    } else {
      this.y1 = y1;
      this.y2 = y2;
    }

    return this;
  };

  prototype$G.add = function (x, y) {
    if (x < this.x1) this.x1 = x;
    if (y < this.y1) this.y1 = y;
    if (x > this.x2) this.x2 = x;
    if (y > this.y2) this.y2 = y;
    return this;
  };

  prototype$G.expand = function (d) {
    this.x1 -= d;
    this.y1 -= d;
    this.x2 += d;
    this.y2 += d;
    return this;
  };

  prototype$G.round = function () {
    this.x1 = Math.floor(this.x1);
    this.y1 = Math.floor(this.y1);
    this.x2 = Math.ceil(this.x2);
    this.y2 = Math.ceil(this.y2);
    return this;
  };

  prototype$G.scale = function (s) {
    this.x1 *= s;
    this.y1 *= s;
    this.x2 *= s;
    this.y2 *= s;
    return this;
  };

  prototype$G.translate = function (dx, dy) {
    this.x1 += dx;
    this.x2 += dx;
    this.y1 += dy;
    this.y2 += dy;
    return this;
  };

  prototype$G.rotate = function (angle, x, y) {
    var p = this.rotatedPoints(angle, x, y);
    return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
  };

  prototype$G.rotatedPoints = function (angle, x, y) {
    var x1 = this.x1,
        y1 = this.y1,
        x2 = this.x2,
        y2 = this.y2,
        cos = Math.cos(angle),
        sin = Math.sin(angle),
        cx = x - x * cos + y * sin,
        cy = y - x * sin - y * cos;
    return [cos * x1 - sin * y1 + cx, sin * x1 + cos * y1 + cy, cos * x1 - sin * y2 + cx, sin * x1 + cos * y2 + cy, cos * x2 - sin * y1 + cx, sin * x2 + cos * y1 + cy, cos * x2 - sin * y2 + cx, sin * x2 + cos * y2 + cy];
  };

  prototype$G.union = function (b) {
    if (b.x1 < this.x1) this.x1 = b.x1;
    if (b.y1 < this.y1) this.y1 = b.y1;
    if (b.x2 > this.x2) this.x2 = b.x2;
    if (b.y2 > this.y2) this.y2 = b.y2;
    return this;
  };

  prototype$G.intersect = function (b) {
    if (b.x1 > this.x1) this.x1 = b.x1;
    if (b.y1 > this.y1) this.y1 = b.y1;
    if (b.x2 < this.x2) this.x2 = b.x2;
    if (b.y2 < this.y2) this.y2 = b.y2;
    return this;
  };

  prototype$G.encloses = function (b) {
    return b && this.x1 <= b.x1 && this.x2 >= b.x2 && this.y1 <= b.y1 && this.y2 >= b.y2;
  };

  prototype$G.alignsWith = function (b) {
    return b && (this.x1 == b.x1 || this.x2 == b.x2 || this.y1 == b.y1 || this.y2 == b.y2);
  };

  prototype$G.intersects = function (b) {
    return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);
  };

  prototype$G.contains = function (x, y) {
    return !(x < this.x1 || x > this.x2 || y < this.y1 || y > this.y2);
  };

  prototype$G.width = function () {
    return this.x2 - this.x1;
  };

  prototype$G.height = function () {
    return this.y2 - this.y1;
  };

  var gradient_id = 0;
  var patternPrefix = 'p_';
  function isGradient(value) {
    return value && value.gradient;
  }
  function gradientRef(g, defs, base) {
    var id = g.id,
        type = g.gradient,
        prefix = type === 'radial' ? patternPrefix : ''; // check id, assign default values as needed

    if (!id) {
      id = g.id = 'gradient_' + gradient_id++;

      if (type === 'radial') {
        g.x1 = get$2(g.x1, 0.5);
        g.y1 = get$2(g.y1, 0.5);
        g.r1 = get$2(g.r1, 0);
        g.x2 = get$2(g.x2, 0.5);
        g.y2 = get$2(g.y2, 0.5);
        g.r2 = get$2(g.r2, 0.5);
        prefix = patternPrefix;
      } else {
        g.x1 = get$2(g.x1, 0);
        g.y1 = get$2(g.y1, 0);
        g.x2 = get$2(g.x2, 1);
        g.y2 = get$2(g.y2, 0);
      }
    } // register definition


    defs[id] = g; // return url reference

    return 'url(' + (base || '') + '#' + prefix + id + ')';
  }

  function get$2(val, def) {
    return val != null ? val : def;
  }

  function Gradient (p0, p1) {
    var stops = [],
        gradient;
    return gradient = {
      gradient: 'linear',
      x1: p0 ? p0[0] : 0,
      y1: p0 ? p0[1] : 0,
      x2: p1 ? p1[0] : 1,
      y2: p1 ? p1[1] : 0,
      stops: stops,
      stop: function stop(offset, color) {
        stops.push({
          offset: offset,
          color: color
        });
        return gradient;
      }
    };
  }

  function Item$1(mark) {
    this.mark = mark;
    this.bounds = this.bounds || new Bounds();
  }

  function GroupItem(mark) {
    Item$1.call(this, mark);
    this.items = this.items || [];
  }
  inherits(GroupItem, Item$1);

  function domCanvas(w, h) {
    if (typeof document !== 'undefined' && document.createElement) {
      var c = document.createElement('canvas');

      if (c && c.getContext) {
        c.width = w;
        c.height = h;
        return c;
      }
    }

    return null;
  }
  function domImage() {
    return typeof Image !== 'undefined' ? Image : null;
  }

  var NodeCanvas;

  try {
    NodeCanvas = canvas;

    if (!(NodeCanvas && NodeCanvas.createCanvas)) {
      NodeCanvas = null;
    }
  } catch (error) {// do nothing
  }

  function nodeCanvas(w, h, type) {
    if (NodeCanvas) {
      try {
        return new NodeCanvas.Canvas(w, h, type);
      } catch (e) {// do nothing, return null on error
      }
    }

    return null;
  }
  function nodeImage() {
    return NodeCanvas && NodeCanvas.Image || null;
  }

  function canvas$1(w, h, type) {
    return domCanvas(w, h) || nodeCanvas(w, h, type) || null;
  }
  function image() {
    return domImage() || nodeImage() || null;
  }

  function ResourceLoader(customLoader) {
    this._pending = 0;
    this._loader = customLoader || loader();
  }
  var prototype$H = ResourceLoader.prototype;

  prototype$H.pending = function () {
    return this._pending;
  };

  function increment(loader) {
    loader._pending += 1;
  }

  function decrement(loader) {
    loader._pending -= 1;
  }

  prototype$H.sanitizeURL = function (uri) {
    var loader = this;
    increment(loader);
    return loader._loader.sanitize(uri, {
      context: 'href'
    }).then(function (opt) {
      decrement(loader);
      return opt;
    }).catch(function () {
      decrement(loader);
      return null;
    });
  };

  prototype$H.loadImage = function (uri) {
    var loader = this,
        Image = image();
    increment(loader);
    return loader._loader.sanitize(uri, {
      context: 'image'
    }).then(function (opt) {
      var url = opt.href;
      if (!url || !Image) throw {
        url: url
      };
      var img = new Image(); // set crossOrigin only if cors is defined; empty string sets anonymous mode
      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin

      var cors = hasOwnProperty$1(opt, 'crossOrigin') ? opt.crossOrigin : 'anonymous';
      if (cors != null) img.crossOrigin = cors; // attempt to load image resource

      img.onload = function () {
        return decrement(loader);
      };

      img.onerror = function () {
        return decrement(loader);
      };

      img.src = url;
      return img;
    }).catch(function (e) {
      decrement(loader);
      return {
        complete: false,
        width: 0,
        height: 0,
        src: e && e.url || ''
      };
    });
  };

  prototype$H.ready = function () {
    var loader = this;
    return new Promise(function (accept) {
      function poll(value) {
        if (!loader.pending()) accept(value);else setTimeout(function () {
          poll(true);
        }, 10);
      }

      poll(false);
    });
  };

  var pi = Math.PI,
      tau = 2 * pi,
      epsilon$1 = 1e-6,
      tauEpsilon = tau - epsilon$1;

  function Path() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath

    this._ = "";
  }

  function path() {
    return new Path();
  }

  Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function moveTo(x, y) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
    },
    closePath: function closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    },
    lineTo: function lineTo(x, y) {
      this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {
      this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
      this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    arcTo: function arcTo(x1, y1, x2, y2, r) {
      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
      var x0 = this._x1,
          y0 = this._y1,
          x21 = x2 - x1,
          y21 = y2 - y1,
          x01 = x0 - x1,
          y01 = y0 - y1,
          l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

      if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

      if (this._x1 === null) {
        this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
      } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
      else if (!(l01_2 > epsilon$1)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
            this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
          } // Otherwise, draw an arc!
          else {
              var x20 = x2 - x0,
                  y20 = y2 - y0,
                  l21_2 = x21 * x21 + y21 * y21,
                  l20_2 = x20 * x20 + y20 * y20,
                  l21 = Math.sqrt(l21_2),
                  l01 = Math.sqrt(l01_2),
                  l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                  t01 = l / l01,
                  t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

              if (Math.abs(t01 - 1) > epsilon$1) {
                this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
              }

              this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
            }
    },
    arc: function arc(x, y, r, a0, a1, ccw) {
      x = +x, y = +y, r = +r, ccw = !!ccw;
      var dx = r * Math.cos(a0),
          dy = r * Math.sin(a0),
          x0 = x + dx,
          y0 = y + dy,
          cw = 1 ^ ccw,
          da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

      if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

      if (this._x1 === null) {
        this._ += "M" + x0 + "," + y0;
      } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
      else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
          this._ += "L" + x0 + "," + y0;
        } // Is this arc empty? We’re done.


      if (!r) return; // Does the angle go the wrong way? Flip the direction.

      if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

      if (da > tauEpsilon) {
        this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
      } // Is this arc non-empty? Draw an arc!
      else if (da > epsilon$1) {
          this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
    },
    rect: function rect(x, y, w, h) {
      this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
    },
    toString: function toString() {
      return this._;
    }
  };

  function constant$1 (x) {
    return function constant() {
      return x;
    };
  }

  var abs = Math.abs;
  var atan2 = Math.atan2;
  var cos = Math.cos;
  var max$1 = Math.max;
  var min$1 = Math.min;
  var sin = Math.sin;
  var sqrt = Math.sqrt;
  var epsilon$2 = 1e-12;
  var pi$1 = Math.PI;
  var halfPi = pi$1 / 2;
  var tau$1 = 2 * pi$1;
  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
  }
  function asin(x) {
    return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
  }

  function arcInnerRadius(d) {
    return d.innerRadius;
  }

  function arcOuterRadius(d) {
    return d.outerRadius;
  }

  function arcStartAngle(d) {
    return d.startAngle;
  }

  function arcEndAngle(d) {
    return d.endAngle;
  }

  function arcPadAngle(d) {
    return d && d.padAngle; // Note: optional!
  }

  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0,
        y10 = y1 - y0,
        x32 = x3 - x2,
        y32 = y3 - y2,
        t = y32 * x10 - x32 * y10;
    if (t * t < epsilon$2) return;
    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
    return [x0 + t * x10, y0 + t * y10];
  } // Compute perpendicular offset line of length rc.
  // http://mathworld.wolfram.com/Circle-LineIntersection.html


  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1,
        y01 = y0 - y1,
        lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
        ox = lo * y01,
        oy = -lo * x01,
        x11 = x0 + ox,
        y11 = y0 + oy,
        x10 = x1 + ox,
        y10 = y1 + oy,
        x00 = (x11 + x10) / 2,
        y00 = (y11 + y10) / 2,
        dx = x10 - x11,
        dy = y10 - y11,
        d2 = dx * dx + dy * dy,
        r = r1 - rc,
        D = x11 * y10 - x10 * y11,
        d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
        cx0 = (D * dy - dx * d) / d2,
        cy0 = (-D * dx - dy * d) / d2,
        cx1 = (D * dy + dx * d) / d2,
        cy1 = (-D * dx + dy * d) / d2,
        dx0 = cx0 - x00,
        dy0 = cy0 - y00,
        dx1 = cx1 - x00,
        dy1 = cy1 - y00; // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?

    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return {
      cx: cx0,
      cy: cy0,
      x01: -ox,
      y01: -oy,
      x11: cx0 * (r1 / r - 1),
      y11: cy0 * (r1 / r - 1)
    };
  }

  function d3_arc () {
    var innerRadius = arcInnerRadius,
        outerRadius = arcOuterRadius,
        cornerRadius = constant$1(0),
        padRadius = null,
        startAngle = arcStartAngle,
        endAngle = arcEndAngle,
        padAngle = arcPadAngle,
        context = null;

    function arc() {
      var buffer,
          r,
          r0 = +innerRadius.apply(this, arguments),
          r1 = +outerRadius.apply(this, arguments),
          a0 = startAngle.apply(this, arguments) - halfPi,
          a1 = endAngle.apply(this, arguments) - halfPi,
          da = abs(a1 - a0),
          cw = a1 > a0;
      if (!context) context = buffer = path(); // Ensure that the outer radius is always larger than the inner radius.

      if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

      if (!(r1 > epsilon$2)) context.moveTo(0, 0); // Or is it a circle or annulus?
      else if (da > tau$1 - epsilon$2) {
          context.moveTo(r1 * cos(a0), r1 * sin(a0));
          context.arc(0, 0, r1, a0, a1, !cw);

          if (r0 > epsilon$2) {
            context.moveTo(r0 * cos(a1), r0 * sin(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        } // Or is it a circular or annular sector?
        else {
            var a01 = a0,
                a11 = a1,
                a00 = a0,
                a10 = a1,
                da0 = da,
                da1 = da,
                ap = padAngle.apply(this, arguments) / 2,
                rp = ap > epsilon$2 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
                rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
                rc0 = rc,
                rc1 = rc,
                t0,
                t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

            if (rp > epsilon$2) {
              var p0 = asin(rp / r0 * sin(ap)),
                  p1 = asin(rp / r1 * sin(ap));
              if ((da0 -= p0 * 2) > epsilon$2) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
              if ((da1 -= p1 * 2) > epsilon$2) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
            }

            var x01 = r1 * cos(a01),
                y01 = r1 * sin(a01),
                x10 = r0 * cos(a10),
                y10 = r0 * sin(a10); // Apply rounded corners?

            if (rc > epsilon$2) {
              var x11 = r1 * cos(a11),
                  y11 = r1 * sin(a11),
                  x00 = r0 * cos(a00),
                  y00 = r0 * sin(a00),
                  oc; // Restrict the corner radius according to the sector angle.

              if (da < pi$1 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
                var ax = x01 - oc[0],
                    ay = y01 - oc[1],
                    bx = x11 - oc[0],
                    by = y11 - oc[1],
                    kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                    lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                rc0 = min$1(rc, (r0 - lc) / (kc - 1));
                rc1 = min$1(rc, (r1 - lc) / (kc + 1));
              }
            } // Is the sector collapsed to a line?


            if (!(da1 > epsilon$2)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
            else if (rc1 > epsilon$2) {
                t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

                if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
                else {
                    context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                  }
              } // Or is the outer ring just a circular arc?
              else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
            // Or perhaps it’s an annular sector collapsed due to padding?

            if (!(r0 > epsilon$2) || !(da0 > epsilon$2)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
            else if (rc0 > epsilon$2) {
                t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

                if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
                else {
                    context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                  }
              } // Or is the inner ring just a circular arc?
              else context.arc(0, 0, r0, a10, a00, cw);
          }
      context.closePath();
      if (buffer) return context = null, buffer + "" || null;
    }

    arc.centroid = function () {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$1 / 2;
      return [cos(a) * r, sin(a) * r];
    };

    arc.innerRadius = function (_) {
      return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : innerRadius;
    };

    arc.outerRadius = function (_) {
      return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : outerRadius;
    };

    arc.cornerRadius = function (_) {
      return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : cornerRadius;
    };

    arc.padRadius = function (_) {
      return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), arc) : padRadius;
    };

    arc.startAngle = function (_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : startAngle;
    };

    arc.endAngle = function (_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : endAngle;
    };

    arc.padAngle = function (_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : padAngle;
    };

    arc.context = function (_) {
      return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };

    return arc;
  }

  function Linear(context) {
    this._context = context;
  }

  Linear.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
        // proceed

        default:
          this._context.lineTo(x, y);

          break;
      }
    }
  };
  function curveLinear (context) {
    return new Linear(context);
  }

  function x(p) {
    return p[0];
  }
  function y(p) {
    return p[1];
  }

  function d3_line () {
    var x$1 = x,
        y$1 = y,
        defined = constant$1(true),
        context = null,
        curve = curveLinear,
        output = null;

    function line(data) {
      var i,
          n = data.length,
          d,
          defined0 = false,
          buffer;
      if (context == null) output = curve(buffer = path());

      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) output.lineStart();else output.lineEnd();
        }

        if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
      }

      if (buffer) return output = null, buffer + "" || null;
    }

    line.x = function (_) {
      return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$1(+_), line) : x$1;
    };

    line.y = function (_) {
      return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), line) : y$1;
    };

    line.defined = function (_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), line) : defined;
    };

    line.curve = function (_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };

    line.context = function (_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };

    return line;
  }

  function d3_area () {
    var x0 = x,
        x1 = null,
        y0 = constant$1(0),
        y1 = y,
        defined = constant$1(true),
        context = null,
        curve = curveLinear,
        output = null;

    function area(data) {
      var i,
          j,
          k,
          n = data.length,
          d,
          defined0 = false,
          buffer,
          x0z = new Array(n),
          y0z = new Array(n);
      if (context == null) output = curve(buffer = path());

      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) {
            j = i;
            output.areaStart();
            output.lineStart();
          } else {
            output.lineEnd();
            output.lineStart();

            for (k = i - 1; k >= j; --k) {
              output.point(x0z[k], y0z[k]);
            }

            output.lineEnd();
            output.areaEnd();
          }
        }

        if (defined0) {
          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
        }
      }

      if (buffer) return output = null, buffer + "" || null;
    }

    function arealine() {
      return d3_line().defined(defined).curve(curve).context(context);
    }

    area.x = function (_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
    };

    area.x0 = function (_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
    };

    area.x1 = function (_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
    };

    area.y = function (_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
    };

    area.y0 = function (_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
    };

    area.y1 = function (_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
    };

    area.lineX0 = area.lineY0 = function () {
      return arealine().x(x0).y(y0);
    };

    area.lineY1 = function () {
      return arealine().x(x0).y(y1);
    };

    area.lineX1 = function () {
      return arealine().x(x1).y(y0);
    };

    area.defined = function (_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), area) : defined;
    };

    area.curve = function (_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };

    area.context = function (_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };

    return area;
  }

  var circle = {
    draw: function draw(context, size) {
      var r = Math.sqrt(size / pi$1);
      context.moveTo(r, 0);
      context.arc(0, 0, r, 0, tau$1);
    }
  };

  function d3_symbol () {
    var type = constant$1(circle),
        size = constant$1(64),
        context = null;

    function symbol() {
      var buffer;
      if (!context) context = buffer = path();
      type.apply(this, arguments).draw(context, +size.apply(this, arguments));
      if (buffer) return context = null, buffer + "" || null;
    }

    symbol.type = function (_) {
      return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
    };

    symbol.size = function (_) {
      return arguments.length ? (size = typeof _ === "function" ? _ : constant$1(+_), symbol) : size;
    };

    symbol.context = function (_) {
      return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };

    return symbol;
  }

  function noop () {}

  function _point(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
  }
  function Basis(context) {
    this._context = context;
  }
  Basis.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 3:
          _point(this, this._x1, this._y1);

        // proceed

        case 2:
          this._context.lineTo(this._x1, this._y1);

          break;
      }

      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
          break;

        case 2:
          this._point = 3;

          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

        // proceed

        default:
          _point(this, x, y);

          break;
      }

      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
    }
  };
  function curveBasis (context) {
    return new Basis(context);
  }

  function BasisClosed(context) {
    this._context = context;
  }

  BasisClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 1:
          {
            this._context.moveTo(this._x2, this._y2);

            this._context.closePath();

            break;
          }

        case 2:
          {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

            this._context.closePath();

            break;
          }

        case 3:
          {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
      }
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          this._x2 = x, this._y2 = y;
          break;

        case 1:
          this._point = 2;
          this._x3 = x, this._y3 = y;
          break;

        case 2:
          this._point = 3;
          this._x4 = x, this._y4 = y;

          this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

          break;

        default:
          _point(this, x, y);

          break;
      }

      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
    }
  };
  function curveBasisClosed (context) {
    return new BasisClosed(context);
  }

  function BasisOpen(context) {
    this._context = context;
  }

  BasisOpen.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          break;

        case 1:
          this._point = 2;
          break;

        case 2:
          this._point = 3;
          var x0 = (this._x0 + 4 * this._x1 + x) / 6,
              y0 = (this._y0 + 4 * this._y1 + y) / 6;
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
          break;

        case 3:
          this._point = 4;
        // proceed

        default:
          _point(this, x, y);

          break;
      }

      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
    }
  };
  function curveBasisOpen (context) {
    return new BasisOpen(context);
  }

  function Bundle(context, beta) {
    this._basis = new Basis(context);
    this._beta = beta;
  }

  Bundle.prototype = {
    lineStart: function lineStart() {
      this._x = [];
      this._y = [];

      this._basis.lineStart();
    },
    lineEnd: function lineEnd() {
      var x = this._x,
          y = this._y,
          j = x.length - 1;

      if (j > 0) {
        var x0 = x[0],
            y0 = y[0],
            dx = x[j] - x0,
            dy = y[j] - y0,
            i = -1,
            t;

        while (++i <= j) {
          t = i / j;

          this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
        }
      }

      this._x = this._y = null;

      this._basis.lineEnd();
    },
    point: function point(x, y) {
      this._x.push(+x);

      this._y.push(+y);
    }
  };
  var curveBundle = (function custom(beta) {
    function bundle(context) {
      return beta === 1 ? new Basis(context) : new Bundle(context, beta);
    }

    bundle.beta = function (beta) {
      return custom(+beta);
    };

    return bundle;
  })(0.85);

  function _point$1(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
  }
  function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  Cardinal.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);

          break;

        case 3:
          _point$1(this, this._x1, this._y1);

          break;
      }

      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
          this._x1 = x, this._y1 = y;
          break;

        case 2:
          this._point = 3;
        // proceed

        default:
          _point$1(this, x, y);

          break;
      }

      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };
  var curveCardinal = (function custom(tension) {
    function cardinal(context) {
      return new Cardinal(context, tension);
    }

    cardinal.tension = function (tension) {
      return custom(+tension);
    };

    return cardinal;
  })(0);

  function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 1:
          {
            this._context.moveTo(this._x3, this._y3);

            this._context.closePath();

            break;
          }

        case 2:
          {
            this._context.lineTo(this._x3, this._y3);

            this._context.closePath();

            break;
          }

        case 3:
          {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
      }
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x, this._y3 = y;
          break;

        case 1:
          this._point = 2;

          this._context.moveTo(this._x4 = x, this._y4 = y);

          break;

        case 2:
          this._point = 3;
          this._x5 = x, this._y5 = y;
          break;

        default:
          _point$1(this, x, y);

          break;
      }

      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };
  var curveCardinalClosed = (function custom(tension) {
    function cardinal(context) {
      return new CardinalClosed(context, tension);
    }

    cardinal.tension = function (tension) {
      return custom(+tension);
    };

    return cardinal;
  })(0);

  function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalOpen.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          break;

        case 1:
          this._point = 2;
          break;

        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;

        case 3:
          this._point = 4;
        // proceed

        default:
          _point$1(this, x, y);

          break;
      }

      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };
  var curveCardinalOpen = (function custom(tension) {
    function cardinal(context) {
      return new CardinalOpen(context, tension);
    }

    cardinal.tension = function (tension) {
      return custom(+tension);
    };

    return cardinal;
  })(0);

  function _point$2(that, x, y) {
    var x1 = that._x1,
        y1 = that._y1,
        x2 = that._x2,
        y2 = that._y2;

    if (that._l01_a > epsilon$2) {
      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
          n = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }

    if (that._l23_a > epsilon$2) {
      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
          m = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }

    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
  }

  function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }

  CatmullRom.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);

          break;

        case 3:
          this.point(this._x2, this._y2);
          break;
      }

      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      if (this._point) {
        var x23 = this._x2 - x,
            y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
          break;

        case 2:
          this._point = 3;
        // proceed

        default:
          _point$2(this, x, y);

          break;
      }

      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };
  var curveCatmullRom = (function custom(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
    }

    catmullRom.alpha = function (alpha) {
      return custom(+alpha);
    };

    return catmullRom;
  })(0.5);

  function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }

  CatmullRomClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 1:
          {
            this._context.moveTo(this._x3, this._y3);

            this._context.closePath();

            break;
          }

        case 2:
          {
            this._context.lineTo(this._x3, this._y3);

            this._context.closePath();

            break;
          }

        case 3:
          {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
      }
    },
    point: function point(x, y) {
      x = +x, y = +y;

      if (this._point) {
        var x23 = this._x2 - x,
            y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }

      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x, this._y3 = y;
          break;

        case 1:
          this._point = 2;

          this._context.moveTo(this._x4 = x, this._y4 = y);

          break;

        case 2:
          this._point = 3;
          this._x5 = x, this._y5 = y;
          break;

        default:
          _point$2(this, x, y);

          break;
      }

      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };
  var curveCatmullRomClosed = (function custom(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
    }

    catmullRom.alpha = function (alpha) {
      return custom(+alpha);
    };

    return catmullRom;
  })(0.5);

  function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }

  CatmullRomOpen.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      if (this._point) {
        var x23 = this._x2 - x,
            y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }

      switch (this._point) {
        case 0:
          this._point = 1;
          break;

        case 1:
          this._point = 2;
          break;

        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;

        case 3:
          this._point = 4;
        // proceed

        default:
          _point$2(this, x, y);

          break;
      }

      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };
  var curveCatmullRomOpen = (function custom(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
    }

    catmullRom.alpha = function (alpha) {
      return custom(+alpha);
    };

    return catmullRom;
  })(0.5);

  function LinearClosed(context) {
    this._context = context;
  }

  LinearClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._point) this._context.closePath();
    },
    point: function point(x, y) {
      x = +x, y = +y;
      if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
    }
  };
  function curveLinearClosed (context) {
    return new LinearClosed(context);
  }

  function sign(x) {
    return x < 0 ? -1 : 1;
  } // Calculate the slopes of the tangents (Hermite-type interpolation) based on
  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
  // NOV(II), P. 443, 1990.


  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0,
        h1 = x2 - that._x1,
        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
        p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  } // Calculate a one-sided slope.


  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  } // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
  // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


  function _point$3(that, t0, t1) {
    var x0 = that._x0,
        y0 = that._y0,
        x1 = that._x1,
        y1 = that._y1,
        dx = (x1 - x0) / 3;

    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
  }

  function MonotoneX(context) {
    this._context = context;
  }

  MonotoneX.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);

          break;

        case 3:
          _point$3(this, this._t0, slope2(this, this._t0));

          break;
      }

      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function point(x, y) {
      var t1 = NaN;
      x = +x, y = +y;
      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
          break;

        case 2:
          this._point = 3;

          _point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);

          break;

        default:
          _point$3(this, this._t0, t1 = slope3(this, x, y));

          break;
      }

      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
      this._t0 = t1;
    }
  };

  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }

  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
    MonotoneX.prototype.point.call(this, y, x);
  };

  function ReflectContext(context) {
    this._context = context;
  }

  ReflectContext.prototype = {
    moveTo: function moveTo(x, y) {
      this._context.moveTo(y, x);
    },
    closePath: function closePath() {
      this._context.closePath();
    },
    lineTo: function lineTo(x, y) {
      this._context.lineTo(y, x);
    },
    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
      this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
  };
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }

  function Natural(context) {
    this._context = context;
  }

  Natural.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function lineEnd() {
      var x = this._x,
          y = this._y,
          n = x.length;

      if (n) {
        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

        if (n === 2) {
          this._context.lineTo(x[1], y[1]);
        } else {
          var px = controlPoints(x),
              py = controlPoints(y);

          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
          }
        }
      }

      if (this._line || this._line !== 0 && n === 1) this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function point(x, y) {
      this._x.push(+x);

      this._y.push(+y);
    }
  }; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

  function controlPoints(x) {
    var i,
        n = x.length - 1,
        m,
        a = new Array(n),
        b = new Array(n),
        r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

    for (i = 1; i < n - 1; ++i) {
      a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    }

    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

    for (i = 1; i < n; ++i) {
      m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    }

    a[n - 1] = r[n - 1] / b[n - 1];

    for (i = n - 2; i >= 0; --i) {
      a[i] = (r[i] - a[i + 1]) / b[i];
    }

    b[n - 1] = (x[n] + a[n - 1]) / 2;

    for (i = 0; i < n - 1; ++i) {
      b[i] = 2 * x[i + 1] - a[i + 1];
    }

    return [a, b];
  }

  function curveNatural (context) {
    return new Natural(context);
  }

  function Step(context, t) {
    this._context = context;
    this._t = t;
  }

  Step.prototype = {
    areaStart: function areaStart() {
      this._line = 0;
    },
    areaEnd: function areaEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function point(x, y) {
      x = +x, y = +y;

      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
          break;

        case 1:
          this._point = 2;
        // proceed

        default:
          {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);

              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;

              this._context.lineTo(x1, this._y);

              this._context.lineTo(x1, y);
            }

            break;
          }
      }

      this._x = x, this._y = y;
    }
  };
  function curveStep (context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }

  var lookup$1 = {
    'basis': {
      curve: curveBasis
    },
    'basis-closed': {
      curve: curveBasisClosed
    },
    'basis-open': {
      curve: curveBasisOpen
    },
    'bundle': {
      curve: curveBundle,
      tension: 'beta',
      value: 0.85
    },
    'cardinal': {
      curve: curveCardinal,
      tension: 'tension',
      value: 0
    },
    'cardinal-open': {
      curve: curveCardinalOpen,
      tension: 'tension',
      value: 0
    },
    'cardinal-closed': {
      curve: curveCardinalClosed,
      tension: 'tension',
      value: 0
    },
    'catmull-rom': {
      curve: curveCatmullRom,
      tension: 'alpha',
      value: 0.5
    },
    'catmull-rom-closed': {
      curve: curveCatmullRomClosed,
      tension: 'alpha',
      value: 0.5
    },
    'catmull-rom-open': {
      curve: curveCatmullRomOpen,
      tension: 'alpha',
      value: 0.5
    },
    'linear': {
      curve: curveLinear
    },
    'linear-closed': {
      curve: curveLinearClosed
    },
    'monotone': {
      horizontal: monotoneY,
      vertical: monotoneX
    },
    'natural': {
      curve: curveNatural
    },
    'step': {
      curve: curveStep
    },
    'step-after': {
      curve: stepAfter
    },
    'step-before': {
      curve: stepBefore
    }
  };
  function curves(type, orientation, tension) {
    var entry = hasOwnProperty$1(lookup$1, type) && lookup$1[type],
        curve = null;

    if (entry) {
      curve = entry.curve || entry[orientation || 'vertical'];

      if (entry.tension && tension != null) {
        curve = curve[entry.tension](tension);
      }
    }

    return curve;
  }

  // Path parsing and rendering code adapted from fabric.js -- Thanks!
  var cmdlen = {
    m: 2,
    l: 2,
    h: 1,
    v: 1,
    c: 6,
    s: 4,
    q: 4,
    t: 2,
    a: 7
  },
      regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\d)([-+])/g, /\s|,|###/];
  function pathParse (pathstr) {
    var result = [],
        path,
        curr,
        chunks,
        parsed,
        param,
        cmd,
        len,
        i,
        j,
        n,
        m; // First, break path into command sequence

    path = pathstr.slice().replace(regexp[0], '###$1').split(regexp[1]).slice(1); // Next, parse each command in turn

    for (i = 0, n = path.length; i < n; ++i) {
      curr = path[i];
      chunks = curr.slice(1).trim().replace(regexp[2], '$1###$2').split(regexp[3]);
      cmd = curr.charAt(0);
      parsed = [cmd];

      for (j = 0, m = chunks.length; j < m; ++j) {
        if ((param = +chunks[j]) === param) {
          // not NaN
          parsed.push(param);
        }
      }

      len = cmdlen[cmd.toLowerCase()];

      if (parsed.length - 1 > len) {
        for (j = 1, m = parsed.length; j < m; j += len) {
          result.push([cmd].concat(parsed.slice(j, j + len)));
        }
      } else {
        result.push(parsed);
      }
    }

    return result;
  }

  var DegToRad = Math.PI / 180;
  var Epsilon = 1e-14;
  var HalfPi = Math.PI / 2;
  var Tau = Math.PI * 2;
  var HalfSqrt3 = Math.sqrt(3) / 2;

  var segmentCache = {};
  var bezierCache = {};
  var join = [].join; // Copied from Inkscape svgtopdf, thanks!

  function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
    var key = join.call(arguments);

    if (segmentCache[key]) {
      return segmentCache[key];
    }

    var th = rotateX * DegToRad;
    var sin_th = Math.sin(th);
    var cos_th = Math.cos(th);
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
    var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
    var pl = px * px / (rx * rx) + py * py / (ry * ry);

    if (pl > 1) {
      pl = Math.sqrt(pl);
      rx *= pl;
      ry *= pl;
    }

    var a00 = cos_th / rx;
    var a01 = sin_th / rx;
    var a10 = -sin_th / ry;
    var a11 = cos_th / ry;
    var x0 = a00 * ox + a01 * oy;
    var y0 = a10 * ox + a11 * oy;
    var x1 = a00 * x + a01 * y;
    var y1 = a10 * x + a11 * y;
    var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
    var sfactor_sq = 1 / d - 0.25;
    if (sfactor_sq < 0) sfactor_sq = 0;
    var sfactor = Math.sqrt(sfactor_sq);
    if (sweep == large) sfactor = -sfactor;
    var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
    var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
    var th0 = Math.atan2(y0 - yc, x0 - xc);
    var th1 = Math.atan2(y1 - yc, x1 - xc);
    var th_arc = th1 - th0;

    if (th_arc < 0 && sweep === 1) {
      th_arc += Tau;
    } else if (th_arc > 0 && sweep === 0) {
      th_arc -= Tau;
    }

    var segs = Math.ceil(Math.abs(th_arc / (HalfPi + 0.001)));
    var result = [];

    for (var i = 0; i < segs; ++i) {
      var th2 = th0 + i * th_arc / segs;
      var th3 = th0 + (i + 1) * th_arc / segs;
      result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
    }

    return segmentCache[key] = result;
  }
  function bezier(params) {
    var key = join.call(params);

    if (bezierCache[key]) {
      return bezierCache[key];
    }

    var cx = params[0],
        cy = params[1],
        th0 = params[2],
        th1 = params[3],
        rx = params[4],
        ry = params[5],
        sin_th = params[6],
        cos_th = params[7];
    var a00 = cos_th * rx;
    var a01 = -sin_th * ry;
    var a10 = sin_th * rx;
    var a11 = cos_th * ry;
    var cos_th0 = Math.cos(th0);
    var sin_th0 = Math.sin(th0);
    var cos_th1 = Math.cos(th1);
    var sin_th1 = Math.sin(th1);
    var th_half = 0.5 * (th1 - th0);
    var sin_th_h2 = Math.sin(th_half * 0.5);
    var t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
    var x1 = cx + cos_th0 - t * sin_th0;
    var y1 = cy + sin_th0 + t * cos_th0;
    var x3 = cx + cos_th1;
    var y3 = cy + sin_th1;
    var x2 = x3 + t * sin_th1;
    var y2 = y3 - t * cos_th1;
    return bezierCache[key] = [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
  }

  var temp = ['l', 0, 0, 0, 0, 0, 0, 0];

  function scale(current, sX, sY) {
    var c = temp[0] = current[0];

    if (c === 'a' || c === 'A') {
      temp[1] = sX * current[1];
      temp[2] = sY * current[2];
      temp[3] = current[3];
      temp[4] = current[4];
      temp[5] = current[5];
      temp[6] = sX * current[6];
      temp[7] = sY * current[7];
    } else if (c === 'h' || c === 'H') {
      temp[1] = sX * current[1];
    } else if (c === 'v' || c === 'V') {
      temp[1] = sY * current[1];
    } else {
      for (var i = 1, n = current.length; i < n; ++i) {
        temp[i] = (i % 2 == 1 ? sX : sY) * current[i];
      }
    }

    return temp;
  }

  function pathRender (context, path, l, t, sX, sY) {
    var current,
        // current instruction
    previous = null,
        x = 0,
        // current x
    y = 0,
        // current y
    controlX = 0,
        // current control point x
    controlY = 0,
        // current control point y
    tempX,
        tempY,
        tempControlX,
        tempControlY;
    if (l == null) l = 0;
    if (t == null) t = 0;
    if (sX == null) sX = 1;
    if (sY == null) sY = sX;
    if (context.beginPath) context.beginPath();

    for (var i = 0, len = path.length; i < len; ++i) {
      current = path[i];

      if (sX !== 1 || sY !== 1) {
        current = scale(current, sX, sY);
      }

      switch (current[0]) {
        // first letter
        case 'l':
          // lineto, relative
          x += current[1];
          y += current[2];
          context.lineTo(x + l, y + t);
          break;

        case 'L':
          // lineto, absolute
          x = current[1];
          y = current[2];
          context.lineTo(x + l, y + t);
          break;

        case 'h':
          // horizontal lineto, relative
          x += current[1];
          context.lineTo(x + l, y + t);
          break;

        case 'H':
          // horizontal lineto, absolute
          x = current[1];
          context.lineTo(x + l, y + t);
          break;

        case 'v':
          // vertical lineto, relative
          y += current[1];
          context.lineTo(x + l, y + t);
          break;

        case 'V':
          // verical lineto, absolute
          y = current[1];
          context.lineTo(x + l, y + t);
          break;

        case 'm':
          // moveTo, relative
          x += current[1];
          y += current[2];
          context.moveTo(x + l, y + t);
          break;

        case 'M':
          // moveTo, absolute
          x = current[1];
          y = current[2];
          context.moveTo(x + l, y + t);
          break;

        case 'c':
          // bezierCurveTo, relative
          tempX = x + current[5];
          tempY = y + current[6];
          controlX = x + current[3];
          controlY = y + current[4];
          context.bezierCurveTo(x + current[1] + l, // x1
          y + current[2] + t, // y1
          controlX + l, // x2
          controlY + t, // y2
          tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          break;

        case 'C':
          // bezierCurveTo, absolute
          x = current[5];
          y = current[6];
          controlX = current[3];
          controlY = current[4];
          context.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
          break;

        case 's':
          // shorthand cubic bezierCurveTo, relative
          // transform to absolute x,y
          tempX = x + current[3];
          tempY = y + current[4]; // calculate reflection of previous control points

          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
          context.bezierCurveTo(controlX + l, controlY + t, x + current[1] + l, y + current[2] + t, tempX + l, tempY + t); // set control point to 2nd one of this command
          // the first control point is assumed to be the reflection of
          // the second control point on the previous command relative
          // to the current point.

          controlX = x + current[1];
          controlY = y + current[2];
          x = tempX;
          y = tempY;
          break;

        case 'S':
          // shorthand cubic bezierCurveTo, absolute
          tempX = current[3];
          tempY = current[4]; // calculate reflection of previous control points

          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
          context.bezierCurveTo(controlX + l, controlY + t, current[1] + l, current[2] + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY; // set control point to 2nd one of this command
          // the first control point is assumed to be the reflection of
          // the second control point on the previous command relative
          // to the current point.

          controlX = current[1];
          controlY = current[2];
          break;

        case 'q':
          // quadraticCurveTo, relative
          // transform to absolute x,y
          tempX = x + current[3];
          tempY = y + current[4];
          controlX = x + current[1];
          controlY = y + current[2];
          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          break;

        case 'Q':
          // quadraticCurveTo, absolute
          tempX = current[3];
          tempY = current[4];
          context.quadraticCurveTo(current[1] + l, current[2] + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          controlX = current[1];
          controlY = current[2];
          break;

        case 't':
          // shorthand quadraticCurveTo, relative
          // transform to absolute x,y
          tempX = x + current[1];
          tempY = y + current[2];

          if (previous[0].match(/[QqTt]/) === null) {
            // If there is no previous command or if the previous command was not a Q, q, T or t,
            // assume the control point is coincident with the current point
            controlX = x;
            controlY = y;
          } else if (previous[0] === 't') {
            // calculate reflection of previous control points for t
            controlX = 2 * x - tempControlX;
            controlY = 2 * y - tempControlY;
          } else if (previous[0] === 'q') {
            // calculate reflection of previous control points for q
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
          }

          tempControlX = controlX;
          tempControlY = controlY;
          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          controlX = x + current[1];
          controlY = y + current[2];
          break;

        case 'T':
          tempX = current[1];
          tempY = current[2]; // calculate reflection of previous control points

          controlX = 2 * x - controlX;
          controlY = 2 * y - controlY;
          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);
          x = tempX;
          y = tempY;
          break;

        case 'a':
          drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + x + l, current[7] + y + t]);
          x += current[6];
          y += current[7];
          break;

        case 'A':
          drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + l, current[7] + t]);
          x = current[6];
          y = current[7];
          break;

        case 'z':
        case 'Z':
          context.closePath();
          break;
      }

      previous = current;
    }
  }

  function drawArc(context, x, y, coords) {
    var seg = segments(coords[5], // end x
    coords[6], // end y
    coords[0], // radius x
    coords[1], // radius y
    coords[3], // large flag
    coords[4], // sweep flag
    coords[2], // rotation
    x, y);

    for (var i = 0; i < seg.length; ++i) {
      var bez = bezier(seg[i]);
      context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
    }
  }

  var Tan30 = 0.5773502691896257;
  var builtins = {
    'circle': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2;
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, Tau);
      }
    },
    'cross': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            s = r / 2.5;
        context.moveTo(-r, -s);
        context.lineTo(-r, s);
        context.lineTo(-s, s);
        context.lineTo(-s, r);
        context.lineTo(s, r);
        context.lineTo(s, s);
        context.lineTo(r, s);
        context.lineTo(r, -s);
        context.lineTo(s, -s);
        context.lineTo(s, -r);
        context.lineTo(-s, -r);
        context.lineTo(-s, -s);
        context.closePath();
      }
    },
    'diamond': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2;
        context.moveTo(-r, 0);
        context.lineTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.closePath();
      }
    },
    'square': {
      draw: function draw(context, size) {
        var w = Math.sqrt(size),
            x = -w / 2;
        context.rect(x, x, w, w);
      }
    },
    'arrow': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            s = r / 7,
            t = r / 2.5,
            v = r / 8;
        context.moveTo(-s, r);
        context.lineTo(s, r);
        context.lineTo(s, -v);
        context.lineTo(t, -v);
        context.lineTo(0, -r);
        context.lineTo(-t, -v);
        context.lineTo(-s, -v);
        context.closePath();
      }
    },
    'wedge': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            h = HalfSqrt3 * r,
            o = h - r * Tan30,
            b = r / 4;
        context.moveTo(0, -h - o);
        context.lineTo(-b, h - o);
        context.lineTo(b, h - o);
        context.closePath();
      }
    },
    'triangle': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            h = HalfSqrt3 * r,
            o = h - r * Tan30;
        context.moveTo(0, -h - o);
        context.lineTo(-r, h - o);
        context.lineTo(r, h - o);
        context.closePath();
      }
    },
    'triangle-up': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            h = HalfSqrt3 * r;
        context.moveTo(0, -h);
        context.lineTo(-r, h);
        context.lineTo(r, h);
        context.closePath();
      }
    },
    'triangle-down': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            h = HalfSqrt3 * r;
        context.moveTo(0, h);
        context.lineTo(-r, -h);
        context.lineTo(r, -h);
        context.closePath();
      }
    },
    'triangle-right': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            h = HalfSqrt3 * r;
        context.moveTo(h, 0);
        context.lineTo(-h, -r);
        context.lineTo(-h, r);
        context.closePath();
      }
    },
    'triangle-left': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2,
            h = HalfSqrt3 * r;
        context.moveTo(-h, 0);
        context.lineTo(h, -r);
        context.lineTo(h, r);
        context.closePath();
      }
    },
    'stroke': {
      draw: function draw(context, size) {
        var r = Math.sqrt(size) / 2;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
      }
    }
  };
  function symbols(_) {
    return hasOwnProperty$1(builtins, _) ? builtins[_] : customSymbol(_);
  }
  var custom = {};

  function customSymbol(path) {
    if (!hasOwnProperty$1(custom, path)) {
      var parsed = pathParse(path);
      custom[path] = {
        draw: function draw(context, size) {
          pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);
        }
      };
    }

    return custom[path];
  }

  var C = 0.448084975506; // C = 1 - c

  function rectangleX(d) {
    return d.x;
  }

  function rectangleY(d) {
    return d.y;
  }

  function rectangleWidth(d) {
    return d.width;
  }

  function rectangleHeight(d) {
    return d.height;
  }

  function number$1(_) {
    return typeof _ === 'function' ? _ : function () {
      return +_;
    };
  }

  function clamp(value, min, max) {
    return Math.max(min, Math.min(value, max));
  }

  function vg_rect () {
    var x = rectangleX,
        y = rectangleY,
        width = rectangleWidth,
        height = rectangleHeight,
        crTL = number$1(0),
        crTR = crTL,
        crBL = crTL,
        crBR = crTL,
        context = null;

    function rectangle(_, x0, y0) {
      var buffer,
          x1 = x0 != null ? x0 : +x.call(this, _),
          y1 = y0 != null ? y0 : +y.call(this, _),
          w = +width.call(this, _),
          h = +height.call(this, _),
          s = Math.min(w, h) / 2,
          tl = clamp(+crTL.call(this, _), 0, s),
          tr = clamp(+crTR.call(this, _), 0, s),
          bl = clamp(+crBL.call(this, _), 0, s),
          br = clamp(+crBR.call(this, _), 0, s);
      if (!context) context = buffer = path();

      if (tl <= 0 && tr <= 0 && bl <= 0 && br <= 0) {
        context.rect(x1, y1, w, h);
      } else {
        var x2 = x1 + w,
            y2 = y1 + h;
        context.moveTo(x1 + tl, y1);
        context.lineTo(x2 - tr, y1);
        context.bezierCurveTo(x2 - C * tr, y1, x2, y1 + C * tr, x2, y1 + tr);
        context.lineTo(x2, y2 - br);
        context.bezierCurveTo(x2, y2 - C * br, x2 - C * br, y2, x2 - br, y2);
        context.lineTo(x1 + bl, y2);
        context.bezierCurveTo(x1 + C * bl, y2, x1, y2 - C * bl, x1, y2 - bl);
        context.lineTo(x1, y1 + tl);
        context.bezierCurveTo(x1, y1 + C * tl, x1 + C * tl, y1, x1 + tl, y1);
        context.closePath();
      }

      if (buffer) {
        context = null;
        return buffer + '' || null;
      }
    }

    rectangle.x = function (_) {
      if (arguments.length) {
        x = number$1(_);
        return rectangle;
      } else {
        return x;
      }
    };

    rectangle.y = function (_) {
      if (arguments.length) {
        y = number$1(_);
        return rectangle;
      } else {
        return y;
      }
    };

    rectangle.width = function (_) {
      if (arguments.length) {
        width = number$1(_);
        return rectangle;
      } else {
        return width;
      }
    };

    rectangle.height = function (_) {
      if (arguments.length) {
        height = number$1(_);
        return rectangle;
      } else {
        return height;
      }
    };

    rectangle.cornerRadius = function (tl, tr, br, bl) {
      if (arguments.length) {
        crTL = number$1(tl);
        crTR = tr != null ? number$1(tr) : crTL;
        crBR = br != null ? number$1(br) : crTL;
        crBL = bl != null ? number$1(bl) : crTR;
        return rectangle;
      } else {
        return crTL;
      }
    };

    rectangle.context = function (_) {
      if (arguments.length) {
        context = _ == null ? null : _;
        return rectangle;
      } else {
        return context;
      }
    };

    return rectangle;
  }

  function vg_trail () {
    var x,
        y,
        size,
        defined,
        context = null,
        ready,
        x1,
        y1,
        r1;

    function point(x2, y2, w2) {
      var r2 = w2 / 2;

      if (ready) {
        var ux = y1 - y2,
            uy = x2 - x1;

        if (ux || uy) {
          // get normal vector
          var ud = Math.sqrt(ux * ux + uy * uy),
              rx = (ux /= ud) * r1,
              ry = (uy /= ud) * r1,
              t = Math.atan2(uy, ux); // draw segment

          context.moveTo(x1 - rx, y1 - ry);
          context.lineTo(x2 - ux * r2, y2 - uy * r2);
          context.arc(x2, y2, r2, t - Math.PI, t);
          context.lineTo(x1 + rx, y1 + ry);
          context.arc(x1, y1, r1, t, t + Math.PI);
        } else {
          context.arc(x2, y2, r2, 0, Tau);
        }

        context.closePath();
      } else {
        ready = 1;
      }

      x1 = x2;
      y1 = y2;
      r1 = r2;
    }

    function trail(data) {
      var i,
          n = data.length,
          d,
          defined0 = false,
          buffer;
      if (context == null) context = buffer = path();

      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) ready = 0;
        }

        if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
      }

      if (buffer) {
        context = null;
        return buffer + '' || null;
      }
    }

    trail.x = function (_) {
      if (arguments.length) {
        x = _;
        return trail;
      } else {
        return x;
      }
    };

    trail.y = function (_) {
      if (arguments.length) {
        y = _;
        return trail;
      } else {
        return y;
      }
    };

    trail.size = function (_) {
      if (arguments.length) {
        size = _;
        return trail;
      } else {
        return size;
      }
    };

    trail.defined = function (_) {
      if (arguments.length) {
        defined = _;
        return trail;
      } else {
        return defined;
      }
    };

    trail.context = function (_) {
      if (arguments.length) {
        if (_ == null) {
          context = null;
        } else {
          context = _;
        }

        return trail;
      } else {
        return context;
      }
    };

    return trail;
  }

  function value(a, b) {
    return a != null ? a : b;
  }

  var x$1 = function x(item) {
    return item.x || 0;
  },
      y$1 = function y(item) {
    return item.y || 0;
  },
      w = function w(item) {
    return item.width || 0;
  },
      h = function h(item) {
    return item.height || 0;
  },
      xw = function xw(item) {
    return (item.x || 0) + (item.width || 0);
  },
      yh = function yh(item) {
    return (item.y || 0) + (item.height || 0);
  },
      sa = function sa(item) {
    return item.startAngle || 0;
  },
      ea = function ea(item) {
    return item.endAngle || 0;
  },
      pa = function pa(item) {
    return item.padAngle || 0;
  },
      ir = function ir(item) {
    return item.innerRadius || 0;
  },
      or = function or(item) {
    return item.outerRadius || 0;
  },
      cr = function cr(item) {
    return item.cornerRadius || 0;
  },
      tl = function tl(item) {
    return value(item.cornerRadiusTopLeft, item.cornerRadius) || 0;
  },
      tr = function tr(item) {
    return value(item.cornerRadiusTopRight, item.cornerRadius) || 0;
  },
      br = function br(item) {
    return value(item.cornerRadiusBottomRight, item.cornerRadius) || 0;
  },
      bl = function bl(item) {
    return value(item.cornerRadiusBottomLeft, item.cornerRadius) || 0;
  },
      sz = function sz(item) {
    return value(item.size, 64);
  },
      ts = function ts(item) {
    return item.size || 1;
  },
      def = function def(item) {
    return !(item.defined === false);
  },
      type = function type(item) {
    return symbols(item.shape || 'circle');
  };

  var arcShape = d3_arc().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr),
      areavShape = d3_area().x(x$1).y1(y$1).y0(yh).defined(def),
      areahShape = d3_area().y(y$1).x1(x$1).x0(xw).defined(def),
      lineShape = d3_line().x(x$1).y(y$1).defined(def),
      rectShape = vg_rect().x(x$1).y(y$1).width(w).height(h).cornerRadius(tl, tr, br, bl),
      symbolShape = d3_symbol().type(type).size(sz),
      trailShape = vg_trail().x(x$1).y(y$1).defined(def).size(ts);
  function hasCornerRadius(item) {
    return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;
  }
  function arc(context, item) {
    return arcShape.context(context)(item);
  }
  function area(context, items) {
    var item = items[0],
        interp = item.interpolate || 'linear';
    return (item.orient === 'horizontal' ? areahShape : areavShape).curve(curves(interp, item.orient, item.tension)).context(context)(items);
  }
  function line(context, items) {
    var item = items[0],
        interp = item.interpolate || 'linear';
    return lineShape.curve(curves(interp, item.orient, item.tension)).context(context)(items);
  }
  function rectangle(context, item, x, y) {
    return rectShape.context(context)(item, x, y);
  }
  function shape(context, item) {
    return (item.mark.shape || item.shape).context(context)(item);
  }
  function symbol(context, item) {
    return symbolShape.context(context)(item);
  }
  function trail(context, items) {
    return trailShape.context(context)(items);
  }

  function boundStroke (bounds, item, miter) {
    if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
      var sw = item.strokeWidth != null ? +item.strokeWidth : 1;
      bounds.expand(sw + (miter ? miterAdjustment(item, sw) : 0));
    }

    return bounds;
  }

  function miterAdjustment(item, strokeWidth) {
    // TODO: more sophisticated adjustment? Or miter support in boundContext?
    return item.strokeJoin && item.strokeJoin !== 'miter' ? 0 : strokeWidth;
  }

  var bounds,
      lx,
      ly,
      circleThreshold = Tau - 1e-8;
  function context(_) {
    bounds = _;
    return context;
  }

  function noop$1() {}

  function add$1(x, y) {
    bounds.add(x, y);
  }

  function addL(x, y) {
    add$1(lx = x, ly = y);
  }

  function addX(x) {
    add$1(x, bounds.y1);
  }

  function addY(y) {
    add$1(bounds.x1, y);
  }

  context.beginPath = noop$1;
  context.closePath = noop$1;
  context.moveTo = addL;
  context.lineTo = addL;

  context.rect = function (x, y, w, h) {
    add$1(x + w, y + h);
    addL(x, y);
  };

  context.quadraticCurveTo = function (x1, y1, x2, y2) {
    quadExtrema(lx, x1, x2, addX);
    quadExtrema(ly, y1, y2, addY);
    addL(x2, y2);
  };

  function quadExtrema(x0, x1, x2, cb) {
    var t = (x0 - x1) / (x0 + x2 - 2 * x1);
    if (0 < t && t < 1) cb(x0 + (x1 - x0) * t);
  }

  context.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {
    cubicExtrema(lx, x1, x2, x3, addX);
    cubicExtrema(ly, y1, y2, y3, addY);
    addL(x3, y3);
  };

  function cubicExtrema(x0, x1, x2, x3, cb) {
    var a = x3 - x0 + 3 * x1 - 3 * x2,
        b = x0 + x2 - 2 * x1,
        c = x0 - x1;
    var t0 = 0,
        t1 = 0,
        r; // solve for parameter t

    if (Math.abs(a) > Epsilon) {
      // quadratic equation
      r = b * b + c * a;

      if (r >= 0) {
        r = Math.sqrt(r);
        t0 = (-b + r) / a;
        t1 = (-b - r) / a;
      }
    } else {
      // linear equation
      t0 = 0.5 * c / b;
    } // calculate position


    if (0 < t0 && t0 < 1) cb(cubic(t0, x0, x1, x2, x3));
    if (0 < t1 && t1 < 1) cb(cubic(t1, x0, x1, x2, x3));
  }

  function cubic(t, x0, x1, x2, x3) {
    var s = 1 - t,
        s2 = s * s,
        t2 = t * t;
    return s2 * s * x0 + 3 * s2 * t * x1 + 3 * s * t2 * x2 + t2 * t * x3;
  }

  context.arc = function (cx, cy, r, sa, ea, ccw) {
    // store last point on path
    lx = r * Math.cos(ea) + cx;
    ly = r * Math.sin(ea) + cy;

    if (Math.abs(ea - sa) > circleThreshold) {
      // treat as full circle
      add$1(cx - r, cy - r);
      add$1(cx + r, cy + r);
    } else {
      var update = function update(a) {
        return add$1(r * Math.cos(a) + cx, r * Math.sin(a) + cy);
      };

      var s, i; // sample end points

      update(sa);
      update(ea); // sample interior points aligned with 90 degrees

      if (ea !== sa) {
        sa = sa % Tau;
        if (sa < 0) sa += Tau;
        ea = ea % Tau;
        if (ea < 0) ea += Tau;

        if (ea < sa) {
          ccw = !ccw; // flip direction

          s = sa;
          sa = ea;
          ea = s; // swap end-points
        }

        if (ccw) {
          ea -= Tau;
          s = sa - sa % HalfPi;

          for (i = 0; i < 4 && s > ea; ++i, s -= HalfPi) {
            update(s);
          }
        } else {
          s = sa - sa % HalfPi + HalfPi;

          for (i = 0; i < 4 && s < ea; ++i, s = s + HalfPi) {
            update(s);
          }
        }
      }
    }
  };

  var context$1 = (context$1 = canvas$1(1, 1)) ? context$1.getContext('2d') : null;

  var b = new Bounds();
  function intersectPath(draw) {
    return function (item, brush) {
      // rely on (inaccurate) bounds intersection if no context
      if (!context$1) return true; // add path to offscreen graphics context

      draw(context$1, item); // get bounds intersection region

      b.clear().union(item.bounds).intersect(brush).round();
      var x1 = b.x1,
          y1 = b.y1,
          x2 = b.x2,
          y2 = b.y2; // iterate over intersection region
      // perform fine grained inclusion test

      for (var y = y1; y <= y2; ++y) {
        for (var x = x1; x <= x2; ++x) {
          if (context$1.isPointInPath(x, y)) {
            return true;
          }
        }
      } // false if no hits in intersection region


      return false;
    };
  }
  function intersectPoint(item, box) {
    return box.contains(item.x || 0, item.y || 0);
  }
  function intersectRect(item, box) {
    var x = item.x || 0,
        y = item.y || 0,
        w = item.width || 0,
        h = item.height || 0;
    return box.intersects(b.set(x, y, x + w, y + h));
  }
  function intersectRule(item, box) {
    var x = item.x || 0,
        y = item.y || 0,
        x2 = item.x2 != null ? item.x2 : x,
        y2 = item.y2 != null ? item.y2 : y;
    return intersectBoxLine(box, x, y, x2, y2);
  }
  function intersectBoxLine(box, x, y, u, v) {
    var x1 = box.x1,
        y1 = box.y1,
        x2 = box.x2,
        y2 = box.y2,
        dx = u - x,
        dy = v - y;
    var t0 = 0,
        t1 = 1,
        p,
        q,
        r,
        e;

    for (e = 0; e < 4; ++e) {
      if (e === 0) {
        p = -dx;
        q = -(x1 - x);
      }

      if (e === 1) {
        p = dx;
        q = x2 - x;
      }

      if (e === 2) {
        p = -dy;
        q = -(y1 - y);
      }

      if (e === 3) {
        p = dy;
        q = y2 - y;
      }

      if (Math.abs(p) < 1e-10 && q < 0) return false;
      r = q / p;

      if (p < 0) {
        if (r > t1) return false;else if (r > t0) t0 = r;
      } else if (p > 0) {
        if (r < t0) return false;else if (r < t1) t1 = r;
      }
    }

    return true;
  }

  function blend (context, item) {
    context.globalCompositeOperation = item.blend || 'source-over';
  }

  function v$1(value, dflt) {
    return value == null ? dflt : value;
  }

  function addStops(gradient, stops) {
    var n = stops.length;

    for (var i = 0; i < n; ++i) {
      gradient.addColorStop(stops[i].offset, stops[i].color);
    }

    return gradient;
  }

  function gradient (context, spec, bounds) {
    var w = bounds.width(),
        h = bounds.height();
    var gradient;

    if (spec.gradient === 'radial') {
      gradient = context.createRadialGradient(bounds.x1 + v$1(spec.x1, 0.5) * w, bounds.y1 + v$1(spec.y1, 0.5) * h, Math.max(w, h) * v$1(spec.r1, 0), bounds.x1 + v$1(spec.x2, 0.5) * w, bounds.y1 + v$1(spec.y2, 0.5) * h, Math.max(w, h) * v$1(spec.r2, 0.5));
    } else {
      // linear gradient
      var x1 = v$1(spec.x1, 0),
          y1 = v$1(spec.y1, 0),
          x2 = v$1(spec.x2, 1),
          y2 = v$1(spec.y2, 0);

      if (x1 === x2 || y1 === y2 || w === h) {
        // axis aligned: use normal gradient
        gradient = context.createLinearGradient(bounds.x1 + x1 * w, bounds.y1 + y1 * h, bounds.x1 + x2 * w, bounds.y1 + y2 * h);
      } else {
        // not axis aligned: render gradient into a pattern (#2365)
        // this allows us to use normalized bounding box coordinates
        var image = canvas$1(Math.ceil(w), Math.ceil(h)),
            ictx = image.getContext('2d');
        ictx.scale(w, h);
        ictx.fillStyle = addStops(ictx.createLinearGradient(x1, y1, x2, y2), spec.stops);
        ictx.fillRect(0, 0, w, h);
        return context.createPattern(image, 'no-repeat');
      }
    }

    return addStops(gradient, spec.stops);
  }

  function color (context, item, value) {
    return isGradient(value) ? gradient(context, value, item.bounds) : value;
  }

  function fill (context, item, opacity) {
    opacity *= item.fillOpacity == null ? 1 : item.fillOpacity;

    if (opacity > 0) {
      context.globalAlpha = opacity;
      context.fillStyle = color(context, item, item.fill);
      return true;
    } else {
      return false;
    }
  }

  var Empty$1 = [];
  function stroke (context, item, opacity) {
    var lw = (lw = item.strokeWidth) != null ? lw : 1;
    if (lw <= 0) return false;
    opacity *= item.strokeOpacity == null ? 1 : item.strokeOpacity;

    if (opacity > 0) {
      context.globalAlpha = opacity;
      context.strokeStyle = color(context, item, item.stroke);
      context.lineWidth = lw;
      context.lineCap = item.strokeCap || 'butt';
      context.lineJoin = item.strokeJoin || 'miter';
      context.miterLimit = item.strokeMiterLimit || 10;

      if (context.setLineDash) {
        context.setLineDash(item.strokeDash || Empty$1);
        context.lineDashOffset = item.strokeDashOffset || 0;
      }

      return true;
    } else {
      return false;
    }
  }

  function compare$3(a, b) {
    return a.zindex - b.zindex || a.index - b.index;
  }

  function zorder(scene) {
    if (!scene.zdirty) return scene.zitems;
    var items = scene.items,
        output = [],
        item,
        i,
        n;

    for (i = 0, n = items.length; i < n; ++i) {
      item = items[i];
      item.index = i;
      if (item.zindex) output.push(item);
    }

    scene.zdirty = false;
    return scene.zitems = output.sort(compare$3);
  }
  function visit(scene, visitor) {
    var items = scene.items,
        i,
        n;
    if (!items || !items.length) return;
    var zitems = zorder(scene);

    if (zitems && zitems.length) {
      for (i = 0, n = items.length; i < n; ++i) {
        if (!items[i].zindex) visitor(items[i]);
      }

      items = zitems;
    }

    for (i = 0, n = items.length; i < n; ++i) {
      visitor(items[i]);
    }
  }
  function pickVisit(scene, visitor) {
    var items = scene.items,
        hit,
        i;
    if (!items || !items.length) return null;
    var zitems = zorder(scene);
    if (zitems && zitems.length) items = zitems;

    for (i = items.length; --i >= 0;) {
      if (hit = visitor(items[i])) return hit;
    }

    if (items === zitems) {
      for (items = scene.items, i = items.length; --i >= 0;) {
        if (!items[i].zindex) {
          if (hit = visitor(items[i])) return hit;
        }
      }
    }

    return null;
  }

  function drawAll(path) {
    return function (context, scene, bounds) {
      visit(scene, function (item) {
        if (!bounds || bounds.intersects(item.bounds)) {
          drawPath(path, context, item, item);
        }
      });
    };
  }
  function drawOne(path) {
    return function (context, scene, bounds) {
      if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {
        drawPath(path, context, scene.items[0], scene.items);
      }
    };
  }

  function drawPath(path, context, item, items) {
    var opacity = item.opacity == null ? 1 : item.opacity;
    if (opacity === 0) return;
    if (path(context, items)) return;
    blend(context, item);

    if (item.fill && fill(context, item, opacity)) {
      context.fill();
    }

    if (item.stroke && stroke(context, item, opacity)) {
      context.stroke();
    }
  }

  function pick(test) {
    test = test || truthy;
    return function (context, scene, x, y, gx, gy) {
      x *= context.pixelRatio;
      y *= context.pixelRatio;
      return pickVisit(scene, function (item) {
        var b = item.bounds; // first hit test against bounding box

        if (b && !b.contains(gx, gy) || !b) return; // if in bounding box, perform more careful test

        if (test(context, item, x, y, gx, gy)) return item;
      });
    };
  }
  function hitPath(path, filled) {
    return function (context, o, x, y) {
      var item = Array.isArray(o) ? o[0] : o,
          fill = filled == null ? item.fill : filled,
          stroke = item.stroke && context.isPointInStroke,
          lw,
          lc;

      if (stroke) {
        lw = item.strokeWidth;
        lc = item.strokeCap;
        context.lineWidth = lw != null ? lw : 1;
        context.lineCap = lc != null ? lc : 'butt';
      }

      return path(context, o) ? false : fill && context.isPointInPath(x, y) || stroke && context.isPointInStroke(x, y);
    };
  }
  function pickPath(path) {
    return pick(hitPath(path));
  }

  function translate(x, y) {
    return 'translate(' + x + ',' + y + ')';
  }
  function rotate(a) {
    return 'rotate(' + a + ')';
  }
  function scale$1(scaleX, scaleY) {
    return 'scale(' + scaleX + ',' + scaleY + ')';
  }
  function translateItem(item) {
    return translate(item.x || 0, item.y || 0);
  }
  function transformItem(item) {
    return translate(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '') + (item.scaleX || item.scaleY ? ' ' + scale$1(item.scaleX || 1, item.scaleY || 1) : '');
  }

  function markItemPath (type, shape, isect) {
    function attr(emit, item) {
      emit('transform', transformItem(item));
      emit('d', shape(null, item));
    }

    function bound(bounds, item) {
      var x = item.x || 0,
          y = item.y || 0;
      shape(context(bounds), item);
      boundStroke(bounds, item).translate(x, y);

      if (item.angle) {
        bounds.rotate(item.angle * DegToRad, x, y);
      }

      return bounds;
    }

    function draw(context, item) {
      var x = item.x || 0,
          y = item.y || 0,
          a = item.angle || 0;
      context.translate(x, y);
      if (a) context.rotate(a *= DegToRad);
      context.beginPath();
      shape(context, item);
      if (a) context.rotate(-a);
      context.translate(-x, -y);
    }

    return {
      type: type,
      tag: 'path',
      nested: false,
      attr: attr,
      bound: bound,
      draw: drawAll(draw),
      pick: pickPath(draw),
      isect: isect || intersectPath(draw)
    };
  }

  var arc$1 = markItemPath('arc', arc);

  function pickArea(a, p) {
    var v = a[0].orient === 'horizontal' ? p[1] : p[0],
        z = a[0].orient === 'horizontal' ? 'y' : 'x',
        i = a.length,
        min = +Infinity,
        hit,
        d;

    while (--i >= 0) {
      if (a[i].defined === false) continue;
      d = Math.abs(a[i][z] - v);

      if (d < min) {
        min = d;
        hit = a[i];
      }
    }

    return hit;
  }
  function pickLine(a, p) {
    var t = Math.pow(a[0].strokeWidth || 1, 2),
        i = a.length,
        dx,
        dy,
        dd;

    while (--i >= 0) {
      if (a[i].defined === false) continue;
      dx = a[i].x - p[0];
      dy = a[i].y - p[1];
      dd = dx * dx + dy * dy;
      if (dd < t) return a[i];
    }

    return null;
  }
  function pickTrail(a, p) {
    var i = a.length,
        dx,
        dy,
        dd;

    while (--i >= 0) {
      if (a[i].defined === false) continue;
      dx = a[i].x - p[0];
      dy = a[i].y - p[1];
      dd = dx * dx + dy * dy;
      dx = a[i].size || 1;
      if (dd < dx * dx) return a[i];
    }

    return null;
  }

  function markMultiItemPath (type, shape, tip) {
    function attr(emit, item) {
      var items = item.mark.items;
      if (items.length) emit('d', shape(null, items));
    }

    function bound(bounds, mark) {
      var items = mark.items;

      if (items.length === 0) {
        return bounds;
      } else {
        shape(context(bounds), items);
        return boundStroke(bounds, items[0]);
      }
    }

    function draw(context, items) {
      context.beginPath();
      shape(context, items);
    }

    var hit = hitPath(draw);

    function pick(context, scene, x, y, gx, gy) {
      var items = scene.items,
          b = scene.bounds;

      if (!items || !items.length || b && !b.contains(gx, gy)) {
        return null;
      }

      x *= context.pixelRatio;
      y *= context.pixelRatio;
      return hit(context, items, x, y) ? items[0] : null;
    }

    return {
      type: type,
      tag: 'path',
      nested: true,
      attr: attr,
      bound: bound,
      draw: drawOne(draw),
      pick: pick,
      isect: intersectPoint,
      tip: tip
    };
  }

  var area$1 = markMultiItemPath('area', area, pickArea);

  function clip (context, scene) {
    var clip = scene.clip;
    context.save();

    if (isFunction(clip)) {
      context.beginPath();
      clip(context);
      context.clip();
    } else {
      clipGroup(context, scene.group);
    }
  }
  function clipGroup(context, group) {
    context.beginPath();
    hasCornerRadius(group) ? rectangle(context, group, 0, 0) : context.rect(0, 0, group.width || 0, group.height || 0);
    context.clip();
  }

  var clip_id = 1;
  function resetSVGClipId() {
    clip_id = 1;
  }
  function clip$1 (renderer, item, size) {
    var clip = item.clip,
        defs = renderer._defs,
        id = item.clip_id || (item.clip_id = 'clip' + clip_id++),
        c = defs.clipping[id] || (defs.clipping[id] = {
      id: id
    });

    if (isFunction(clip)) {
      c.path = clip(null);
    } else if (hasCornerRadius(size)) {
      c.path = rectangle(null, size, 0, 0);
    } else {
      c.width = size.width || 0;
      c.height = size.height || 0;
    }

    return 'url(#' + id + ')';
  }

  function offset$1(item) {
    var sw = (sw = item.strokeWidth) != null ? sw : 1;
    return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;
  }

  function attr(emit, item) {
    emit('transform', translateItem(item));
  }

  function emitRectangle(emit, item) {
    var off = offset$1(item);
    emit('d', rectangle(null, item, off, off));
  }

  function background(emit, item) {
    emit('class', 'background');
    emitRectangle(emit, item);
  }

  function foreground(emit, item) {
    emit('class', 'foreground');

    if (item.strokeForeground) {
      emitRectangle(emit, item);
    } else {
      emit('d', '');
    }
  }

  function content(emit, item, renderer) {
    var url = item.clip ? clip$1(renderer, item, item) : null;
    emit('clip-path', url);
  }

  function bound(bounds, group) {
    if (!group.clip && group.items) {
      var items = group.items;

      for (var j = 0, m = items.length; j < m; ++j) {
        bounds.union(items[j].bounds);
      }
    }

    if ((group.clip || group.width || group.height) && !group.noBound) {
      bounds.add(0, 0).add(group.width || 0, group.height || 0);
    }

    boundStroke(bounds, group);
    return bounds.translate(group.x || 0, group.y || 0);
  }

  function rectanglePath(context, group, x, y) {
    var off = offset$1(group);
    context.beginPath();
    rectangle(context, group, (x || 0) + off, (y || 0) + off);
  }

  var hitBackground = hitPath(rectanglePath);
  var hitForeground = hitPath(rectanglePath, false);

  function draw(context, scene, bounds) {
    var renderer = this;
    visit(scene, function (group) {
      var gx = group.x || 0,
          gy = group.y || 0,
          fore = group.strokeForeground,
          opacity = group.opacity == null ? 1 : group.opacity; // draw group background

      if ((group.stroke || group.fill) && opacity) {
        rectanglePath(context, group, gx, gy);
        blend(context, group);

        if (group.fill && fill(context, group, opacity)) {
          context.fill();
        }

        if (group.stroke && !fore && stroke(context, group, opacity)) {
          context.stroke();
        }
      } // setup graphics context, set clip and bounds


      context.save();
      context.translate(gx, gy);
      if (group.clip) clipGroup(context, group);
      if (bounds) bounds.translate(-gx, -gy); // draw group contents

      visit(group, function (item) {
        renderer.draw(context, item, bounds);
      }); // restore graphics context

      if (bounds) bounds.translate(gx, gy);
      context.restore(); // draw group foreground

      if (fore && group.stroke && opacity) {
        rectanglePath(context, group, gx, gy);
        blend(context, group);

        if (stroke(context, group, opacity)) {
          context.stroke();
        }
      }
    });
  }

  function pick$1(context, scene, x, y, gx, gy) {
    if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
      return null;
    }

    var handler = this,
        cx = x * context.pixelRatio,
        cy = y * context.pixelRatio;
    return pickVisit(scene, function (group) {
      var hit, fore, ix, dx, dy, dw, dh, b, c; // first hit test bounding box

      b = group.bounds;
      if (b && !b.contains(gx, gy)) return; // passed bounds check, test rectangular clip

      dx = group.x || 0;
      dy = group.y || 0;
      dw = dx + (group.width || 0);
      dh = dy + (group.height || 0);
      c = group.clip;
      if (c && (gx < dx || gx > dw || gy < dx || gy > dh)) return; // adjust coordinate system

      context.save();
      context.translate(dx, dy);
      dx = gx - dx;
      dy = gy - dy; // test background for rounded corner clip

      if (c && hasCornerRadius(group) && !hitBackground(context, group, cx, cy)) {
        context.restore();
        return null;
      }

      fore = group.strokeForeground;
      ix = scene.interactive !== false; // hit test against group foreground

      if (ix && fore && group.stroke && hitForeground(context, group, cx, cy)) {
        context.restore();
        return group;
      } // hit test against contained marks


      hit = pickVisit(group, function (mark) {
        return pickMark(mark, dx, dy) ? handler.pick(mark, x, y, dx, dy) : null;
      }); // hit test against group background

      if (!hit && ix && (group.fill || !fore && group.stroke) && hitBackground(context, group, cx, cy)) {
        hit = group;
      } // restore state and return


      context.restore();
      return hit || null;
    });
  }

  function pickMark(mark, x, y) {
    return (mark.interactive !== false || mark.marktype === 'group') && mark.bounds && mark.bounds.contains(x, y);
  }

  var group = {
    type: 'group',
    tag: 'g',
    nested: false,
    attr: attr,
    bound: bound,
    draw: draw,
    pick: pick$1,
    isect: intersectRect,
    content: content,
    background: background,
    foreground: foreground
  };

  function getImage(item, renderer) {
    var image = item.image;

    if (!image || item.url && item.url !== image.url) {
      image = {
        complete: false,
        width: 0,
        height: 0
      };
      renderer.loadImage(item.url).then(function (image) {
        item.image = image;
        item.image.url = item.url;
      });
    }

    return image;
  }

  function imageWidth(item, image) {
    return item.width != null ? item.width : !image || !image.width ? 0 : item.aspect !== false && item.height ? item.height * image.width / image.height : image.width;
  }

  function imageHeight(item, image) {
    return item.height != null ? item.height : !image || !image.height ? 0 : item.aspect !== false && item.width ? item.width * image.height / image.width : image.height;
  }

  function imageXOffset(align, w) {
    return align === 'center' ? w / 2 : align === 'right' ? w : 0;
  }

  function imageYOffset(baseline, h) {
    return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;
  }

  function attr$1(emit, item, renderer) {
    var image = getImage(item, renderer),
        x = item.x || 0,
        y = item.y || 0,
        w = imageWidth(item, image),
        h = imageHeight(item, image),
        a = item.aspect === false ? 'none' : 'xMidYMid';
    x -= imageXOffset(item.align, w);
    y -= imageYOffset(item.baseline, h);

    if (!image.src && image.toDataURL) {
      emit('href', image.toDataURL(), 'http://www.w3.org/1999/xlink', 'xlink:href');
    } else {
      emit('href', image.src || '', 'http://www.w3.org/1999/xlink', 'xlink:href');
    }

    emit('transform', translate(x, y));
    emit('width', w);
    emit('height', h);
    emit('preserveAspectRatio', a);
  }

  function bound$1(bounds, item) {
    var image = item.image,
        x = item.x || 0,
        y = item.y || 0,
        w = imageWidth(item, image),
        h = imageHeight(item, image);
    x -= imageXOffset(item.align, w);
    y -= imageYOffset(item.baseline, h);
    return bounds.set(x, y, x + w, y + h);
  }

  function draw$1(context, scene, bounds) {
    var renderer = this;
    visit(scene, function (item) {
      if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

      var image = getImage(item, renderer),
          x = item.x || 0,
          y = item.y || 0,
          w = imageWidth(item, image),
          h = imageHeight(item, image),
          opacity,
          ar0,
          ar1,
          t;
      x -= imageXOffset(item.align, w);
      y -= imageYOffset(item.baseline, h);

      if (item.aspect !== false) {
        ar0 = image.width / image.height;
        ar1 = item.width / item.height;

        if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
          if (ar1 < ar0) {
            t = w / ar0;
            y += (h - t) / 2;
            h = t;
          } else {
            t = h * ar0;
            x += (w - t) / 2;
            w = t;
          }
        }
      }

      if (image.complete || image.toDataURL) {
        blend(context, item);
        context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
        context.imageSmoothingEnabled = item.smooth !== false;
        context.drawImage(image, x, y, w, h);
      }
    });
  }

  var image$1 = {
    type: 'image',
    tag: 'image',
    nested: false,
    attr: attr$1,
    bound: bound$1,
    draw: draw$1,
    pick: pick(),
    isect: truthy,
    // bounds check is sufficient
    get: getImage,
    xOffset: imageXOffset,
    yOffset: imageYOffset
  };

  var line$1 = markMultiItemPath('line', line, pickLine);

  function attr$2(emit, item) {
    var sx = item.scaleX || 1,
        sy = item.scaleY || 1;

    if (sx !== 1 || sy !== 1) {
      emit('vector-effect', 'non-scaling-stroke');
    }

    emit('transform', transformItem(item));
    emit('d', item.path);
  }

  function path$1(context, item) {
    var path = item.path;
    if (path == null) return true;
    var x = item.x || 0,
        y = item.y || 0,
        sx = item.scaleX || 1,
        sy = item.scaleY || 1,
        a = (item.angle || 0) * DegToRad,
        cache = item.pathCache;

    if (!cache || cache.path !== path) {
      (item.pathCache = cache = pathParse(path)).path = path;
    }

    if (a && context.rotate && context.translate) {
      context.translate(x, y);
      context.rotate(a);
      pathRender(context, cache, 0, 0, sx, sy);
      context.rotate(-a);
      context.translate(-x, -y);
    } else {
      pathRender(context, cache, x, y, sx, sy);
    }
  }

  function bound$2(bounds, item) {
    path$1(context(bounds), item) ? bounds.set(0, 0, 0, 0) : boundStroke(bounds, item, true);

    if (item.angle) {
      bounds.rotate(item.angle * DegToRad, item.x || 0, item.y || 0);
    }

    return bounds;
  }

  var path$2 = {
    type: 'path',
    tag: 'path',
    nested: false,
    attr: attr$2,
    bound: bound$2,
    draw: drawAll(path$1),
    pick: pickPath(path$1),
    isect: intersectPath(path$1)
  };

  function attr$3(emit, item) {
    emit('d', rectangle(null, item));
  }

  function bound$3(bounds, item) {
    var x, y;
    return boundStroke(bounds.set(x = item.x || 0, y = item.y || 0, x + item.width || 0, y + item.height || 0), item);
  }

  function draw$2(context, item) {
    context.beginPath();
    rectangle(context, item);
  }

  var rect = {
    type: 'rect',
    tag: 'path',
    nested: false,
    attr: attr$3,
    bound: bound$3,
    draw: drawAll(draw$2),
    pick: pickPath(draw$2),
    isect: intersectRect
  };

  function attr$4(emit, item) {
    emit('transform', translateItem(item));
    emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);
    emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);
  }

  function bound$4(bounds, item) {
    var x1, y1;
    return boundStroke(bounds.set(x1 = item.x || 0, y1 = item.y || 0, item.x2 != null ? item.x2 : x1, item.y2 != null ? item.y2 : y1), item);
  }

  function path$3(context, item, opacity) {
    var x1, y1, x2, y2;

    if (item.stroke && stroke(context, item, opacity)) {
      x1 = item.x || 0;
      y1 = item.y || 0;
      x2 = item.x2 != null ? item.x2 : x1;
      y2 = item.y2 != null ? item.y2 : y1;
      context.beginPath();
      context.moveTo(x1, y1);
      context.lineTo(x2, y2);
      return true;
    }

    return false;
  }

  function draw$3(context, scene, bounds) {
    visit(scene, function (item) {
      if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

      var opacity = item.opacity == null ? 1 : item.opacity;

      if (opacity && path$3(context, item, opacity)) {
        blend(context, item);
        context.stroke();
      }
    });
  }

  function hit(context, item, x, y) {
    if (!context.isPointInStroke) return false;
    return path$3(context, item, 1) && context.isPointInStroke(x, y);
  }

  var rule = {
    type: 'rule',
    tag: 'line',
    nested: false,
    attr: attr$4,
    bound: bound$4,
    draw: draw$3,
    pick: pick(hit),
    isect: intersectRule
  };

  var shape$1 = markItemPath('shape', shape);

  var symbol$1 = markItemPath('symbol', symbol, intersectPoint);

  var widthCache = lruCache();
  var textMetrics = {
    height: fontSize,
    measureWidth: measureWidth,
    estimateWidth: estimateWidth,
    width: estimateWidth,
    canvas: useCanvas
  };
  useCanvas(true);

  function useCanvas(use) {
    textMetrics.width = use && context$1 ? measureWidth : estimateWidth;
  } // make dumb, simple estimate if no canvas is available


  function estimateWidth(item, text) {
    return _estimateWidth(textValue(item, text), fontSize(item));
  }

  function _estimateWidth(text, currentFontHeight) {
    return ~~(0.8 * text.length * currentFontHeight);
  } // measure text width if canvas is available


  function measureWidth(item, text) {
    return fontSize(item) <= 0 || !(text = textValue(item, text)) ? 0 : _measureWidth(text, font(item));
  }

  function _measureWidth(text, currentFont) {
    var key = "(".concat(currentFont, ") ").concat(text);
    var width = widthCache.get(key);

    if (width === undefined) {
      context$1.font = currentFont;
      width = context$1.measureText(text).width;
      widthCache.set(key, width);
    }

    return width;
  }

  function fontSize(item) {
    return item.fontSize != null ? +item.fontSize || 0 : 11;
  }
  function lineHeight(item) {
    return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;
  }

  function lineArray(_) {
    return isArray(_) ? _.length > 1 ? _ : _[0] : _;
  }

  function textLines(item) {
    return lineArray(item.lineBreak && item.text && !isArray(item.text) ? item.text.split(item.lineBreak) : item.text);
  }
  function multiLineOffset(item) {
    var tl = textLines(item);
    return (isArray(tl) ? tl.length - 1 : 0) * lineHeight(item);
  }
  function textValue(item, line) {
    var text = line == null ? '' : (line + '').trim();
    return item.limit > 0 && text.length ? truncate$1(item, text) : text;
  }

  function widthGetter(item) {
    if (textMetrics.width === measureWidth) {
      // we are using canvas
      var currentFont = font(item);
      return function (text) {
        return _measureWidth(text, currentFont);
      };
    } else {
      // we are relying on estimates
      var currentFontHeight = fontSize(item);
      return function (text) {
        return _estimateWidth(text, currentFontHeight);
      };
    }
  }

  function truncate$1(item, text) {
    var limit = +item.limit,
        width = widthGetter(item);
    if (width(text) < limit) return text;
    var ellipsis = item.ellipsis || "\u2026",
        rtl = item.dir === 'rtl',
        lo = 0,
        hi = text.length,
        mid;
    limit -= width(ellipsis);

    if (rtl) {
      while (lo < hi) {
        mid = lo + hi >>> 1;
        if (width(text.slice(mid)) > limit) lo = mid + 1;else hi = mid;
      }

      return ellipsis + text.slice(lo);
    } else {
      while (lo < hi) {
        mid = 1 + (lo + hi >>> 1);
        if (width(text.slice(0, mid)) < limit) lo = mid;else hi = mid - 1;
      }

      return text.slice(0, lo) + ellipsis;
    }
  }

  function fontFamily(item, quote) {
    var font = item.font;
    return (quote && font ? String(font).replace(/"/g, '\'') : font) || 'sans-serif';
  }
  function font(item, quote) {
    return '' + (item.fontStyle ? item.fontStyle + ' ' : '') + (item.fontVariant ? item.fontVariant + ' ' : '') + (item.fontWeight ? item.fontWeight + ' ' : '') + fontSize(item) + 'px ' + fontFamily(item, quote);
  }
  function offset$2(item) {
    // perform our own font baseline calculation
    // why? not all browsers support SVG 1.1 'alignment-baseline' :(
    // this also ensures consistent layout across renderers
    var baseline = item.baseline,
        h = fontSize(item);
    return Math.round(baseline === 'top' ? 0.79 * h : baseline === 'middle' ? 0.30 * h : baseline === 'bottom' ? -0.21 * h : baseline === 'line-top' ? 0.29 * h + 0.5 * lineHeight(item) : baseline === 'line-bottom' ? 0.29 * h - 0.5 * lineHeight(item) : 0);
  }

  var textAlign = {
    'left': 'start',
    'center': 'middle',
    'right': 'end'
  };
  var tempBounds = new Bounds();

  function anchorPoint(item) {
    var x = item.x || 0,
        y = item.y || 0,
        r = item.radius || 0,
        t;

    if (r) {
      t = (item.theta || 0) - HalfPi;
      x += r * Math.cos(t);
      y += r * Math.sin(t);
    }

    tempBounds.x1 = x;
    tempBounds.y1 = y;
    return tempBounds;
  }

  function attr$5(emit, item) {
    var dx = item.dx || 0,
        dy = (item.dy || 0) + offset$2(item),
        p = anchorPoint(item),
        x = p.x1,
        y = p.y1,
        a = item.angle || 0,
        t;
    emit('text-anchor', textAlign[item.align] || 'start');

    if (a) {
      t = translate(x, y) + ' ' + rotate(a);
      if (dx || dy) t += ' ' + translate(dx, dy);
    } else {
      t = translate(x + dx, y + dy);
    }

    emit('transform', t);
  }

  function bound$5(bounds, item, mode) {
    var h = textMetrics.height(item),
        a = item.align,
        p = anchorPoint(item),
        x = p.x1,
        y = p.y1,
        dx = item.dx || 0,
        dy = (item.dy || 0) + offset$2(item) - Math.round(0.8 * h),
        // use 4/5 offset
    tl = textLines(item),
        w; // get dimensions

    if (isArray(tl)) {
      // multi-line text
      h += lineHeight(item) * (tl.length - 1);
      w = tl.reduce(function (w, t) {
        return Math.max(w, textMetrics.width(item, t));
      }, 0);
    } else {
      // single-line text
      w = textMetrics.width(item, tl);
    } // horizontal alignment


    if (a === 'center') {
      dx -= w / 2;
    } else if (a === 'right') {
      dx -= w;
    }

    bounds.set(dx += x, dy += y, dx + w, dy + h);

    if (item.angle && !mode) {
      bounds.rotate(item.angle * DegToRad, x, y);
    } else if (mode === 2) {
      return bounds.rotatedPoints(item.angle * DegToRad, x, y);
    }

    return bounds;
  }

  function draw$4(context, scene, bounds) {
    visit(scene, function (item) {
      var opacity = item.opacity == null ? 1 : item.opacity,
          p,
          x,
          y,
          i,
          lh,
          tl,
          str;
      if (bounds && !bounds.intersects(item.bounds) || // bounds check
      opacity === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0) return;
      context.font = font(item);
      context.textAlign = item.align || 'left';
      p = anchorPoint(item);
      x = p.x1, y = p.y1;

      if (item.angle) {
        context.save();
        context.translate(x, y);
        context.rotate(item.angle * DegToRad);
        x = y = 0; // reset x, y
      }

      x += item.dx || 0;
      y += (item.dy || 0) + offset$2(item);
      tl = textLines(item);
      blend(context, item);

      if (isArray(tl)) {
        lh = lineHeight(item);

        for (i = 0; i < tl.length; ++i) {
          str = textValue(item, tl[i]);

          if (item.fill && fill(context, item, opacity)) {
            context.fillText(str, x, y);
          }

          if (item.stroke && stroke(context, item, opacity)) {
            context.strokeText(str, x, y);
          }

          y += lh;
        }
      } else {
        str = textValue(item, tl);

        if (item.fill && fill(context, item, opacity)) {
          context.fillText(str, x, y);
        }

        if (item.stroke && stroke(context, item, opacity)) {
          context.strokeText(str, x, y);
        }
      }

      if (item.angle) context.restore();
    });
  }

  function hit$1(context, item, x, y, gx, gy) {
    if (item.fontSize <= 0) return false;
    if (!item.angle) return true; // bounds sufficient if no rotation
    // project point into space of unrotated bounds

    var p = anchorPoint(item),
        ax = p.x1,
        ay = p.y1,
        b = bound$5(tempBounds, item, 1),
        a = -item.angle * DegToRad,
        cos = Math.cos(a),
        sin = Math.sin(a),
        px = cos * gx - sin * gy + (ax - cos * ax + sin * ay),
        py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);
    return b.contains(px, py);
  }

  function intersectText(item, box) {
    var p = bound$5(tempBounds, item, 2);
    return intersectBoxLine(box, p[0], p[1], p[2], p[3]) || intersectBoxLine(box, p[0], p[1], p[4], p[5]) || intersectBoxLine(box, p[4], p[5], p[6], p[7]) || intersectBoxLine(box, p[2], p[3], p[6], p[7]);
  }

  var text = {
    type: 'text',
    tag: 'text',
    nested: false,
    attr: attr$5,
    bound: bound$5,
    draw: draw$4,
    pick: pick(hit$1),
    isect: intersectText
  };

  var trail$1 = markMultiItemPath('trail', trail, pickTrail);

  var Marks = {
    arc: arc$1,
    area: area$1,
    group: group,
    image: image$1,
    line: line$1,
    path: path$2,
    rect: rect,
    rule: rule,
    shape: shape$1,
    symbol: symbol$1,
    text: text,
    trail: trail$1
  };

  function boundItem (item, func, opt) {
    var type = Marks[item.mark.marktype],
        bound = func || type.bound;
    if (type.nested) item = item.mark;
    return bound(item.bounds || (item.bounds = new Bounds()), item, opt);
  }

  var DUMMY = {
    mark: null
  };
  function boundMark (mark, bounds, opt) {
    var type = Marks[mark.marktype],
        bound = type.bound,
        items = mark.items,
        hasItems = items && items.length,
        i,
        n,
        item,
        b;

    if (type.nested) {
      if (hasItems) {
        item = items[0];
      } else {
        // no items, fake it
        DUMMY.mark = mark;
        item = DUMMY;
      }

      b = boundItem(item, bound, opt);
      bounds = bounds && bounds.union(b) || b;
      return bounds;
    }

    bounds = bounds || mark.bounds && mark.bounds.clear() || new Bounds();

    if (hasItems) {
      for (i = 0, n = items.length; i < n; ++i) {
        bounds.union(boundItem(items[i], bound, opt));
      }
    }

    return mark.bounds = bounds;
  }

  var keys$1 = ['marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex', 'x', 'y', 'width', 'height', 'align', 'baseline', // layout
  'fill', 'fillOpacity', 'opacity', 'blend', // fill
  'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap', // stroke
  'strokeDash', 'strokeDashOffset', // stroke dash
  'strokeForeground', 'strokeOffset', // group
  'startAngle', 'endAngle', 'innerRadius', 'outerRadius', // arc
  'cornerRadius', 'padAngle', // arc, rect
  'cornerRadiusTopLeft', 'cornerRadiusTopRight', // rect, group
  'cornerRadiusBottomLeft', 'cornerRadiusBottomRight', 'interpolate', 'tension', 'orient', 'defined', // area, line
  'url', 'aspect', 'smooth', // image
  'path', 'scaleX', 'scaleY', // path
  'x2', 'y2', // rule
  'size', 'shape', // symbol
  'text', 'angle', 'theta', 'radius', 'dir', 'dx', 'dy', // text
  'ellipsis', 'limit', 'lineBreak', 'lineHeight', 'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant' // font
  ];
  function sceneToJSON(scene, indent) {
    return JSON.stringify(scene, keys$1, indent);
  }
  function sceneFromJSON(json) {
    var scene = typeof json === 'string' ? JSON.parse(json) : json;
    return initialize(scene);
  }

  function initialize(scene) {
    var type = scene.marktype,
        items = scene.items,
        parent,
        i,
        n;

    if (items) {
      for (i = 0, n = items.length; i < n; ++i) {
        parent = type ? 'mark' : 'group';
        items[i][parent] = scene;
        if (items[i].zindex) items[i][parent].zdirty = true;
        if ('group' === (type || parent)) initialize(items[i]);
      }
    }

    if (type) boundMark(scene);
    return scene;
  }

  function Scenegraph(scene) {
    if (arguments.length) {
      this.root = sceneFromJSON(scene);
    } else {
      this.root = createMark({
        marktype: 'group',
        name: 'root',
        role: 'frame'
      });
      this.root.items = [new GroupItem(this.root)];
    }
  }
  var prototype$I = Scenegraph.prototype;

  prototype$I.toJSON = function (indent) {
    return sceneToJSON(this.root, indent || 0);
  };

  prototype$I.mark = function (markdef, group, index) {
    group = group || this.root.items[0];
    var mark = createMark(markdef, group);
    group.items[index] = mark;
    if (mark.zindex) mark.group.zdirty = true;
    return mark;
  };

  function createMark(def, group) {
    return {
      bounds: new Bounds(),
      clip: !!def.clip,
      group: group,
      interactive: def.interactive === false ? false : true,
      items: [],
      marktype: def.marktype,
      name: def.name || undefined,
      role: def.role || undefined,
      zindex: def.zindex || 0
    };
  }

  // create a new DOM element
  function domCreate(doc, tag, ns) {
    if (!doc && typeof document !== 'undefined' && document.createElement) {
      doc = document;
    }

    return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;
  } // find first child element with matching tag

  function domFind(el, tag) {
    tag = tag.toLowerCase();
    var nodes = el.childNodes,
        i = 0,
        n = nodes.length;

    for (; i < n; ++i) {
      if (nodes[i].tagName.toLowerCase() === tag) {
        return nodes[i];
      }
    }
  } // retrieve child element at given index
  // create & insert if doesn't exist or if tags do not match

  function domChild(el, index, tag, ns) {
    var a = el.childNodes[index],
        b;

    if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
      b = a || null;
      a = domCreate(el.ownerDocument, tag, ns);
      el.insertBefore(a, b);
    }

    return a;
  } // remove all child elements at or above the given index

  function domClear(el, index) {
    var nodes = el.childNodes,
        curr = nodes.length;

    while (curr > index) {
      el.removeChild(nodes[--curr]);
    }

    return el;
  } // generate css class name for mark

  function cssClass(mark) {
    return 'mark-' + mark.marktype + (mark.role ? ' role-' + mark.role : '') + (mark.name ? ' ' + mark.name : '');
  }

  function point (event, el) {
    var rect = el.getBoundingClientRect();
    return [event.clientX - rect.left - (el.clientLeft || 0), event.clientY - rect.top - (el.clientTop || 0)];
  }

  function resolveItem (item, event, el, origin) {
    var mark = item && item.mark,
        mdef,
        p;

    if (mark && (mdef = Marks[mark.marktype]).tip) {
      p = point(event, el);
      p[0] -= origin[0];
      p[1] -= origin[1];

      while (item = item.mark.group) {
        p[0] -= item.x || 0;
        p[1] -= item.y || 0;
      }

      item = mdef.tip(mark.items, p);
    }

    return item;
  }

  /**
   * Create a new Handler instance.
   * @param {object} [customLoader] - Optional loader instance for
   *   href URL sanitization. If not specified, a standard loader
   *   instance will be generated.
   * @param {function} [customTooltip] - Optional tooltip handler
   *   function for custom tooltip display.
   * @constructor
   */

  function Handler(customLoader, customTooltip) {
    this._active = null;
    this._handlers = {};
    this._loader = customLoader || loader();
    this._tooltip = customTooltip || defaultTooltip;
  } // The default tooltip display handler.
  // Sets the HTML title attribute on the visualization container.

  function defaultTooltip(handler, event, item, value) {
    handler.element().setAttribute('title', value || '');
  }

  var prototype$J = Handler.prototype;
  /**
   * Initialize a new Handler instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {object} [obj] - Optional context object that should serve as
   *   the "this" context for event callbacks.
   * @return {Handler} - This handler instance.
   */

  prototype$J.initialize = function (el, origin, obj) {
    this._el = el;
    this._obj = obj || null;
    return this.origin(origin);
  };
  /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */


  prototype$J.element = function () {
    return this._el;
  };
  /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */


  prototype$J.canvas = function () {
    return this._el && this._el.firstChild;
  };
  /**
   * Get / set the origin coordinates of the visualization.
   */


  prototype$J.origin = function (origin) {
    if (arguments.length) {
      this._origin = origin || [0, 0];
      return this;
    } else {
      return this._origin.slice();
    }
  };
  /**
   * Get / set the scenegraph root.
   */


  prototype$J.scene = function (scene) {
    if (!arguments.length) return this._scene;
    this._scene = scene;
    return this;
  };
  /**
   * Add an event handler. Subclasses should override this method.
   */


  prototype$J.on = function ()
  /*type, handler*/
  {};
  /**
   * Remove an event handler. Subclasses should override this method.
   */


  prototype$J.off = function ()
  /*type, handler*/
  {};
  /**
   * Utility method for finding the array index of an event handler.
   * @param {Array} h - An array of registered event handlers.
   * @param {string} type - The event type.
   * @param {function} handler - The event handler instance to find.
   * @return {number} - The handler's array index or -1 if not registered.
   */


  prototype$J._handlerIndex = function (h, type, handler) {
    for (var i = h ? h.length : 0; --i >= 0;) {
      if (h[i].type === type && (!handler || h[i].handler === handler)) {
        return i;
      }
    }

    return -1;
  };
  /**
   * Returns an array with registered event handlers.
   * @param {string} [type] - The event type to query. Any annotations
   *   are ignored; for example, for the argument "click.foo", ".foo" will
   *   be ignored and the method returns all "click" handlers. If type is
   *   null or unspecified, this method returns handlers for all types.
   * @return {Array} - A new array containing all registered event handlers.
   */


  prototype$J.handlers = function (type) {
    var h = this._handlers,
        a = [],
        k;

    if (type) {
      a.push.apply(a, h[this.eventName(type)]);
    } else {
      for (k in h) {
        a.push.apply(a, h[k]);
      }
    }

    return a;
  };
  /**
   * Parses an event name string to return the specific event type.
   * For example, given "click.foo" returns "click"
   * @param {string} name - The input event type string.
   * @return {string} - A string with the event type only.
   */


  prototype$J.eventName = function (name) {
    var i = name.indexOf('.');
    return i < 0 ? name : name.slice(0, i);
  };
  /**
   * Handle hyperlink navigation in response to an item.href value.
   * @param {Event} event - The event triggering hyperlink navigation.
   * @param {Item} item - The scenegraph item.
   * @param {string} href - The URL to navigate to.
   */


  prototype$J.handleHref = function (event, item, href) {
    this._loader.sanitize(href, {
      context: 'href'
    }).then(function (opt) {
      var e = new MouseEvent(event.type, event),
          a = domCreate(null, 'a');

      for (var name in opt) {
        a.setAttribute(name, opt[name]);
      }

      a.dispatchEvent(e);
    }).catch(function () {
      /* do nothing */
    });
  };
  /**
   * Handle tooltip display in response to an item.tooltip value.
   * @param {Event} event - The event triggering tooltip display.
   * @param {Item} item - The scenegraph item.
   * @param {boolean} show - A boolean flag indicating whether
   *   to show or hide a tooltip for the given item.
   */


  prototype$J.handleTooltip = function (event, item, show) {
    if (item && item.tooltip != null) {
      item = resolveItem(item, event, this.canvas(), this._origin);
      var value = show && item && item.tooltip || null;

      this._tooltip.call(this._obj, this, event, item, value);
    }
  };
  /**
   * Returns the size of a scenegraph item and its position relative
   * to the viewport.
   * @param {Item} item - The scenegraph item.
   * @return {object} - A bounding box object (compatible with the
   *   DOMRect type) consisting of x, y, width, heigh, top, left,
   *   right, and bottom properties.
   */


  prototype$J.getItemBoundingClientRect = function (item) {
    if (!(el = this.canvas())) return;
    var el,
        rect = el.getBoundingClientRect(),
        origin = this._origin,
        itemBounds = item.bounds,
        x = itemBounds.x1 + origin[0] + rect.left,
        y = itemBounds.y1 + origin[1] + rect.top,
        w = itemBounds.width(),
        h = itemBounds.height(); // translate coordinate for each parent group

    while (item.mark && (item = item.mark.group)) {
      x += item.x || 0;
      y += item.y || 0;
    } // return DOMRect-compatible bounding box


    return {
      x: x,
      y: y,
      width: w,
      height: h,
      left: x,
      top: y,
      right: x + w,
      bottom: y + h
    };
  };

  /**
   * Create a new Renderer instance.
   * @param {object} [loader] - Optional loader instance for
   *   image and href URL sanitization. If not specified, a
   *   standard loader instance will be generated.
   * @constructor
   */

  function Renderer(loader) {
    this._el = null;
    this._bgcolor = null;
    this._loader = new ResourceLoader(loader);
  }
  var prototype$K = Renderer.prototype;
  /**
   * Initialize a new Renderer instance.
   * @param {DOMElement} el - The containing DOM element for the display.
   * @param {number} width - The coordinate width of the display, in pixels.
   * @param {number} height - The coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance.
   */

  prototype$K.initialize = function (el, width, height, origin, scaleFactor) {
    this._el = el;
    return this.resize(width, height, origin, scaleFactor);
  };
  /**
   * Returns the parent container element for a visualization.
   * @return {DOMElement} - The containing DOM element.
   */


  prototype$K.element = function () {
    return this._el;
  };
  /**
   * Returns the scene element (e.g., canvas or SVG) of the visualization
   * Subclasses must override if the first child is not the scene element.
   * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
   */


  prototype$K.canvas = function () {
    return this._el && this._el.firstChild;
  };
  /**
   * Get / set the background color.
   */


  prototype$K.background = function (bgcolor) {
    if (arguments.length === 0) return this._bgcolor;
    this._bgcolor = bgcolor;
    return this;
  };
  /**
   * Resize the display.
   * @param {number} width - The new coordinate width of the display, in pixels.
   * @param {number} height - The new coordinate height of the display, in pixels.
   * @param {Array<number>} origin - The new origin of the display, in pixels.
   *   The coordinate system will be translated to this point.
   * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
   *   the width and height to determine the final pixel size.
   * @return {Renderer} - This renderer instance;
   */


  prototype$K.resize = function (width, height, origin, scaleFactor) {
    this._width = width;
    this._height = height;
    this._origin = origin || [0, 0];
    this._scale = scaleFactor || 1;
    return this;
  };
  /**
   * Report a dirty item whose bounds should be redrawn.
   * This base class method does nothing. Subclasses that perform
   * incremental should implement this method.
   * @param {Item} item - The dirty item whose bounds should be redrawn.
   */


  prototype$K.dirty = function ()
  /*item*/
  {};
  /**
   * Render an input scenegraph, potentially with a set of dirty items.
   * This method will perform an immediate rendering with available resources.
   * The renderer may also need to perform image loading to perform a complete
   * render. This process can lead to asynchronous re-rendering of the scene
   * after this method returns. To receive notification when rendering is
   * complete, use the renderAsync method instead.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Renderer} - This renderer instance.
   */


  prototype$K.render = function (scene) {
    var r = this; // bind arguments into a render call, and cache it
    // this function may be subsequently called for async redraw

    r._call = function () {
      r._render(scene);
    }; // invoke the renderer


    r._call(); // clear the cached call for garbage collection
    // async redraws will stash their own copy


    r._call = null;
    return r;
  };
  /**
   * Internal rendering method. Renderer subclasses should override this
   * method to actually perform rendering.
   * @param {object} scene - The root mark of a scenegraph to render.
   */


  prototype$K._render = function ()
  /*scene*/
  {// subclasses to override
  };
  /**
   * Asynchronous rendering method. Similar to render, but returns a Promise
   * that resolves when all rendering is completed. Sometimes a renderer must
   * perform image loading to get a complete rendering. The returned
   * Promise will not resolve until this process completes.
   * @param {object} scene - The root mark of a scenegraph to render.
   * @return {Promise} - A Promise that resolves when rendering is complete.
   */


  prototype$K.renderAsync = function (scene) {
    var r = this.render(scene);
    return this._ready ? this._ready.then(function () {
      return r;
    }) : Promise.resolve(r);
  };
  /**
   * Internal method for asynchronous resource loading.
   * Proxies method calls to the ImageLoader, and tracks loading
   * progress to invoke a re-render once complete.
   * @param {string} method - The method name to invoke on the ImageLoader.
   * @param {string} uri - The URI for the requested resource.
   * @return {Promise} - A Promise that resolves to the requested resource.
   */


  prototype$K._load = function (method, uri) {
    var r = this,
        p = r._loader[method](uri);

    if (!r._ready) {
      // re-render the scene when loading completes
      var call = r._call;
      r._ready = r._loader.ready().then(function (redraw) {
        if (redraw) call();
        r._ready = null;
      });
    }

    return p;
  };
  /**
   * Sanitize a URL to include as a hyperlink in the rendered scene.
   * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string to sanitize.
   * @return {Promise} - A Promise that resolves to the sanitized URL.
   */


  prototype$K.sanitizeURL = function (uri) {
    return this._load('sanitizeURL', uri);
  };
  /**
   * Requests an image to include in the rendered scene.
   * This method proxies a call to ImageLoader.loadImage, but also tracks
   * image loading progress and invokes a re-render once complete.
   * @param {string} uri - The URI string of the image.
   * @return {Promise} - A Promise that resolves to the loaded Image.
   */


  prototype$K.loadImage = function (uri) {
    return this._load('loadImage', uri);
  };

  var Events = ['keydown', 'keypress', 'keyup', 'dragenter', 'dragleave', 'dragover', 'mousedown', 'mouseup', 'mousemove', 'mouseout', 'mouseover', 'click', 'dblclick', 'wheel', 'mousewheel', 'touchstart', 'touchmove', 'touchend'];
  var TooltipShowEvent = 'mousemove';
  var TooltipHideEvent = 'mouseout';
  var HrefEvent = 'click';

  function CanvasHandler(loader, tooltip) {
    Handler.call(this, loader, tooltip);
    this._down = null;
    this._touch = null;
    this._first = true;
  }
  var prototype$L = inherits(CanvasHandler, Handler);

  prototype$L.initialize = function (el, origin, obj) {
    // add event listeners
    var canvas = this._canvas = el && domFind(el, 'canvas');

    if (canvas) {
      var that = this;
      this.events.forEach(function (type) {
        canvas.addEventListener(type, function (evt) {
          if (prototype$L[type]) {
            prototype$L[type].call(that, evt);
          } else {
            that.fire(type, evt);
          }
        });
      });
    }

    return Handler.prototype.initialize.call(this, el, origin, obj);
  }; // return the backing canvas instance


  prototype$L.canvas = function () {
    return this._canvas;
  }; // retrieve the current canvas context


  prototype$L.context = function () {
    return this._canvas.getContext('2d');
  }; // supported events


  prototype$L.events = Events; // to keep old versions of firefox happy

  prototype$L.DOMMouseScroll = function (evt) {
    this.fire('mousewheel', evt);
  };

  function move(moveEvent, overEvent, outEvent) {
    return function (evt) {
      var a = this._active,
          p = this.pickEvent(evt);

      if (p === a) {
        // active item and picked item are the same
        this.fire(moveEvent, evt); // fire move
      } else {
        // active item and picked item are different
        if (!a || !a.exit) {
          // fire out for prior active item
          // suppress if active item was removed from scene
          this.fire(outEvent, evt);
        }

        this._active = p; // set new active item

        this.fire(overEvent, evt); // fire over for new active item

        this.fire(moveEvent, evt); // fire move for new active item
      }
    };
  }

  function inactive(type) {
    return function (evt) {
      this.fire(type, evt);
      this._active = null;
    };
  }

  prototype$L.mousemove = move('mousemove', 'mouseover', 'mouseout');
  prototype$L.dragover = move('dragover', 'dragenter', 'dragleave');
  prototype$L.mouseout = inactive('mouseout');
  prototype$L.dragleave = inactive('dragleave');

  prototype$L.mousedown = function (evt) {
    this._down = this._active;
    this.fire('mousedown', evt);
  };

  prototype$L.click = function (evt) {
    if (this._down === this._active) {
      this.fire('click', evt);
      this._down = null;
    }
  };

  prototype$L.touchstart = function (evt) {
    this._touch = this.pickEvent(evt.changedTouches[0]);

    if (this._first) {
      this._active = this._touch;
      this._first = false;
    }

    this.fire('touchstart', evt, true);
  };

  prototype$L.touchmove = function (evt) {
    this.fire('touchmove', evt, true);
  };

  prototype$L.touchend = function (evt) {
    this.fire('touchend', evt, true);
    this._touch = null;
  }; // fire an event


  prototype$L.fire = function (type, evt, touch) {
    var a = touch ? this._touch : this._active,
        h = this._handlers[type],
        i,
        len; // set event type relative to scenegraph items

    evt.vegaType = type; // handle hyperlinks and tooltips first

    if (type === HrefEvent && a && a.href) {
      this.handleHref(evt, a, a.href);
    } else if (type === TooltipShowEvent || type === TooltipHideEvent) {
      this.handleTooltip(evt, a, type !== TooltipHideEvent);
    } // invoke all registered handlers


    if (h) {
      for (i = 0, len = h.length; i < len; ++i) {
        h[i].handler.call(this._obj, evt, a);
      }
    }
  }; // add an event handler


  prototype$L.on = function (type, handler) {
    var name = this.eventName(type),
        h = this._handlers,
        i = this._handlerIndex(h[name], type, handler);

    if (i < 0) {
      (h[name] || (h[name] = [])).push({
        type: type,
        handler: handler
      });
    }

    return this;
  }; // remove an event handler


  prototype$L.off = function (type, handler) {
    var name = this.eventName(type),
        h = this._handlers[name],
        i = this._handlerIndex(h, type, handler);

    if (i >= 0) {
      h.splice(i, 1);
    }

    return this;
  };

  prototype$L.pickEvent = function (evt) {
    var p = point(evt, this._canvas),
        o = this._origin;
    return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
  }; // find the scenegraph item at the current mouse position
  // x, y -- the absolute x, y mouse coordinates on the canvas element
  // gx, gy -- the relative coordinates within the current group


  prototype$L.pick = function (scene, x, y, gx, gy) {
    var g = this.context(),
        mark = Marks[scene.marktype];
    return mark.pick.call(this, g, scene, x, y, gx, gy);
  };

  function devicePixelRatio() {
    return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;
  }

  var pixelRatio = devicePixelRatio();
  function resize (canvas, width, height, origin, scaleFactor, opt) {
    var inDOM = typeof HTMLElement !== 'undefined' && canvas instanceof HTMLElement && canvas.parentNode != null,
        context = canvas.getContext('2d'),
        ratio = inDOM ? pixelRatio : scaleFactor;
    canvas.width = width * ratio;
    canvas.height = height * ratio;

    for (var key in opt) {
      context[key] = opt[key];
    }

    if (inDOM && ratio !== 1) {
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
    }

    context.pixelRatio = ratio;
    context.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);
    return canvas;
  }

  function CanvasRenderer(loader) {
    Renderer.call(this, loader);
    this._redraw = false;
    this._dirty = new Bounds();
  }
  var prototype$M = inherits(CanvasRenderer, Renderer),
      base$1 = Renderer.prototype,
      tempBounds$1 = new Bounds();

  prototype$M.initialize = function (el, width, height, origin, scaleFactor, options) {
    this._options = options;
    this._canvas = canvas$1(1, 1, options && options.type); // instantiate a small canvas

    if (el) {
      domClear(el, 0).appendChild(this._canvas);

      this._canvas.setAttribute('class', 'marks');
    } // this method will invoke resize to size the canvas appropriately


    return base$1.initialize.call(this, el, width, height, origin, scaleFactor);
  };

  prototype$M.resize = function (width, height, origin, scaleFactor) {
    base$1.resize.call(this, width, height, origin, scaleFactor);
    resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options && this._options.context);
    this._redraw = true;
    return this;
  };

  prototype$M.canvas = function () {
    return this._canvas;
  };

  prototype$M.context = function () {
    return this._canvas ? this._canvas.getContext('2d') : null;
  };

  prototype$M.dirty = function (item) {
    var b = translate$1(item.bounds, item.mark.group);

    this._dirty.union(b);
  };

  function clipToBounds(g, b, origin) {
    // expand bounds by 1 pixel, then round to pixel boundaries
    b.expand(1).round(); // align to base pixel grid in case of non-integer scaling (#2425)

    if (g.pixelRatio % 1) {
      b.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);
    } // to avoid artifacts translate if origin has fractional pixels


    b.translate(-(origin[0] % 1), -(origin[1] % 1)); // set clip path

    g.beginPath();
    g.rect(b.x1, b.y1, b.width(), b.height());
    g.clip();
    return b;
  }

  function viewBounds(origin, width, height) {
    return tempBounds$1.set(0, 0, width, height).translate(-origin[0], -origin[1]);
  }

  function translate$1(bounds, group) {
    if (group == null) return bounds;
    var b = tempBounds$1.clear().union(bounds);

    for (; group != null; group = group.mark.group) {
      b.translate(group.x || 0, group.y || 0);
    }

    return b;
  }

  prototype$M._render = function (scene) {
    var g = this.context(),
        o = this._origin,
        w = this._width,
        h = this._height,
        b = this._dirty; // setup

    g.save();

    if (this._redraw || b.empty()) {
      this._redraw = false;
      b = viewBounds(o, w, h).expand(1);
    } else {
      b = clipToBounds(g, b.intersect(viewBounds(o, w, h)), o);
    }

    this.clear(-o[0], -o[1], w, h); // render

    this.draw(g, scene, b); // takedown

    g.restore();

    this._dirty.clear();

    return this;
  };

  prototype$M.draw = function (ctx, scene, bounds) {
    var mark = Marks[scene.marktype];
    if (scene.clip) clip(ctx, scene);
    mark.draw.call(this, ctx, scene, bounds);
    if (scene.clip) ctx.restore();
  };

  prototype$M.clear = function (x, y, w, h) {
    var g = this.context();
    g.clearRect(x, y, w, h);

    if (this._bgcolor != null) {
      g.fillStyle = this._bgcolor;
      g.fillRect(x, y, w, h);
    }
  };

  function SVGHandler(loader, tooltip) {
    Handler.call(this, loader, tooltip);
    var h = this;
    h._hrefHandler = listener(h, function (evt, item) {
      if (item && item.href) h.handleHref(evt, item, item.href);
    });
    h._tooltipHandler = listener(h, function (evt, item) {
      h.handleTooltip(evt, item, evt.type !== TooltipHideEvent);
    });
  }
  var prototype$N = inherits(SVGHandler, Handler);

  prototype$N.initialize = function (el, origin, obj) {
    var svg = this._svg;

    if (svg) {
      svg.removeEventListener(HrefEvent, this._hrefHandler);
      svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);
      svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);
    }

    this._svg = svg = el && domFind(el, 'svg');

    if (svg) {
      svg.addEventListener(HrefEvent, this._hrefHandler);
      svg.addEventListener(TooltipShowEvent, this._tooltipHandler);
      svg.addEventListener(TooltipHideEvent, this._tooltipHandler);
    }

    return Handler.prototype.initialize.call(this, el, origin, obj);
  };

  prototype$N.canvas = function () {
    return this._svg;
  }; // wrap an event listener for the SVG DOM


  function listener(context, handler) {
    return function (evt) {
      var target = evt.target,
          item = target.__data__;
      evt.vegaType = evt.type;
      item = Array.isArray(item) ? item[0] : item;
      handler.call(context._obj, evt, item);
    };
  } // add an event handler


  prototype$N.on = function (type, handler) {
    var name = this.eventName(type),
        h = this._handlers,
        i = this._handlerIndex(h[name], type, handler);

    if (i < 0) {
      var x = {
        type: type,
        handler: handler,
        listener: listener(this, handler)
      };
      (h[name] || (h[name] = [])).push(x);

      if (this._svg) {
        this._svg.addEventListener(name, x.listener);
      }
    }

    return this;
  }; // remove an event handler


  prototype$N.off = function (type, handler) {
    var name = this.eventName(type),
        h = this._handlers[name],
        i = this._handlerIndex(h, type, handler);

    if (i >= 0) {
      if (this._svg) {
        this._svg.removeEventListener(name, h[i].listener);
      }

      h.splice(i, 1);
    }

    return this;
  };

  // generate string for an opening xml tag
  // tag: the name of the xml tag
  // attr: hash of attribute name-value pairs to include
  // raw: additional raw string to include in tag markup
  function openTag(tag, attr, raw) {
    var s = '<' + tag,
        key,
        val;

    if (attr) {
      for (key in attr) {
        val = attr[key];

        if (val != null) {
          s += ' ' + key + '="' + val + '"';
        }
      }
    }

    if (raw) s += ' ' + raw;
    return s + '>';
  } // generate string for closing xml tag
  // tag: the name of the xml tag

  function closeTag(tag) {
    return '</' + tag + '>';
  }

  var metadata = {
    'version': '1.1',
    'xmlns': 'http://www.w3.org/2000/svg',
    'xmlns:xlink': 'http://www.w3.org/1999/xlink'
  };

  var styles = {
    'fill': 'fill',
    'fillOpacity': 'fill-opacity',
    'stroke': 'stroke',
    'strokeOpacity': 'stroke-opacity',
    'strokeWidth': 'stroke-width',
    'strokeCap': 'stroke-linecap',
    'strokeJoin': 'stroke-linejoin',
    'strokeDash': 'stroke-dasharray',
    'strokeDashOffset': 'stroke-dashoffset',
    'strokeMiterLimit': 'stroke-miterlimit',
    'opacity': 'opacity',
    'blend': 'mix-blend-mode'
  };
  var styleProperties = Object.keys(styles);

  var ns = metadata.xmlns;
  function SVGRenderer(loader) {
    Renderer.call(this, loader);
    this._dirtyID = 0;
    this._dirty = [];
    this._svg = null;
    this._root = null;
    this._defs = null;
  }
  var prototype$O = inherits(SVGRenderer, Renderer);
  var base$2 = Renderer.prototype;

  prototype$O.initialize = function (el, width, height, padding) {
    if (el) {
      this._svg = domChild(el, 0, 'svg', ns);

      this._svg.setAttribute('class', 'marks');

      domClear(el, 1); // set the svg root group

      this._root = domChild(this._svg, 0, 'g', ns);
      domClear(this._svg, 1);
    } // create the svg definitions cache


    this._defs = {
      gradient: {},
      clipping: {}
    }; // set background color if defined

    this.background(this._bgcolor);
    return base$2.initialize.call(this, el, width, height, padding);
  };

  prototype$O.background = function (bgcolor) {
    if (arguments.length && this._svg) {
      this._svg.style.setProperty('background-color', bgcolor);
    }

    return base$2.background.apply(this, arguments);
  };

  prototype$O.resize = function (width, height, origin, scaleFactor) {
    base$2.resize.call(this, width, height, origin, scaleFactor);

    if (this._svg) {
      this._svg.setAttribute('width', this._width * this._scale);

      this._svg.setAttribute('height', this._height * this._scale);

      this._svg.setAttribute('viewBox', '0 0 ' + this._width + ' ' + this._height);

      this._root.setAttribute('transform', 'translate(' + this._origin + ')');
    }

    this._dirty = [];
    return this;
  };

  prototype$O.canvas = function () {
    return this._svg;
  };

  prototype$O.svg = function () {
    if (!this._svg) return null;
    var attr = {
      class: 'marks',
      width: this._width * this._scale,
      height: this._height * this._scale,
      viewBox: '0 0 ' + this._width + ' ' + this._height
    };

    for (var key in metadata) {
      attr[key] = metadata[key];
    }

    var bg = !this._bgcolor ? '' : openTag('rect', {
      width: this._width,
      height: this._height,
      style: 'fill: ' + this._bgcolor + ';'
    }) + closeTag('rect');
    return openTag('svg', attr) + bg + this._svg.innerHTML + closeTag('svg');
  }; // -- Render entry point --


  prototype$O._render = function (scene) {
    // perform spot updates and re-render markup
    if (this._dirtyCheck()) {
      if (this._dirtyAll) this._resetDefs();
      this.draw(this._root, scene);
      domClear(this._root, 1);
    }

    this.updateDefs();
    this._dirty = [];
    ++this._dirtyID;
    return this;
  }; // -- Manage SVG definitions ('defs') block --


  prototype$O.updateDefs = function () {
    var svg = this._svg,
        defs = this._defs,
        el = defs.el,
        index = 0,
        id;

    for (id in defs.gradient) {
      if (!el) defs.el = el = domChild(svg, 0, 'defs', ns);
      index = updateGradient(el, defs.gradient[id], index);
    }

    for (id in defs.clipping) {
      if (!el) defs.el = el = domChild(svg, 0, 'defs', ns);
      index = updateClipping(el, defs.clipping[id], index);
    } // clean-up


    if (el) {
      if (index === 0) {
        svg.removeChild(el);
        defs.el = null;
      } else {
        domClear(el, index);
      }
    }
  };

  function updateGradient(el, grad, index) {
    var i, n, stop;

    if (grad.gradient === 'radial') {
      // SVG radial gradients automatically transform to normalized bbox
      // coordinates, in a way that is cumbersome to replicate in canvas.
      // We wrap the radial gradient in a pattern element, allowing us to
      // maintain a circular gradient that matches what canvas provides.
      var pt = domChild(el, index++, 'pattern', ns);
      pt.setAttribute('id', patternPrefix + grad.id);
      pt.setAttribute('viewBox', '0,0,1,1');
      pt.setAttribute('width', '100%');
      pt.setAttribute('height', '100%');
      pt.setAttribute('preserveAspectRatio', 'xMidYMid slice');
      pt = domChild(pt, 0, 'rect', ns);
      pt.setAttribute('width', '1');
      pt.setAttribute('height', '1');
      pt.setAttribute('fill', 'url(' + href() + '#' + grad.id + ')');
      el = domChild(el, index++, 'radialGradient', ns);
      el.setAttribute('id', grad.id);
      el.setAttribute('fx', grad.x1);
      el.setAttribute('fy', grad.y1);
      el.setAttribute('fr', grad.r1);
      el.setAttribute('cx', grad.x2);
      el.setAttribute('cy', grad.y2);
      el.setAttribute('r', grad.r2);
    } else {
      el = domChild(el, index++, 'linearGradient', ns);
      el.setAttribute('id', grad.id);
      el.setAttribute('x1', grad.x1);
      el.setAttribute('x2', grad.x2);
      el.setAttribute('y1', grad.y1);
      el.setAttribute('y2', grad.y2);
    }

    for (i = 0, n = grad.stops.length; i < n; ++i) {
      stop = domChild(el, i, 'stop', ns);
      stop.setAttribute('offset', grad.stops[i].offset);
      stop.setAttribute('stop-color', grad.stops[i].color);
    }

    domClear(el, i);
    return index;
  }

  function updateClipping(el, clip, index) {
    var mask;
    el = domChild(el, index, 'clipPath', ns);
    el.setAttribute('id', clip.id);

    if (clip.path) {
      mask = domChild(el, 0, 'path', ns);
      mask.setAttribute('d', clip.path);
    } else {
      mask = domChild(el, 0, 'rect', ns);
      mask.setAttribute('x', 0);
      mask.setAttribute('y', 0);
      mask.setAttribute('width', clip.width);
      mask.setAttribute('height', clip.height);
    }

    domClear(el, 1);
    return index + 1;
  }

  prototype$O._resetDefs = function () {
    var def = this._defs;
    def.gradient = {};
    def.clipping = {};
  }; // -- Manage rendering of items marked as dirty --


  prototype$O.dirty = function (item) {
    if (item.dirty !== this._dirtyID) {
      item.dirty = this._dirtyID;

      this._dirty.push(item);
    }
  };

  prototype$O.isDirty = function (item) {
    return this._dirtyAll || !item._svg || item.dirty === this._dirtyID;
  };

  prototype$O._dirtyCheck = function () {
    this._dirtyAll = true;
    var items = this._dirty;
    if (!items.length || !this._dirtyID) return true;
    var id = ++this._dirtyID,
        item,
        mark,
        type,
        mdef,
        i,
        n,
        o;

    for (i = 0, n = items.length; i < n; ++i) {
      item = items[i];
      mark = item.mark;

      if (mark.marktype !== type) {
        // memoize mark instance lookup
        type = mark.marktype;
        mdef = Marks[type];
      }

      if (mark.zdirty && mark.dirty !== id) {
        this._dirtyAll = false;
        dirtyParents(item, id);
        mark.items.forEach(function (i) {
          i.dirty = id;
        });
      }

      if (mark.zdirty) continue; // handle in standard drawing pass

      if (item.exit) {
        // EXIT
        if (mdef.nested && mark.items.length) {
          // if nested mark with remaining points, update instead
          o = mark.items[0];
          if (o._svg) this._update(mdef, o._svg, o);
        } else if (item._svg) {
          // otherwise remove from DOM
          o = item._svg.parentNode;
          if (o) o.removeChild(item._svg);
        }

        item._svg = null;
        continue;
      }

      item = mdef.nested ? mark.items[0] : item;
      if (item._update === id) continue; // already visited

      if (!item._svg || !item._svg.ownerSVGElement) {
        // ENTER
        this._dirtyAll = false;
        dirtyParents(item, id);
      } else {
        // IN-PLACE UPDATE
        this._update(mdef, item._svg, item);
      }

      item._update = id;
    }

    return !this._dirtyAll;
  };

  function dirtyParents(item, id) {
    for (; item && item.dirty !== id; item = item.mark.group) {
      item.dirty = id;

      if (item.mark && item.mark.dirty !== id) {
        item.mark.dirty = id;
      } else return;
    }
  } // -- Construct & maintain scenegraph to SVG mapping ---
  // Draw a mark container.


  prototype$O.draw = function (el, scene, prev) {
    if (!this.isDirty(scene)) return scene._svg;
    var renderer = this,
        svg = this._svg,
        mdef = Marks[scene.marktype],
        events = scene.interactive === false ? 'none' : null,
        isGroup = mdef.tag === 'g',
        sibling = null,
        i = 0,
        parent;
    parent = bind(scene, el, prev, 'g', svg);
    parent.setAttribute('class', cssClass(scene));

    if (!isGroup) {
      parent.style.setProperty('pointer-events', events);
    }

    if (scene.clip) {
      parent.setAttribute('clip-path', clip$1(renderer, scene, scene.group));
    } else {
      parent.removeAttribute('clip-path');
    }

    function process(item) {
      var dirty = renderer.isDirty(item),
          node = bind(item, parent, sibling, mdef.tag, svg);

      if (dirty) {
        renderer._update(mdef, node, item);

        if (isGroup) recurse(renderer, node, item);
      }

      sibling = node;
      ++i;
    }

    if (mdef.nested) {
      if (scene.items.length) process(scene.items[0]);
    } else {
      visit(scene, process);
    }

    domClear(parent, i);
    return parent;
  }; // Recursively process group contents.


  function recurse(renderer, el, group) {
    el = el.lastChild.previousSibling;
    var prev,
        idx = 0;
    visit(group, function (item) {
      prev = renderer.draw(el, item, prev);
      ++idx;
    }); // remove any extraneous DOM elements

    domClear(el, 1 + idx);
  } // Bind a scenegraph item to an SVG DOM element.
  // Create new SVG elements as needed.


  function bind(item, el, sibling, tag, svg) {
    var node = item._svg,
        doc; // create a new dom node if needed

    if (!node) {
      doc = el.ownerDocument;
      node = domCreate(doc, tag, ns);
      item._svg = node;

      if (item.mark) {
        node.__data__ = item;
        node.__values__ = {
          fill: 'default'
        }; // if group, create background, content, and foreground elements

        if (tag === 'g') {
          var bg = domCreate(doc, 'path', ns);
          node.appendChild(bg);
          bg.__data__ = item;
          var cg = domCreate(doc, 'g', ns);
          node.appendChild(cg);
          cg.__data__ = item;
          var fg = domCreate(doc, 'path', ns);
          node.appendChild(fg);
          fg.__data__ = item;
          fg.__values__ = {
            fill: 'default'
          };
        }
      }
    } // (re-)insert if (a) not contained in SVG or (b) sibling order has changed


    if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) {
      el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
    }

    return node;
  }

  function siblingCheck(node, sibling) {
    return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling; // treat null/undefined the same
  } // -- Set attributes & styles on SVG elements ---


  var element = null,
      // temp var for current SVG element
  values = null; // temp var for current values hash
  // Extra configuration for certain mark types

  var mark_extras = {
    group: function group(mdef, el, item) {
      var fg, bg;
      element = fg = el.childNodes[2];
      values = fg.__values__;
      mdef.foreground(emit, item, this);
      values = el.__values__; // use parent's values hash

      element = el.childNodes[1];
      mdef.content(emit, item, this);
      element = bg = el.childNodes[0];
      mdef.background(emit, item, this);
      var value = item.mark.interactive === false ? 'none' : null;

      if (value !== values.events) {
        fg.style.setProperty('pointer-events', value);
        bg.style.setProperty('pointer-events', value);
        values.events = value;
      }

      if (item.strokeForeground && item.stroke) {
        var fill = item.fill;
        fg.style.removeProperty('display'); // set style of background

        this.style(bg, item);
        bg.style.removeProperty('stroke'); // set style of foreground

        if (fill) item.fill = null;
        values = fg.__values__;
        this.style(fg, item);
        if (fill) item.fill = fill; // leave element null to prevent downstream styling

        element = null;
      } else {
        // ensure foreground is ignored
        fg.style.setProperty('display', 'none');
        fg.style.setProperty('fill', 'none');
      }
    },
    image: function image(mdef, el, item) {
      if (item.smooth === false) {
        setStyle(el, 'image-rendering', 'optimizeSpeed');
        setStyle(el, 'image-rendering', 'pixelated');
      } else {
        setStyle(el, 'image-rendering', null);
      }
    },
    text: function text(mdef, el, item) {
      var tl = textLines(item),
          key,
          value,
          doc,
          lh;

      if (isArray(tl)) {
        // multi-line text
        value = tl.map(function (_) {
          return textValue(item, _);
        });
        key = value.join('\n'); // content cache key

        if (key !== values.text) {
          domClear(el, 0);
          doc = el.ownerDocument;
          lh = lineHeight(item);
          value.forEach(function (t, i) {
            var ts = domCreate(doc, 'tspan', ns);
            ts.__data__ = item; // data binding

            ts.textContent = t;

            if (i) {
              ts.setAttribute('x', 0);
              ts.setAttribute('dy', lh);
            }

            el.appendChild(ts);
          });
          values.text = key;
        }
      } else {
        // single-line text
        value = textValue(item, tl);

        if (value !== values.text) {
          el.textContent = value;
          values.text = value;
        }
      }

      setStyle(el, 'font-family', fontFamily(item));
      setStyle(el, 'font-size', fontSize(item) + 'px');
      setStyle(el, 'font-style', item.fontStyle);
      setStyle(el, 'font-variant', item.fontVariant);
      setStyle(el, 'font-weight', item.fontWeight);
    }
  };

  function setStyle(el, name, value) {
    if (value !== values[name]) {
      if (value == null) {
        el.style.removeProperty(name);
      } else {
        el.style.setProperty(name, value + '');
      }

      values[name] = value;
    }
  }

  prototype$O._update = function (mdef, el, item) {
    // set dom element and values cache
    // provides access to emit method
    element = el;
    values = el.__values__; // apply svg attributes

    mdef.attr(emit, item, this); // some marks need special treatment

    var extra = mark_extras[mdef.type];
    if (extra) extra.call(this, mdef, el, item); // apply svg css styles
    // note: element may be modified by 'extra' method

    if (element) this.style(element, item);
  };

  function emit(name, value, ns) {
    // early exit if value is unchanged
    if (value === values[name]) return;

    if (value != null) {
      // if value is provided, update DOM attribute
      if (ns) {
        element.setAttributeNS(ns, name, value);
      } else {
        element.setAttribute(name, value);
      }
    } else {
      // else remove DOM attribute
      if (ns) {
        element.removeAttributeNS(ns, name);
      } else {
        element.removeAttribute(name);
      }
    } // note current value for future comparison


    values[name] = value;
  }

  prototype$O.style = function (el, o) {
    if (o == null) return;
    var i, n, prop, name, value;

    for (i = 0, n = styleProperties.length; i < n; ++i) {
      prop = styleProperties[i];
      value = o[prop];

      if (prop === 'font') {
        value = fontFamily(o);
      }

      if (value === values[prop]) continue;
      name = styles[prop];

      if (value == null) {
        if (name === 'fill') {
          el.style.setProperty(name, 'none');
        } else {
          el.style.removeProperty(name);
        }
      } else {
        if (isGradient(value)) {
          value = gradientRef(value, this._defs.gradient, href());
        }

        el.style.setProperty(name, value + '');
      }

      values[prop] = value;
    }
  };

  function href() {
    var loc;
    return typeof window === 'undefined' ? '' : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;
  }

  function SVGStringRenderer(loader) {
    Renderer.call(this, loader);
    this._text = {
      head: '',
      bg: '',
      root: '',
      foot: '',
      defs: '',
      body: ''
    };
    this._defs = {
      gradient: {},
      clipping: {}
    };
  }
  var prototype$P = inherits(SVGStringRenderer, Renderer);
  var base$3 = Renderer.prototype;

  prototype$P.resize = function (width, height, origin, scaleFactor) {
    base$3.resize.call(this, width, height, origin, scaleFactor);
    var o = this._origin,
        t = this._text;
    var attr = {
      class: 'marks',
      width: this._width * this._scale,
      height: this._height * this._scale,
      viewBox: '0 0 ' + this._width + ' ' + this._height
    };

    for (var key in metadata) {
      attr[key] = metadata[key];
    }

    t.head = openTag('svg', attr);
    var bg = this._bgcolor;
    if (bg === 'transparent' || bg === 'none') bg = null;

    if (bg) {
      t.bg = openTag('rect', {
        width: this._width,
        height: this._height,
        style: 'fill: ' + bg + ';'
      }) + closeTag('rect');
    } else {
      t.bg = '';
    }

    t.root = openTag('g', {
      transform: 'translate(' + o + ')'
    });
    t.foot = closeTag('g') + closeTag('svg');
    return this;
  };

  prototype$P.background = function () {
    var rv = base$3.background.apply(this, arguments);

    if (arguments.length && this._text.head) {
      this.resize(this._width, this._height, this._origin, this._scale);
    }

    return rv;
  };

  prototype$P.svg = function () {
    var t = this._text;
    return t.head + t.bg + t.defs + t.root + t.body + t.foot;
  };

  prototype$P._render = function (scene) {
    this._text.body = this.mark(scene);
    this._text.defs = this.buildDefs();
    return this;
  };

  prototype$P.buildDefs = function () {
    var all = this._defs,
        defs = '',
        i,
        id,
        def,
        tag,
        stops;

    for (id in all.gradient) {
      def = all.gradient[id];
      stops = def.stops;

      if (def.gradient === 'radial') {
        // SVG radial gradients automatically transform to normalized bbox
        // coordinates, in a way that is cumbersome to replicate in canvas.
        // We wrap the radial gradient in a pattern element, allowing us to
        // maintain a circular gradient that matches what canvas provides.
        defs += openTag(tag = 'pattern', {
          id: patternPrefix + id,
          viewBox: '0,0,1,1',
          width: '100%',
          height: '100%',
          preserveAspectRatio: 'xMidYMid slice'
        });
        defs += openTag('rect', {
          width: '1',
          height: '1',
          fill: 'url(#' + id + ')'
        }) + closeTag('rect');
        defs += closeTag(tag);
        defs += openTag(tag = 'radialGradient', {
          id: id,
          fx: def.x1,
          fy: def.y1,
          fr: def.r1,
          cx: def.x2,
          cy: def.y2,
          r: def.r2
        });
      } else {
        defs += openTag(tag = 'linearGradient', {
          id: id,
          x1: def.x1,
          x2: def.x2,
          y1: def.y1,
          y2: def.y2
        });
      }

      for (i = 0; i < stops.length; ++i) {
        defs += openTag('stop', {
          offset: stops[i].offset,
          'stop-color': stops[i].color
        }) + closeTag('stop');
      }

      defs += closeTag(tag);
    }

    for (id in all.clipping) {
      def = all.clipping[id];
      defs += openTag('clipPath', {
        id: id
      });

      if (def.path) {
        defs += openTag('path', {
          d: def.path
        }) + closeTag('path');
      } else {
        defs += openTag('rect', {
          x: 0,
          y: 0,
          width: def.width,
          height: def.height
        }) + closeTag('rect');
      }

      defs += closeTag('clipPath');
    }

    return defs.length > 0 ? openTag('defs') + defs + closeTag('defs') : '';
  };

  var object$1;

  function emit$1(name, value, ns, prefixed) {
    object$1[prefixed || name] = value;
  }

  prototype$P.attributes = function (attr, item) {
    object$1 = {};
    attr(emit$1, item, this);
    return object$1;
  };

  prototype$P.href = function (item) {
    var that = this,
        href = item.href,
        attr;

    if (href) {
      if (attr = that._hrefs && that._hrefs[href]) {
        return attr;
      } else {
        that.sanitizeURL(href).then(function (attr) {
          // rewrite to use xlink namespace
          // note that this will be deprecated in SVG 2.0
          attr['xlink:href'] = attr.href;
          attr.href = null;
          (that._hrefs || (that._hrefs = {}))[href] = attr;
        });
      }
    }

    return null;
  };

  prototype$P.mark = function (scene) {
    var renderer = this,
        mdef = Marks[scene.marktype],
        tag = mdef.tag,
        defs = this._defs,
        str = '',
        style;

    if (tag !== 'g' && scene.interactive === false) {
      style = 'style="pointer-events: none;"';
    } // render opening group tag


    str += openTag('g', {
      'class': cssClass(scene),
      'clip-path': scene.clip ? clip$1(renderer, scene, scene.group) : null
    }, style); // render contained elements

    function process(item) {
      var href = renderer.href(item);
      if (href) str += openTag('a', href);
      style = tag !== 'g' ? applyStyles(item, scene, tag, defs) : null;
      str += openTag(tag, renderer.attributes(mdef.attr, item), style);

      if (tag === 'text') {
        var tl = textLines(item);

        if (isArray(tl)) {
          // multi-line text
          var attrs = {
            x: 0,
            dy: lineHeight(item)
          };

          for (var i = 0; i < tl.length; ++i) {
            str += openTag('tspan', i ? attrs : null) + escape_text(textValue(item, tl[i])) + closeTag('tspan');
          }
        } else {
          // single-line text
          str += escape_text(textValue(item, tl));
        }
      } else if (tag === 'g') {
        var fore = item.strokeForeground,
            fill = item.fill,
            stroke = item.stroke;

        if (fore && stroke) {
          item.stroke = null;
        }

        str += openTag('path', renderer.attributes(mdef.background, item), applyStyles(item, scene, 'bgrect', defs)) + closeTag('path');
        str += openTag('g', renderer.attributes(mdef.content, item)) + renderer.markGroup(item) + closeTag('g');

        if (fore && stroke) {
          if (fill) item.fill = null;
          item.stroke = stroke;
          str += openTag('path', renderer.attributes(mdef.foreground, item), applyStyles(item, scene, 'bgrect', defs)) + closeTag('path');
          if (fill) item.fill = fill;
        } else {
          str += openTag('path', renderer.attributes(mdef.foreground, item), applyStyles({}, scene, 'bgfore', defs)) + closeTag('path');
        }
      }

      str += closeTag(tag);
      if (href) str += closeTag('a');
    }

    if (mdef.nested) {
      if (scene.items && scene.items.length) process(scene.items[0]);
    } else {
      visit(scene, process);
    } // render closing group tag


    return str + closeTag('g');
  };

  prototype$P.markGroup = function (scene) {
    var renderer = this,
        str = '';
    visit(scene, function (item) {
      str += renderer.mark(item);
    });
    return str;
  };

  function applyStyles(o, mark, tag, defs) {
    if (o == null) return '';
    var i,
        n,
        prop,
        name,
        value,
        s = '';

    if (tag === 'bgrect' && mark.interactive === false) {
      s += 'pointer-events: none; ';
    }

    if (tag === 'bgfore') {
      if (mark.interactive === false) {
        s += 'pointer-events: none; ';
      }

      s += 'display: none; ';
    }

    if (tag === 'image') {
      if (o.smooth === false) {
        s += 'image-rendering: optimizeSpeed; image-rendering: pixelated; ';
      }
    }

    if (tag === 'text') {
      s += 'font-family: ' + fontFamily(o) + '; ';
      s += 'font-size: ' + fontSize(o) + 'px; ';
      if (o.fontStyle) s += 'font-style: ' + o.fontStyle + '; ';
      if (o.fontVariant) s += 'font-variant: ' + o.fontVariant + '; ';
      if (o.fontWeight) s += 'font-weight: ' + o.fontWeight + '; ';
    }

    for (i = 0, n = styleProperties.length; i < n; ++i) {
      prop = styleProperties[i];
      name = styles[prop];
      value = o[prop];

      if (value == null) {
        if (name === 'fill') {
          s += 'fill: none; ';
        }
      } else if (value === 'transparent' && (name === 'fill' || name === 'stroke')) {
        // transparent is not a legal SVG value, so map to none instead
        s += name + ': none; ';
      } else {
        if (isGradient(value)) {
          value = gradientRef(value, defs.gradient, '');
        }

        s += name + ': ' + value + '; ';
      }
    }

    return s ? 'style="' + s.trim() + '"' : null;
  }

  function escape_text(s) {
    return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  var Canvas = 'canvas';
  var PNG = 'png';
  var SVG = 'svg';
  var None$2 = 'none';
  var RenderType = {
    Canvas: Canvas,
    PNG: PNG,
    SVG: SVG,
    None: None$2
  };
  var modules = {};
  modules[Canvas] = modules[PNG] = {
    renderer: CanvasRenderer,
    headless: CanvasRenderer,
    handler: CanvasHandler
  };
  modules[SVG] = {
    renderer: SVGRenderer,
    headless: SVGStringRenderer,
    handler: SVGHandler
  };
  modules[None$2] = {};
  function renderModule(name, _) {
    name = String(name || '').toLowerCase();

    if (arguments.length > 1) {
      modules[name] = _;
      return this;
    } else {
      return modules[name];
    }
  }

  function intersect$1(scene, bounds, filter) {
    var hits = [],
        // intersection results
    box = new Bounds().union(bounds),
        // defensive copy
    type = scene.marktype;
    return type ? intersectMark(scene, box, filter, hits) : type === 'group' ? intersectGroup(scene, box, filter, hits) : error('Intersect scene must be mark node or group item.');
  }

  function intersectMark(mark, box, filter, hits) {
    if (visitMark(mark, box, filter)) {
      var items = mark.items,
          type = mark.marktype,
          n = items.length;
      var i = 0;

      if (type === 'group') {
        for (; i < n; ++i) {
          intersectGroup(items[i], box, filter, hits);
        }
      } else {
        for (var test = Marks[type].isect; i < n; ++i) {
          var item = items[i];
          if (intersectItem(item, box, test)) hits.push(item);
        }
      }
    }

    return hits;
  }

  function visitMark(mark, box, filter) {
    // process if bounds intersect and if
    // (1) mark is a group mark (so we must recurse), or
    // (2) mark is interactive and passes filter
    return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === 'group' || mark.interactive !== false && (!filter || filter(mark)));
  }

  function intersectGroup(group, box, filter, hits) {
    // test intersect against group
    // skip groups by default unless filter says otherwise
    if (filter && filter(group.mark) && intersectItem(group, box, Marks.group.isect)) {
      hits.push(group);
    } // recursively test children marks
    // translate box to group coordinate space


    var marks = group.items,
        n = marks && marks.length;

    if (n) {
      var x = group.x || 0,
          y = group.y || 0;
      box.translate(-x, -y);

      for (var i = 0; i < n; ++i) {
        intersectMark(marks[i], box, filter, hits);
      }

      box.translate(x, y);
    }

    return hits;
  }

  function intersectItem(item, box, test) {
    // test bounds enclosure, bounds intersection, then detailed test
    var bounds = item.bounds;
    return box.encloses(bounds) || box.intersects(bounds) && test(item, box);
  }

  var clipBounds = new Bounds();
  function boundClip (mark) {
    var clip = mark.clip;

    if (isFunction(clip)) {
      clip(context(clipBounds.clear()));
    } else if (clip) {
      clipBounds.set(0, 0, mark.group.width, mark.group.height);
    } else return;

    mark.bounds.intersect(clipBounds);
  }

  var TOLERANCE = 1e-9;
  function sceneEqual(a, b, key) {
    return a === b ? true : key === 'path' ? pathEqual(a, b) : a instanceof Date && b instanceof Date ? +a === +b : isNumber(a) && isNumber(b) ? Math.abs(a - b) <= TOLERANCE : !a || !b || !isObject(a) && !isObject(b) ? a == b : a == null || b == null ? false : objectEqual(a, b);
  }
  function pathEqual(a, b) {
    return sceneEqual(pathParse(a), pathParse(b));
  }

  function objectEqual(a, b) {
    var ka = Object.keys(a),
        kb = Object.keys(b),
        key,
        i;
    if (ka.length !== kb.length) return false;
    ka.sort();
    kb.sort();

    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i]) return false;
    }

    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!sceneEqual(a[key], b[key], key)) return false;
    }

    return _typeof(a) === _typeof(b);
  }

  /**
   * Calculate bounding boxes for scenegraph items.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {object} params.mark - The scenegraph mark instance to bound.
   */

  function Bound(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$Q = inherits(Bound, Transform$1);

  prototype$Q.transform = function (_, pulse) {
    var view = pulse.dataflow,
        mark = _.mark,
        type = mark.marktype,
        entry = Marks[type],
        bound = entry.bound,
        markBounds = mark.bounds,
        rebound;

    if (entry.nested) {
      // multi-item marks have a single bounds instance
      if (mark.items.length) view.dirty(mark.items[0]);
      markBounds = boundItem$1(mark, bound);
      mark.items.forEach(function (item) {
        item.bounds.clear().union(markBounds);
      });
    } else if (type === Group || _.modified()) {
      // operator parameters modified -> re-bound all items
      // updates group bounds in response to modified group content
      pulse.visit(pulse.MOD, function (item) {
        view.dirty(item);
      });
      markBounds.clear();
      mark.items.forEach(function (item) {
        markBounds.union(boundItem$1(item, bound));
      }); // force reflow for axes/legends/titles to propagate any layout changes

      switch (mark.role) {
        case AxisRole:
        case LegendRole:
        case TitleRole:
          pulse.reflow();
      }
    } else {
      // incrementally update bounds, re-bound mark as needed
      rebound = pulse.changed(pulse.REM);
      pulse.visit(pulse.ADD, function (item) {
        markBounds.union(boundItem$1(item, bound));
      });
      pulse.visit(pulse.MOD, function (item) {
        rebound = rebound || markBounds.alignsWith(item.bounds);
        view.dirty(item);
        markBounds.union(boundItem$1(item, bound));
      });

      if (rebound) {
        markBounds.clear();
        mark.items.forEach(function (item) {
          markBounds.union(item.bounds);
        });
      }
    } // ensure mark bounds do not exceed any clipping region


    boundClip(mark);
    return pulse.modifies('bounds');
  };

  function boundItem$1(item, bound, opt) {
    return bound(item.bounds.clear(), item, opt);
  }

  var COUNTER_NAME = ':vega_identifier:';
  /**
   * Adds a unique identifier to all added tuples.
   * This transform creates a new signal that serves as an id counter.
   * As a result, the id counter is shared across all instances of this
   * transform, generating unique ids across multiple data streams. In
   * addition, this signal value can be included in a snapshot of the
   * dataflow state, enabling correct resumption of id allocation.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {string} params.as - The field name for the generated identifier.
   */

  function Identifier(params) {
    Transform$1.call(this, 0, params);
  }
  Identifier.Definition = {
    "type": "Identifier",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "as",
      "type": "string",
      "required": true
    }]
  };
  var prototype$R = inherits(Identifier, Transform$1);

  prototype$R.transform = function (_, pulse) {
    var counter = getCounter(pulse.dataflow),
        id = counter.value,
        as = _.as;
    pulse.visit(pulse.ADD, function (t) {
      if (!t[as]) t[as] = ++id;
    });
    counter.set(this.value = id);
    return pulse;
  };

  function getCounter(view) {
    var counter = view._signals[COUNTER_NAME];

    if (!counter) {
      view._signals[COUNTER_NAME] = counter = view.add(0);
    }

    return counter;
  }

  /**
   * Bind scenegraph items to a scenegraph mark instance.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {object} params.markdef - The mark definition for creating the mark.
   *   This is an object of legal scenegraph mark properties which *must* include
   *   the 'marktype' property.
   */

  function Mark(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$S = inherits(Mark, Transform$1);

  prototype$S.transform = function (_, pulse) {
    var mark = this.value; // acquire mark on first invocation, bind context and group

    if (!mark) {
      mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup$2(_), _.index);
      mark.group.context = _.context;
      if (!_.context.group) _.context.group = mark.group;
      mark.source = this.source; // point to upstream collector

      mark.clip = _.clip;
      mark.interactive = _.interactive;
      this.value = mark;
    } // initialize entering items


    var Init = mark.marktype === Group ? GroupItem : Item$1;
    pulse.visit(pulse.ADD, function (item) {
      Init.call(item, mark);
    }); // update clipping and/or interactive status

    if (_.modified('clip') || _.modified('interactive')) {
      mark.clip = _.clip;
      mark.interactive = !!_.interactive;
      mark.zdirty = true; // force scenegraph re-eval

      pulse.reflow();
    } // bind items array to scenegraph mark


    mark.items = pulse.source;
    return pulse;
  };

  function lookup$2(_) {
    var g = _.groups,
        p = _.parent;
    return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;
  }

  /**
   * Analyze items for overlap, changing opacity to hide items with
   * overlapping bounding boxes. This transform will preserve at least
   * two items (e.g., first and last) even if overlap persists.
   * @param {object} params - The parameters for this operator.
   * @param {function(*,*): number} [params.sort] - A comparator
   *   function for sorting items.
   * @param {object} [params.method] - The overlap removal method to apply.
   *   One of 'parity' (default, hide every other item until there is no
   *   more overlap) or 'greedy' (sequentially scan and hide and items that
   *   overlap with the last visible item).
   * @param {object} [params.boundScale] - A scale whose range should be used
   *   to bound the items. Items exceeding the bounds of the scale range
   *   will be treated as overlapping. If null or undefined, no bounds check
   *   will be applied.
   * @param {object} [params.boundOrient] - The orientation of the scale
   *   (top, bottom, left, or right) used to bound items. This parameter is
   *   ignored if boundScale is null or undefined.
   * @param {object} [params.boundTolerance] - The tolerance in pixels for
   *   bound inclusion testing (default 1). This specifies by how many pixels
   *   an item's bounds may exceed the scale range bounds and not be culled.
   * @constructor
   */

  function Overlap(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$T = inherits(Overlap, Transform$1);
  var methods = {
    parity: function parity(items) {
      return items.filter(function (item, i) {
        return i % 2 ? item.opacity = 0 : 1;
      });
    },
    greedy: function greedy(items, sep) {
      var a;
      return items.filter(function (b, i) {
        if (!i || !intersect$2(a.bounds, b.bounds, sep)) {
          a = b;
          return 1;
        } else {
          return b.opacity = 0;
        }
      });
    }
  }; // compute bounding box intersection
  // including padding pixels of separation

  function intersect$2(a, b, sep) {
    return sep > Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);
  }

  function hasOverlap(items, pad) {
    for (var i = 1, n = items.length, a = items[0].bounds, b; i < n; a = b, ++i) {
      if (intersect$2(a, b = items[i].bounds, pad)) return true;
    }
  }

  function hasBounds(item) {
    var b = item.bounds;
    return b.width() > 1 && b.height() > 1;
  }

  function boundTest(scale, orient, tolerance) {
    var range = scale.range(),
        b = new Bounds();

    if (orient === Top || orient === Bottom) {
      b.set(range[0], -Infinity, range[1], +Infinity);
    } else {
      b.set(-Infinity, range[0], +Infinity, range[1]);
    }

    b.expand(tolerance || 1);
    return function (item) {
      return b.encloses(item.bounds);
    };
  } // reset all items to be fully opaque


  function reset(source) {
    source.forEach(function (item) {
      return item.opacity = 1;
    });
    return source;
  } // add all tuples to mod, fork pulse if parameters were modified
  // fork prevents cross-stream tuple pollution (e.g., pulse from scale)


  function reflow(pulse, _) {
    return pulse.reflow(_.modified()).modifies('opacity');
  }

  prototype$T.transform = function (_, pulse) {
    var reduce = methods[_.method] || methods.parity,
        source = pulse.materialize(pulse.SOURCE).source,
        sep = _.separation || 0,
        items,
        test,
        bounds;
    if (!source || !source.length) return;

    if (!_.method) {
      // early exit if method is falsy
      if (_.modified('method')) {
        reset(source);
        pulse = reflow(pulse, _);
      }

      return pulse;
    } // skip labels with no content


    source = source.filter(hasBounds); // early exit, nothing to do

    if (!source.length) return;

    if (_.sort) {
      source = source.slice().sort(_.sort);
    }

    items = reset(source);
    pulse = reflow(pulse, _);

    if (items.length >= 3 && hasOverlap(items, sep)) {
      do {
        items = reduce(items, sep);
      } while (items.length >= 3 && hasOverlap(items, sep));

      if (items.length < 3 && !peek(source).opacity) {
        if (items.length > 1) peek(items).opacity = 0;
        peek(source).opacity = 1;
      }
    }

    if (_.boundScale && _.boundTolerance >= 0) {
      test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
      source.forEach(function (item) {
        if (!test(item)) item.opacity = 0;
      });
    } // re-calculate mark bounds


    bounds = items[0].mark.bounds.clear();
    source.forEach(function (item) {
      if (item.opacity) bounds.union(item.bounds);
    });
    return pulse;
  };

  /**
   * Queue modified scenegraph items for rendering.
   * @constructor
   */

  function Render(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$U = inherits(Render, Transform$1);

  prototype$U.transform = function (_, pulse) {
    var view = pulse.dataflow;
    pulse.visit(pulse.ALL, function (item) {
      view.dirty(item);
    }); // set z-index dirty flag as needed

    if (pulse.fields && pulse.fields['zindex']) {
      var item = pulse.source && pulse.source[0];
      if (item) item.mark.zdirty = true;
    }
  };

  var tempBounds$2 = new Bounds();
  function set(item, property, value) {
    return item[property] === value ? 0 : (item[property] = value, 1);
  }

  function isYAxis(mark) {
    var orient = mark.items[0].datum.orient;
    return orient === Left || orient === Right;
  }

  function axisIndices(datum) {
    var index = +datum.grid;
    return [datum.ticks ? index++ : -1, // ticks index
    datum.labels ? index++ : -1, // labels index
    index + +datum.domain // title index
    ];
  }

  function axisLayout(view, axis, width, height) {
    var item = axis.items[0],
        datum = item.datum,
        orient = datum.orient,
        delta = datum.translate != null ? datum.translate : 0.5,
        indices = axisIndices(datum),
        range = item.range,
        offset = item.offset,
        position = item.position,
        minExtent = item.minExtent,
        maxExtent = item.maxExtent,
        title = datum.title && item.items[indices[2]].items[0],
        titlePadding = item.titlePadding,
        bounds = item.bounds,
        dl = title && multiLineOffset(title),
        x = 0,
        y = 0,
        i,
        s;
    tempBounds$2.clear().union(bounds);
    bounds.clear();
    if ((i = indices[0]) > -1) bounds.union(item.items[i].bounds);
    if ((i = indices[1]) > -1) bounds.union(item.items[i].bounds); // position axis group and title

    switch (orient) {
      case Top:
        x = position || 0;
        y = -offset;
        s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
        bounds.add(0, -s).add(range, 0);
        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 0, -1, bounds);
        break;

      case Left:
        x = -offset;
        y = position || 0;
        s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
        bounds.add(-s, 0).add(0, range);
        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, -1, bounds);
        break;

      case Right:
        x = width + offset;
        y = position || 0;
        s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
        bounds.add(0, 0).add(s, range);
        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, 1, bounds);
        break;

      case Bottom:
        x = position || 0;
        y = height + offset;
        s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
        bounds.add(0, 0).add(range, s);
        if (title) axisTitleLayout(view, title, s, titlePadding, 0, 0, 1, bounds);
        break;

      default:
        x = item.x;
        y = item.y;
    } // update bounds


    boundStroke(bounds.translate(x, y), item);

    if (set(item, 'x', x + delta) | set(item, 'y', y + delta)) {
      item.bounds = tempBounds$2;
      view.dirty(item);
      item.bounds = bounds;
      view.dirty(item);
    }

    return item.mark.bounds.clear().union(bounds);
  }

  function axisTitleLayout(view, title, offset, pad, dl, isYAxis, sign, bounds) {
    var b = title.bounds;

    if (title.auto) {
      var v = sign * (offset + dl + pad);
      var dx = 0,
          dy = 0;
      view.dirty(title);
      isYAxis ? dx = (title.x || 0) - (title.x = v) : dy = (title.y || 0) - (title.y = v);
      title.mark.bounds.clear().union(b.translate(-dx, -dy));
      view.dirty(title);
    }

    bounds.union(b);
  }

  function gridLayoutGroups(group) {
    var _views$rowheaders, _views$rowfooters, _views$colheaders, _views$colfooters, _views$marks;

    var groups = group.items,
        n = groups.length,
        i = 0,
        mark,
        items;
    var views = {
      marks: [],
      rowheaders: [],
      rowfooters: [],
      colheaders: [],
      colfooters: [],
      rowtitle: null,
      coltitle: null
    }; // layout axes, gather legends, collect bounds

    for (; i < n; ++i) {
      mark = groups[i];
      items = mark.items;

      if (mark.marktype === Group) {
        switch (mark.role) {
          case AxisRole:
          case LegendRole:
          case TitleRole:
            break;

          case RowHeader:
            (_views$rowheaders = views.rowheaders).push.apply(_views$rowheaders, _toConsumableArray(items));

            break;

          case RowFooter:
            (_views$rowfooters = views.rowfooters).push.apply(_views$rowfooters, _toConsumableArray(items));

            break;

          case ColHeader:
            (_views$colheaders = views.colheaders).push.apply(_views$colheaders, _toConsumableArray(items));

            break;

          case ColFooter:
            (_views$colfooters = views.colfooters).push.apply(_views$colfooters, _toConsumableArray(items));

            break;

          case RowTitle:
            views.rowtitle = items[0];
            break;

          case ColTitle:
            views.coltitle = items[0];
            break;

          default:
            (_views$marks = views.marks).push.apply(_views$marks, _toConsumableArray(items));

        }
      }
    }

    return views;
  }

  function bboxFlush(item) {
    return new Bounds().set(0, 0, item.width || 0, item.height || 0);
  }

  function bboxFull(item) {
    var b = item.bounds.clone();
    return b.empty() ? b.set(0, 0, 0, 0) : b.translate(-(item.x || 0), -(item.y || 0));
  }

  function get$3(opt, key, d) {
    var v = isObject(opt) ? opt[key] : opt;
    return v != null ? v : d !== undefined ? d : 0;
  }

  function offsetValue(v) {
    return v < 0 ? Math.ceil(-v) : 0;
  }

  function gridLayout(view, groups, opt) {
    var dirty = !opt.nodirty,
        bbox = opt.bounds === Flush ? bboxFlush : bboxFull,
        bounds = tempBounds$2.set(0, 0, 0, 0),
        alignCol = get$3(opt.align, Column),
        alignRow = get$3(opt.align, Row),
        padCol = get$3(opt.padding, Column),
        padRow = get$3(opt.padding, Row),
        ncols = opt.columns || groups.length,
        nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),
        n = groups.length,
        xOffset = Array(n),
        xExtent = Array(ncols),
        xMax = 0,
        yOffset = Array(n),
        yExtent = Array(nrows),
        yMax = 0,
        dx = Array(n),
        dy = Array(n),
        boxes = Array(n),
        m,
        i,
        c,
        r,
        b,
        g,
        px,
        py,
        x,
        y,
        offset;

    for (i = 0; i < ncols; ++i) {
      xExtent[i] = 0;
    }

    for (i = 0; i < nrows; ++i) {
      yExtent[i] = 0;
    } // determine offsets for each group


    for (i = 0; i < n; ++i) {
      g = groups[i];
      b = boxes[i] = bbox(g);
      g.x = g.x || 0;
      dx[i] = 0;
      g.y = g.y || 0;
      dy[i] = 0;
      c = i % ncols;
      r = ~~(i / ncols);
      xMax = Math.max(xMax, px = Math.ceil(b.x2));
      yMax = Math.max(yMax, py = Math.ceil(b.y2));
      xExtent[c] = Math.max(xExtent[c], px);
      yExtent[r] = Math.max(yExtent[r], py);
      xOffset[i] = padCol + offsetValue(b.x1);
      yOffset[i] = padRow + offsetValue(b.y1);
      if (dirty) view.dirty(groups[i]);
    } // set initial alignment offsets


    for (i = 0; i < n; ++i) {
      if (i % ncols === 0) xOffset[i] = 0;
      if (i < ncols) yOffset[i] = 0;
    } // enforce column alignment constraints


    if (alignCol === Each) {
      for (c = 1; c < ncols; ++c) {
        for (offset = 0, i = c; i < n; i += ncols) {
          if (offset < xOffset[i]) offset = xOffset[i];
        }

        for (i = c; i < n; i += ncols) {
          xOffset[i] = offset + xExtent[c - 1];
        }
      }
    } else if (alignCol === All) {
      for (offset = 0, i = 0; i < n; ++i) {
        if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
      }

      for (i = 0; i < n; ++i) {
        if (i % ncols) xOffset[i] = offset + xMax;
      }
    } else {
      for (alignCol = false, c = 1; c < ncols; ++c) {
        for (i = c; i < n; i += ncols) {
          xOffset[i] += xExtent[c - 1];
        }
      }
    } // enforce row alignment constraints


    if (alignRow === Each) {
      for (r = 1; r < nrows; ++r) {
        for (offset = 0, i = r * ncols, m = i + ncols; i < m; ++i) {
          if (offset < yOffset[i]) offset = yOffset[i];
        }

        for (i = r * ncols; i < m; ++i) {
          yOffset[i] = offset + yExtent[r - 1];
        }
      }
    } else if (alignRow === All) {
      for (offset = 0, i = ncols; i < n; ++i) {
        if (offset < yOffset[i]) offset = yOffset[i];
      }

      for (i = ncols; i < n; ++i) {
        yOffset[i] = offset + yMax;
      }
    } else {
      for (alignRow = false, r = 1; r < nrows; ++r) {
        for (i = r * ncols, m = i + ncols; i < m; ++i) {
          yOffset[i] += yExtent[r - 1];
        }
      }
    } // perform horizontal grid layout


    for (x = 0, i = 0; i < n; ++i) {
      x = xOffset[i] + (i % ncols ? x : 0);
      dx[i] += x - groups[i].x;
    } // perform vertical grid layout


    for (c = 0; c < ncols; ++c) {
      for (y = 0, i = c; i < n; i += ncols) {
        y += yOffset[i];
        dy[i] += y - groups[i].y;
      }
    } // perform horizontal centering


    if (alignCol && get$3(opt.center, Column) && nrows > 1) {
      for (i = 0; i < n; ++i) {
        b = alignCol === All ? xMax : xExtent[i % ncols];
        x = b - boxes[i].x2 - groups[i].x - dx[i];
        if (x > 0) dx[i] += x / 2;
      }
    } // perform vertical centering


    if (alignRow && get$3(opt.center, Row) && ncols !== 1) {
      for (i = 0; i < n; ++i) {
        b = alignRow === All ? yMax : yExtent[~~(i / ncols)];
        y = b - boxes[i].y2 - groups[i].y - dy[i];
        if (y > 0) dy[i] += y / 2;
      }
    } // position grid relative to anchor


    for (i = 0; i < n; ++i) {
      bounds.union(boxes[i].translate(dx[i], dy[i]));
    }

    x = get$3(opt.anchor, X);
    y = get$3(opt.anchor, Y);

    switch (get$3(opt.anchor, Column)) {
      case End:
        x -= bounds.width();
        break;

      case Middle:
        x -= bounds.width() / 2;
    }

    switch (get$3(opt.anchor, Row)) {
      case End:
        y -= bounds.height();
        break;

      case Middle:
        y -= bounds.height() / 2;
    }

    x = Math.round(x);
    y = Math.round(y); // update mark positions, bounds, dirty

    bounds.clear();

    for (i = 0; i < n; ++i) {
      groups[i].mark.bounds.clear();
    }

    for (i = 0; i < n; ++i) {
      g = groups[i];
      g.x += dx[i] += x;
      g.y += dy[i] += y;
      bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
      if (dirty) view.dirty(g);
    }

    return bounds;
  }
  function trellisLayout(view, group, opt) {
    var views = gridLayoutGroups(group),
        groups = views.marks,
        bbox = opt.bounds === Flush ? boundFlush : boundFull,
        off = opt.offset,
        ncols = opt.columns || groups.length,
        nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),
        cells = nrows * ncols,
        x,
        y,
        x2,
        y2,
        anchor,
        band,
        offset; // -- initial grid layout

    var bounds = gridLayout(view, groups, opt); // -- layout grid headers and footers --
    // perform row header layout

    if (views.rowheaders) {
      band = get$3(opt.headerBand, Row, null);
      x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get$3(off, 'rowHeader'), min$2, 0, bbox, 'x1', 0, ncols, 1, band);
    } // perform column header layout


    if (views.colheaders) {
      band = get$3(opt.headerBand, Column, null);
      y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get$3(off, 'columnHeader'), min$2, 1, bbox, 'y1', 0, 1, ncols, band);
    } // perform row footer layout


    if (views.rowfooters) {
      band = get$3(opt.footerBand, Row, null);
      x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows, get$3(off, 'rowFooter'), max$2, 0, bbox, 'x2', ncols - 1, ncols, 1, band);
    } // perform column footer layout


    if (views.colfooters) {
      band = get$3(opt.footerBand, Column, null);
      y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols, get$3(off, 'columnFooter'), max$2, 1, bbox, 'y2', cells - ncols, 1, ncols, band);
    } // perform row title layout


    if (views.rowtitle) {
      anchor = get$3(opt.titleAnchor, Row);
      offset = get$3(off, 'rowTitle');
      offset = anchor === End ? x2 + offset : x - offset;
      band = get$3(opt.titleBand, Row, 0.5);
      layoutTitle(view, views.rowtitle, offset, 0, bounds, band);
    } // perform column title layout


    if (views.coltitle) {
      anchor = get$3(opt.titleAnchor, Column);
      offset = get$3(off, 'columnTitle');
      offset = anchor === End ? y2 + offset : y - offset;
      band = get$3(opt.titleBand, Column, 0.5);
      layoutTitle(view, views.coltitle, offset, 1, bounds, band);
    }
  }

  function boundFlush(item, field) {
    return field === 'x1' ? item.x || 0 : field === 'y1' ? item.y || 0 : field === 'x2' ? (item.x || 0) + (item.width || 0) : field === 'y2' ? (item.y || 0) + (item.height || 0) : undefined;
  }

  function boundFull(item, field) {
    return item.bounds[field];
  } // aggregation functions for grid margin determination


  function min$2(a, b) {
    return Math.floor(Math.min(a, b));
  }

  function max$2(a, b) {
    return Math.ceil(Math.max(a, b));
  }

  function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
    var n = groups.length,
        init = 0,
        edge = 0,
        i,
        j,
        k,
        m,
        b,
        h,
        g,
        x,
        y; // if no groups, early exit and return 0

    if (!n) return init; // compute margin

    for (i = start; i < n; i += stride) {
      if (groups[i]) init = agg(init, bound(groups[i], bf));
    } // if no headers, return margin calculation


    if (!headers.length) return init; // check if number of headers exceeds number of rows or columns

    if (headers.length > limit) {
      view.warn('Grid headers exceed limit: ' + limit);
      headers = headers.slice(0, limit);
    } // apply offset


    init += offset; // clear mark bounds for all headers

    for (j = 0, m = headers.length; j < m; ++j) {
      view.dirty(headers[j]);
      headers[j].mark.bounds.clear();
    } // layout each header


    for (i = start, j = 0, m = headers.length; j < m; ++j, i += stride) {
      h = headers[j];
      b = h.mark.bounds; // search for nearest group to align to
      // necessary if table has empty cells

      for (k = i; k >= 0 && (g = groups[k]) == null; k -= back) {
      } // assign coordinates and update bounds


      if (isX) {
        x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
        y = init;
      } else {
        x = init;
        y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
      }

      b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
      h.x = x;
      h.y = y;
      view.dirty(h); // update current edge of layout bounds

      edge = agg(edge, b[bf]);
    }

    return edge;
  }

  function layoutTitle(view, g, offset, isX, bounds, band) {
    if (!g) return;
    view.dirty(g); // compute title coordinates

    var x = offset,
        y = offset;
    isX ? x = Math.round(bounds.x1 + band * bounds.width()) : y = Math.round(bounds.y1 + band * bounds.height()); // assign coordinates and update bounds

    g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
    g.mark.bounds.clear().union(g.bounds);
    g.x = x;
    g.y = y; // queue title for redraw

    view.dirty(g);
  }

  function lookup$3(config, orient) {
    var opt = config[orient] || {};
    return function (key, d) {
      return opt[key] != null ? opt[key] : config[key] != null ? config[key] : d;
    };
  } // if legends specify offset directly, use the maximum specified value


  function offsets(legends, value) {
    var max = -Infinity;
    legends.forEach(function (item) {
      if (item.offset != null) max = Math.max(max, item.offset);
    });
    return max > -Infinity ? max : value;
  }

  function legendParams(g, orient, config, xb, yb, w, h) {
    var _ = lookup$3(config, orient),
        offset = offsets(g, _('offset', 0)),
        anchor = _('anchor', Start),
        mult = anchor === End ? 1 : anchor === Middle ? 0.5 : 0;

    var p = {
      align: Each,
      bounds: _('bounds', Flush),
      columns: _('direction') === 'vertical' ? 1 : g.length,
      padding: _('margin', 8),
      center: _('center'),
      nodirty: true
    };

    switch (orient) {
      case Left:
        p.anchor = {
          x: Math.floor(xb.x1) - offset,
          column: End,
          y: mult * (h || xb.height() + 2 * xb.y1),
          row: anchor
        };
        break;

      case Right:
        p.anchor = {
          x: Math.ceil(xb.x2) + offset,
          y: mult * (h || xb.height() + 2 * xb.y1),
          row: anchor
        };
        break;

      case Top:
        p.anchor = {
          y: Math.floor(yb.y1) - offset,
          row: End,
          x: mult * (w || yb.width() + 2 * yb.x1),
          column: anchor
        };
        break;

      case Bottom:
        p.anchor = {
          y: Math.ceil(yb.y2) + offset,
          x: mult * (w || yb.width() + 2 * yb.x1),
          column: anchor
        };
        break;

      case TopLeft:
        p.anchor = {
          x: offset,
          y: offset
        };
        break;

      case TopRight:
        p.anchor = {
          x: w - offset,
          y: offset,
          column: End
        };
        break;

      case BottomLeft:
        p.anchor = {
          x: offset,
          y: h - offset,
          row: End
        };
        break;

      case BottomRight:
        p.anchor = {
          x: w - offset,
          y: h - offset,
          column: End,
          row: End
        };
        break;
    }

    return p;
  }
  function legendLayout(view, legend) {
    var item = legend.items[0],
        datum = item.datum,
        orient = item.orient,
        bounds = item.bounds,
        x = item.x,
        y = item.y,
        w,
        h; // cache current bounds for later comparison

    item._bounds ? item._bounds.clear().union(bounds) : item._bounds = bounds.clone();
    bounds.clear(); // adjust legend to accommodate padding and title

    legendGroupLayout(view, item, item.items[0].items[0]); // aggregate bounds to determine size, and include origin

    bounds = legendBounds(item, bounds);
    w = 2 * item.padding;
    h = 2 * item.padding;

    if (!bounds.empty()) {
      w = Math.ceil(bounds.width() + w);
      h = Math.ceil(bounds.height() + h);
    }

    if (datum.type === Symbols) {
      legendEntryLayout(item.items[0].items[0].items[0].items);
    }

    if (orient !== None$1) {
      item.x = x = 0;
      item.y = y = 0;
    }

    item.width = w;
    item.height = h;
    boundStroke(bounds.set(x, y, x + w, y + h), item);
    item.mark.bounds.clear().union(bounds);
    return item;
  }

  function legendBounds(item, b) {
    // aggregate item bounds
    item.items.forEach(function (_) {
      return b.union(_.bounds);
    }); // anchor to legend origin

    b.x1 = item.padding;
    b.y1 = item.padding;
    return b;
  }

  function legendGroupLayout(view, item, entry) {
    var pad = item.padding,
        ex = pad - entry.x,
        ey = pad - entry.y;

    if (!item.datum.title) {
      if (ex || ey) translate$2(view, entry, ex, ey);
    } else {
      var title = item.items[1].items[0],
          anchor = title.anchor,
          tpad = item.titlePadding || 0,
          tx = pad - title.x,
          ty = pad - title.y;

      switch (title.orient) {
        case Left:
          ex += Math.ceil(title.bounds.width()) + tpad;
          break;

        case Right:
        case Bottom:
          break;

        default:
          ey += title.bounds.height() + tpad;
      }

      if (ex || ey) translate$2(view, entry, ex, ey);

      switch (title.orient) {
        case Left:
          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
          break;

        case Right:
          tx += legendTitleOffset(item, entry, title, End, 0, 0) + tpad;
          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);
          break;

        case Bottom:
          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
          ty += legendTitleOffset(item, entry, title, End, -1, 0, 1) + tpad;
          break;

        default:
          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);
      }

      if (tx || ty) translate$2(view, title, tx, ty); // translate legend if title pushes into negative coordinates

      if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {
        translate$2(view, entry, -tx, 0);
        translate$2(view, title, -tx, 0);
      }
    }
  }

  function legendTitleOffset(item, entry, title, anchor, y, lr, noBar) {
    var grad = item.datum.type !== 'symbol',
        vgrad = title.datum.vgrad,
        e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry,
        s = e.bounds[y ? 'y2' : 'x2'] - item.padding,
        u = vgrad && lr ? s : 0,
        v = vgrad && lr ? 0 : s,
        o = y <= 0 ? 0 : multiLineOffset(title);
    return Math.round(anchor === Start ? u : anchor === End ? v - o : 0.5 * (s - o));
  }

  function translate$2(view, item, dx, dy) {
    item.x += dx;
    item.y += dy;
    item.bounds.translate(dx, dy);
    item.mark.bounds.translate(dx, dy);
    view.dirty(item);
  }

  function legendEntryLayout(entries) {
    // get max widths for each column
    var widths = entries.reduce(function (w, g) {
      w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);
      return w;
    }, {}); // set dimensions of legend entry groups

    entries.forEach(function (g) {
      g.width = widths[g.column];
      g.height = g.bounds.y2 - g.y;
    });
  }

  function titleLayout(view, mark, width, height, viewBounds) {
    var group = mark.items[0],
        frame = group.frame,
        orient = group.orient,
        anchor = group.anchor,
        offset = group.offset,
        padding = group.padding,
        title = group.items[0].items[0],
        subtitle = group.items[1] && group.items[1].items[0],
        end = orient === Left || orient === Right ? height : width,
        start = 0,
        x = 0,
        y = 0,
        sx = 0,
        sy = 0,
        pos;

    if (frame !== Group) {
      orient === Left ? (start = viewBounds.y2, end = viewBounds.y1) : orient === Right ? (start = viewBounds.y1, end = viewBounds.y2) : (start = viewBounds.x1, end = viewBounds.x2);
    } else if (orient === Left) {
      start = height, end = 0;
    }

    pos = anchor === Start ? start : anchor === End ? end : (start + end) / 2;

    if (subtitle && subtitle.text) {
      // position subtitle
      switch (orient) {
        case Top:
        case Bottom:
          sy = title.bounds.height() + padding;
          break;

        case Left:
          sx = title.bounds.width() + padding;
          break;

        case Right:
          sx = -title.bounds.width() - padding;
          break;
      }

      tempBounds$2.clear().union(subtitle.bounds);
      tempBounds$2.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));

      if (set(subtitle, 'x', sx) | set(subtitle, 'y', sy)) {
        view.dirty(subtitle);
        subtitle.bounds.clear().union(tempBounds$2);
        subtitle.mark.bounds.clear().union(tempBounds$2);
        view.dirty(subtitle);
      }

      tempBounds$2.clear().union(subtitle.bounds);
    } else {
      tempBounds$2.clear();
    }

    tempBounds$2.union(title.bounds); // position title group

    switch (orient) {
      case Top:
        x = pos;
        y = viewBounds.y1 - tempBounds$2.height() - offset;
        break;

      case Left:
        x = viewBounds.x1 - tempBounds$2.width() - offset;
        y = pos;
        break;

      case Right:
        x = viewBounds.x2 + tempBounds$2.width() + offset;
        y = pos;
        break;

      case Bottom:
        x = pos;
        y = viewBounds.y2 + offset;
        break;

      default:
        x = group.x;
        y = group.y;
    }

    if (set(group, 'x', x) | set(group, 'y', y)) {
      tempBounds$2.translate(x, y);
      view.dirty(group);
      group.bounds.clear().union(tempBounds$2);
      mark.bounds.clear().union(tempBounds$2);
      view.dirty(group);
    }

    return group.bounds;
  }

  /**
   * Layout view elements such as axes and legends.
   * Also performs size adjustments.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {object} params.mark - Scenegraph mark of groups to layout.
   */

  function ViewLayout(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$V = inherits(ViewLayout, Transform$1);

  prototype$V.transform = function (_, pulse) {
    // TODO incremental update, output?
    var view = pulse.dataflow;

    _.mark.items.forEach(function (group) {
      if (_.layout) trellisLayout(view, group, _.layout);
      layoutGroup(view, group, _);
    });

    if (_.modified()) pulse.reflow();
    return pulse;
  };

  function layoutGroup(view, group, _) {
    var items = group.items,
        width = Math.max(0, group.width || 0),
        height = Math.max(0, group.height || 0),
        viewBounds = new Bounds().set(0, 0, width, height),
        xBounds = viewBounds.clone(),
        yBounds = viewBounds.clone(),
        legends = [],
        title,
        mark,
        orient,
        b,
        i,
        n; // layout axes, gather legends, collect bounds

    for (i = 0, n = items.length; i < n; ++i) {
      mark = items[i];

      switch (mark.role) {
        case AxisRole:
          b = isYAxis(mark) ? xBounds : yBounds;
          b.union(axisLayout(view, mark, width, height));
          break;

        case TitleRole:
          title = mark;
          break;

        case LegendRole:
          legends.push(legendLayout(view, mark));
          break;

        case FrameRole:
        case ScopeRole:
        case RowHeader:
        case RowFooter:
        case RowTitle:
        case ColHeader:
        case ColFooter:
        case ColTitle:
          xBounds.union(mark.bounds);
          yBounds.union(mark.bounds);
          break;

        default:
          viewBounds.union(mark.bounds);
      }
    } // layout legends, adjust viewBounds


    if (legends.length) {
      // group legends by orient
      var l = {};
      legends.forEach(function (item) {
        orient = item.orient || Right;
        if (orient !== None$1) (l[orient] || (l[orient] = [])).push(item);
      }); // perform grid layout for each orient group

      for (var _orient in l) {
        var g = l[_orient];
        gridLayout(view, g, legendParams(g, _orient, _.legends, xBounds, yBounds, width, height));
      } // update view bounds


      legends.forEach(function (item) {
        var b = item.bounds;

        if (!b.equals(item._bounds)) {
          item.bounds = item._bounds;
          view.dirty(item); // dirty previous location

          item.bounds = b;
          view.dirty(item);
        }

        if (_.autosize && _.autosize.type === Fit) {
          // For autosize fit, incorporate the orthogonal dimension only.
          // Legends that overrun the chart area will then be clipped;
          // otherwise the chart area gets reduced to nothing!
          switch (item.orient) {
            case Left:
            case Right:
              viewBounds.add(b.x1, 0).add(b.x2, 0);
              break;

            case Top:
            case Bottom:
              viewBounds.add(0, b.y1).add(0, b.y2);
          }
        } else {
          viewBounds.union(b);
        }
      });
    } // combine bounding boxes


    viewBounds.union(xBounds).union(yBounds); // layout title, adjust bounds

    if (title) {
      viewBounds.union(titleLayout(view, title, width, height, viewBounds));
    } // override aggregated view bounds if content is clipped


    if (group.clip) {
      viewBounds.set(0, 0, group.width || 0, group.height || 0);
    } // perform size adjustment


    viewSizeLayout(view, group, viewBounds, _);
  }

  function viewSizeLayout(view, group, viewBounds, _) {
    var auto = _.autosize || {},
        type = auto.type;
    if (view._autosize < 1 || !type) return;
    var viewWidth = view._width,
        viewHeight = view._height,
        width = Math.max(0, group.width || 0),
        left = Math.max(0, Math.ceil(-viewBounds.x1)),
        right = Math.max(0, Math.ceil(viewBounds.x2 - width)),
        height = Math.max(0, group.height || 0),
        top = Math.max(0, Math.ceil(-viewBounds.y1)),
        bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));

    if (auto.contains === Padding) {
      var padding = view.padding();
      viewWidth -= padding.left + padding.right;
      viewHeight -= padding.top + padding.bottom;
    }

    if (type === None$1) {
      left = 0;
      top = 0;
      width = viewWidth;
      height = viewHeight;
    } else if (type === Fit) {
      width = Math.max(0, viewWidth - left - right);
      height = Math.max(0, viewHeight - top - bottom);
    } else if (type === FitX) {
      width = Math.max(0, viewWidth - left - right);
      viewHeight = height + top + bottom;
    } else if (type === FitY) {
      viewWidth = width + left + right;
      height = Math.max(0, viewHeight - top - bottom);
    } else if (type === Pad) {
      viewWidth = width + left + right;
      viewHeight = height + top + bottom;
    }

    view._resizeView(viewWidth, viewHeight, width, height, [left, top], auto.resize);
  }



  var vtx = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bound: Bound,
    identifier: Identifier,
    mark: Mark,
    overlap: Overlap,
    render: Render,
    viewlayout: ViewLayout
  });

  function bandSpace (count, paddingInner, paddingOuter) {
    var space = count - paddingInner + paddingOuter * 2;
    return count ? space > 0 ? space : 1 : 0;
  }

  var Identity = 'identity';
  var Linear$1 = 'linear';
  var Log = 'log';
  var Pow = 'pow';
  var Sqrt = 'sqrt';
  var Symlog = 'symlog';
  var Time = 'time';
  var UTC = 'utc';
  var Sequential = 'sequential';
  var Diverging = 'diverging';
  var Quantile$1 = 'quantile';
  var Quantize = 'quantize';
  var Threshold = 'threshold';
  var Ordinal = 'ordinal';
  var Point = 'point';
  var Band = 'band';
  var BinOrdinal = 'bin-ordinal'; // categories

  var Continuous = 'continuous';
  var Discrete = 'discrete';
  var Discretizing = 'discretizing';
  var Interpolating = 'interpolating';
  var Temporal = 'temporal';

  function invertRange (scale) {
    return function (_) {
      var lo = _[0],
          hi = _[1],
          t;

      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }

      return [scale.invert(lo), scale.invert(hi)];
    };
  }

  function invertRangeExtent (scale) {
    return function (_) {
      var range = scale.range(),
          lo = _[0],
          hi = _[1],
          min = -1,
          max,
          t,
          i,
          n;

      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }

      for (i = 0, n = range.length; i < n; ++i) {
        if (range[i] >= lo && range[i] <= hi) {
          if (min < 0) min = i;
          max = i;
        }
      }

      if (min < 0) return undefined;
      lo = scale.invertExtent(range[min]);
      hi = scale.invertExtent(range[max]);
      return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];
    };
  }

  function initRange(domain, range) {
    switch (arguments.length) {
      case 0:
        break;

      case 1:
        this.range(domain);
        break;

      default:
        this.range(range).domain(domain);
        break;
    }

    return this;
  }
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break;

      case 1:
        {
          if (typeof domain === "function") this.interpolator(domain);else this.range(domain);
          break;
        }

      default:
        {
          this.domain(domain);
          if (typeof interpolator === "function") this.interpolator(interpolator);else this.range(interpolator);
          break;
        }
    }

    return this;
  }

  var implicit = Symbol("implicit");
  function ordinal() {
    var index = new Map(),
        domain = [],
        range = [],
        unknown = implicit;

    function scale(d) {
      var key = d + "",
          i = index.get(key);

      if (!i) {
        if (unknown !== implicit) return unknown;
        index.set(key, i = domain.push(d));
      }

      return range[(i - 1) % range.length];
    }

    scale.domain = function (_) {
      if (!arguments.length) return domain.slice();
      domain = [], index = new Map();

      var _iterator = _createForOfIteratorHelper(_),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;
          var key = value + "";
          if (index.has(key)) continue;
          index.set(key, domain.push(value));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return scale;
    };

    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    scale.copy = function () {
      return ordinal(domain, range).unknown(unknown);
    };

    initRange.apply(scale, arguments);
    return scale;
  }

  function define (constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend$1(parent, definition) {
    var prototype = Object.create(parent.prototype);

    for (var key in definition) {
      prototype[key] = definition[key];
    }

    return prototype;
  }

  function Color() {}
  var _darker = 0.7;

  var _brighter = 1 / _darker;
  var reI = "\\s*([+-]?\\d+)\\s*",
      reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
      reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
      reHex = /^#([0-9a-f]{3,8})$/,
      reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
      reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
      reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
      reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
      reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
      reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
  var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
  };
  define(Color, color$1, {
    copy: function copy(channels) {
      return _extends(new this.constructor(), this, channels);
    },
    displayable: function displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });

  function color_formatHex() {
    return this.rgb().formatHex();
  }

  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }

  function color_formatRgb() {
    return this.rgb().formatRgb();
  }

  function color$1(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
    : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
    : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
    : l === 4 ? new Rgb(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
    : null // invalid hex
    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
    : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
    : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
    : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
    : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
    : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
    : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
    : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }

  function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
  }

  function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
  }

  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color$1(o);
    if (!o) return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  define(Rgb, rgb, extend$1(Color, {
    brighter: function brighter(k) {
      k = k == null ? _brighter : Math.pow(_brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function darker(k) {
      k = k == null ? _darker : Math.pow(_darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function rgb() {
      return this;
    },
    displayable: function displayable() {
      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));

  function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  }

  function rgb_formatRgb() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
  }

  function hex(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
  }

  function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
  }

  function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color$1(o);
    if (!o) return new Hsl();
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255,
        g = o.g / 255,
        b = o.b / 255,
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        h = NaN,
        s = max - min,
        l = (max + min) / 2;

    if (s) {
      if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
      s /= l < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }

    return new Hsl(h, s, l, o.opacity);
  }
  function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }

  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }

  define(Hsl, hsl, extend$1(Color, {
    brighter: function brighter(k) {
      k = k == null ? _brighter : Math.pow(_brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function darker(k) {
      k = k == null ? _darker : Math.pow(_darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function rgb() {
      var h = this.h % 360 + (this.h < 0) * 360,
          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
          l = this.l,
          m2 = l + (l < 0.5 ? l : 1 - l) * s,
          m1 = 2 * l - m2;
      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    displayable: function displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl: function formatHsl() {
      var a = this.opacity;
      a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
    }
  }));
  /* From FvD 13.37, CSS Color Module Level 3 */

  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }

  var deg2rad = Math.PI / 180;
  var rad2deg = 180 / Math.PI;

  var K = 18,
      Xn = 0.96422,
      Yn = 1,
      Zn = 0.82521,
      t0$2 = 4 / 29,
      t1$1 = 6 / 29,
      t2 = 3 * t1$1 * t1$1,
      t3 = t1$1 * t1$1 * t1$1;

  function labConvert(o) {
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) return hcl2lab(o);
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var r = rgb2lrgb(o.r),
        g = rgb2lrgb(o.g),
        b = rgb2lrgb(o.b),
        y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
        x,
        z;
    if (r === g && g === b) x = z = y;else {
      x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
    }
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
  }
  function lab(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
  }
  function Lab(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
  }
  define(Lab, lab, extend$1(Color, {
    brighter: function brighter(k) {
      return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker: function darker(k) {
      return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb: function rgb() {
      var y = (this.l + 16) / 116,
          x = isNaN(this.a) ? y : y + this.a / 500,
          z = isNaN(this.b) ? y : y - this.b / 200;
      x = Xn * lab2xyz(x);
      y = Yn * lab2xyz(y);
      z = Zn * lab2xyz(z);
      return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
    }
  }));

  function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0$2;
  }

  function lab2xyz(t) {
    return t > t1$1 ? t * t * t : t2 * (t - t0$2);
  }

  function lrgb2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
  }

  function rgb2lrgb(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
  }

  function hclConvert(o) {
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab)) o = labConvert(o);
    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * rad2deg;
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
  }
  function hcl(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
  }
  function Hcl(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
  }

  function hcl2lab(o) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }

  define(Hcl, hcl, extend$1(Color, {
    brighter: function brighter(k) {
      return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
    },
    darker: function darker(k) {
      return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
    },
    rgb: function rgb() {
      return hcl2lab(this).rgb();
    }
  }));

  var A = -0.14861,
      B = +1.78277,
      C$1 = -0.29227,
      D = -0.90649,
      E = +1.97294,
      ED = E * D,
      EB = E * B,
      BC_DA = B * C$1 - D * A;

  function cubehelixConvert(o) {
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var r = o.r / 255,
        g = o.g / 255,
        b = o.b / 255,
        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
        bl = b - l,
        k = (E * (g - l) - C$1 * bl) / D,
        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
        // NaN if l=0 or l=1
    h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
  }

  function cubehelix(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
  }
  function Cubehelix(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  define(Cubehelix, cubehelix, extend$1(Color, {
    brighter: function brighter(k) {
      k = k == null ? _brighter : Math.pow(_brighter, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function darker(k) {
      k = k == null ? _darker : Math.pow(_darker, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function rgb() {
      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
          l = +this.l,
          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
          cosh = Math.cos(h),
          sinh = Math.sin(h);
      return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C$1 * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
    }
  }));

  function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1,
        t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis$1 (values) {
    var n = values.length - 1;
    return function (t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
          v1 = values[i],
          v2 = values[i + 1],
          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  function basisClosed (values) {
    var n = values.length;
    return function (t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
          v0 = values[(i + n - 1) % n],
          v1 = values[i % n],
          v2 = values[(i + 1) % n],
          v3 = values[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  function constant$2 (x) {
    return function () {
      return x;
    };
  }

  function linear(a, d) {
    return function (t) {
      return a + t * d;
    };
  }

  function exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
      return Math.pow(a + t * b, y);
    };
  }

  function hue(a, b) {
    var d = b - a;
    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);
  }
  function gamma(y) {
    return (y = +y) === 1 ? nogamma : function (a, b) {
      return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);
    };
  }
  function nogamma(a, b) {
    var d = b - a;
    return d ? linear(a, d) : constant$2(isNaN(a) ? b : a);
  }

  var rgb$1 = (function rgbGamma(y) {
    var color = gamma(y);

    function rgb$1(start, end) {
      var r = color((start = rgb(start)).r, (end = rgb(end)).r),
          g = color(start.g, end.g),
          b = color(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.r = r(t);
        start.g = g(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    rgb$1.gamma = rgbGamma;
    return rgb$1;
  })(1);

  function rgbSpline(spline) {
    return function (colors) {
      var n = colors.length,
          r = new Array(n),
          g = new Array(n),
          b = new Array(n),
          i,
          color;

      for (i = 0; i < n; ++i) {
        color = rgb(colors[i]);
        r[i] = color.r || 0;
        g[i] = color.g || 0;
        b[i] = color.b || 0;
      }

      r = spline(r);
      g = spline(g);
      b = spline(b);
      color.opacity = 1;
      return function (t) {
        color.r = r(t);
        color.g = g(t);
        color.b = b(t);
        return color + "";
      };
    };
  }

  var rgbBasis = rgbSpline(basis$1);
  var rgbBasisClosed = rgbSpline(basisClosed);

  function numberArray (a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0,
        c = b.slice(),
        i;
    return function (t) {
      for (i = 0; i < n; ++i) {
        c[i] = a[i] * (1 - t) + b[i] * t;
      }

      return c;
    };
  }
  function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
  }

  function array$1 (a, b) {
    return (isNumberArray(b) ? numberArray : genericArray)(a, b);
  }
  function genericArray(a, b) {
    var nb = b ? b.length : 0,
        na = a ? Math.min(nb, a.length) : 0,
        x = new Array(na),
        c = new Array(nb),
        i;

    for (i = 0; i < na; ++i) {
      x[i] = interpolate(a[i], b[i]);
    }

    for (; i < nb; ++i) {
      c[i] = b[i];
    }

    return function (t) {
      for (i = 0; i < na; ++i) {
        c[i] = x[i](t);
      }

      return c;
    };
  }

  function date (a, b) {
    var d = new Date();
    return a = +a, b = +b, function (t) {
      return d.setTime(a * (1 - t) + b * t), d;
    };
  }

  function interpolateNumber (a, b) {
    return a = +a, b = +b, function (t) {
      return a * (1 - t) + b * t;
    };
  }

  function object$2 (a, b) {
    var i = {},
        c = {},
        k;
    if (a === null || _typeof(a) !== "object") a = {};
    if (b === null || _typeof(b) !== "object") b = {};

    for (k in b) {
      if (k in a) {
        i[k] = interpolate(a[k], b[k]);
      } else {
        c[k] = b[k];
      }
    }

    return function (t) {
      for (k in i) {
        c[k] = i[k](t);
      }

      return c;
    };
  }

  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
      reB = new RegExp(reA.source, "g");

  function zero$3(b) {
    return function () {
      return b;
    };
  }

  function one$1(b) {
    return function (t) {
      return b(t) + "";
    };
  }

  function string (a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0,
        // scan index for next number in b
    am,
        // current match in a
    bm,
        // current match in b
    bs,
        // string preceding current number in b, if any
    i = -1,
        // index in s
    s = [],
        // string constants and placeholders
    q = []; // number interpolators
    // Coerce inputs to strings.

    a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        // a string precedes the next number in b
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      if ((am = am[0]) === (bm = bm[0])) {
        // numbers in a & b match
        if (s[i]) s[i] += bm; // coalesce with previous string
        else s[++i] = bm;
      } else {
        // interpolate non-matching numbers
        s[++i] = null;
        q.push({
          i: i,
          x: interpolateNumber(am, bm)
        });
      }

      bi = reB.lastIndex;
    } // Add remains of b.


    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    } // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.


    return s.length < 2 ? q[0] ? one$1(q[0].x) : zero$3(b) : (b = q.length, function (t) {
      for (var i = 0, o; i < b; ++i) {
        s[(o = q[i]).i] = o.x(t);
      }

      return s.join("");
    });
  }

  function interpolate (a, b) {
    var t = _typeof(b),
        c;

    return b == null || t === "boolean" ? constant$2(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color$1(b)) ? (b = c, rgb$1) : string : b instanceof color$1 ? rgb$1 : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$2 : interpolateNumber)(a, b);
  }

  function discrete (range) {
    var n = range.length;
    return function (t) {
      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
  }

  function hue$1 (a, b) {
    var i = hue(+a, +b);
    return function (t) {
      var x = i(t);
      return x - 360 * Math.floor(x / 360);
    };
  }

  function interpolateRound (a, b) {
    return a = +a, b = +b, function (t) {
      return Math.round(a * (1 - t) + b * t);
    };
  }

  var degrees = 180 / Math.PI;
  var identity$2 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose (a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }

  var cssNode, cssRoot, cssView, svgNode;
  function parseCss(value) {
    if (value === "none") return identity$2;
    if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
    cssNode.style.transform = value;
    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
    cssRoot.removeChild(cssNode);
    value = value.slice(7, -1).split(",");
    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
  }
  function parseSvg(value) {
    if (value == null) return identity$2;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
    value = value.matrix;
    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }

    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({
          i: i - 4,
          x: interpolateNumber(xa, xb)
        }, {
          i: i - 2,
          x: interpolateNumber(ya, yb)
        });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }

    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

        q.push({
          i: s.push(pop(s) + "rotate(", null, degParen) - 2,
          x: interpolateNumber(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }

    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({
          i: s.push(pop(s) + "skewX(", null, degParen) - 2,
          x: interpolateNumber(a, b)
        });
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }

    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({
          i: i - 4,
          x: interpolateNumber(xa, xb)
        }, {
          i: i - 2,
          x: interpolateNumber(ya, yb)
        });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }

    return function (a, b) {
      var s = [],
          // string constants and placeholders
      q = []; // number interpolators

      a = parse(a), b = parse(b);
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
      rotate(a.rotate, b.rotate, s, q);
      skewX(a.skewX, b.skewX, s, q);
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
      a = b = null; // gc

      return function (t) {
        var i = -1,
            n = q.length,
            o;

        while (++i < n) {
          s[(o = q[i]).i] = o.x(t);
        }

        return s.join("");
      };
    };
  }

  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  var rho = Math.SQRT2,
      rho2 = 2,
      rho4 = 4,
      epsilon2 = 1e-12;

  function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }

  function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }

  function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  } // p0 = [ux0, uy0, w0]
  // p1 = [ux1, uy1, w1]


  function zoom$1 (p0, p1) {
    var ux0 = p0[0],
        uy0 = p0[1],
        w0 = p0[2],
        ux1 = p1[0],
        uy1 = p1[1],
        w1 = p1[2],
        dx = ux1 - ux0,
        dy = uy1 - uy0,
        d2 = dx * dx + dy * dy,
        i,
        S; // Special case for u0 ≅ u1.

    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;

      i = function i(t) {
        return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
      };
    } // General case.
    else {
        var d1 = Math.sqrt(d2),
            b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
            b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
            r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
            r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;

        i = function i(t) {
          var s = t * S,
              coshr0 = cosh(r0),
              u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
        };
      }

    i.duration = S * 1000;
    return i;
  }

  function hsl$1(hue) {
    return function (start, end) {
      var h = hue((start = hsl(start)).h, (end = hsl(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + "";
      };
    };
  }

  var hsl$2 = hsl$1(hue);
  var hslLong = hsl$1(nogamma);

  function lab$1(start, end) {
    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
        a = nogamma(start.a, end.a),
        b = nogamma(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.l = l(t);
      start.a = a(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  function hcl$1(hue) {
    return function (start, end) {
      var h = hue((start = hcl(start)).h, (end = hcl(end)).h),
          c = nogamma(start.c, end.c),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.c = c(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + "";
      };
    };
  }

  var hcl$2 = hcl$1(hue);
  var hclLong = hcl$1(nogamma);

  function cubehelix$1(hue) {
    return function cubehelixGamma(y) {
      y = +y;

      function cubehelix$1(start, end) {
        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function (t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(Math.pow(t, y));
          start.opacity = opacity(t);
          return start + "";
        };
      }

      cubehelix$1.gamma = cubehelixGamma;
      return cubehelix$1;
    }(1);
  }

  var cubehelix$2 = cubehelix$1(hue);
  var cubehelixLong = cubehelix$1(nogamma);

  function piecewise(interpolate, values) {
    var i = 0,
        n = values.length - 1,
        v = values[0],
        I = new Array(n < 0 ? 0 : n);

    while (i < n) {
      I[i] = interpolate(v, v = values[++i]);
    }

    return function (t) {
      var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
      return I[i](t - i);
    };
  }

  function quantize (interpolator, n) {
    var samples = new Array(n);

    for (var i = 0; i < n; ++i) {
      samples[i] = interpolator(i / (n - 1));
    }

    return samples;
  }



  var $$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    interpolate: interpolate,
    interpolateArray: array$1,
    interpolateBasis: basis$1,
    interpolateBasisClosed: basisClosed,
    interpolateDate: date,
    interpolateDiscrete: discrete,
    interpolateHue: hue$1,
    interpolateNumber: interpolateNumber,
    interpolateNumberArray: numberArray,
    interpolateObject: object$2,
    interpolateRound: interpolateRound,
    interpolateString: string,
    interpolateTransformCss: interpolateTransformCss,
    interpolateTransformSvg: interpolateTransformSvg,
    interpolateZoom: zoom$1,
    interpolateRgb: rgb$1,
    interpolateRgbBasis: rgbBasis,
    interpolateRgbBasisClosed: rgbBasisClosed,
    interpolateHsl: hsl$2,
    interpolateHslLong: hslLong,
    interpolateLab: lab$1,
    interpolateHcl: hcl$2,
    interpolateHclLong: hclLong,
    interpolateCubehelix: cubehelix$2,
    interpolateCubehelixLong: cubehelixLong,
    piecewise: piecewise,
    quantize: quantize
  });

  function constant$3 (x) {
    return function () {
      return x;
    };
  }

  function number$2 (x) {
    return +x;
  }

  var unit = [0, 1];
  function identity$3(x) {
    return x;
  }

  function normalize(a, b) {
    return (b -= a = +a) ? function (x) {
      return (x - a) / b;
    } : constant$3(isNaN(b) ? NaN : 0.5);
  }

  function clamper(a, b) {
    var t;
    if (a > b) t = a, a = b, b = t;
    return function (x) {
      return Math.max(a, Math.min(b, x));
    };
  } // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


  function bimap(domain, range, interpolate) {
    var d0 = domain[0],
        d1 = domain[1],
        r0 = range[0],
        r1 = range[1];
    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function (x) {
      return r0(d0(x));
    };
  }

  function polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1,
        d = new Array(j),
        r = new Array(j),
        i = -1; // Reverse descending domains.

    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }

    while (++i < j) {
      d[i] = normalize(domain[i], domain[i + 1]);
      r[i] = interpolate(range[i], range[i + 1]);
    }

    return function (x) {
      var i = bisectRight(domain, x, 1, j) - 1;
      return r[i](d[i](x));
    };
  }

  function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer() {
    var domain = unit,
        range = unit,
        interpolate$1 = interpolate,
        transform,
        untransform,
        unknown,
        clamp = identity$3,
        piecewise,
        output,
        input;

    function rescale() {
      var n = Math.min(domain.length, range.length);
      if (clamp !== identity$3) clamp = clamper(domain[0], domain[n - 1]);
      piecewise = n > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }

    function scale(x) {
      return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
    }

    scale.invert = function (y) {
      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
    };

    scale.domain = function (_) {
      return arguments.length ? (domain = Array.from(_, number$2), rescale()) : domain.slice();
    };

    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };

    scale.rangeRound = function (_) {
      return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
    };

    scale.clamp = function (_) {
      return arguments.length ? (clamp = _ ? true : identity$3, rescale()) : clamp !== identity$3;
    };

    scale.interpolate = function (_) {
      return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
    };

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    return function (t, u) {
      transform = t, untransform = u;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity$3, identity$3);
  }

  // Computes the decimal coefficient and exponent of the specified number x with
  // significant digits p, where x is positive and p is in [1, 21] or undefined.
  // For example, formatDecimal(1.23) returns ["123", 0].
  function formatDecimal (x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

    var i,
        coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
  }

  function exponent (x) {
    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
  }

  function formatGroup (grouping, thousands) {
    return function (value, width) {
      var i = value.length,
          t = [],
          j = 0,
          g = grouping[0],
          length = 0;

      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = grouping[j = (j + 1) % grouping.length];
      }

      return t.reverse().join(thousands);
    };
  }

  function formatNumerals (numerals) {
    return function (value) {
      return value.replace(/[0-9]/g, function (i) {
        return numerals[+i];
      });
    };
  }

  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
  var re$5 = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re$5.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
  }

  FormatSpecifier.prototype.toString = function () {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
  function formatTrim (s) {
    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;

        case "0":
          if (i0 === 0) i0 = i;
          i1 = i;
          break;

        default:
          if (!+s[i]) break out;
          if (i0 > 0) i0 = 0;
          break;
      }
    }

    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }

  var prefixExponent;
  function formatPrefixAuto (x, p) {
    var d = formatDecimal(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1],
        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
        n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
  }

  function formatRounded (x, p) {
    var d = formatDecimal(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  var formatTypes = {
    "%": function _(x, p) {
      return (x * 100).toFixed(p);
    },
    "b": function b(x) {
      return Math.round(x).toString(2);
    },
    "c": function c(x) {
      return x + "";
    },
    "d": function d(x) {
      return Math.round(x).toString(10);
    },
    "e": function e(x, p) {
      return x.toExponential(p);
    },
    "f": function f(x, p) {
      return x.toFixed(p);
    },
    "g": function g(x, p) {
      return x.toPrecision(p);
    },
    "o": function o(x) {
      return Math.round(x).toString(8);
    },
    "p": function p(x, _p) {
      return formatRounded(x * 100, _p);
    },
    "r": formatRounded,
    "s": formatPrefixAuto,
    "X": function X(x) {
      return Math.round(x).toString(16).toUpperCase();
    },
    "x": function x(_x) {
      return Math.round(_x).toString(16);
    }
  };

  function identity$4 (x) {
    return x;
  }

  var map$2 = Array.prototype.map,
      prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function formatLocale$1 (locale) {
    var group = locale.grouping === undefined || locale.thousands === undefined ? identity$4 : formatGroup(map$2.call(locale.grouping, Number), locale.thousands + ""),
        currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
        currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
        decimal = locale.decimal === undefined ? "." : locale.decimal + "",
        numerals = locale.numerals === undefined ? identity$4 : formatNumerals(map$2.call(locale.numerals, String)),
        percent = locale.percent === undefined ? "%" : locale.percent + "",
        minus = locale.minus === undefined ? "-" : locale.minus + "",
        nan = locale.nan === undefined ? "NaN" : locale.nan + "";

    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill,
          align = specifier.align,
          sign = specifier.sign,
          symbol = specifier.symbol,
          zero = specifier.zero,
          width = specifier.width,
          comma = specifier.comma,
          precision = specifier.precision,
          trim = specifier.trim,
          type = specifier.type; // The "n" type is an alias for ",g".

      if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
      else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

      if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
      // For SI-prefix, the suffix is lazily computed.

      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
          suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
      // Is this an integer type?
      // Can this type generate exponential notation?

      var formatType = formatTypes[type],
          maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
      // or clamp the specified precision to the supported range.
      // For significant precision, it must be in [1, 21].
      // For fixed precision, it must be in [0, 20].

      precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

      function format(value) {
        var valuePrefix = prefix,
            valueSuffix = suffix,
            i,
            n,
            c;

        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

          var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

          value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

          if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

          if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

          valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
          // grouped, and fractional or exponential “suffix” part that is not.

          if (maybeSuffix) {
            i = -1, n = value.length;

            while (++i < n) {
              if (c = value.charCodeAt(i), 48 > c || c > 57) {
                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        } // If the fill character is not "0", grouping is applied before padding.


        if (comma && !zero) value = group(value, Infinity); // Compute the padding.

        var length = valuePrefix.length + value.length + valueSuffix.length,
            padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;

          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;

          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;

          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }

        return numerals(value);
      }

      format.toString = function () {
        return specifier + "";
      };

      return format;
    }

    function formatPrefix(specifier, value) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
          e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
          k = Math.pow(10, -e),
          prefix = prefixes[8 + e / 3];
      return function (value) {
        return f(k * value) + prefix;
      };
    }

    return {
      format: newFormat,
      formatPrefix: formatPrefix
    };
  }

  var locale$1;
  var format$3;
  var formatPrefix;
  defaultLocale$1({
    decimal: ".",
    thousands: ",",
    grouping: [3],
    currency: ["$", ""],
    minus: "-"
  });
  function defaultLocale$1(definition) {
    locale$1 = formatLocale$1(definition);
    format$3 = locale$1.format;
    formatPrefix = locale$1.formatPrefix;
    return locale$1;
  }

  function precisionFixed (step) {
    return Math.max(0, -exponent(Math.abs(step)));
  }

  function precisionPrefix (step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
  }

  function precisionRound (step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, exponent(max) - exponent(step)) + 1;
  }

  function spanFormat (start, stop, count, specifier) {
    var step = tickStep(start, stop, count),
        precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);

    switch (specifier.type) {
      case "s":
        {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }

      case "":
      case "e":
      case "g":
      case "p":
      case "r":
        {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }

      case "f":
      case "%":
        {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
    }

    return format$3(specifier);
  }

  function linearish(scale) {
    var domain = scale.domain;

    scale.ticks = function (count) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };

    scale.tickFormat = function (count, specifier) {
      var d = domain();
      return spanFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };

    scale.nice = function (count) {
      if (count == null) count = 10;
      var d = domain(),
          i0 = 0,
          i1 = d.length - 1,
          start = d[i0],
          stop = d[i1],
          step;

      if (stop < start) {
        step = start, start = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }

      step = tickIncrement(start, stop, count);

      if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
        step = tickIncrement(start, stop, count);
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
        step = tickIncrement(start, stop, count);
      }

      if (step > 0) {
        d[i0] = Math.floor(start / step) * step;
        d[i1] = Math.ceil(stop / step) * step;
        domain(d);
      } else if (step < 0) {
        d[i0] = Math.ceil(start * step) / step;
        d[i1] = Math.floor(stop * step) / step;
        domain(d);
      }

      return scale;
    };

    return scale;
  }
  function linear$1() {
    var scale = continuous();

    scale.copy = function () {
      return copy(scale, linear$1());
    };

    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  function identity$5(domain) {
    var unknown;

    function scale(x) {
      return isNaN(x = +x) ? unknown : x;
    }

    scale.invert = scale;

    scale.domain = scale.range = function (_) {
      return arguments.length ? (domain = Array.from(_, number$2), scale) : domain.slice();
    };

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    scale.copy = function () {
      return identity$5(domain).unknown(unknown);
    };

    domain = arguments.length ? Array.from(domain, number$2) : [0, 1];
    return linearish(scale);
  }

  function nice (domain, interval) {
    domain = domain.slice();
    var i0 = 0,
        i1 = domain.length - 1,
        x0 = domain[i0],
        x1 = domain[i1],
        t;

    if (x1 < x0) {
      t = i0, i0 = i1, i1 = t;
      t = x0, x0 = x1, x1 = t;
    }

    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  }

  function transformLog(x) {
    return Math.log(x);
  }

  function transformExp(x) {
    return Math.exp(x);
  }

  function transformLogn(x) {
    return -Math.log(-x);
  }

  function transformExpn(x) {
    return -Math.exp(-x);
  }

  function pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
  }

  function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
      return Math.pow(base, x);
    };
  }

  function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
      return Math.log(x) / base;
    });
  }

  function reflect(f) {
    return function (x) {
      return -f(-x);
    };
  }

  function loggish(transform) {
    var scale = transform(transformLog, transformExp),
        domain = scale.domain,
        base = 10,
        logs,
        pows;

    function rescale() {
      logs = logp(base), pows = powp(base);

      if (domain()[0] < 0) {
        logs = reflect(logs), pows = reflect(pows);
        transform(transformLogn, transformExpn);
      } else {
        transform(transformLog, transformExp);
      }

      return scale;
    }

    scale.base = function (_) {
      return arguments.length ? (base = +_, rescale()) : base;
    };

    scale.domain = function (_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };

    scale.ticks = function (count) {
      var d = domain(),
          u = d[0],
          v = d[d.length - 1],
          r;
      if (r = v < u) i = u, u = v, v = i;
      var i = logs(u),
          j = logs(v),
          p,
          k,
          t,
          n = count == null ? 10 : +count,
          z = [];

      if (!(base % 1) && j - i < n) {
        i = Math.floor(i), j = Math.ceil(j);
        if (u > 0) for (; i <= j; ++i) {
          for (k = 1, p = pows(i); k < base; ++k) {
            t = p * k;
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        } else for (; i <= j; ++i) {
          for (k = base - 1, p = pows(i); k >= 1; --k) {
            t = p * k;
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        }
        if (z.length * 2 < n) z = ticks(u, v, n);
      } else {
        z = ticks(i, j, Math.min(j - i, n)).map(pows);
      }

      return r ? z.reverse() : z;
    };

    scale.tickFormat = function (count, specifier) {
      if (specifier == null) specifier = base === 10 ? ".0e" : ",";
      if (typeof specifier !== "function") specifier = format$3(specifier);
      if (count === Infinity) return specifier;
      if (count == null) count = 10;
      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

      return function (d) {
        var i = d / pows(Math.round(logs(d)));
        if (i * base < base - 0.5) i *= base;
        return i <= k ? specifier(d) : "";
      };
    };

    scale.nice = function () {
      return domain(nice(domain(), {
        floor: function floor(x) {
          return pows(Math.floor(logs(x)));
        },
        ceil: function ceil(x) {
          return pows(Math.ceil(logs(x)));
        }
      }));
    };

    return scale;
  }
  function log$2() {
    var scale = loggish(transformer()).domain([1, 10]);

    scale.copy = function () {
      return copy(scale, log$2()).base(scale.base());
    };

    initRange.apply(scale, arguments);
    return scale;
  }

  function transformSymlog(c) {
    return function (x) {
      return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
  }

  function transformSymexp(c) {
    return function (x) {
      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
  }

  function symlogish(transform) {
    var c = 1,
        scale = transform(transformSymlog(c), transformSymexp(c));

    scale.constant = function (_) {
      return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
    };

    return linearish(scale);
  }
  function symlog$1() {
    var scale = symlogish(transformer());

    scale.copy = function () {
      return copy(scale, symlog$1()).constant(scale.constant());
    };

    return initRange.apply(scale, arguments);
  }

  function transformPow(exponent) {
    return function (x) {
      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
  }

  function transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
  }

  function transformSquare(x) {
    return x < 0 ? -x * x : x * x;
  }

  function powish(transform) {
    var scale = transform(identity$3, identity$3),
        exponent = 1;

    function rescale() {
      return exponent === 1 ? transform(identity$3, identity$3) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
    }

    scale.exponent = function (_) {
      return arguments.length ? (exponent = +_, rescale()) : exponent;
    };

    return linearish(scale);
  }
  function pow$1() {
    var scale = powish(transformer());

    scale.copy = function () {
      return copy(scale, pow$1()).exponent(scale.exponent());
    };

    initRange.apply(scale, arguments);
    return scale;
  }
  function sqrt$1() {
    return pow$1.apply(null, arguments).exponent(0.5);
  }

  function quantile$1() {
    var domain = [],
        range = [],
        thresholds = [],
        unknown;

    function rescale() {
      var i = 0,
          n = Math.max(1, range.length);
      thresholds = new Array(n - 1);

      while (++i < n) {
        thresholds[i - 1] = quantile(domain, i / n);
      }

      return scale;
    }

    function scale(x) {
      return isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];
    }

    scale.invertExtent = function (y) {
      var i = range.indexOf(y);
      return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
    };

    scale.domain = function (_) {
      if (!arguments.length) return domain.slice();
      domain = [];

      var _iterator = _createForOfIteratorHelper(_),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var d = _step.value;
          if (d != null && !isNaN(d = +d)) domain.push(d);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      domain.sort(ascending);
      return rescale();
    };

    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    scale.quantiles = function () {
      return thresholds.slice();
    };

    scale.copy = function () {
      return quantile$1().domain(domain).range(range).unknown(unknown);
    };

    return initRange.apply(scale, arguments);
  }

  function quantize$1() {
    var x0 = 0,
        x1 = 1,
        n = 1,
        domain = [0.5],
        range = [0, 1],
        unknown;

    function scale(x) {
      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
    }

    function rescale() {
      var i = -1;
      domain = new Array(n);

      while (++i < n) {
        domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
      }

      return scale;
    }

    scale.domain = function (_) {
      var _ref, _ref2;

      return arguments.length ? ((_ref = _, _ref2 = _slicedToArray(_ref, 2), x0 = _ref2[0], x1 = _ref2[1], _ref), x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
    };

    scale.range = function (_) {
      return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
    };

    scale.invertExtent = function (y) {
      var i = range.indexOf(y);
      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
    };

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : scale;
    };

    scale.thresholds = function () {
      return domain.slice();
    };

    scale.copy = function () {
      return quantize$1().domain([x0, x1]).range(range).unknown(unknown);
    };

    return initRange.apply(linearish(scale), arguments);
  }

  function threshold() {
    var domain = [0.5],
        range = [0, 1],
        unknown,
        n = 1;

    function scale(x) {
      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
    }

    scale.domain = function (_) {
      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };

    scale.range = function (_) {
      return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };

    scale.invertExtent = function (y) {
      var i = range.indexOf(y);
      return [domain[i - 1], domain[i]];
    };

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    scale.copy = function () {
      return threshold().domain(domain).range(range).unknown(unknown);
    };

    return initRange.apply(scale, arguments);
  }

  var durationSecond$2 = 1000,
      durationMinute$2 = durationSecond$2 * 60,
      durationHour$2 = durationMinute$2 * 60,
      durationDay$2 = durationHour$2 * 24,
      durationWeek$2 = durationDay$2 * 7,
      durationMonth$1 = durationDay$2 * 30,
      durationYear$1 = durationDay$2 * 365;

  function date$1(t) {
    return new Date(t);
  }

  function number$3(t) {
    return t instanceof Date ? +t : +new Date(+t);
  }

  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
    var scale = continuous(),
        invert = scale.invert,
        domain = scale.domain;
    var formatMillisecond = format(".%L"),
        formatSecond = format(":%S"),
        formatMinute = format("%I:%M"),
        formatHour = format("%I %p"),
        formatDay = format("%a %d"),
        formatWeek = format("%b %d"),
        formatMonth = format("%B"),
        formatYear = format("%Y");
    var tickIntervals = [[second, 1, durationSecond$2], [second, 5, 5 * durationSecond$2], [second, 15, 15 * durationSecond$2], [second, 30, 30 * durationSecond$2], [minute, 1, durationMinute$2], [minute, 5, 5 * durationMinute$2], [minute, 15, 15 * durationMinute$2], [minute, 30, 30 * durationMinute$2], [hour, 1, durationHour$2], [hour, 3, 3 * durationHour$2], [hour, 6, 6 * durationHour$2], [hour, 12, 12 * durationHour$2], [day, 1, durationDay$2], [day, 2, 2 * durationDay$2], [week, 1, durationWeek$2], [month, 1, durationMonth$1], [month, 3, 3 * durationMonth$1], [year, 1, durationYear$1]];

    function tickFormat(date) {
      return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
    }

    function tickInterval(interval, start, stop) {
      if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
      // based on the extent of the domain and a rough estimate of tick size.
      // Otherwise, assume interval is already a time interval and use it.

      if (typeof interval === "number") {
        var target = Math.abs(stop - start) / interval,
            i = bisector(function (i) {
          return i[2];
        }).right(tickIntervals, target),
            step;

        if (i === tickIntervals.length) {
          step = tickStep(start / durationYear$1, stop / durationYear$1, interval);
          interval = year;
        } else if (i) {
          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
          step = i[1];
          interval = i[0];
        } else {
          step = Math.max(tickStep(start, stop, interval), 1);
          interval = millisecond;
        }

        return interval.every(step);
      }

      return interval;
    }

    scale.invert = function (y) {
      return new Date(invert(y));
    };

    scale.domain = function (_) {
      return arguments.length ? domain(Array.from(_, number$3)) : domain().map(date$1);
    };

    scale.ticks = function (interval) {
      var d = domain(),
          t0 = d[0],
          t1 = d[d.length - 1],
          r = t1 < t0,
          t;
      if (r) t = t0, t0 = t1, t1 = t;
      t = tickInterval(interval, t0, t1);
      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

      return r ? t.reverse() : t;
    };

    scale.tickFormat = function (count, specifier) {
      return specifier == null ? tickFormat : format(specifier);
    };

    scale.nice = function (interval) {
      var d = domain();
      return (interval = tickInterval(interval, d[0], d[d.length - 1])) ? domain(nice(d, interval)) : scale;
    };

    scale.copy = function () {
      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
    };

    return scale;
  }
  function time () {
    return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
  }

  function utcTime () {
    return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
  }

  function transformer$1() {
    var x0 = 0,
        x1 = 1,
        t0,
        t1,
        k10,
        transform,
        interpolator = identity$3,
        clamp = false,
        unknown;

    function scale(x) {
      return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
    }

    scale.domain = function (_) {
      var _ref, _ref2;

      return arguments.length ? ((_ref = _, _ref2 = _slicedToArray(_ref, 2), x0 = _ref2[0], x1 = _ref2[1], _ref), t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
    };

    scale.clamp = function (_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };

    scale.interpolator = function (_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };

    function range(interpolate) {
      return function (_) {
        var _ref3, _ref4;

        var r0, r1;
        return arguments.length ? ((_ref3 = _, _ref4 = _slicedToArray(_ref3, 2), r0 = _ref4[0], r1 = _ref4[1], _ref3), interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
      };
    }

    scale.range = range(interpolate);
    scale.rangeRound = range(interpolateRound);

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    return function (t) {
      transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
      return scale;
    };
  }

  function copy$1(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
  }
  function sequential() {
    var scale = linearish(transformer$1()(identity$3));

    scale.copy = function () {
      return copy$1(scale, sequential());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function sequentialLog() {
    var scale = loggish(transformer$1()).domain([1, 10]);

    scale.copy = function () {
      return copy$1(scale, sequentialLog()).base(scale.base());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSymlog() {
    var scale = symlogish(transformer$1());

    scale.copy = function () {
      return copy$1(scale, sequentialSymlog()).constant(scale.constant());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function sequentialPow() {
    var scale = powish(transformer$1());

    scale.copy = function () {
      return copy$1(scale, sequentialPow()).exponent(scale.exponent());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
  }

  function transformer$2() {
    var x0 = 0,
        x1 = 0.5,
        x2 = 1,
        s = 1,
        t0,
        t1,
        t2,
        k10,
        k21,
        interpolator = identity$3,
        transform,
        clamp = false,
        unknown;

    function scale(x) {
      return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
    }

    scale.domain = function (_) {
      var _ref, _ref2;

      return arguments.length ? ((_ref = _, _ref2 = _slicedToArray(_ref, 3), x0 = _ref2[0], x1 = _ref2[1], x2 = _ref2[2], _ref), t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
    };

    scale.clamp = function (_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };

    scale.interpolator = function (_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };

    function range(interpolate) {
      return function (_) {
        var _ref3, _ref4;

        var r0, r1, r2;
        return arguments.length ? ((_ref3 = _, _ref4 = _slicedToArray(_ref3, 3), r0 = _ref4[0], r1 = _ref4[1], r2 = _ref4[2], _ref3), interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
      };
    }

    scale.range = range(interpolate);
    scale.rangeRound = range(interpolateRound);

    scale.unknown = function (_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    return function (t) {
      transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
      return scale;
    };
  }

  function diverging() {
    var scale = linearish(transformer$2()(identity$3));

    scale.copy = function () {
      return copy$1(scale, diverging());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function divergingLog() {
    var scale = loggish(transformer$2()).domain([0.1, 1, 10]);

    scale.copy = function () {
      return copy$1(scale, divergingLog()).base(scale.base());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function divergingSymlog() {
    var scale = symlogish(transformer$2());

    scale.copy = function () {
      return copy$1(scale, divergingSymlog()).constant(scale.constant());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function divergingPow() {
    var scale = powish(transformer$2());

    scale.copy = function () {
      return copy$1(scale, divergingPow()).exponent(scale.exponent());
    };

    return initInterpolator.apply(scale, arguments);
  }
  function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
  }

  function band() {
    var scale = ordinal().unknown(undefined),
        domain = scale.domain,
        ordinalRange = scale.range,
        range = [0, 1],
        step,
        bandwidth,
        round = false,
        paddingInner = 0,
        paddingOuter = 0,
        align = 0.5;
    delete scale.unknown;

    function rescale() {
      var n = domain().length,
          reverse = range[1] < range[0],
          start = range[reverse - 0],
          stop = range[1 - reverse],
          space = bandSpace(n, paddingInner, paddingOuter);
      step = (stop - start) / (space || 1);

      if (round) {
        step = Math.floor(step);
      }

      start += (stop - start - step * (n - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);

      if (round) {
        start = Math.round(start);
        bandwidth = Math.round(bandwidth);
      }

      var values = sequence(n).map(function (i) {
        return start + step * i;
      });
      return ordinalRange(reverse ? values.reverse() : values);
    }

    scale.domain = function (_) {
      if (arguments.length) {
        domain(_);
        return rescale();
      } else {
        return domain();
      }
    };

    scale.range = function (_) {
      if (arguments.length) {
        range = [+_[0], +_[1]];
        return rescale();
      } else {
        return range.slice();
      }
    };

    scale.rangeRound = function (_) {
      range = [+_[0], +_[1]];
      round = true;
      return rescale();
    };

    scale.bandwidth = function () {
      return bandwidth;
    };

    scale.step = function () {
      return step;
    };

    scale.round = function (_) {
      if (arguments.length) {
        round = !!_;
        return rescale();
      } else {
        return round;
      }
    };

    scale.padding = function (_) {
      if (arguments.length) {
        paddingOuter = Math.max(0, Math.min(1, _));
        paddingInner = paddingOuter;
        return rescale();
      } else {
        return paddingInner;
      }
    };

    scale.paddingInner = function (_) {
      if (arguments.length) {
        paddingInner = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return paddingInner;
      }
    };

    scale.paddingOuter = function (_) {
      if (arguments.length) {
        paddingOuter = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return paddingOuter;
      }
    };

    scale.align = function (_) {
      if (arguments.length) {
        align = Math.max(0, Math.min(1, _));
        return rescale();
      } else {
        return align;
      }
    };

    scale.invertRange = function (_) {
      // bail if range has null or undefined values
      if (_[0] == null || _[1] == null) return;
      var lo = +_[0],
          hi = +_[1],
          reverse = range[1] < range[0],
          values = reverse ? ordinalRange().reverse() : ordinalRange(),
          n = values.length - 1,
          a,
          b,
          t; // bail if either range endpoint is invalid

      if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range

      if (hi < lo) {
        t = lo;
        lo = hi;
        hi = t;
      }

      if (hi < values[0] || lo > range[1 - reverse]) return; // binary search to index into scale range

      a = Math.max(0, bisectRight(values, lo) - 1);
      b = lo === hi ? a : bisectRight(values, hi) - 1; // increment index a if lo is within padding gap

      if (lo - values[a] > bandwidth + 1e-10) ++a;

      if (reverse) {
        // map + swap
        t = a;
        a = n - b;
        b = n - t;
      }

      return a > b ? undefined : domain().slice(a, b + 1);
    };

    scale.invert = function (_) {
      var value = scale.invertRange([_, _]);
      return value ? value[0] : value;
    };

    scale.copy = function () {
      return band().domain(domain()).range(range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };

    return rescale();
  }

  function pointish(scale) {
    var copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;

    scale.copy = function () {
      return pointish(copy());
    };

    return scale;
  }

  function point$1() {
    return pointish(band().paddingInner(1));
  }

  var map$3 = Array.prototype.map;
  function numbers$1(_) {
    return map$3.call(_, function (x) {
      return +x;
    });
  }

  var slice = Array.prototype.slice;

  function scaleBinOrdinal() {
    var domain = [],
        range = [];

    function scale(x) {
      return x == null || x !== x ? undefined : range[(bisectRight(domain, x) - 1) % range.length];
    }

    scale.domain = function (_) {
      if (arguments.length) {
        domain = numbers$1(_);
        return scale;
      } else {
        return domain.slice();
      }
    };

    scale.range = function (_) {
      if (arguments.length) {
        range = slice.call(_);
        return scale;
      } else {
        return range.slice();
      }
    };

    scale.tickFormat = function (count, specifier) {
      return spanFormat(domain[0], peek(domain), count == null ? 10 : count, specifier);
    };

    scale.copy = function () {
      return scaleBinOrdinal().domain(scale.domain()).range(scale.range());
    };

    return scale;
  }

  var scales = {};
  /**
   * Augment scales with their type and needed inverse methods.
   */

  function create(type, constructor, metadata) {
    var ctr = function scale() {
      var s = constructor();

      if (!s.invertRange) {
        s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;
      }

      s.type = type;
      return s;
    };

    ctr.metadata = toSet(array(metadata));
    return ctr;
  }

  function scale$2(type, scale, metadata) {
    if (arguments.length > 1) {
      scales[type] = create(type, scale, metadata);
      return this;
    } else {
      return isValidScaleType(type) ? scales[type] : undefined;
    }
  } // identity scale

  scale$2(Identity, identity$5); // continuous scales

  scale$2(Linear$1, linear$1, Continuous);
  scale$2(Log, log$2, [Continuous, Log]);
  scale$2(Pow, pow$1, Continuous);
  scale$2(Sqrt, sqrt$1, Continuous);
  scale$2(Symlog, symlog$1, Continuous);
  scale$2(Time, time, [Continuous, Temporal]);
  scale$2(UTC, utcTime, [Continuous, Temporal]); // sequential scales

  scale$2(Sequential, sequential, [Continuous, Interpolating]); // backwards compat

  scale$2("".concat(Sequential, "-").concat(Linear$1), sequential, [Continuous, Interpolating]);
  scale$2("".concat(Sequential, "-").concat(Log), sequentialLog, [Continuous, Interpolating, Log]);
  scale$2("".concat(Sequential, "-").concat(Pow), sequentialPow, [Continuous, Interpolating]);
  scale$2("".concat(Sequential, "-").concat(Sqrt), sequentialSqrt, [Continuous, Interpolating]);
  scale$2("".concat(Sequential, "-").concat(Symlog), sequentialSymlog, [Continuous, Interpolating]); // diverging scales

  scale$2("".concat(Diverging, "-").concat(Linear$1), diverging, [Continuous, Interpolating]);
  scale$2("".concat(Diverging, "-").concat(Log), divergingLog, [Continuous, Interpolating, Log]);
  scale$2("".concat(Diverging, "-").concat(Pow), divergingPow, [Continuous, Interpolating]);
  scale$2("".concat(Diverging, "-").concat(Sqrt), divergingSqrt, [Continuous, Interpolating]);
  scale$2("".concat(Diverging, "-").concat(Symlog), divergingSymlog, [Continuous, Interpolating]); // discretizing scales

  scale$2(Quantile$1, quantile$1, [Discretizing, Quantile$1]);
  scale$2(Quantize, quantize$1, Discretizing);
  scale$2(Threshold, threshold, Discretizing); // discrete scales

  scale$2(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);
  scale$2(Ordinal, ordinal, Discrete);
  scale$2(Band, band, Discrete);
  scale$2(Point, point$1, Discrete);
  function isValidScaleType(type) {
    return hasOwnProperty$1(scales, type);
  }

  function hasType(key, type) {
    var s = scales[key];
    return s && s.metadata[type];
  }

  function isContinuous(key) {
    return hasType(key, Continuous);
  }
  function isDiscrete(key) {
    return hasType(key, Discrete);
  }
  function isDiscretizing(key) {
    return hasType(key, Discretizing);
  }
  function isLogarithmic(key) {
    return hasType(key, Log);
  }
  function isInterpolating(key) {
    return hasType(key, Interpolating);
  }
  function isQuantile(key) {
    return hasType(key, Quantile$1);
  }

  var scaleProps = ['clamp', 'base', 'constant', 'exponent'];
  function interpolateRange(interpolator, range) {
    var start = range[0],
        span = peek(range) - start;
    return function (i) {
      return interpolator(start + i * span);
    };
  }
  function interpolateColors(colors, type, gamma) {
    return piecewise(interpolate$1(type || 'rgb', gamma), colors);
  }
  function quantizeInterpolator(interpolator, count) {
    var samples = new Array(count),
        n = count + 1;

    for (var i = 0; i < count;) {
      samples[i] = interpolator(++i / n);
    }

    return samples;
  }
  function scaleFraction(scale, min, max) {
    var delta = max - min,
        i,
        t,
        s;

    if (!delta || !Number.isFinite(delta)) {
      return constant(0.5);
    } else {
      i = (t = scale.type).indexOf('-');
      t = i < 0 ? t : t.slice(i + 1);
      s = scale$2(t)().domain([min, max]).range([0, 1]);
      scaleProps.forEach(function (m) {
        return scale[m] ? s[m](scale[m]()) : 0;
      });
      return s;
    }
  }
  function interpolate$1(type, gamma) {
    var interp = $$1[method$1(type)];
    return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;
  }

  function method$1(type) {
    return 'interpolate' + type.toLowerCase().split('-').map(function (s) {
      return s[0].toUpperCase() + s.slice(1);
    }).join('');
  }

  var continuous$1 = {
    blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',
    greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',
    greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',
    oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',
    purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',
    reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',
    blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',
    bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',
    greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',
    orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',
    purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',
    purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',
    purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',
    redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',
    yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',
    yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',
    yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',
    blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',
    brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',
    purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',
    purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',
    redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',
    redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',
    yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',
    redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',
    redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',
    pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',
    spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',
    viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',
    magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',
    inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',
    plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',
    rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',
    sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',
    browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',
    tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',
    teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',
    warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',
    goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',
    goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',
    goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',
    lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',
    lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',
    lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',
    lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',
    lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',
    darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',
    darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',
    darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',
    darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',
    darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'
  };
  var discrete$1 = {
    category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',
    category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',
    category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',
    category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',
    tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',
    tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',
    accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',
    dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',
    paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',
    pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',
    pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',
    set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',
    set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',
    set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'
  };

  function colors(palette) {
    var n = palette.length / 6 | 0,
        c = new Array(n),
        i = 0;

    while (i < n) {
      c[i] = '#' + palette.slice(i * 6, ++i * 6);
    }

    return c;
  }

  function apply(_, f) {
    for (var k in _) {
      scheme(k, f(_[k]));
    }
  }

  var schemes = {};
  apply(discrete$1, colors);
  apply(continuous$1, function (_) {
    return interpolateColors(colors(_));
  });
  function scheme(name, scheme) {
    name = name && name.toLowerCase();

    if (arguments.length > 1) {
      schemes[name] = scheme;
      return this;
    } else {
      return schemes[name];
    }
  }

  var defaultFormatter = function defaultFormatter(value) {
    return isArray(value) ? value.map(function (v) {
      return String(v);
    }) : String(value);
  };
  /**
   * Determine the tick count or interval function.
   * @param {Scale} scale - The scale for which to generate tick values.
   * @param {*} count - The desired tick count or interval specifier.
   * @param {number} minStep - The desired minimum step between tick values.
   * @return {*} - The tick count or interval function.
   */


  function tickCount(scale, count, minStep) {
    var step;

    if (isNumber(count)) {
      if (scale.bins) {
        count = Math.max(count, scale.bins.length);
      }

      if (minStep != null) {
        count = Math.min(count, ~~(span(scale.domain()) / minStep) || 1);
      }
    }

    if (isObject(count)) {
      step = count.step;
      count = count.interval;
    }

    if (isString(count)) {
      count = scale.type === Time ? timeInterval(count) : scale.type == UTC ? utcInterval(count) : error('Only time and utc scales accept interval strings.');
      if (step) count = count.every(step);
    }

    return count;
  }
  /**
   * Filter a set of candidate tick values, ensuring that only tick values
   * that lie within the scale range are included.
   * @param {Scale} scale - The scale for which to generate tick values.
   * @param {Array<*>} ticks - The candidate tick values.
   * @param {*} count - The tick count or interval function.
   * @return {Array<*>} - The filtered tick values.
   */

  function validTicks(scale, ticks, count) {
    var range = scale.range(),
        lo = Math.floor(range[0]),
        hi = Math.ceil(peek(range));

    if (lo > hi) {
      range = hi;
      hi = lo;
      lo = range;
    }

    ticks = ticks.filter(function (v) {
      v = scale(v);
      return lo <= v && v <= hi;
    });

    if (count > 0 && ticks.length > 1) {
      var endpoints = [ticks[0], peek(ticks)];

      while (ticks.length > count && ticks.length >= 3) {
        ticks = ticks.filter(function (_, i) {
          return !(i % 2);
        });
      }

      if (ticks.length < 3) {
        ticks = endpoints;
      }
    }

    return ticks;
  }
  /**
   * Generate tick values for the given scale and approximate tick count or
   * interval value. If the scale has a 'ticks' method, it will be used to
   * generate the ticks, with the count argument passed as a parameter. If the
   * scale lacks a 'ticks' method, the full scale domain will be returned.
   * @param {Scale} scale - The scale for which to generate tick values.
   * @param {*} [count] - The approximate number of desired ticks.
   * @return {Array<*>} - The generated tick values.
   */

  function tickValues(scale, count) {
    return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();
  }
  /**
   * Generate a label format function for a scale. If the scale has a
   * 'tickFormat' method, it will be used to generate the formatter, with the
   * count and specifier arguments passed as parameters. If the scale lacks a
   * 'tickFormat' method, the returned formatter performs simple string coercion.
   * If the input scale is a logarithmic scale and the format specifier does not
   * indicate a desired decimal precision, a special variable precision formatter
   * that automatically trims trailing zeroes will be generated.
   * @param {Scale} scale - The scale for which to generate the label formatter.
   * @param {*} [count] - The approximate number of desired ticks.
   * @param {string} [specifier] - The format specifier. Must be a legal d3
   *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or
   *   time multi-format specifier object.
   * @return {function(*):string} - The generated label formatter.
   */

  function tickFormat(scale, count, specifier, formatType, noSkip) {
    var type = scale.type,
        format = type === Time || formatType === Time ? timeFormat$1(specifier) : type === UTC || formatType === UTC ? utcFormat$1(specifier) : scale.tickFormat ? scale.tickFormat(count, specifier) : specifier ? format$3(specifier) : defaultFormatter;

    if (isLogarithmic(type)) {
      var logfmt = variablePrecision(specifier);
      format = noSkip || scale.bins ? logfmt : filter$1(format, logfmt);
    }

    return format;
  }

  function filter$1(sourceFormat, targetFormat) {
    return function (_) {
      return sourceFormat(_) ? targetFormat(_) : '';
    };
  }

  function variablePrecision(specifier) {
    var s = formatSpecifier(specifier || ',');

    if (s.precision == null) {
      s.precision = 12;

      switch (s.type) {
        case '%':
          s.precision -= 2;
          break;

        case 'e':
          s.precision -= 1;
          break;
      }

      return trimZeroes(format$3(s), // number format
      format$3('.1f')(1)[1] // decimal point character
      );
    } else {
      return format$3(s);
    }
  }

  function trimZeroes(format, decimalChar) {
    return function (x) {
      var str = format(x),
          dec = str.indexOf(decimalChar),
          idx,
          end;
      if (dec < 0) return str;
      idx = rightmostDigit(str, dec);
      end = idx < str.length ? str.slice(idx) : '';

      while (--idx > dec) {
        if (str[idx] !== '0') {
          ++idx;
          break;
        }
      }

      return str.slice(0, idx) + end;
    };
  }

  function rightmostDigit(str, dec) {
    var i = str.lastIndexOf('e'),
        c;
    if (i > 0) return i;

    for (i = str.length; --i > dec;) {
      c = str.charCodeAt(i);
      if (c >= 48 && c <= 57) return i + 1; // is digit
    }
  }

  /**
   * Generates axis ticks for visualizing a spatial scale.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Scale} params.scale - The scale to generate ticks for.
   * @param {*} [params.count=10] - The approximate number of ticks, or
   *   desired tick interval, to use.
   * @param {Array<*>} [params.values] - The exact tick values to use.
   *   These must be legal domain values for the provided scale.
   *   If provided, the count argument is ignored.
   * @param {function(*):string} [params.formatSpecifier] - A format specifier
   *   to use in conjunction with scale.tickFormat. Legal values are
   *   any valid d3 4.0 format specifier.
   * @param {function(*):string} [params.format] - The format function to use.
   *   If provided, the formatSpecifier argument is ignored.
   */

  function AxisTicks(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$W = inherits(AxisTicks, Transform$1);

  prototype$W.transform = function (_, pulse) {
    if (this.value && !_.modified()) {
      return pulse.StopPropagation;
    }

    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        ticks = this.value,
        scale = _.scale,
        tally = _.count == null ? _.values ? _.values.length : 10 : _.count,
        count = tickCount(scale, tally, _.minstep),
        format = _.format || tickFormat(scale, count, _.formatSpecifier, _.formatType, !!_.values),
        values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);
    if (ticks) out.rem = ticks;
    ticks = values.map(function (value, i) {
      return ingest({
        index: i / (values.length - 1 || 1),
        value: value,
        label: format(value)
      });
    });

    if (_.extra && ticks.length) {
      // add an extra tick pegged to the initial domain value
      // this is used to generate axes with 'binned' domains
      ticks.push(ingest({
        index: -1,
        extra: {
          value: ticks[0].value
        },
        label: ''
      }));
    }

    out.source = ticks;
    out.add = ticks;
    this.value = ticks;
    return out;
  };

  /**
   * Joins a set of data elements against a set of visual items.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): object} [params.item] - An item generator function.
   * @param {function(object): *} [params.key] - The key field associating data and visual items.
   */

  function DataJoin(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$X = inherits(DataJoin, Transform$1);

  function defaultItemCreate() {
    return ingest({});
  }

  function isExit(t) {
    return t.exit;
  }

  prototype$X.transform = function (_, pulse) {
    var df = pulse.dataflow,
        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        item = _.item || defaultItemCreate,
        key = _.key || tupleid,
        map = this.value; // prevent transient (e.g., hover) requests from
    // cascading across marks derived from marks

    if (isArray(out.encode)) {
      out.encode = null;
    }

    if (map && (_.modified('key') || pulse.modified(key))) {
      error('DataJoin does not support modified key function or fields.');
    }

    if (!map) {
      pulse = pulse.addAll();
      this.value = map = fastmap().test(isExit);

      map.lookup = function (t) {
        return map.get(key(t));
      };
    }

    pulse.visit(pulse.ADD, function (t) {
      var k = key(t),
          x = map.get(k);

      if (x) {
        if (x.exit) {
          map.empty--;
          out.add.push(x);
        } else {
          out.mod.push(x);
        }
      } else {
        map.set(k, x = item(t));
        out.add.push(x);
      }

      x.datum = t;
      x.exit = false;
    });
    pulse.visit(pulse.MOD, function (t) {
      var k = key(t),
          x = map.get(k);

      if (x) {
        x.datum = t;
        out.mod.push(x);
      }
    });
    pulse.visit(pulse.REM, function (t) {
      var k = key(t),
          x = map.get(k);

      if (t === x.datum && !x.exit) {
        out.rem.push(x);
        x.exit = true;
        ++map.empty;
      }
    });
    if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');
    if (_.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);
    return out;
  };

  /**
   * Invokes encoding functions for visual items.
   * @constructor
   * @param {object} params - The parameters to the encoding functions. This
   *   parameter object will be passed through to all invoked encoding functions.
   * @param {object} [params.mod=false] - Flag indicating if tuples in the input
   *   mod set that are unmodified by encoders should be included in the output.
   * @param {object} param.encoders - The encoding functions
   * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
   * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
   * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
   */

  function Encode(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$Y = inherits(Encode, Transform$1);

  prototype$Y.transform = function (_, pulse) {
    var out = pulse.fork(pulse.ADD_REM),
        fmod = _.mod || false,
        encoders = _.encoders,
        encode = pulse.encode; // if an array, the encode directive includes additional sets
    // that must be defined in order for the primary set to be invoked
    // e.g., only run the update set if the hover set is defined

    if (isArray(encode)) {
      if (out.changed() || encode.every(function (e) {
        return encoders[e];
      })) {
        encode = encode[0];
        out.encode = null; // consume targeted encode directive
      } else {
        return pulse.StopPropagation;
      }
    } // marshall encoder functions


    var reenter = encode === 'enter',
        update = encoders.update || falsy,
        enter = encoders.enter || falsy,
        exit = encoders.exit || falsy,
        set = (encode && !reenter ? encoders[encode] : update) || falsy;

    if (pulse.changed(pulse.ADD)) {
      pulse.visit(pulse.ADD, function (t) {
        enter(t, _);
        update(t, _);
      });
      out.modifies(enter.output);
      out.modifies(update.output);

      if (set !== falsy && set !== update) {
        pulse.visit(pulse.ADD, function (t) {
          set(t, _);
        });
        out.modifies(set.output);
      }
    }

    if (pulse.changed(pulse.REM) && exit !== falsy) {
      pulse.visit(pulse.REM, function (t) {
        exit(t, _);
      });
      out.modifies(exit.output);
    }

    if (reenter || set !== falsy) {
      var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);

      if (reenter) {
        pulse.visit(flag, function (t) {
          var mod = enter(t, _) || fmod;
          if (set(t, _) || mod) out.mod.push(t);
        });
        if (out.mod.length) out.modifies(enter.output);
      } else {
        pulse.visit(flag, function (t) {
          if (set(t, _) || fmod) out.mod.push(t);
        });
      }

      if (out.mod.length) out.modifies(set.output);
    }

    return out.changed() ? out : pulse.StopPropagation;
  };

  var Symbols$1 = 'symbol';
  var Discrete$1 = 'discrete';
  var Gradient$1 = 'gradient';

  var _symbols, _formats;
  var symbols$1 = (_symbols = {}, _defineProperty(_symbols, Quantile$1, 'quantiles'), _defineProperty(_symbols, Quantize, 'thresholds'), _defineProperty(_symbols, Threshold, 'domain'), _symbols);
  var formats$1 = (_formats = {}, _defineProperty(_formats, Quantile$1, 'quantiles'), _defineProperty(_formats, Quantize, 'domain'), _formats);
  function labelValues(scale, count) {
    return scale.bins ? binValues(scale.bins) : scale.type === Log ? logValues(scale, count) : symbols$1[scale.type] ? thresholdValues(scale[symbols$1[scale.type]]()) : tickValues(scale, count);
  }

  function logValues(scale, count) {
    var ticks = tickValues(scale, count),
        base = scale.base(),
        logb = Math.log(base),
        k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria

    return ticks.filter(function (d) {
      var i = d / Math.pow(base, Math.round(Math.log(d) / logb));
      if (i * base < base - 0.5) i *= base;
      return i <= k;
    });
  }

  function thresholdFormat(scale, specifier) {
    var _ = scale[formats$1[scale.type]](),
        n = _.length,
        d = n > 1 ? _[1] - _[0] : _[0],
        i;

    for (i = 1; i < n; ++i) {
      d = Math.min(d, _[i] - _[i - 1]);
    } // 3 ticks times 10 for increased resolution


    return spanFormat(0, d, 3 * 10, specifier);
  }

  function thresholdValues(thresholds) {
    var values = [-Infinity].concat(thresholds);
    values.max = +Infinity;
    return values;
  }

  function binValues(bins) {
    var values = bins.slice(0, -1);
    values.max = peek(bins);
    return values;
  }

  function isDiscreteRange(scale) {
    return symbols$1[scale.type] || scale.bins;
  }

  function labelFormat(scale, count, type, specifier, formatType, noSkip) {
    var format = formats$1[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(scale, specifier) : tickFormat(scale, count, specifier, formatType, noSkip);
    return type === Symbols$1 && isDiscreteRange(scale) ? formatRange(format) : type === Discrete$1 ? formatDiscrete(format) : formatPoint(format);
  }

  function formatRange(format) {
    return function (value, index, array) {
      var limit = get$4(array[index + 1], get$4(array.max, +Infinity)),
          lo = formatValue$1(value, format),
          hi = formatValue$1(limit, format);
      return lo && hi ? lo + " \u2013 " + hi : hi ? '< ' + hi : "\u2265 " + lo;
    };
  }

  function get$4(value, dflt) {
    return value != null ? value : dflt;
  }

  function formatDiscrete(format) {
    return function (value, index) {
      return index ? format(value) : null;
    };
  }

  function formatPoint(format) {
    return function (value) {
      return format(value);
    };
  }

  function formatValue$1(value, format) {
    return Number.isFinite(value) ? format(value) : null;
  }

  function labelFraction(scale) {
    var domain = scale.domain(),
        count = domain.length - 1,
        lo = +domain[0],
        hi = +peek(domain),
        span = hi - lo;

    if (scale.type === Threshold) {
      var adjust = count ? span / count : 0.1;
      lo -= adjust;
      hi += adjust;
      span = hi - lo;
    }

    return function (value) {
      return (value - lo) / span;
    };
  }

  /**
   * Generates legend entries for visualizing a scale.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Scale} params.scale - The scale to generate items for.
   * @param {*} [params.count=5] - The approximate number of items, or
   *   desired tick interval, to use.
   * @param {*} [params.limit] - The maximum number of entries to
   *   include in a symbol legend.
   * @param {Array<*>} [params.values] - The exact tick values to use.
   *   These must be legal domain values for the provided scale.
   *   If provided, the count argument is ignored.
   * @param {string} [params.formatSpecifier] - A format specifier
   *   to use in conjunction with scale.tickFormat. Legal values are
   *   any valid D3 format specifier string.
   * @param {function(*):string} [params.format] - The format function to use.
   *   If provided, the formatSpecifier argument is ignored.
   */

  function LegendEntries(params) {
    Transform$1.call(this, [], params);
  }
  var prototype$Z = inherits(LegendEntries, Transform$1);

  prototype$Z.transform = function (_, pulse) {
    if (this.value != null && !_.modified()) {
      return pulse.StopPropagation;
    }

    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        items = this.value,
        type = _.type || Symbols$1,
        scale = _.scale,
        limit = +_.limit,
        count = tickCount(scale, _.count == null ? 5 : _.count, _.minstep),
        lskip = !!_.values || type === Symbols$1,
        format = _.format || labelFormat(scale, count, type, _.formatSpecifier, _.formatType, lskip),
        values = _.values || labelValues(scale, count),
        domain,
        fraction,
        size,
        offset,
        ellipsis;
    if (items) out.rem = items;

    if (type === Symbols$1) {
      if (limit && values.length > limit) {
        pulse.dataflow.warn('Symbol legend count exceeds limit, filtering items.');
        items = values.slice(0, limit - 1);
        ellipsis = true;
      } else {
        items = values;
      }

      if (isFunction(size = _.size)) {
        // if first value maps to size zero, remove from list (vega#717)
        if (!_.values && scale(items[0]) === 0) {
          items = items.slice(1);
        } // compute size offset for legend entries


        offset = items.reduce(function (max, value) {
          return Math.max(max, size(value, _));
        }, 0);
      } else {
        size = constant(offset = size || 8);
      }

      items = items.map(function (value, index) {
        return ingest({
          index: index,
          label: format(value, index, items),
          value: value,
          offset: offset,
          size: size(value, _)
        });
      });

      if (ellipsis) {
        ellipsis = values[items.length];
        items.push(ingest({
          index: items.length,
          label: "\u2026".concat(values.length - items.length, " entries"),
          value: ellipsis,
          offset: offset,
          size: size(ellipsis, _)
        }));
      }
    } else if (type === Gradient$1) {
      domain = scale.domain(), fraction = scaleFraction(scale, domain[0], peek(domain)); // if automatic label generation produces 2 or fewer values,
      // use the domain end points instead (fixes vega/vega#1364)

      if (values.length < 3 && !_.values && domain[0] !== peek(domain)) {
        values = [domain[0], peek(domain)];
      }

      items = values.map(function (value, index) {
        return ingest({
          index: index,
          label: format(value, index, values),
          value: value,
          perc: fraction(value)
        });
      });
    } else {
      size = values.length - 1;
      fraction = labelFraction(scale);
      items = values.map(function (value, index) {
        return ingest({
          index: index,
          label: format(value, index, values),
          value: value,
          perc: index ? fraction(value) : 0,
          perc2: index === size ? 1 : fraction(values[index + 1])
        });
      });
    }

    out.source = items;
    out.add = items;
    this.value = items;
    return out;
  };

  var Paths = fastmap({
    'line': line$2,
    'line-radial': lineR,
    'arc': arc$2,
    'arc-radial': arcR,
    'curve': curve,
    'curve-radial': curveR,
    'orthogonal-horizontal': orthoX,
    'orthogonal-vertical': orthoY,
    'orthogonal-radial': orthoR,
    'diagonal-horizontal': diagonalX,
    'diagonal-vertical': diagonalY,
    'diagonal-radial': diagonalR
  });

  function sourceX(t) {
    return t.source.x;
  }

  function sourceY(t) {
    return t.source.y;
  }

  function targetX(t) {
    return t.target.x;
  }

  function targetY(t) {
    return t.target.y;
  }
  /**
   * Layout paths linking source and target elements.
   * @constructor
   * @param {object} params - The parameters for this operator.
   */


  function LinkPath(params) {
    Transform$1.call(this, {}, params);
  }
  LinkPath.Definition = {
    "type": "LinkPath",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "sourceX",
      "type": "field",
      "default": "source.x"
    }, {
      "name": "sourceY",
      "type": "field",
      "default": "source.y"
    }, {
      "name": "targetX",
      "type": "field",
      "default": "target.x"
    }, {
      "name": "targetY",
      "type": "field",
      "default": "target.y"
    }, {
      "name": "orient",
      "type": "enum",
      "default": "vertical",
      "values": ["horizontal", "vertical", "radial"]
    }, {
      "name": "shape",
      "type": "enum",
      "default": "line",
      "values": ["line", "arc", "curve", "diagonal", "orthogonal"]
    }, {
      "name": "require",
      "type": "signal"
    }, {
      "name": "as",
      "type": "string",
      "default": "path"
    }]
  };
  var prototype$_ = inherits(LinkPath, Transform$1);

  prototype$_.transform = function (_, pulse) {
    var sx = _.sourceX || sourceX,
        sy = _.sourceY || sourceY,
        tx = _.targetX || targetX,
        ty = _.targetY || targetY,
        as = _.as || 'path',
        orient = _.orient || 'vertical',
        shape = _.shape || 'line',
        path = Paths.get(shape + '-' + orient) || Paths.get(shape);

    if (!path) {
      error('LinkPath unsupported type: ' + _.shape + (_.orient ? '-' + _.orient : ''));
    }

    pulse.visit(pulse.SOURCE, function (t) {
      t[as] = path(sx(t), sy(t), tx(t), ty(t));
    });
    return pulse.reflow(_.modified()).modifies(as);
  }; // -- Link Path Generation Methods -----


  function line$2(sx, sy, tx, ty) {
    return 'M' + sx + ',' + sy + 'L' + tx + ',' + ty;
  }

  function lineR(sa, sr, ta, tr) {
    return line$2(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
  }

  function arc$2(sx, sy, tx, ty) {
    var dx = tx - sx,
        dy = ty - sy,
        rr = Math.sqrt(dx * dx + dy * dy) / 2,
        ra = 180 * Math.atan2(dy, dx) / Math.PI;
    return 'M' + sx + ',' + sy + 'A' + rr + ',' + rr + ' ' + ra + ' 0 1' + ' ' + tx + ',' + ty;
  }

  function arcR(sa, sr, ta, tr) {
    return arc$2(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
  }

  function curve(sx, sy, tx, ty) {
    var dx = tx - sx,
        dy = ty - sy,
        ix = 0.2 * (dx + dy),
        iy = 0.2 * (dy - dx);
    return 'M' + sx + ',' + sy + 'C' + (sx + ix) + ',' + (sy + iy) + ' ' + (tx + iy) + ',' + (ty - ix) + ' ' + tx + ',' + ty;
  }

  function curveR(sa, sr, ta, tr) {
    return curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));
  }

  function orthoX(sx, sy, tx, ty) {
    return 'M' + sx + ',' + sy + 'V' + ty + 'H' + tx;
  }

  function orthoY(sx, sy, tx, ty) {
    return 'M' + sx + ',' + sy + 'H' + tx + 'V' + ty;
  }

  function orthoR(sa, sr, ta, tr) {
    var sc = Math.cos(sa),
        ss = Math.sin(sa),
        tc = Math.cos(ta),
        ts = Math.sin(ta),
        sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
    return 'M' + sr * sc + ',' + sr * ss + 'A' + sr + ',' + sr + ' 0 0,' + (sf ? 1 : 0) + ' ' + sr * tc + ',' + sr * ts + 'L' + tr * tc + ',' + tr * ts;
  }

  function diagonalX(sx, sy, tx, ty) {
    var m = (sx + tx) / 2;
    return 'M' + sx + ',' + sy + 'C' + m + ',' + sy + ' ' + m + ',' + ty + ' ' + tx + ',' + ty;
  }

  function diagonalY(sx, sy, tx, ty) {
    var m = (sy + ty) / 2;
    return 'M' + sx + ',' + sy + 'C' + sx + ',' + m + ' ' + tx + ',' + m + ' ' + tx + ',' + ty;
  }

  function diagonalR(sa, sr, ta, tr) {
    var sc = Math.cos(sa),
        ss = Math.sin(sa),
        tc = Math.cos(ta),
        ts = Math.sin(ta),
        mr = (sr + tr) / 2;
    return 'M' + sr * sc + ',' + sr * ss + 'C' + mr * sc + ',' + mr * ss + ' ' + mr * tc + ',' + mr * ts + ' ' + tr * tc + ',' + tr * ts;
  }

  /**
   * Pie and donut chart layout.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The value field to size pie segments.
   * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
   * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
   * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
   */

  function Pie(params) {
    Transform$1.call(this, null, params);
  }
  Pie.Definition = {
    "type": "Pie",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "startAngle",
      "type": "number",
      "default": 0
    }, {
      "name": "endAngle",
      "type": "number",
      "default": 6.283185307179586
    }, {
      "name": "sort",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["startAngle", "endAngle"]
    }]
  };
  var prototype$$ = inherits(Pie, Transform$1);

  prototype$$.transform = function (_, pulse) {
    var as = _.as || ['startAngle', 'endAngle'],
        startAngle = as[0],
        endAngle = as[1],
        field = _.field || one,
        start = _.startAngle || 0,
        stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,
        data = pulse.source,
        values = data.map(field),
        n = values.length,
        a = start,
        k = (stop - start) / sum(values),
        index = sequence(n),
        i,
        t,
        v;

    if (_.sort) {
      index.sort(function (a, b) {
        return values[a] - values[b];
      });
    }

    for (i = 0; i < n; ++i) {
      v = values[index[i]];
      t = data[index[i]];
      t[startAngle] = a;
      t[endAngle] = a += v * k;
    }

    this.value = values;
    return pulse.reflow(_.modified()).modifies(as);
  };

  var DEFAULT_COUNT = 5;

  function includeZero(scale) {
    var type = scale.type;
    return !scale.bins && (type === Linear$1 || type === Pow || type === Sqrt);
  }

  function includePad(type) {
    return isContinuous(type) && type !== Sequential;
  }

  var SKIP$2 = toSet(['set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount', 'domain', 'domainMin', 'domainMid', 'domainMax', 'domainRaw', 'domainImplicit', 'nice', 'zero', 'bins', 'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma']);
  /**
   * Maintains a scale function mapping data values to visual channels.
   * @constructor
   * @param {object} params - The parameters for this operator.
   */

  function Scale(params) {
    Transform$1.call(this, null, params);
    this.modified(true); // always treat as modified
  }
  var prototype$10 = inherits(Scale, Transform$1);

  prototype$10.transform = function (_, pulse) {
    var df = pulse.dataflow,
        scale = this.value,
        key = scaleKey(_);

    if (!scale || key !== scale.type) {
      this.value = scale = scale$2(key)();
    }

    for (key in _) {
      if (!SKIP$2[key]) {
        // padding is a scale property for band/point but not others
        if (key === 'padding' && includePad(scale.type)) continue; // invoke scale property setter, raise warning if not found

        isFunction(scale[key]) ? scale[key](_[key]) : df.warn('Unsupported scale property: ' + key);
      }
    }

    configureRange(scale, _, configureBins(scale, _, configureDomain(scale, _, df)));
    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
  };

  function scaleKey(_) {
    var t = _.type,
        d = '',
        n; // backwards compatibility pre Vega 5.

    if (t === Sequential) return Sequential + '-' + Linear$1;

    if (isContinuousColor(_)) {
      n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;
      d = n === 2 ? Sequential + '-' : n === 3 ? Diverging + '-' : '';
    }

    return (d + t || Linear$1).toLowerCase();
  }

  function isContinuousColor(_) {
    var t = _.type;
    return isContinuous(t) && t !== Time && t !== UTC && (_.scheme || _.range && _.range.length && _.range.every(isString));
  }

  function configureDomain(scale, _, df) {
    // check raw domain, if provided use that and exit early
    var raw = rawDomain(scale, _.domainRaw, df);
    if (raw > -1) return raw;
    var domain = _.domain,
        type = scale.type,
        zero = _.zero || _.zero === undefined && includeZero(scale),
        n,
        mid;
    if (!domain) return 0; // adjust continuous domain for minimum pixel padding

    if (includePad(type) && _.padding && domain[0] !== peek(domain)) {
      domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);
    } // adjust domain based on zero, min, max settings


    if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
      n = (domain = domain.slice()).length - 1 || 1;

      if (zero) {
        if (domain[0] > 0) domain[0] = 0;
        if (domain[n] < 0) domain[n] = 0;
      }

      if (_.domainMin != null) domain[0] = _.domainMin;
      if (_.domainMax != null) domain[n] = _.domainMax;

      if (_.domainMid != null) {
        mid = _.domainMid;

        if (mid < domain[0] || mid > domain[n]) {
          df.warn('Scale domainMid exceeds domain min or max.', mid);
        }

        domain.splice(n, 0, mid);
      }
    } // set the scale domain


    scale.domain(domainCheck(type, domain, df)); // if ordinal scale domain is defined, prevent implicit
    // domain construction as side-effect of scale lookup

    if (type === Ordinal) {
      scale.unknown(_.domainImplicit ? implicit : undefined);
    } // perform 'nice' adjustment as requested


    if (_.nice && scale.nice) {
      scale.nice(_.nice !== true && tickCount(scale, _.nice) || null);
    } // return the cardinality of the domain


    return domain.length;
  }

  function rawDomain(scale, raw, df) {
    if (raw) {
      scale.domain(domainCheck(scale.type, raw, df));
      return raw.length;
    } else {
      return -1;
    }
  }

  function padDomain(type, domain, range, pad, exponent, constant) {
    var span = Math.abs(peek(range) - range[0]),
        frac = span / (span - 2 * pad),
        d = type === Log ? zoomLog(domain, null, frac) : type === Sqrt ? zoomPow(domain, null, frac, 0.5) : type === Pow ? zoomPow(domain, null, frac, exponent || 1) : type === Symlog ? zoomSymlog(domain, null, frac, constant || 1) : zoomLinear(domain, null, frac);
    domain = domain.slice();
    domain[0] = d[0];
    domain[domain.length - 1] = d[1];
    return domain;
  }

  function domainCheck(type, domain, df) {
    if (isLogarithmic(type)) {
      // sum signs of domain values
      // if all pos or all neg, abs(sum) === domain.length
      var s = Math.abs(domain.reduce(function (s, v) {
        return s + (v < 0 ? -1 : v > 0 ? 1 : 0);
      }, 0));

      if (s !== domain.length) {
        df.warn('Log scale domain includes zero: ' + $(domain));
      }
    }

    return domain;
  }

  function configureBins(scale, _, count) {
    var bins = _.bins;

    if (bins && !isArray(bins)) {
      // generate bin boundary array
      var domain = scale.domain(),
          lo = domain[0],
          hi = peek(domain),
          start = bins.start == null ? lo : bins.start,
          stop = bins.stop == null ? hi : bins.stop,
          step = bins.step;
      if (!step) error('Scale bins parameter missing step property.');
      if (start < lo) start = step * Math.ceil(lo / step);
      if (stop > hi) stop = step * Math.floor(hi / step);
      bins = sequence(start, stop + step / 2, step);
    }

    if (bins) {
      // assign bin boundaries to scale instance
      scale.bins = bins;
    } else if (scale.bins) {
      // no current bins, remove bins if previously set
      delete scale.bins;
    } // special handling for bin-ordinal scales


    if (scale.type === BinOrdinal) {
      if (!bins) {
        // the domain specifies the bins
        scale.bins = scale.domain();
      } else if (!_.domain && !_.domainRaw) {
        // the bins specify the domain
        scale.domain(bins);
        count = bins.length;
      }
    } // return domain cardinality


    return count;
  }

  function configureRange(scale, _, count) {
    var type = scale.type,
        round = _.round || false,
        range = _.range; // if range step specified, calculate full range extent

    if (_.rangeStep != null) {
      range = configureRangeStep(type, _, count);
    } // else if a range scheme is defined, use that
    else if (_.scheme) {
        range = configureScheme(type, _, count);

        if (isFunction(range)) {
          if (scale.interpolator) {
            return scale.interpolator(range);
          } else {
            error("Scale type ".concat(type, " does not support interpolating color schemes."));
          }
        }
      } // given a range array for an interpolating scale, convert to interpolator


    if (range && isInterpolating(type)) {
      return scale.interpolator(interpolateColors(flip(range, _.reverse), _.interpolate, _.interpolateGamma));
    } // configure rounding / interpolation


    if (range && _.interpolate && scale.interpolate) {
      scale.interpolate(interpolate$1(_.interpolate, _.interpolateGamma));
    } else if (isFunction(scale.round)) {
      scale.round(round);
    } else if (isFunction(scale.rangeRound)) {
      scale.interpolate(round ? interpolateRound : interpolate);
    }

    if (range) scale.range(flip(range, _.reverse));
  }

  function configureRangeStep(type, _, count) {
    if (type !== Band && type !== Point) {
      error('Only band and point scales support rangeStep.');
    } // calculate full range based on requested step size and padding


    var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,
        inner = type === Point ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;
    return [0, _.rangeStep * bandSpace(count, inner, outer)];
  }

  function configureScheme(type, _, count) {
    var extent = _.schemeExtent,
        name,
        scheme$1;

    if (isArray(_.scheme)) {
      scheme$1 = interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);
    } else {
      name = _.scheme.toLowerCase();
      scheme$1 = scheme(name);
      if (!scheme$1) error("Unrecognized scheme name: ".concat(_.scheme));
    } // determine size for potential discrete range


    count = type === Threshold ? count + 1 : type === BinOrdinal ? count - 1 : type === Quantile$1 || type === Quantize ? +_.schemeCount || DEFAULT_COUNT : count; // adjust and/or quantize scheme as appropriate

    return isInterpolating(type) ? adjustScheme(scheme$1, extent, _.reverse) : isFunction(scheme$1) ? quantizeInterpolator(adjustScheme(scheme$1, extent), count) : type === Ordinal ? scheme$1 : scheme$1.slice(0, count);
  }

  function adjustScheme(scheme, extent, reverse) {
    return isFunction(scheme) && (extent || reverse) ? interpolateRange(scheme, flip(extent || [0, 1], reverse)) : scheme;
  }

  function flip(array, reverse) {
    return reverse ? array.slice().reverse() : array;
  }

  /**
   * Sorts scenegraph items in the pulse source array.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(*,*): number} [params.sort] - A comparator
   *   function for sorting tuples.
   */

  function SortItems(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$11 = inherits(SortItems, Transform$1);

  prototype$11.transform = function (_, pulse) {
    var mod = _.modified('sort') || pulse.changed(pulse.ADD) || pulse.modified(_.sort.fields) || pulse.modified('datum');
    if (mod) pulse.source.sort(stableCompare(_.sort));
    this.modified(mod);
    return pulse;
  };

  var Zero = 'zero',
      Center = 'center',
      Normalize = 'normalize',
      DefOutput = ['y0', 'y1'];
  /**
   * Stack layout for visualization elements.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The value field to stack.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
   * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
   * @param {string} [offset='zero'] - Stack baseline offset. One of 'zero', 'center', 'normalize'.
   */

  function Stack(params) {
    Transform$1.call(this, null, params);
  }
  Stack.Definition = {
    "type": "Stack",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "offset",
      "type": "enum",
      "default": Zero,
      "values": [Zero, Center, Normalize]
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": DefOutput
    }]
  };
  var prototype$12 = inherits(Stack, Transform$1);

  prototype$12.transform = function (_, pulse) {
    var as = _.as || DefOutput,
        y0 = as[0],
        y1 = as[1],
        sort = stableCompare(_.sort),
        field = _.field || one,
        stack = _.offset === Center ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero,
        groups,
        i,
        n,
        max; // partition, sum, and sort the stack groups

    groups = partition$2(pulse.source, _.groupby, sort, field); // compute stack layouts per group

    for (i = 0, n = groups.length, max = groups.max; i < n; ++i) {
      stack(groups[i], max, field, y0, y1);
    }

    return pulse.reflow(_.modified()).modifies(as);
  };

  function stackCenter(group, max, field, y0, y1) {
    var last = (max - group.sum) / 2,
        m = group.length,
        j = 0,
        t;

    for (; j < m; ++j) {
      t = group[j];
      t[y0] = last;
      t[y1] = last += Math.abs(field(t));
    }
  }

  function stackNormalize(group, max, field, y0, y1) {
    var scale = 1 / group.sum,
        last = 0,
        m = group.length,
        j = 0,
        v = 0,
        t;

    for (; j < m; ++j) {
      t = group[j];
      t[y0] = last;
      t[y1] = last = scale * (v += Math.abs(field(t)));
    }
  }

  function stackZero(group, max, field, y0, y1) {
    var lastPos = 0,
        lastNeg = 0,
        m = group.length,
        j = 0,
        v,
        t;

    for (; j < m; ++j) {
      t = group[j];
      v = +field(t);

      if (v < 0) {
        t[y0] = lastNeg;
        t[y1] = lastNeg += v;
      } else {
        t[y0] = lastPos;
        t[y1] = lastPos += v;
      }
    }
  }

  function partition$2(data, groupby, sort, field) {
    var groups = [],
        get = function get(f) {
      return f(t);
    },
        map,
        i,
        n,
        m,
        t,
        k,
        g,
        s,
        max; // partition data points into stack groups


    if (groupby == null) {
      groups.push(data.slice());
    } else {
      for (map = {}, i = 0, n = data.length; i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];

        if (!g) {
          map[k] = g = [];
          groups.push(g);
        }

        g.push(t);
      }
    } // compute sums of groups, sort groups as needed


    for (k = 0, max = 0, m = groups.length; k < m; ++k) {
      g = groups[k];

      for (i = 0, s = 0, n = g.length; i < n; ++i) {
        s += Math.abs(field(g[i]));
      }

      g.sum = s;
      if (s > max) max = s;
      if (sort) g.sort(sort);
    }

    groups.max = max;
    return groups;
  }



  var encode$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    axisticks: AxisTicks,
    datajoin: DataJoin,
    encode: Encode,
    legendentries: LegendEntries,
    linkpath: LinkPath,
    pie: Pie,
    scale: Scale,
    sortitems: SortItems,
    stack: Stack,
    validTicks: validTicks
  });

  function noop$2() {}

  var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []]; // Implementation adapted from d3/d3-contour. Thanks!

  function contours () {
    var dx = 1,
        dy = 1,
        smooth = smoothLinear;

    function contours(values, tz) {
      return tz.map(function (value) {
        return contour(values, value);
      });
    } // Accumulate, smooth contour rings, assign holes to exterior rings.
    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


    function contour(values, value) {
      var polygons = [],
          holes = [];
      isorings(values, value, function (ring) {
        smooth(ring, values, value);
        if (area$2(ring) > 0) polygons.push([ring]);else holes.push(ring);
      });
      holes.forEach(function (hole) {
        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
          if (contains((polygon = polygons[i])[0], hole) !== -1) {
            polygon.push(hole);
            return;
          }
        }
      });
      return {
        type: 'MultiPolygon',
        value: value,
        coordinates: polygons
      };
    } // Marching squares with isolines stitched into rings.
    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


    function isorings(values, value, callback) {
      var fragmentByStart = new Array(),
          fragmentByEnd = new Array(),
          x,
          y,
          t0,
          t1,
          t2,
          t3; // Special case for the first row (y = -1, t2 = t3 = 0).

      x = y = -1;
      t1 = values[0] >= value;
      cases[t1 << 1].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[x + 1] >= value;
        cases[t0 | t1 << 1].forEach(stitch);
      }

      cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

      while (++y < dy - 1) {
        x = -1;
        t1 = values[y * dx + dx] >= value;
        t2 = values[y * dx] >= value;
        cases[t1 << 1 | t2 << 2].forEach(stitch);

        while (++x < dx - 1) {
          t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
          t3 = t2, t2 = values[y * dx + x + 1] >= value;
          cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
        }

        cases[t1 | t2 << 3].forEach(stitch);
      } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


      x = -1;
      t2 = values[y * dx] >= value;
      cases[t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t2 << 3].forEach(stitch);

      function stitch(line) {
        var start = [line[0][0] + x, line[0][1] + y],
            end = [line[1][0] + x, line[1][1] + y],
            startIndex = index(start),
            endIndex = index(end),
            f,
            g;

        if (f = fragmentByEnd[startIndex]) {
          if (g = fragmentByStart[endIndex]) {
            delete fragmentByEnd[f.end];
            delete fragmentByStart[g.start];

            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                start: f.start,
                end: g.end,
                ring: f.ring.concat(g.ring)
              };
            }
          } else {
            delete fragmentByEnd[f.end];
            f.ring.push(end);
            fragmentByEnd[f.end = endIndex] = f;
          }
        } else if (f = fragmentByStart[endIndex]) {
          if (g = fragmentByEnd[startIndex]) {
            delete fragmentByStart[f.start];
            delete fragmentByEnd[g.end];

            if (f === g) {
              f.ring.push(end);
              callback(f.ring);
            } else {
              fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                start: g.start,
                end: f.end,
                ring: g.ring.concat(f.ring)
              };
            }
          } else {
            delete fragmentByStart[f.start];
            f.ring.unshift(start);
            fragmentByStart[f.start = startIndex] = f;
          }
        } else {
          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
            start: startIndex,
            end: endIndex,
            ring: [start, end]
          };
        }
      }
    }

    function index(point) {
      return point[0] * 2 + point[1] * (dx + 1) * 4;
    }

    function smoothLinear(ring, values, value) {
      ring.forEach(function (point) {
        var x = point[0],
            y = point[1],
            xt = x | 0,
            yt = y | 0,
            v0,
            v1 = values[yt * dx + xt];

        if (x > 0 && x < dx && xt === x) {
          v0 = values[yt * dx + xt - 1];
          point[0] = x + (value - v0) / (v1 - v0) - 0.5;
        }

        if (y > 0 && y < dy && yt === y) {
          v0 = values[(yt - 1) * dx + xt];
          point[1] = y + (value - v0) / (v1 - v0) - 0.5;
        }
      });
    }

    contours.contour = contour;

    contours.size = function (_) {
      if (!arguments.length) return [dx, dy];

      var _0 = Math.ceil(_[0]),
          _1 = Math.ceil(_[1]);

      if (!(_0 > 0) || !(_1 > 0)) error('invalid size');
      return dx = _0, dy = _1, contours;
    };

    contours.smooth = function (_) {
      return arguments.length ? (smooth = _ ? smoothLinear : noop$2, contours) : smooth === smoothLinear;
    };

    return contours;
  }

  function area$2(ring) {
    var i = 0,
        n = ring.length,
        area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

    while (++i < n) {
      area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    }

    return area;
  }

  function contains(ring, hole) {
    var i = -1,
        n = hole.length,
        c;

    while (++i < n) {
      if (c = ringContains(ring, hole[i])) return c;
    }

    return 0;
  }

  function ringContains(ring, point) {
    var x = point[0],
        y = point[1],
        contains = -1;

    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
      var pi = ring[i],
          xi = pi[0],
          yi = pi[1],
          pj = ring[j],
          xj = pj[0],
          yj = pj[1];
      if (segmentContains(pi, pj, point)) return 0;
      if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
    }

    return contains;
  }

  function segmentContains(a, b, c) {
    var i;
    return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
  }

  function collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
  }

  function within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
  }

  function quantize$2 (k, nice, zero) {
    return function (values) {
      var ex = extent(values),
          start = zero ? Math.min(ex[0], 0) : ex[0],
          stop = ex[1],
          span = stop - start,
          step = nice ? tickStep(start, stop, k) : span / (k + 1);
      return sequence(step, stop, step);
    };
  }

  /**
   * Generate isocontours (level sets) based on input raster grid data.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} [params.field] - The field with raster grid
   *   data. If unspecified, the tuple itself is interpreted as a raster grid.
   * @param {Array<number>} [params.thresholds] - Contour threshold array. If
   *   specified, the levels, nice, resolve, and zero parameters are ignored.
   * @param {number} [params.levels] - The desired number of contour levels.
   * @param {boolean} [params.nice] - Boolean flag indicating if the contour
   *   threshold values should be automatically aligned to "nice"
   *   human-friendly values. Setting this flag may cause the number of
   *   thresholds to deviate from the specified levels.
   * @param {string} [params.resolve] - The method for resolving thresholds
   *   across multiple input grids. If 'independent' (the default), threshold
   *   calculation will be performed separately for each grid. If 'shared', a
   *   single set of threshold values will be used for all input grids.
   * @param {boolean} [params.zero] - Boolean flag indicating if the contour
   *   threshold values should include zero.
   * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
   *   polygons should be smoothed using linear interpolation. The default is
   *   true. The parameter is ignored when using density estimation.
   * @param {boolean} [params.scale] - Optional numerical value by which to
   *   scale the output isocontour coordinates. This parameter can be useful
   *   to scale the contours to match a desired output resolution.
   * @param {string} [params.as='contour'] - The output field in which to store
   *   the generated isocontour data (default 'contour').
   */

  function Isocontour(params) {
    Transform$1.call(this, null, params);
  }
  Isocontour.Definition = {
    "type": "Isocontour",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "thresholds",
      "type": "number",
      "array": true
    }, {
      "name": "levels",
      "type": "number"
    }, {
      "name": "nice",
      "type": "boolean",
      "default": false
    }, {
      "name": "resolve",
      "type": "enum",
      "values": ["shared", "independent"],
      "default": "independent"
    }, {
      "name": "zero",
      "type": "boolean",
      "default": true
    }, {
      "name": "smooth",
      "type": "boolean",
      "default": true
    }, {
      "name": "scale",
      "type": "number",
      "expr": true
    }, {
      "name": "translate",
      "type": "number",
      "array": true,
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "null": true,
      "default": "contour"
    }]
  };
  var prototype$13 = inherits(Isocontour, Transform$1);

  prototype$13.transform = function (_, pulse) {
    if (this.value && !pulse.changed() && !_.modified()) {
      return pulse.StopPropagation;
    }

    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        source = pulse.materialize(pulse.SOURCE).source,
        field = _.field || identity,
        contour = contours().smooth(_.smooth !== false),
        tz = _.thresholds || levels(source, field, _),
        as = _.as === null ? null : _.as || 'contour',
        values = [];
    source.forEach(function (t) {
      var grid = field(t); // generate contour paths in GeoJSON format

      var paths = contour.size([grid.width, grid.height])(grid.values, isArray(tz) ? tz : tz(grid.values)); // adjust contour path coordinates as needed

      transformPaths(paths, grid, t, _); // ingest; copy source data properties to output

      paths.forEach(function (p) {
        values.push(rederive(t, ingest(as != null ? _defineProperty({}, as, p) : p)));
      });
    });
    if (this.value) out.rem = this.value;
    this.value = out.source = out.add = values;
    return out;
  };

  function levels(values, f, _) {
    var q = quantize$2(_.levels || 10, _.nice, _.zero !== false);
    return _.resolve !== 'shared' ? q : q(values.map(function (t) {
      return max(f(t).values);
    }));
  }

  function transformPaths(paths, grid, datum, _) {
    var s = _.scale || grid.scale,
        t = _.translate || grid.translate;
    if (isFunction(s)) s = s(datum, _);
    if (isFunction(t)) t = t(datum, _);
    if ((s === 1 || s == null) && !t) return;
    var sx = (isNumber(s) ? s : s[0]) || 1,
        sy = (isNumber(s) ? s : s[1]) || 1,
        tx = t && t[0] || 0,
        ty = t && t[1] || 0;
    paths.forEach(transform$2(grid, sx, sy, tx, ty));
  }

  function transform$2(grid, sx, sy, tx, ty) {
    var x1 = grid.x1 || 0,
        y1 = grid.y1 || 0,
        flip = sx * sy < 0;

    function transformPolygon(coordinates) {
      coordinates.forEach(transformRing);
    }

    function transformRing(coordinates) {
      if (flip) coordinates.reverse(); // maintain winding order

      coordinates.forEach(transformPoint);
    }

    function transformPoint(coordinates) {
      coordinates[0] = (coordinates[0] - x1) * sx + tx;
      coordinates[1] = (coordinates[1] - y1) * sy + ty;
    }

    return function (geometry) {
      geometry.coordinates.forEach(transformPolygon);
      return geometry;
    };
  }

  function radius(bw, data, f) {
    var v = bw >= 0 ? bw : bandwidthNRD(data, f);
    return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);
  }

  function number$4(_) {
    return isFunction(_) ? _ : constant(+_);
  } // Implementation adapted from d3/d3-contour. Thanks!


  function density2D () {
    var x = function x(d) {
      return d[0];
    },
        y = function y(d) {
      return d[1];
    },
        weight = one,
        bandwidth = [-1, -1],
        dx = 960,
        dy = 500,
        k = 2; // log2(cellSize)


    function density(data, counts) {
      var rx = radius(bandwidth[0], data, x) >> k,
          // blur x-radius
      ry = radius(bandwidth[1], data, y) >> k,
          // blur y-radius
      ox = rx ? rx + 2 : 0,
          // x-offset padding for blur
      oy = ry ? ry + 2 : 0,
          // y-offset padding for blur
      n = 2 * ox + (dx >> k),
          // grid width
      m = 2 * oy + (dy >> k),
          // grid height
      values0 = new Float32Array(n * m),
          values1 = new Float32Array(n * m);
      var values = values0;
      data.forEach(function (d) {
        var xi = ox + (+x(d) >> k),
            yi = oy + (+y(d) >> k);

        if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
          values0[xi + yi * n] += +weight(d);
        }
      });

      if (rx > 0 && ry > 0) {
        blurX(n, m, values0, values1, rx);
        blurY(n, m, values1, values0, ry);
        blurX(n, m, values0, values1, rx);
        blurY(n, m, values1, values0, ry);
        blurX(n, m, values0, values1, rx);
        blurY(n, m, values1, values0, ry);
      } else if (rx > 0) {
        blurX(n, m, values0, values1, rx);
        blurX(n, m, values1, values0, rx);
        blurX(n, m, values0, values1, rx);
        values = values1;
      } else if (ry > 0) {
        blurY(n, m, values0, values1, ry);
        blurY(n, m, values1, values0, ry);
        blurY(n, m, values0, values1, ry);
        values = values1;
      } // scale density estimates
      // density in points per square pixel or probability density


      var s = counts ? Math.pow(2, -2 * k) : 1 / sum(values);

      for (var i = 0, sz = n * m; i < sz; ++i) {
        values[i] *= s;
      }

      return {
        values: values,
        scale: 1 << k,
        width: n,
        height: m,
        x1: ox,
        y1: oy,
        x2: ox + (dx >> k),
        y2: oy + (dy >> k)
      };
    }

    density.x = function (_) {
      return arguments.length ? (x = number$4(_), density) : x;
    };

    density.y = function (_) {
      return arguments.length ? (y = number$4(_), density) : y;
    };

    density.weight = function (_) {
      return arguments.length ? (weight = number$4(_), density) : weight;
    };

    density.size = function (_) {
      if (!arguments.length) return [dx, dy];

      var _0 = Math.ceil(_[0]),
          _1 = Math.ceil(_[1]);

      if (!(_0 >= 0) && !(_0 >= 0)) error('invalid size');
      return dx = _0, dy = _1, density;
    };

    density.cellSize = function (_) {
      if (!arguments.length) return 1 << k;
      if (!((_ = +_) >= 1)) error('invalid cell size');
      k = Math.floor(Math.log(_) / Math.LN2);
      return density;
    };

    density.bandwidth = function (_) {
      if (!arguments.length) return bandwidth;
      _ = array(_);
      if (_.length === 1) _ = [+_[0], +_[0]];
      if (_.length !== 2) error('invalid bandwidth');
      return bandwidth = _, density;
    };

    return density;
  }

  function blurX(n, m, source, target, r) {
    var w = (r << 1) + 1;

    for (var j = 0; j < m; ++j) {
      for (var i = 0, sr = 0; i < n + r; ++i) {
        if (i < n) {
          sr += source[i + j * n];
        }

        if (i >= r) {
          if (i >= w) {
            sr -= source[i - w + j * n];
          }

          target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
        }
      }
    }
  }

  function blurY(n, m, source, target, r) {
    var w = (r << 1) + 1;

    for (var i = 0; i < n; ++i) {
      for (var j = 0, sr = 0; j < m + r; ++j) {
        if (j < m) {
          sr += source[i + j * n];
        }

        if (j >= r) {
          if (j >= w) {
            sr -= source[i + (j - w) * n];
          }

          target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
        }
      }
    }
  }

  /**
   * Perform 2D kernel-density estimation of point data.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<number>} params.size - The [width, height] extent (in
   *   units of input pixels) over which to perform density estimation.
   * @param {function(object): number} params.x - The x-coordinate accessor.
   * @param {function(object): number} params.y - The y-coordinate accessor.
   * @param {function(object): number} [params.weight] - The weight accessor.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors
   *   to groupby.
   * @param {number} [params.cellSize] - Contour density calculation cell size.
   *   This parameter determines the level of spatial approximation. For example,
   *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.
   *   A value of 1 will result in an output raster grid whose dimensions exactly
   *   matches the size parameter.
   * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,
   *   in pixels. The input can be a two-element array specifying separate
   *   x and y bandwidths, or a single-element array specifying both. If the
   *   bandwidth is unspecified or less than zero, the bandwidth will be
   *   automatically determined.
   * @param {boolean} [params.counts=false] - A boolean flag indicating if the
   *   output values should be probability estimates (false, default) or
   *   smoothed counts (true).
   * @param {string} [params.as='grid'] - The output field in which to store
   *   the generated raster grid (default 'grid').
   */

  function KDE2D(params) {
    Transform$1.call(this, null, params);
  }
  KDE2D.Definition = {
    "type": "KDE2D",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2,
      "required": true
    }, {
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "weight",
      "type": "field"
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "cellSize",
      "type": "number"
    }, {
      "name": "bandwidth",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "counts",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "default": "grid"
    }]
  };
  var prototype$14 = inherits(KDE2D, Transform$1);
  var PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];
  function params(obj, _) {
    PARAMS.forEach(function (param) {
      return _[param] != null ? obj[param](_[param]) : 0;
    });
    return obj;
  }

  prototype$14.transform = function (_, pulse) {
    if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        source = pulse.materialize(pulse.SOURCE).source,
        groups = partition$3(source, _.groupby),
        names = (_.groupby || []).map(accessorName),
        kde = params(density2D(), _),
        as = _.as || 'grid',
        values = [];

    function set(t, vals) {
      for (var i = 0; i < names.length; ++i) {
        t[names[i]] = vals[i];
      }

      return t;
    } // generate density raster grids


    values = groups.map(function (g) {
      return ingest(set(_defineProperty({}, as, kde(g, _.counts)), g.dims));
    });
    if (this.value) out.rem = this.value;
    this.value = out.source = out.add = values;
    return out;
  };

  function partition$3(data, groupby) {
    var groups = [],
        get = function get(f) {
      return f(t);
    },
        map,
        i,
        n,
        t,
        k,
        g; // partition data points into groups


    if (groupby == null) {
      groups.push(data);
    } else {
      for (map = {}, i = 0, n = data.length; i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];

        if (!g) {
          map[k] = g = [];
          g.dims = k;
          groups.push(g);
        }

        g.push(t);
      }
    }

    return groups;
  }

  /**
   * Generate contours based on kernel-density estimation of point data.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
   *  If the values parameter is provided, this must be the dimensions of the input data.
   *  If density estimation is performed, this is the output view dimensions in pixels.
   * @param {Array<number>} [params.values] - An array of numeric values representing an
   *  width x height grid of values over which to compute contours. If unspecified, this
   *  transform will instead attempt to compute contours for the kernel density estimate
   *  using values drawn from data tuples in the input pulse.
   * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
   * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
   * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.
   * @param {number} [params.cellSize] - Contour density calculation cell size.
   * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
   * @param {Array<number>} [params.thresholds] - Contour threshold array. If
   *   this parameter is set, the count and nice parameters will be ignored.
   * @param {number} [params.count] - The desired number of contours.
   * @param {boolean} [params.nice] - Boolean flag indicating if the contour
   *   threshold values should be automatically aligned to "nice"
   *   human-friendly values. Setting this flag may cause the number of
   *   thresholds to deviate from the specified count.
   * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
   *   polygons should be smoothed using linear interpolation. The default is
   *   true. The parameter is ignored when using density estimation.
   */

  function Contour(params) {
    Transform$1.call(this, null, params);
  }
  Contour.Definition = {
    "type": "Contour",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2,
      "required": true
    }, {
      "name": "values",
      "type": "number",
      "array": true
    }, {
      "name": "x",
      "type": "field"
    }, {
      "name": "y",
      "type": "field"
    }, {
      "name": "weight",
      "type": "field"
    }, {
      "name": "cellSize",
      "type": "number"
    }, {
      "name": "bandwidth",
      "type": "number"
    }, {
      "name": "count",
      "type": "number"
    }, {
      "name": "nice",
      "type": "boolean",
      "default": false
    }, {
      "name": "thresholds",
      "type": "number",
      "array": true
    }, {
      "name": "smooth",
      "type": "boolean",
      "default": true
    }]
  };
  var prototype$15 = inherits(Contour, Transform$1);

  prototype$15.transform = function (_, pulse) {
    if (this.value && !pulse.changed() && !_.modified()) {
      return pulse.StopPropagation;
    }

    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
        contour = contours().smooth(_.smooth !== false),
        values = _.values,
        thresh = _.thresholds || quantize$2(_.count || 10, _.nice, !!values),
        size = _.size,
        grid,
        post;

    if (!values) {
      values = pulse.materialize(pulse.SOURCE).source;
      grid = params(density2D(), _)(values, true);
      post = transform$2(grid, grid.scale || 1, grid.scale || 1, 0, 0);
      size = [grid.width, grid.height];
      values = grid.values;
    }

    thresh = isArray(thresh) ? thresh : thresh(values);
    values = contour.size(size)(values, thresh);
    if (post) values.forEach(post);
    if (this.value) out.rem = this.value;
    this.value = out.source = out.add = (values || []).map(ingest);
    return out;
  };

  var Feature = 'Feature';
  var FeatureCollection = 'FeatureCollection';
  var MultiPoint = 'MultiPoint';

  /**
   * Consolidate an array of [longitude, latitude] points or GeoJSON features
   * into a combined GeoJSON object. This transform is particularly useful for
   * combining geo data for a Projection's fit argument. The resulting GeoJSON
   * data is available as this transform's value. Input pulses are unchanged.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<function(object): *>} [params.fields] - A two-element array
   *   of field accessors for the longitude and latitude values.
   * @param {function(object): *} params.geojson - A field accessor for
   *   retrieving GeoJSON feature data.
   */

  function GeoJSON(params) {
    Transform$1.call(this, null, params);
  }
  GeoJSON.Definition = {
    "type": "GeoJSON",
    "metadata": {},
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "length": 2
    }, {
      "name": "geojson",
      "type": "field"
    }]
  };
  var prototype$16 = inherits(GeoJSON, Transform$1);

  prototype$16.transform = function (_, pulse) {
    var features = this._features,
        points = this._points,
        fields = _.fields,
        lon = fields && fields[0],
        lat = fields && fields[1],
        geojson = _.geojson || !fields && identity,
        flag = pulse.ADD,
        mod;
    mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified(accessorFields(geojson)) || lon && pulse.modified(accessorFields(lon)) || lat && pulse.modified(accessorFields(lat));

    if (!this.value || mod) {
      flag = pulse.SOURCE;
      this._features = features = [];
      this._points = points = [];
    }

    if (geojson) {
      pulse.visit(flag, function (t) {
        features.push(geojson(t));
      });
    }

    if (lon && lat) {
      pulse.visit(flag, function (t) {
        var x = lon(t),
            y = lat(t);

        if (x != null && y != null && (x = +x) === x && (y = +y) === y) {
          points.push([x, y]);
        }
      });
      features = features.concat({
        type: Feature,
        geometry: {
          type: MultiPoint,
          coordinates: points
        }
      });
    }

    this.value = {
      type: FeatureCollection,
      features: features
    };
  };

  // Adds floating point numbers with twice the normal precision.
  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
  // 305–363 (1997).
  // Code adapted from GeographicLib by Charles F. F. Karney,
  // http://geographiclib.sourceforge.net/
  function adder () {
    return new Adder();
  }

  function Adder() {
    this.reset();
  }

  Adder.prototype = {
    constructor: Adder,
    reset: function reset() {
      this.s = // rounded value
      this.t = 0; // exact error
    },
    add: function add(y) {
      _add(temp$1, y, this.t);

      _add(this, temp$1.s, this.s);

      if (this.s) this.t += temp$1.t;else this.s = temp$1.t;
    },
    valueOf: function valueOf() {
      return this.s;
    }
  };
  var temp$1 = new Adder();

  function _add(adder, a, b) {
    var x = adder.s = a + b,
        bv = x - a,
        av = x - bv;
    adder.t = a - av + (b - bv);
  }

  var epsilon$3 = 1e-6;
  var epsilon2$1 = 1e-12;
  var pi$2 = Math.PI;
  var halfPi$1 = pi$2 / 2;
  var quarterPi = pi$2 / 4;
  var tau$2 = pi$2 * 2;
  var degrees$1 = 180 / pi$2;
  var radians = pi$2 / 180;
  var abs$1 = Math.abs;
  var atan = Math.atan;
  var atan2$1 = Math.atan2;
  var cos$1 = Math.cos;
  var ceil = Math.ceil;
  var exp$1 = Math.exp;
  var log$3 = Math.log;
  var pow$2 = Math.pow;
  var sin$1 = Math.sin;
  var sign$1 = Math.sign || function (x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  };
  var sqrt$2 = Math.sqrt;
  var tan = Math.tan;
  function acos$1(x) {
    return x > 1 ? 0 : x < -1 ? pi$2 : Math.acos(x);
  }
  function asin$1(x) {
    return x > 1 ? halfPi$1 : x < -1 ? -halfPi$1 : Math.asin(x);
  }

  function noop$3() {}

  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }

  var streamObjectType = {
    Feature: function Feature(object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function FeatureCollection(object, stream) {
      var features = object.features,
          i = -1,
          n = features.length;

      while (++i < n) {
        streamGeometry(features[i].geometry, stream);
      }
    }
  };
  var streamGeometryType = {
    Sphere: function Sphere(object, stream) {
      stream.sphere();
    },
    Point: function Point(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function MultiPoint(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        object = coordinates[i], stream.point(object[0], object[1], object[2]);
      }
    },
    LineString: function LineString(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function MultiLineString(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        streamLine(coordinates[i], stream, 0);
      }
    },
    Polygon: function Polygon(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function MultiPolygon(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        streamPolygon(coordinates[i], stream);
      }
    },
    GeometryCollection: function GeometryCollection(object, stream) {
      var geometries = object.geometries,
          i = -1,
          n = geometries.length;

      while (++i < n) {
        streamGeometry(geometries[i], stream);
      }
    }
  };

  function streamLine(coordinates, stream, closed) {
    var i = -1,
        n = coordinates.length - closed,
        coordinate;
    stream.lineStart();

    while (++i < n) {
      coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    }

    stream.lineEnd();
  }

  function streamPolygon(coordinates, stream) {
    var i = -1,
        n = coordinates.length;
    stream.polygonStart();

    while (++i < n) {
      streamLine(coordinates[i], stream, 1);
    }

    stream.polygonEnd();
  }

  function geoStream (object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  var areaRingSum = adder();
  var areaSum = adder(),
      lambda00,
      phi00,
      lambda0,
      cosPhi0,
      sinPhi0;
  var areaStream = {
    point: noop$3,
    lineStart: noop$3,
    lineEnd: noop$3,
    polygonStart: function polygonStart() {
      areaRingSum.reset();
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function polygonEnd() {
      var areaRing = +areaRingSum;
      areaSum.add(areaRing < 0 ? tau$2 + areaRing : areaRing);
      this.lineStart = this.lineEnd = this.point = noop$3;
    },
    sphere: function sphere() {
      areaSum.add(tau$2);
    }
  };

  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }

  function areaRingEnd() {
    areaPoint(lambda00, phi00);
  }

  function areaPointFirst(lambda, phi) {
    areaStream.point = areaPoint;
    lambda00 = lambda, phi00 = phi;
    lambda *= radians, phi *= radians;
    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
  }

  function areaPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    phi = phi / 2 + quarterPi; // half the angular distance from south pole
    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

    var dLambda = lambda - lambda0,
        sdLambda = dLambda >= 0 ? 1 : -1,
        adLambda = sdLambda * dLambda,
        cosPhi = cos$1(phi),
        sinPhi = sin$1(phi),
        k = sinPhi0 * sinPhi,
        u = cosPhi0 * cosPhi + k * cos$1(adLambda),
        v = k * sdLambda * sin$1(adLambda);
    areaRingSum.add(atan2$1(v, u)); // Advance the previous points.

    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
  }

  function area$3 (object) {
    areaSum.reset();
    geoStream(object, areaStream);
    return areaSum * 2;
  }

  function spherical(cartesian) {
    return [atan2$1(cartesian[1], cartesian[0]), asin$1(cartesian[2])];
  }
  function cartesian(spherical) {
    var lambda = spherical[0],
        phi = spherical[1],
        cosPhi = cos$1(phi);
    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
  }
  function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function cartesianCross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  } // TODO return a

  function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
  }
  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  } // TODO return d

  function cartesianNormalizeInPlace(d) {
    var l = sqrt$2(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
  }

  var lambda0$1,
      phi0,
      lambda1,
      phi1,
      // bounds
  lambda2,
      // previous lambda-coordinate
  lambda00$1,
      phi00$1,
      // first point
  p0,
      // previous 3D point
  deltaSum = adder(),
      ranges,
      range$1;
  var boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function polygonStart() {
      boundsStream.point = boundsRingPoint;
      boundsStream.lineStart = boundsRingStart;
      boundsStream.lineEnd = boundsRingEnd;
      deltaSum.reset();
      areaStream.polygonStart();
    },
    polygonEnd: function polygonEnd() {
      areaStream.polygonEnd();
      boundsStream.point = boundsPoint;
      boundsStream.lineStart = boundsLineStart;
      boundsStream.lineEnd = boundsLineEnd;
      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > epsilon$3) phi1 = 90;else if (deltaSum < -epsilon$3) phi0 = -90;
      range$1[0] = lambda0$1, range$1[1] = lambda1;
    },
    sphere: function sphere() {
      lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    }
  };

  function boundsPoint(lambda, phi) {
    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
  }

  function linePoint(lambda, phi) {
    var p = cartesian([lambda * radians, phi * radians]);

    if (p0) {
      var normal = cartesianCross(p0, p),
          equatorial = [normal[1], -normal[0], 0],
          inflection = cartesianCross(equatorial, normal);
      cartesianNormalizeInPlace(inflection);
      inflection = spherical(inflection);
      var delta = lambda - lambda2,
          sign = delta > 0 ? 1 : -1,
          lambdai = inflection[0] * degrees$1 * sign,
          phii,
          antimeridian = abs$1(delta) > 180;

      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = inflection[1] * degrees$1;
        if (phii > phi1) phi1 = phii;
      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = -inflection[1] * degrees$1;
        if (phii < phi0) phi0 = phii;
      } else {
        if (phi < phi0) phi0 = phi;
        if (phi > phi1) phi1 = phi;
      }

      if (antimeridian) {
        if (lambda < lambda2) {
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
        }
      } else {
        if (lambda1 >= lambda0$1) {
          if (lambda < lambda0$1) lambda0$1 = lambda;
          if (lambda > lambda1) lambda1 = lambda;
        } else {
          if (lambda > lambda2) {
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
          }
        }
      }
    } else {
      ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
    }

    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
    p0 = p, lambda2 = lambda;
  }

  function boundsLineStart() {
    boundsStream.point = linePoint;
  }

  function boundsLineEnd() {
    range$1[0] = lambda0$1, range$1[1] = lambda1;
    boundsStream.point = boundsPoint;
    p0 = null;
  }

  function boundsRingPoint(lambda, phi) {
    if (p0) {
      var delta = lambda - lambda2;
      deltaSum.add(abs$1(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else {
      lambda00$1 = lambda, phi00$1 = phi;
    }

    areaStream.point(lambda, phi);
    linePoint(lambda, phi);
  }

  function boundsRingStart() {
    areaStream.lineStart();
  }

  function boundsRingEnd() {
    boundsRingPoint(lambda00$1, phi00$1);
    areaStream.lineEnd();
    if (abs$1(deltaSum) > epsilon$3) lambda0$1 = -(lambda1 = 180);
    range$1[0] = lambda0$1, range$1[1] = lambda1;
    p0 = null;
  } // Finds the left-right distance between two longitudes.
  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
  // the distance between ±180° to be 360°.


  function angle(lambda0, lambda1) {
    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
  }

  function rangeCompare(a, b) {
    return a[0] - b[0];
  }

  function rangeContains(range, x) {
    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
  }

  function bounds$1 (feature) {
    var i, n, a, b, merged, deltaMax, delta;
    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
    ranges = [];
    geoStream(feature, boundsStream); // First, sort ranges by their minimum longitudes.

    if (n = ranges.length) {
      ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
        b = ranges[i];

        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
        } else {
          merged.push(a = b);
        }
      } // Finally, find the largest gap between the merged ranges.
      // The final bounding box will be the inverse of this gap.


      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
        b = merged[i];
        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
      }
    }

    ranges = range$1 = null;
    return lambda0$1 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0$1, phi0], [lambda1, phi1]];
  }

  var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00$2, phi00$2, // first point
  x0, y0, z0; // previous point

  var centroidStream = {
    sphere: noop$3,
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function polygonStart() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function polygonEnd() {
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    }
  }; // Arithmetic mean of Cartesian vectors.

  function centroidPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi);
    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
  }

  function centroidPointCartesian(x, y, z) {
    ++W0;
    X0 += (x - X0) / W0;
    Y0 += (y - Y0) / W0;
    Z0 += (z - Z0) / W0;
  }

  function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst;
  }

  function centroidLinePointFirst(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi);
    x0 = cosPhi * cos$1(lambda);
    y0 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi);
    centroidStream.point = centroidLinePoint;
    centroidPointCartesian(x0, y0, z0);
  }

  function centroidLinePoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi),
        x = cosPhi * cos$1(lambda),
        y = cosPhi * sin$1(lambda),
        z = sin$1(phi),
        w = atan2$1(sqrt$2((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
  }

  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  } // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
  // J. Applied Mechanics 42, 239 (1975).


  function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst;
  }

  function centroidRingEnd() {
    centroidRingPoint(lambda00$2, phi00$2);
    centroidStream.point = centroidPoint;
  }

  function centroidRingPointFirst(lambda, phi) {
    lambda00$2 = lambda, phi00$2 = phi;
    lambda *= radians, phi *= radians;
    centroidStream.point = centroidRingPoint;
    var cosPhi = cos$1(phi);
    x0 = cosPhi * cos$1(lambda);
    y0 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi);
    centroidPointCartesian(x0, y0, z0);
  }

  function centroidRingPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi),
        x = cosPhi * cos$1(lambda),
        y = cosPhi * sin$1(lambda),
        z = sin$1(phi),
        cx = y0 * z - z0 * y,
        cy = z0 * x - x0 * z,
        cz = x0 * y - y0 * x,
        m = sqrt$2(cx * cx + cy * cy + cz * cz),
        w = asin$1(m),
        // line weight = angle
    v = m && -w / m; // area weight multiplier

    X2 += v * cx;
    Y2 += v * cy;
    Z2 += v * cz;
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
  }

  function centroid (object) {
    W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    geoStream(object, centroidStream);
    var x = X2,
        y = Y2,
        z = Z2,
        m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

    if (m < epsilon2$1) {
      x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

      if (W1 < epsilon$3) x = X0, y = Y0, z = Z0;
      m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.

      if (m < epsilon2$1) return [NaN, NaN];
    }

    return [atan2$1(y, x) * degrees$1, asin$1(z / sqrt$2(m)) * degrees$1];
  }

  function compose (a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }

    if (a.invert && b.invert) compose.invert = function (x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }

  function rotationIdentity(lambda, phi) {
    return [abs$1(lambda) > pi$2 ? lambda + Math.round(-lambda / tau$2) * tau$2 : lambda, phi];
  }

  rotationIdentity.invert = rotationIdentity;
  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau$2) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
  }

  function forwardRotationLambda(deltaLambda) {
    return function (lambda, phi) {
      return lambda += deltaLambda, [lambda > pi$2 ? lambda - tau$2 : lambda < -pi$2 ? lambda + tau$2 : lambda, phi];
    };
  }

  function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
  }

  function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos$1(deltaPhi),
        sinDeltaPhi = sin$1(deltaPhi),
        cosDeltaGamma = cos$1(deltaGamma),
        sinDeltaGamma = sin$1(deltaGamma);

    function rotation(lambda, phi) {
      var cosPhi = cos$1(phi),
          x = cos$1(lambda) * cosPhi,
          y = sin$1(lambda) * cosPhi,
          z = sin$1(phi),
          k = z * cosDeltaPhi + x * sinDeltaPhi;
      return [atan2$1(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin$1(k * cosDeltaGamma + y * sinDeltaGamma)];
    }

    rotation.invert = function (lambda, phi) {
      var cosPhi = cos$1(phi),
          x = cos$1(lambda) * cosPhi,
          y = sin$1(lambda) * cosPhi,
          z = sin$1(phi),
          k = z * cosDeltaGamma - y * sinDeltaGamma;
      return [atan2$1(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin$1(k * cosDeltaPhi - x * sinDeltaPhi)];
    };

    return rotation;
  }

  function rotation (rotate) {
    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
    }

    forward.invert = function (coordinates) {
      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
    };

    return forward;
  }

  function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = cos$1(radius),
        sinRadius = sin$1(radius),
        step = direction * delta;

    if (t0 == null) {
      t0 = radius + direction * tau$2;
      t1 = radius - step / 2;
    } else {
      t0 = circleRadius(cosRadius, t0);
      t1 = circleRadius(cosRadius, t1);
      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$2;
    }

    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
      stream.point(point[0], point[1]);
    }
  } // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].

  function circleRadius(cosRadius, point) {
    point = cartesian(point), point[0] -= cosRadius;
    cartesianNormalizeInPlace(point);
    var radius = acos$1(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + tau$2 - epsilon$3) % tau$2;
  }

  function clipBuffer () {
    var lines = [],
        line;
    return {
      point: function point(x, y) {
        line.push([x, y]);
      },
      lineStart: function lineStart() {
        lines.push(line = []);
      },
      lineEnd: noop$3,
      rejoin: function rejoin() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      },
      result: function result() {
        var result = lines;
        lines = [];
        line = null;
        return result;
      }
    };
  }

  function pointEqual (a, b) {
    return abs$1(a[0] - b[0]) < epsilon$3 && abs$1(a[1] - b[1]) < epsilon$3;
  }

  function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection

    this.e = entry; // is an entry?

    this.v = false; // visited

    this.n = this.p = null; // next & previous
  } // A generalized polygon clipping algorithm: given a polygon that has been cut
  // into its visible line segments, and rejoins the segments by interpolating
  // along the clip edge.


  function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [],
        clip = [],
        i,
        n;
    segments.forEach(function (segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n,
          p0 = segment[0],
          p1 = segment[n],
          x; // If the first and last points of a segment are coincident, then treat as a
      // closed ring. TODO if all rings are closed, then the winding order of the
      // exterior ring should be checked.

      if (pointEqual(p0, p1)) {
        stream.lineStart();

        for (i = 0; i < n; ++i) {
          stream.point((p0 = segment[i])[0], p0[1]);
        }

        stream.lineEnd();
        return;
      }

      subject.push(x = new Intersection(p0, segment, null, true));
      clip.push(x.o = new Intersection(p0, null, x, false));
      subject.push(x = new Intersection(p1, segment, null, false));
      clip.push(x.o = new Intersection(p1, null, x, true));
    });
    if (!subject.length) return;
    clip.sort(compareIntersection);
    link(subject);
    link(clip);

    for (i = 0, n = clip.length; i < n; ++i) {
      clip[i].e = startInside = !startInside;
    }

    var start = subject[0],
        points,
        point;

    while (1) {
      // Find first unvisited intersection.
      var current = start,
          isSubject = true;

      while (current.v) {
        if ((current = current.n) === start) return;
      }

      points = current.z;
      stream.lineStart();

      do {
        current.v = current.o.v = true;

        if (current.e) {
          if (isSubject) {
            for (i = 0, n = points.length; i < n; ++i) {
              stream.point((point = points[i])[0], point[1]);
            }
          } else {
            interpolate(current.x, current.n.x, 1, stream);
          }

          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;

            for (i = points.length - 1; i >= 0; --i) {
              stream.point((point = points[i])[0], point[1]);
            }
          } else {
            interpolate(current.x, current.p.x, -1, stream);
          }

          current = current.p;
        }

        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);

      stream.lineEnd();
    }
  }

  function link(array) {
    if (!(n = array.length)) return;
    var n,
        i = 0,
        a = array[0],
        b;

    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }

    a.n = b = array[0];
    b.p = a;
  }

  var sum$1 = adder();

  function longitude(point) {
    if (abs$1(point[0]) <= pi$2) return point[0];else return sign$1(point[0]) * ((abs$1(point[0]) + pi$2) % tau$2 - pi$2);
  }

  function polygonContains (polygon, point) {
    var lambda = longitude(point),
        phi = point[1],
        sinPhi = sin$1(phi),
        normal = [sin$1(lambda), -cos$1(lambda), 0],
        angle = 0,
        winding = 0;
    sum$1.reset();
    if (sinPhi === 1) phi = halfPi$1 + epsilon$3;else if (sinPhi === -1) phi = -halfPi$1 - epsilon$3;

    for (var i = 0, n = polygon.length; i < n; ++i) {
      if (!(m = (ring = polygon[i]).length)) continue;
      var ring,
          m,
          point0 = ring[m - 1],
          lambda0 = longitude(point0),
          phi0 = point0[1] / 2 + quarterPi,
          sinPhi0 = sin$1(phi0),
          cosPhi0 = cos$1(phi0);

      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
        var point1 = ring[j],
            lambda1 = longitude(point1),
            phi1 = point1[1] / 2 + quarterPi,
            sinPhi1 = sin$1(phi1),
            cosPhi1 = cos$1(phi1),
            delta = lambda1 - lambda0,
            sign = delta >= 0 ? 1 : -1,
            absDelta = sign * delta,
            antimeridian = absDelta > pi$2,
            k = sinPhi0 * sinPhi1;
        sum$1.add(atan2$1(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
        angle += antimeridian ? delta + sign * tau$2 : delta; // Are the longitudes either side of the point’s meridian (lambda),
        // and are the latitudes smaller than the parallel (phi)?

        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
          var arc = cartesianCross(cartesian(point0), cartesian(point1));
          cartesianNormalizeInPlace(arc);
          var intersection = cartesianCross(normal, arc);
          cartesianNormalizeInPlace(intersection);
          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);

          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
            winding += antimeridian ^ delta >= 0 ? 1 : -1;
          }
        }
      }
    } // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.


    return (angle < -epsilon$3 || angle < epsilon$3 && sum$1 < -epsilon$3) ^ winding & 1;
  }

  function ascending$1 (a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function bisector$1 (compare) {
    if (compare.length === 1) compare = ascendingComparator$1(compare);
    return {
      left: function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;

        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
        }

        return lo;
      },
      right: function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;

        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
        }

        return lo;
      }
    };
  }

  function ascendingComparator$1(f) {
    return function (d, x) {
      return ascending$1(f(d), x);
    };
  }

  var ascendingBisect$1 = bisector$1(ascending$1);

  function range$2 (start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1,
        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
        range = new Array(n);

    while (++i < n) {
      range[i] = start + i * step;
    }

    return range;
  }

  function merge$1 (arrays) {
    var n = arrays.length,
        m,
        i = -1,
        j = 0,
        merged,
        array;

    while (++i < n) {
      j += arrays[i].length;
    }

    merged = new Array(j);

    while (--n >= 0) {
      array = arrays[n];
      m = array.length;

      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }

    return merged;
  }

  function clip$2 (pointVisible, clipLine, interpolate, start) {
    return function (sink) {
      var line = clipLine(sink),
          ringBuffer = clipBuffer(),
          ringSink = clipLine(ringBuffer),
          polygonStarted = false,
          polygon,
          segments,
          ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function polygonStart() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function polygonEnd() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = merge$1(segments);
          var startInside = polygonContains(polygon, start);

          if (segments.length) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
          } else if (startInside) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
          }

          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function sphere() {
          sink.polygonStart();
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
          sink.polygonEnd();
        }
      };

      function point(lambda, phi) {
        if (pointVisible(lambda, phi)) sink.point(lambda, phi);
      }

      function pointLine(lambda, phi) {
        line.point(lambda, phi);
      }

      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }

      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }

      function pointRing(lambda, phi) {
        ring.push([lambda, phi]);
        ringSink.point(lambda, phi);
      }

      function ringStart() {
        ringSink.lineStart();
        ring = [];
      }

      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();
        var clean = ringSink.clean(),
            ringSegments = ringBuffer.result(),
            i,
            n = ringSegments.length,
            m,
            segment,
            point;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return; // No intersections.

        if (clean & 1) {
          segment = ringSegments[0];

          if ((m = segment.length - 1) > 0) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();

            for (i = 0; i < m; ++i) {
              sink.point((point = segment[i])[0], point[1]);
            }

            sink.lineEnd();
          }

          return;
        } // Rejoin connected segments.
        // TODO reuse ringBuffer.rejoin()?


        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(validSegment));
      }

      return clip;
    };
  }

  function validSegment(segment) {
    return segment.length > 1;
  } // Intersections are sorted along the clip edge. For both antimeridian cutting
  // and circle clipping, the same comparison is used.


  function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfPi$1 - epsilon$3 : halfPi$1 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$1 - epsilon$3 : halfPi$1 - b[1]);
  }

  var clipAntimeridian = clip$2(function () {
    return true;
  }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi$2, -halfPi$1]); // Takes a line and cuts into visible segments. Return values: 0 - there were
  // intersections or the line was empty; 1 - no intersections; 2 - there were
  // intersections, and the first and last segments should be rejoined.

  function clipAntimeridianLine(stream) {
    var lambda0 = NaN,
        phi0 = NaN,
        sign0 = NaN,
        _clean; // no intersections


    return {
      lineStart: function lineStart() {
        stream.lineStart();
        _clean = 1;
      },
      point: function point(lambda1, phi1) {
        var sign1 = lambda1 > 0 ? pi$2 : -pi$2,
            delta = abs$1(lambda1 - lambda0);

        if (abs$1(delta - pi$2) < epsilon$3) {
          // line crosses a pole
          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$1 : -halfPi$1);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          stream.point(lambda1, phi0);
          _clean = 0;
        } else if (sign0 !== sign1 && delta >= pi$2) {
          // line crosses antimeridian
          if (abs$1(lambda0 - sign0) < epsilon$3) lambda0 -= sign0 * epsilon$3; // handle degeneracies

          if (abs$1(lambda1 - sign1) < epsilon$3) lambda1 -= sign1 * epsilon$3;
          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          _clean = 0;
        }

        stream.point(lambda0 = lambda1, phi0 = phi1);
        sign0 = sign1;
      },
      lineEnd: function lineEnd() {
        stream.lineEnd();
        lambda0 = phi0 = NaN;
      },
      clean: function clean() {
        return 2 - _clean; // if intersections, rejoin first and last segments
      }
    };
  }

  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0,
        cosPhi1,
        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
    return abs$1(sinLambda0Lambda1) > epsilon$3 ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
  }

  function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;

    if (from == null) {
      phi = direction * halfPi$1;
      stream.point(-pi$2, phi);
      stream.point(0, phi);
      stream.point(pi$2, phi);
      stream.point(pi$2, 0);
      stream.point(pi$2, -phi);
      stream.point(0, -phi);
      stream.point(-pi$2, -phi);
      stream.point(-pi$2, 0);
      stream.point(-pi$2, phi);
    } else if (abs$1(from[0] - to[0]) > epsilon$3) {
      var lambda = from[0] < to[0] ? pi$2 : -pi$2;
      phi = direction * lambda / 2;
      stream.point(-lambda, phi);
      stream.point(0, phi);
      stream.point(lambda, phi);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function clipCircle (radius) {
    var cr = cos$1(radius),
        delta = 6 * radians,
        smallRadius = cr > 0,
        notHemisphere = abs$1(cr) > epsilon$3; // TODO optimise for this common case

    function interpolate(from, to, direction, stream) {
      circleStream(stream, radius, delta, direction, from, to);
    }

    function visible(lambda, phi) {
      return cos$1(lambda) * cos$1(phi) > cr;
    } // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.


    function clipLine(stream) {
      var point0, // previous point
      c0, // code for previous point
      v0, // visibility of previous point
      v00, // visibility of first point
      _clean; // no intersections


      return {
        lineStart: function lineStart() {
          v00 = v0 = false;
          _clean = 1;
        },
        point: function point(lambda, phi) {
          var point1 = [lambda, phi],
              point2,
              v = visible(lambda, phi),
              c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$2 : -pi$2), phi) : 0;
          if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
          // TODO ignore if not clipping polygons.

          if (v !== v0) {
            point2 = intersect(point0, point1);

            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
              point1[0] += epsilon$3;
              point1[1] += epsilon$3;
              v = visible(point1[0], point1[1]);
            }
          }

          if (v !== v0) {
            _clean = 0;

            if (v) {
              // outside going in
              stream.lineStart();
              point2 = intersect(point1, point0);
              stream.point(point2[0], point2[1]);
            } else {
              // inside going out
              point2 = intersect(point0, point1);
              stream.point(point2[0], point2[1]);
              stream.lineEnd();
            }

            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t; // If the codes for two points are different, or are both zero,
            // and there this segment intersects with the small circle.

            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              _clean = 0;

              if (smallRadius) {
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
              } else {
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
              }
            }
          }

          if (v && (!point0 || !pointEqual(point0, point1))) {
            stream.point(point1[0], point1[1]);
          }

          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function lineEnd() {
          if (v0) stream.lineEnd();
          point0 = null;
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function clean() {
          return _clean | (v00 && v0) << 1;
        }
      };
    } // Intersects the great circle between a and b with the clip circle.


    function intersect(a, b, two) {
      var pa = cartesian(a),
          pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.
      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

      var n1 = [1, 0, 0],
          // normal
      n2 = cartesianCross(pa, pb),
          n2n2 = cartesianDot(n2, n2),
          n1n2 = n2[0],
          // cartesianDot(n1, n2),
      determinant = n2n2 - n1n2 * n1n2; // Two polar points.

      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant,
          c2 = -cr * n1n2 / determinant,
          n1xn2 = cartesianCross(n1, n2),
          A = cartesianScale(n1, c1),
          B = cartesianScale(n2, c2);
      cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.

      var u = n1xn2,
          w = cartesianDot(A, u),
          uu = cartesianDot(u, u),
          t2 = w * w - uu * (cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = sqrt$2(t2),
          q = cartesianScale(u, (-w - t) / uu);
      cartesianAddInPlace(q, A);
      q = spherical(q);
      if (!two) return q; // Two intersection points.

      var lambda0 = a[0],
          lambda1 = b[0],
          phi0 = a[1],
          phi1 = b[1],
          z;
      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
      var delta = lambda1 - lambda0,
          polar = abs$1(delta - pi$2) < epsilon$3,
          meridian = polar || delta < epsilon$3;
      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

      if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs$1(q[0] - lambda0) < epsilon$3 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$2 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
        var q1 = cartesianScale(u, (-w + t) / uu);
        cartesianAddInPlace(q1, A);
        return [q, spherical(q1)];
      }
    } // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.


    function code(lambda, phi) {
      var r = smallRadius ? radius : pi$2 - radius,
          code = 0;
      if (lambda < -r) code |= 1; // left
      else if (lambda > r) code |= 2; // right

      if (phi < -r) code |= 4; // below
      else if (phi > r) code |= 8; // above

      return code;
    }

    return clip$2(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$2, radius - pi$2]);
  }

  function clipLine (a, b, x0, y0, x1, y1) {
    var ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1],
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;

    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;

    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;

    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;

    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
  }

  var clipMax = 1e9,
      clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

  function clipRectangle(x0, y0, x1, y1) {
    function visible(x, y) {
      return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }

    function interpolate(from, to, direction, stream) {
      var a = 0,
          a1 = 0;

      if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
        do {
          stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        } while ((a = (a + direction + 4) % 4) !== a1);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function corner(p, direction) {
      return abs$1(p[0] - x0) < epsilon$3 ? direction > 0 ? 0 : 3 : abs$1(p[0] - x1) < epsilon$3 ? direction > 0 ? 2 : 1 : abs$1(p[1] - y0) < epsilon$3 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }

    function compareIntersection(a, b) {
      return comparePoint(a.x, b.x);
    }

    function comparePoint(a, b) {
      var ca = corner(a, 1),
          cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }

    return function (stream) {
      var activeStream = stream,
          bufferStream = clipBuffer(),
          segments,
          polygon,
          ring,
          x__,
          y__,
          v__,
          // first point
      x_,
          y_,
          v_,
          // previous point
      first,
          clean;
      var clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd
      };

      function point(x, y) {
        if (visible(x, y)) activeStream.point(x, y);
      }

      function polygonInside() {
        var winding = 0;

        for (var i = 0, n = polygon.length; i < n; ++i) {
          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

            if (a1 <= y1) {
              if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
            } else {
              if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
          }
        }

        return winding;
      } // Buffer geometry within a polygon and then clip it en masse.


      function polygonStart() {
        activeStream = bufferStream, segments = [], polygon = [], clean = true;
      }

      function polygonEnd() {
        var startInside = polygonInside(),
            cleanInside = clean && startInside,
            visible = (segments = merge$1(segments)).length;

        if (cleanInside || visible) {
          stream.polygonStart();

          if (cleanInside) {
            stream.lineStart();
            interpolate(null, null, 1, stream);
            stream.lineEnd();
          }

          if (visible) {
            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
          }

          stream.polygonEnd();
        }

        activeStream = stream, segments = polygon = ring = null;
      }

      function lineStart() {
        clipStream.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      } // TODO rather than special-case polygons, simply handle them separately.
      // Ideally, coincident intersection points should be jittered to avoid
      // clipping issues.


      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferStream.rejoin();
          segments.push(bufferStream.result());
        }

        clipStream.point = point;
        if (v_) activeStream.lineEnd();
      }

      function linePoint(x, y) {
        var v = visible(x, y);
        if (polygon) ring.push([x, y]);

        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;

          if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
          }
        } else {
          if (v && v_) activeStream.point(x, y);else {
            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

            if (clipLine(a, b, x0, y0, x1, y1)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a[0], a[1]);
              }

              activeStream.point(b[0], b[1]);
              if (!v) activeStream.lineEnd();
              clean = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
              clean = false;
            }
          }
        }

        x_ = x, y_ = y, v_ = v;
      }

      return clipStream;
    };
  }

  function graticuleX(y0, y1, dy) {
    var y = range$2(y0, y1 - epsilon$3, dy).concat(y1);
    return function (x) {
      return y.map(function (y) {
        return [x, y];
      });
    };
  }

  function graticuleY(x0, x1, dx) {
    var x = range$2(x0, x1 - epsilon$3, dx).concat(x1);
    return function (y) {
      return x.map(function (x) {
        return [x, y];
      });
    };
  }

  function graticule() {
    var x1,
        x0,
        X1,
        X0,
        y1,
        y0,
        Y1,
        Y0,
        dx = 10,
        dy = dx,
        DX = 90,
        DY = 360,
        x,
        y,
        X,
        Y,
        precision = 2.5;

    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }

    function lines() {
      return range$2(ceil(X0 / DX) * DX, X1, DX).map(X).concat(range$2(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(range$2(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
        return abs$1(x % DX) > epsilon$3;
      }).map(x)).concat(range$2(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
        return abs$1(y % DY) > epsilon$3;
      }).map(y));
    }

    graticule.lines = function () {
      return lines().map(function (coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };

    graticule.outline = function () {
      return {
        type: "Polygon",
        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
      };
    };

    graticule.extent = function (_) {
      if (!arguments.length) return graticule.extentMinor();
      return graticule.extentMajor(_).extentMinor(_);
    };

    graticule.extentMajor = function (_) {
      if (!arguments.length) return [[X0, Y0], [X1, Y1]];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };

    graticule.extentMinor = function (_) {
      if (!arguments.length) return [[x0, y0], [x1, y1]];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };

    graticule.step = function (_) {
      if (!arguments.length) return graticule.stepMinor();
      return graticule.stepMajor(_).stepMinor(_);
    };

    graticule.stepMajor = function (_) {
      if (!arguments.length) return [DX, DY];
      DX = +_[0], DY = +_[1];
      return graticule;
    };

    graticule.stepMinor = function (_) {
      if (!arguments.length) return [dx, dy];
      dx = +_[0], dy = +_[1];
      return graticule;
    };

    graticule.precision = function (_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = graticuleX(y0, y1, 90);
      y = graticuleY(x0, x1, precision);
      X = graticuleX(Y0, Y1, 90);
      Y = graticuleY(X0, X1, precision);
      return graticule;
    };

    return graticule.extentMajor([[-180, -90 + epsilon$3], [180, 90 - epsilon$3]]).extentMinor([[-180, -80 - epsilon$3], [180, 80 + epsilon$3]]);
  }

  function identity$6 (x) {
    return x;
  }

  var areaSum$1 = adder(),
      areaRingSum$1 = adder(),
      x00,
      y00,
      x0$1,
      y0$1;
  var areaStream$1 = {
    point: noop$3,
    lineStart: noop$3,
    lineEnd: noop$3,
    polygonStart: function polygonStart() {
      areaStream$1.lineStart = areaRingStart$1;
      areaStream$1.lineEnd = areaRingEnd$1;
    },
    polygonEnd: function polygonEnd() {
      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$3;
      areaSum$1.add(abs$1(areaRingSum$1));
      areaRingSum$1.reset();
    },
    result: function result() {
      var area = areaSum$1 / 2;
      areaSum$1.reset();
      return area;
    }
  };

  function areaRingStart$1() {
    areaStream$1.point = areaPointFirst$1;
  }

  function areaPointFirst$1(x, y) {
    areaStream$1.point = areaPoint$1;
    x00 = x0$1 = x, y00 = y0$1 = y;
  }

  function areaPoint$1(x, y) {
    areaRingSum$1.add(y0$1 * x - x0$1 * y);
    x0$1 = x, y0$1 = y;
  }

  function areaRingEnd$1() {
    areaPoint$1(x00, y00);
  }

  var x0$2 = Infinity,
      y0$2 = x0$2,
      x1 = -x0$2,
      y1 = x1;
  var boundsStream$1 = {
    point: boundsPoint$1,
    lineStart: noop$3,
    lineEnd: noop$3,
    polygonStart: noop$3,
    polygonEnd: noop$3,
    result: function result() {
      var bounds = [[x0$2, y0$2], [x1, y1]];
      x1 = y1 = -(y0$2 = x0$2 = Infinity);
      return bounds;
    }
  };

  function boundsPoint$1(x, y) {
    if (x < x0$2) x0$2 = x;
    if (x > x1) x1 = x;
    if (y < y0$2) y0$2 = y;
    if (y > y1) y1 = y;
  }

  var X0$1 = 0,
      Y0$1 = 0,
      Z0$1 = 0,
      X1$1 = 0,
      Y1$1 = 0,
      Z1$1 = 0,
      X2$1 = 0,
      Y2$1 = 0,
      Z2$1 = 0,
      x00$1,
      y00$1,
      x0$3,
      y0$3;
  var centroidStream$1 = {
    point: centroidPoint$1,
    lineStart: centroidLineStart$1,
    lineEnd: centroidLineEnd$1,
    polygonStart: function polygonStart() {
      centroidStream$1.lineStart = centroidRingStart$1;
      centroidStream$1.lineEnd = centroidRingEnd$1;
    },
    polygonEnd: function polygonEnd() {
      centroidStream$1.point = centroidPoint$1;
      centroidStream$1.lineStart = centroidLineStart$1;
      centroidStream$1.lineEnd = centroidLineEnd$1;
    },
    result: function result() {
      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1] : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1] : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1] : [NaN, NaN];
      X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
      return centroid;
    }
  };

  function centroidPoint$1(x, y) {
    X0$1 += x;
    Y0$1 += y;
    ++Z0$1;
  }

  function centroidLineStart$1() {
    centroidStream$1.point = centroidPointFirstLine;
  }

  function centroidPointFirstLine(x, y) {
    centroidStream$1.point = centroidPointLine;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }

  function centroidPointLine(x, y) {
    var dx = x - x0$3,
        dy = y - y0$3,
        z = sqrt$2(dx * dx + dy * dy);
    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }

  function centroidLineEnd$1() {
    centroidStream$1.point = centroidPoint$1;
  }

  function centroidRingStart$1() {
    centroidStream$1.point = centroidPointFirstRing;
  }

  function centroidRingEnd$1() {
    centroidPointRing(x00$1, y00$1);
  }

  function centroidPointFirstRing(x, y) {
    centroidStream$1.point = centroidPointRing;
    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
  }

  function centroidPointRing(x, y) {
    var dx = x - x0$3,
        dy = y - y0$3,
        z = sqrt$2(dx * dx + dy * dy);
    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;
    z = y0$3 * x - x0$3 * y;
    X2$1 += z * (x0$3 + x);
    Y2$1 += z * (y0$3 + y);
    Z2$1 += z * 3;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }

  function PathContext(context) {
    this._context = context;
  }
  PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function pointRadius(_) {
      return this._radius = _, this;
    },
    polygonStart: function polygonStart() {
      this._line = 0;
    },
    polygonEnd: function polygonEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line === 0) this._context.closePath();
      this._point = NaN;
    },
    point: function point(x, y) {
      switch (this._point) {
        case 0:
          {
            this._context.moveTo(x, y);

            this._point = 1;
            break;
          }

        case 1:
          {
            this._context.lineTo(x, y);

            break;
          }

        default:
          {
            this._context.moveTo(x + this._radius, y);

            this._context.arc(x, y, this._radius, 0, tau$2);

            break;
          }
      }
    },
    result: noop$3
  };

  var lengthSum = adder(),
      lengthRing,
      x00$2,
      y00$2,
      x0$4,
      y0$4;
  var lengthStream = {
    point: noop$3,
    lineStart: function lineStart() {
      lengthStream.point = lengthPointFirst;
    },
    lineEnd: function lineEnd() {
      if (lengthRing) lengthPoint(x00$2, y00$2);
      lengthStream.point = noop$3;
    },
    polygonStart: function polygonStart() {
      lengthRing = true;
    },
    polygonEnd: function polygonEnd() {
      lengthRing = null;
    },
    result: function result() {
      var length = +lengthSum;
      lengthSum.reset();
      return length;
    }
  };

  function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00$2 = x0$4 = x, y00$2 = y0$4 = y;
  }

  function lengthPoint(x, y) {
    x0$4 -= x, y0$4 -= y;
    lengthSum.add(sqrt$2(x0$4 * x0$4 + y0$4 * y0$4));
    x0$4 = x, y0$4 = y;
  }

  function PathString() {
    this._string = [];
  }
  PathString.prototype = {
    _radius: 4.5,
    _circle: circle$1(4.5),
    pointRadius: function pointRadius(_) {
      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
      return this;
    },
    polygonStart: function polygonStart() {
      this._line = 0;
    },
    polygonEnd: function polygonEnd() {
      this._line = NaN;
    },
    lineStart: function lineStart() {
      this._point = 0;
    },
    lineEnd: function lineEnd() {
      if (this._line === 0) this._string.push("Z");
      this._point = NaN;
    },
    point: function point(x, y) {
      switch (this._point) {
        case 0:
          {
            this._string.push("M", x, ",", y);

            this._point = 1;
            break;
          }

        case 1:
          {
            this._string.push("L", x, ",", y);

            break;
          }

        default:
          {
            if (this._circle == null) this._circle = circle$1(this._radius);

            this._string.push("M", x, ",", y, this._circle);

            break;
          }
      }
    },
    result: function result() {
      if (this._string.length) {
        var result = this._string.join("");

        this._string = [];
        return result;
      } else {
        return null;
      }
    }
  };

  function circle$1(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }

  function geoPath (projection, context) {
    var pointRadius = 4.5,
        projectionStream,
        contextStream;

    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
      }

      return contextStream.result();
    }

    path.area = function (object) {
      geoStream(object, projectionStream(areaStream$1));
      return areaStream$1.result();
    };

    path.measure = function (object) {
      geoStream(object, projectionStream(lengthStream));
      return lengthStream.result();
    };

    path.bounds = function (object) {
      geoStream(object, projectionStream(boundsStream$1));
      return boundsStream$1.result();
    };

    path.centroid = function (object) {
      geoStream(object, projectionStream(centroidStream$1));
      return centroidStream$1.result();
    };

    path.projection = function (_) {
      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$6) : (projection = _).stream, path) : projection;
    };

    path.context = function (_) {
      if (!arguments.length) return context;
      contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path;
    };

    path.pointRadius = function (_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };

    return path.projection(projection).context(context);
  }

  function transformer$3(methods) {
    return function (stream) {
      var s = new TransformStream();

      for (var key in methods) {
        s[key] = methods[key];
      }

      s.stream = stream;
      return s;
    };
  }

  function TransformStream() {}

  TransformStream.prototype = {
    constructor: TransformStream,
    point: function point(x, y) {
      this.stream.point(x, y);
    },
    sphere: function sphere() {
      this.stream.sphere();
    },
    lineStart: function lineStart() {
      this.stream.lineStart();
    },
    lineEnd: function lineEnd() {
      this.stream.lineEnd();
    },
    polygonStart: function polygonStart() {
      this.stream.polygonStart();
    },
    polygonEnd: function polygonEnd() {
      this.stream.polygonEnd();
    }
  };

  function fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([0, 0]);
    if (clip != null) projection.clipExtent(null);
    geoStream(object, projection.stream(boundsStream$1));
    fitBounds(boundsStream$1.result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
  }

  function fitExtent(projection, extent, object) {
    return fit(projection, function (b) {
      var w = extent[1][0] - extent[0][0],
          h = extent[1][1] - extent[0][1],
          k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
          x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
          y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }
  function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object);
  }
  function fitWidth(projection, width, object) {
    return fit(projection, function (b) {
      var w = +width,
          k = w / (b[1][0] - b[0][0]),
          x = (w - k * (b[1][0] + b[0][0])) / 2,
          y = -k * b[0][1];
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }
  function fitHeight(projection, height, object) {
    return fit(projection, function (b) {
      var h = +height,
          k = h / (b[1][1] - b[0][1]),
          x = -k * b[0][0],
          y = (h - k * (b[1][1] + b[0][1])) / 2;
      projection.scale(150 * k).translate([x, y]);
    }, object);
  }

  var maxDepth = 16,
      // maximum depth of subdivision
  cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

  function resample (project, delta2) {
    return +delta2 ? resample$1(project, delta2) : resampleNone(project);
  }

  function resampleNone(project) {
    return transformer$3({
      point: function point(x, y) {
        x = project(x, y);
        this.stream.point(x[0], x[1]);
      }
    });
  }

  function resample$1(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0,
          dy = y1 - y0,
          d2 = dx * dx + dy * dy;

      if (d2 > 4 * delta2 && depth--) {
        var a = a0 + a1,
            b = b0 + b1,
            c = c0 + c1,
            m = sqrt$2(a * a + b * b + c * c),
            phi2 = asin$1(c /= m),
            lambda2 = abs$1(abs$1(c) - 1) < epsilon$3 || abs$1(lambda0 - lambda1) < epsilon$3 ? (lambda0 + lambda1) / 2 : atan2$1(b, a),
            p = project(lambda2, phi2),
            x2 = p[0],
            y2 = p[1],
            dx2 = x2 - x0,
            dy2 = y2 - y0,
            dz = dy * dx2 - dx * dy2;

        if (dz * dz / d2 > delta2 // perpendicular projected distance
        || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
        || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          // angular distance
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
        }
      }
    }

    return function (stream) {
      var lambda00, x00, y00, a00, b00, c00, // first point
      lambda0, x0, y0, a0, b0, c0; // previous point

      var resampleStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function polygonStart() {
          stream.polygonStart();
          resampleStream.lineStart = ringStart;
        },
        polygonEnd: function polygonEnd() {
          stream.polygonEnd();
          resampleStream.lineStart = lineStart;
        }
      };

      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }

      function lineStart() {
        x0 = NaN;
        resampleStream.point = linePoint;
        stream.lineStart();
      }

      function linePoint(lambda, phi) {
        var c = cartesian([lambda, phi]),
            p = project(lambda, phi);
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }

      function lineEnd() {
        resampleStream.point = point;
        stream.lineEnd();
      }

      function ringStart() {
        lineStart();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
      }

      function ringPoint(lambda, phi) {
        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resampleStream.point = linePoint;
      }

      function ringEnd() {
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
        resampleStream.lineEnd = lineEnd;
        lineEnd();
      }

      return resampleStream;
    };
  }

  var transformRadians = transformer$3({
    point: function point(x, y) {
      this.stream.point(x * radians, y * radians);
    }
  });

  function transformRotate(rotate) {
    return transformer$3({
      point: function point(x, y) {
        var r = rotate(x, y);
        return this.stream.point(r[0], r[1]);
      }
    });
  }

  function scaleTranslate(k, dx, dy) {
    function transform(x, y) {
      return [dx + k * x, dy - k * y];
    }

    transform.invert = function (x, y) {
      return [(x - dx) / k, (dy - y) / k];
    };

    return transform;
  }

  function scaleTranslateRotate(k, dx, dy, alpha) {
    var cosAlpha = cos$1(alpha),
        sinAlpha = sin$1(alpha),
        a = cosAlpha * k,
        b = sinAlpha * k,
        ai = cosAlpha / k,
        bi = sinAlpha / k,
        ci = (sinAlpha * dy - cosAlpha * dx) / k,
        fi = (sinAlpha * dx + cosAlpha * dy) / k;

    function transform(x, y) {
      return [a * x - b * y + dx, dy - b * x - a * y];
    }

    transform.invert = function (x, y) {
      return [ai * x - bi * y + ci, fi - bi * x - ai * y];
    };

    return transform;
  }

  function projection(project) {
    return projectionMutator(function () {
      return project;
    })();
  }
  function projectionMutator(projectAt) {
    var project,
        k = 150,
        // scale
    x = 480,
        y = 250,
        // translate
    lambda = 0,
        phi = 0,
        // center
    deltaLambda = 0,
        deltaPhi = 0,
        deltaGamma = 0,
        rotate,
        // pre-rotate
    alpha = 0,
        // post-rotate
    theta = null,
        preclip = clipAntimeridian,
        // pre-clip angle
    x0 = null,
        y0,
        x1,
        y1,
        postclip = identity$6,
        // post-clip extent
    delta2 = 0.5,
        // precision
    projectResample,
        projectTransform,
        projectRotateTransform,
        cache,
        cacheStream;

    function projection(point) {
      return projectRotateTransform(point[0] * radians, point[1] * radians);
    }

    function invert(point) {
      point = projectRotateTransform.invert(point[0], point[1]);
      return point && [point[0] * degrees$1, point[1] * degrees$1];
    }

    projection.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };

    projection.preclip = function (_) {
      return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
    };

    projection.postclip = function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };

    projection.clipAngle = function (_) {
      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
    };

    projection.clipExtent = function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };

    projection.scale = function (_) {
      return arguments.length ? (k = +_, recenter()) : k;
    };

    projection.translate = function (_) {
      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
    };

    projection.center = function (_) {
      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
    };

    projection.rotate = function (_) {
      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
    };

    projection.angle = function (_) {
      return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;
    };

    projection.precision = function (_) {
      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$2(delta2);
    };

    projection.fitExtent = function (extent, object) {
      return fitExtent(projection, extent, object);
    };

    projection.fitSize = function (size, object) {
      return fitSize(projection, size, object);
    };

    projection.fitWidth = function (width, object) {
      return fitWidth(projection, width, object);
    };

    projection.fitHeight = function (height, object) {
      return fitHeight(projection, height, object);
    };

    function recenter() {
      var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
          transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
      projectTransform = compose(project, transform);
      projectRotateTransform = compose(rotate, projectTransform);
      projectResample = resample(projectTransform, delta2);
      return reset();
    }

    function reset() {
      cache = cacheStream = null;
      return projection;
    }

    return function () {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return recenter();
    };
  }

  function conicProjection(projectAt) {
    var phi0 = 0,
        phi1 = pi$2 / 3,
        m = projectionMutator(projectAt),
        p = m(phi0, phi1);

    p.parallels = function (_) {
      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
    };

    return p;
  }

  function cylindricalEqualAreaRaw(phi0) {
    var cosPhi0 = cos$1(phi0);

    function forward(lambda, phi) {
      return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
    }

    forward.invert = function (x, y) {
      return [x / cosPhi0, asin$1(y * cosPhi0)];
    };

    return forward;
  }

  function conicEqualAreaRaw(y0, y1) {
    var sy0 = sin$1(y0),
        n = (sy0 + sin$1(y1)) / 2; // Are the parallels symmetrical around the Equator?

    if (abs$1(n) < epsilon$3) return cylindricalEqualAreaRaw(y0);
    var c = 1 + sy0 * (2 * n - sy0),
        r0 = sqrt$2(c) / n;

    function project(x, y) {
      var r = sqrt$2(c - 2 * n * sin$1(y)) / n;
      return [r * sin$1(x *= n), r0 - r * cos$1(x)];
    }

    project.invert = function (x, y) {
      var r0y = r0 - y;
      return [atan2$1(x, abs$1(r0y)) / n * sign$1(r0y), asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
    };

    return project;
  }
  function geoConicEqualArea () {
    return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
  }

  function geoAlbers () {
    return geoConicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
  }

  // as this will avoid emitting interleaving lines and polygons.

  function multiplex(streams) {
    var n = streams.length;
    return {
      point: function point(x, y) {
        var i = -1;

        while (++i < n) {
          streams[i].point(x, y);
        }
      },
      sphere: function sphere() {
        var i = -1;

        while (++i < n) {
          streams[i].sphere();
        }
      },
      lineStart: function lineStart() {
        var i = -1;

        while (++i < n) {
          streams[i].lineStart();
        }
      },
      lineEnd: function lineEnd() {
        var i = -1;

        while (++i < n) {
          streams[i].lineEnd();
        }
      },
      polygonStart: function polygonStart() {
        var i = -1;

        while (++i < n) {
          streams[i].polygonStart();
        }
      },
      polygonEnd: function polygonEnd() {
        var i = -1;

        while (++i < n) {
          streams[i].polygonEnd();
        }
      }
    };
  } // A composite projection for the United States, configured by default for
  // 960×500. The projection also works quite well at 960×600 if you change the
  // scale to 1285 and adjust the translate accordingly. The set of standard
  // parallels for each region comes from USGS, which is published here:
  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


  function geoAlbersUsa () {
    var cache,
        cacheStream,
        lower48 = geoAlbers(),
        lower48Point,
        alaska = geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
        alaskaPoint,
        // EPSG:3338
    hawaii = geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
        hawaiiPoint,
        // ESRI:102007
    _point,
        pointStream = {
      point: function point(x, y) {
        _point = [x, y];
      }
    };

    function albersUsa(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);
    }

    albersUsa.invert = function (coordinates) {
      var k = lower48.scale(),
          t = lower48.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;
      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };

    albersUsa.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
    };

    albersUsa.precision = function (_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_), alaska.precision(_), hawaii.precision(_);
      return reset();
    };

    albersUsa.scale = function (_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };

    albersUsa.translate = function (_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(),
          x = +_[0],
          y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
      alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon$3, y + 0.120 * k + epsilon$3], [x - 0.214 * k - epsilon$3, y + 0.234 * k - epsilon$3]]).stream(pointStream);
      hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon$3, y + 0.166 * k + epsilon$3], [x - 0.115 * k - epsilon$3, y + 0.234 * k - epsilon$3]]).stream(pointStream);
      return reset();
    };

    albersUsa.fitExtent = function (extent, object) {
      return fitExtent(albersUsa, extent, object);
    };

    albersUsa.fitSize = function (size, object) {
      return fitSize(albersUsa, size, object);
    };

    albersUsa.fitWidth = function (width, object) {
      return fitWidth(albersUsa, width, object);
    };

    albersUsa.fitHeight = function (height, object) {
      return fitHeight(albersUsa, height, object);
    };

    function reset() {
      cache = cacheStream = null;
      return albersUsa;
    }

    return albersUsa.scale(1070);
  }

  function azimuthalRaw(scale) {
    return function (x, y) {
      var cx = cos$1(x),
          cy = cos$1(y),
          k = scale(cx * cy);
      return [k * cy * sin$1(x), k * sin$1(y)];
    };
  }
  function azimuthalInvert(angle) {
    return function (x, y) {
      var z = sqrt$2(x * x + y * y),
          c = angle(z),
          sc = sin$1(c),
          cc = cos$1(c);
      return [atan2$1(x * sc, z * cc), asin$1(z && y * sc / z)];
    };
  }

  var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {
    return sqrt$2(2 / (1 + cxcy));
  });
  azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {
    return 2 * asin$1(z / 2);
  });
  function geoAzimuthalEqualArea () {
    return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
  }

  var azimuthalEquidistantRaw = azimuthalRaw(function (c) {
    return (c = acos$1(c)) && c / sin$1(c);
  });
  azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
    return z;
  });
  function geoAzimuthalEquidistant () {
    return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
  }

  function mercatorRaw(lambda, phi) {
    return [lambda, log$3(tan((halfPi$1 + phi) / 2))];
  }

  mercatorRaw.invert = function (x, y) {
    return [x, 2 * atan(exp$1(y)) - halfPi$1];
  };

  function geoMercator () {
    return mercatorProjection(mercatorRaw).scale(961 / tau$2);
  }
  function mercatorProjection(project) {
    var m = projection(project),
        center = m.center,
        scale = m.scale,
        translate = m.translate,
        clipExtent = m.clipExtent,
        x0 = null,
        y0,
        x1,
        y1; // clip extent

    m.scale = function (_) {
      return arguments.length ? (scale(_), reclip()) : scale();
    };

    m.translate = function (_) {
      return arguments.length ? (translate(_), reclip()) : translate();
    };

    m.center = function (_) {
      return arguments.length ? (center(_), reclip()) : center();
    };

    m.clipExtent = function (_) {
      return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };

    function reclip() {
      var k = pi$2 * scale(),
          t = m(rotation(m.rotate()).invert([0, 0]));
      return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
    }

    return reclip();
  }

  function tany(y) {
    return tan((halfPi$1 + y) / 2);
  }

  function conicConformalRaw(y0, y1) {
    var cy0 = cos$1(y0),
        n = y0 === y1 ? sin$1(y0) : log$3(cy0 / cos$1(y1)) / log$3(tany(y1) / tany(y0)),
        f = cy0 * pow$2(tany(y0), n) / n;
    if (!n) return mercatorRaw;

    function project(x, y) {
      if (f > 0) {
        if (y < -halfPi$1 + epsilon$3) y = -halfPi$1 + epsilon$3;
      } else {
        if (y > halfPi$1 - epsilon$3) y = halfPi$1 - epsilon$3;
      }

      var r = f / pow$2(tany(y), n);
      return [r * sin$1(n * x), f - r * cos$1(n * x)];
    }

    project.invert = function (x, y) {
      var fy = f - y,
          r = sign$1(n) * sqrt$2(x * x + fy * fy);
      return [atan2$1(x, abs$1(fy)) / n * sign$1(fy), 2 * atan(pow$2(f / r, 1 / n)) - halfPi$1];
    };

    return project;
  }
  function geoConicConformal () {
    return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
  }

  function equirectangularRaw(lambda, phi) {
    return [lambda, phi];
  }
  equirectangularRaw.invert = equirectangularRaw;
  function geoEquirectangular () {
    return projection(equirectangularRaw).scale(152.63);
  }

  function conicEquidistantRaw(y0, y1) {
    var cy0 = cos$1(y0),
        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
        g = cy0 / n + y0;
    if (abs$1(n) < epsilon$3) return equirectangularRaw;

    function project(x, y) {
      var gy = g - y,
          nx = n * x;
      return [gy * sin$1(nx), g - gy * cos$1(nx)];
    }

    project.invert = function (x, y) {
      var gy = g - y;
      return [atan2$1(x, abs$1(gy)) / n * sign$1(gy), g - sign$1(n) * sqrt$2(x * x + gy * gy)];
    };

    return project;
  }
  function geoConicEquidistant () {
    return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
  }

  var A1 = 1.340264,
      A2 = -0.081106,
      A3 = 0.000893,
      A4 = 0.003796,
      M = sqrt$2(3) / 2,
      iterations = 12;
  function equalEarthRaw(lambda, phi) {
    var l = asin$1(M * sin$1(phi)),
        l2 = l * l,
        l6 = l2 * l2 * l2;
    return [lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
  }

  equalEarthRaw.invert = function (x, y) {
    var l = y,
        l2 = l * l,
        l6 = l2 * l2 * l2;

    for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
      fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
      fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
      l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
      if (abs$1(delta) < epsilon2$1) break;
    }

    return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l), asin$1(sin$1(l) / M)];
  };

  function geoEqualEarth () {
    return projection(equalEarthRaw).scale(177.158);
  }

  function gnomonicRaw(x, y) {
    var cy = cos$1(y),
        k = cos$1(x) * cy;
    return [cy * sin$1(x) / k, sin$1(y) / k];
  }
  gnomonicRaw.invert = azimuthalInvert(atan);
  function geoGnomonic () {
    return projection(gnomonicRaw).scale(144.049).clipAngle(60);
  }

  function scaleTranslate$1(kx, ky, tx, ty) {
    return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$6 : transformer$3({
      point: function point(x, y) {
        this.stream.point(x * kx + tx, y * ky + ty);
      }
    });
  }

  function geoIdentity () {
    var k = 1,
        tx = 0,
        ty = 0,
        sx = 1,
        sy = 1,
        transform = identity$6,
        // scale, translate and reflect
    x0 = null,
        y0,
        x1,
        y1,
        // clip extent
    _postclip = identity$6,
        cache,
        cacheStream,
        projection;

    function reset() {
      cache = cacheStream = null;
      return projection;
    }

    return projection = {
      stream: function stream(_stream) {
        return cache && cacheStream === _stream ? cache : cache = transform(_postclip(cacheStream = _stream));
      },
      postclip: function postclip(_) {
        return arguments.length ? (_postclip = _, x0 = y0 = x1 = y1 = null, reset()) : _postclip;
      },
      clipExtent: function clipExtent(_) {
        return arguments.length ? (_postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      },
      scale: function scale(_) {
        return arguments.length ? (transform = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;
      },
      translate: function translate(_) {
        return arguments.length ? (transform = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
      },
      reflectX: function reflectX(_) {
        return arguments.length ? (transform = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
      },
      reflectY: function reflectY(_) {
        return arguments.length ? (transform = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
      },
      fitExtent: function fitExtent$1(extent, object) {
        return fitExtent(projection, extent, object);
      },
      fitSize: function fitSize$1(size, object) {
        return fitSize(projection, size, object);
      },
      fitWidth: function fitWidth$1(width, object) {
        return fitWidth(projection, width, object);
      },
      fitHeight: function fitHeight$1(height, object) {
        return fitHeight(projection, height, object);
      }
    };
  }

  function naturalEarth1Raw(lambda, phi) {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
  }

  naturalEarth1Raw.invert = function (x, y) {
    var phi = y,
        i = 25,
        delta;

    do {
      var phi2 = phi * phi,
          phi4 = phi2 * phi2;
      phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
    } while (abs$1(delta) > epsilon$3 && --i > 0);

    return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
  };

  function geoNaturalEarth1 () {
    return projection(naturalEarth1Raw).scale(175.295);
  }

  function orthographicRaw(x, y) {
    return [cos$1(y) * sin$1(x), sin$1(y)];
  }
  orthographicRaw.invert = azimuthalInvert(asin$1);
  function geoOrthographic () {
    return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$3);
  }

  function stereographicRaw(x, y) {
    var cy = cos$1(y),
        k = 1 + cos$1(x) * cy;
    return [cy * sin$1(x) / k, sin$1(y) / k];
  }
  stereographicRaw.invert = azimuthalInvert(function (z) {
    return 2 * atan(z);
  });
  function geoStereographic () {
    return projection(stereographicRaw).scale(250).clipAngle(142);
  }

  function transverseMercatorRaw(lambda, phi) {
    return [log$3(tan((halfPi$1 + phi) / 2)), -lambda];
  }

  transverseMercatorRaw.invert = function (x, y) {
    return [-y, 2 * atan(exp$1(x)) - halfPi$1];
  };

  function geoTransverseMercator () {
    var m = mercatorProjection(transverseMercatorRaw),
        center = m.center,
        rotate = m.rotate;

    m.center = function (_) {
      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
    };

    m.rotate = function (_) {
      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
    };

    return rotate([0, 0, 90]).scale(159.155);
  }

  var abs$2 = Math.abs;
  var cos$2 = Math.cos;
  var sin$2 = Math.sin;
  var epsilon$4 = 1e-6;
  var pi$3 = Math.PI;
  var halfPi$2 = pi$3 / 2;
  var sqrt2 = sqrt$3(2);
  function asin$2(x) {
    return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
  }
  function sqrt$3(x) {
    return x > 0 ? Math.sqrt(x) : 0;
  }

  function mollweideBromleyTheta(cp, phi) {
    var cpsinPhi = cp * sin$2(phi),
        i = 30,
        delta;

    do {
      phi -= delta = (phi + sin$2(phi) - cpsinPhi) / (1 + cos$2(phi));
    } while (abs$2(delta) > epsilon$4 && --i > 0);

    return phi / 2;
  }
  function mollweideBromleyRaw(cx, cy, cp) {
    function forward(lambda, phi) {
      return [cx * lambda * cos$2(phi = mollweideBromleyTheta(cp, phi)), cy * sin$2(phi)];
    }

    forward.invert = function (x, y) {
      return y = asin$2(y / cy), [x / (cx * cos$2(y)), asin$2((2 * y + sin$2(2 * y)) / cp)];
    };

    return forward;
  }
  var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi$2, sqrt2, pi$3);
  function geoMollweide () {
    return projection(mollweideRaw).scale(169.529);
  }

  var defaultPath = geoPath();
  var projectionProperties = [// standard properties in d3-geo
  'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections
  'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];
  /**
   * Augment projections with their type and a copy method.
   */

  function create$1(type, constructor) {
    return function projection() {
      var p = constructor();
      p.type = type;
      p.path = geoPath().projection(p);

      p.copy = p.copy || function () {
        var c = projection();
        projectionProperties.forEach(function (prop) {
          if (p[prop]) c[prop](p[prop]());
        });
        c.path.pointRadius(p.path.pointRadius());
        return c;
      };

      return p;
    };
  }

  function projection$1(type, proj) {
    if (!type || typeof type !== 'string') {
      throw new Error('Projection type must be a name string.');
    }

    type = type.toLowerCase();

    if (arguments.length > 1) {
      projections[type] = create$1(type, proj);
      return this;
    } else {
      return projections[type] || null;
    }
  }
  function getProjectionPath(proj) {
    return proj && proj.path || defaultPath;
  }
  var projections = {
    // base d3-geo projection types
    albers: geoAlbers,
    albersusa: geoAlbersUsa,
    azimuthalequalarea: geoAzimuthalEqualArea,
    azimuthalequidistant: geoAzimuthalEquidistant,
    conicconformal: geoConicConformal,
    conicequalarea: geoConicEqualArea,
    conicequidistant: geoConicEquidistant,
    equalEarth: geoEqualEarth,
    equirectangular: geoEquirectangular,
    gnomonic: geoGnomonic,
    identity: geoIdentity,
    mercator: geoMercator,
    mollweide: geoMollweide,
    naturalEarth1: geoNaturalEarth1,
    orthographic: geoOrthographic,
    stereographic: geoStereographic,
    transversemercator: geoTransverseMercator
  };

  for (var key$1 in projections) {
    projection$1(key$1, projections[key$1]);
  }

  /**
   * Map GeoJSON data to an SVG path string.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(number, number): *} params.projection - The cartographic
   *   projection to apply.
   * @param {function(object): *} [params.field] - The field with GeoJSON data,
   *   or null if the tuple itself is a GeoJSON feature.
   * @param {string} [params.as='path'] - The output field in which to store
   *   the generated path data (default 'path').
   */

  function GeoPath(params) {
    Transform$1.call(this, null, params);
  }
  GeoPath.Definition = {
    "type": "GeoPath",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "projection",
      "type": "projection"
    }, {
      "name": "field",
      "type": "field"
    }, {
      "name": "pointRadius",
      "type": "number",
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "default": "path"
    }]
  };
  var prototype$17 = inherits(GeoPath, Transform$1);

  prototype$17.transform = function (_, pulse) {
    var out = pulse.fork(pulse.ALL),
        path = this.value,
        field = _.field || identity,
        as = _.as || 'path',
        flag = out.SOURCE;

    function set(t) {
      t[as] = path(field(t));
    }

    if (!path || _.modified()) {
      // parameters updated, reset and reflow
      this.value = path = getProjectionPath(_.projection);
      out.materialize().reflow();
    } else {
      flag = field === identity || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;
    }

    var prev = initPath(path, _.pointRadius);
    out.visit(flag, set);
    path.pointRadius(prev);
    return out.modifies(as);
  };

  function initPath(path, pointRadius) {
    var prev = path.pointRadius();
    path.context(null);

    if (pointRadius != null) {
      path.pointRadius(pointRadius);
    }

    return prev;
  }

  /**
   * Geo-code a longitude/latitude point to an x/y coordinate.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(number, number): *} params.projection - The cartographic
   *   projection to apply.
   * @param {Array<function(object): *>} params.fields - A two-element array of
   *   field accessors for the longitude and latitude values.
   * @param {Array<string>} [params.as] - A two-element array of field names
   *   under which to store the result. Defaults to ['x','y'].
   */

  function GeoPoint(params) {
    Transform$1.call(this, null, params);
  }
  GeoPoint.Definition = {
    "type": "GeoPoint",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "projection",
      "type": "projection",
      "required": true
    }, {
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 2,
      "default": ["x", "y"]
    }]
  };
  var prototype$18 = inherits(GeoPoint, Transform$1);

  prototype$18.transform = function (_, pulse) {
    var proj = _.projection,
        lon = _.fields[0],
        lat = _.fields[1],
        as = _.as || ['x', 'y'],
        x = as[0],
        y = as[1],
        mod;

    function set(t) {
      var xy = proj([lon(t), lat(t)]);

      if (xy) {
        t[x] = xy[0];
        t[y] = xy[1];
      } else {
        t[x] = undefined;
        t[y] = undefined;
      }
    }

    if (_.modified()) {
      // parameters updated, reflow
      pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
    } else {
      mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
      pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
    }

    return pulse.modifies(as);
  };

  /**
   * Annotate items with a geopath shape generator.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(number, number): *} params.projection - The cartographic
   *   projection to apply.
   * @param {function(object): *} [params.field] - The field with GeoJSON data,
   *   or null if the tuple itself is a GeoJSON feature.
   * @param {string} [params.as='shape'] - The output field in which to store
   *   the generated path data (default 'shape').
   */

  function GeoShape(params) {
    Transform$1.call(this, null, params);
  }
  GeoShape.Definition = {
    "type": "GeoShape",
    "metadata": {
      "modifies": true,
      "nomod": true
    },
    "params": [{
      "name": "projection",
      "type": "projection"
    }, {
      "name": "field",
      "type": "field",
      "default": "datum"
    }, {
      "name": "pointRadius",
      "type": "number",
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "default": "shape"
    }]
  };
  var prototype$19 = inherits(GeoShape, Transform$1);

  prototype$19.transform = function (_, pulse) {
    var out = pulse.fork(pulse.ALL),
        shape = this.value,
        as = _.as || 'shape',
        flag = out.ADD;

    if (!shape || _.modified()) {
      // parameters updated, reset and reflow
      this.value = shape = shapeGenerator(getProjectionPath(_.projection), _.field || field('datum'), _.pointRadius);
      out.materialize().reflow();
      flag = out.SOURCE;
    }

    out.visit(flag, function (t) {
      t[as] = shape;
    });
    return out.modifies(as);
  };

  function shapeGenerator(path, field, pointRadius) {
    var shape = pointRadius == null ? function (_) {
      return path(field(_));
    } : function (_) {
      var prev = path.pointRadius(),
          value = path.pointRadius(pointRadius)(field(_));
      path.pointRadius(prev);
      return value;
    };

    shape.context = function (_) {
      path.context(_);
      return shape;
    };

    return shape;
  }

  /**
   * GeoJSON feature generator for creating graticules.
   * @constructor
   */

  function Graticule(params) {
    Transform$1.call(this, [], params);
    this.generator = graticule();
  }
  Graticule.Definition = {
    "type": "Graticule",
    "metadata": {
      "changes": true,
      "generates": true
    },
    "params": [{
      "name": "extent",
      "type": "array",
      "array": true,
      "length": 2,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "extentMajor",
      "type": "array",
      "array": true,
      "length": 2,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "extentMinor",
      "type": "array",
      "array": true,
      "length": 2,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "step",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "stepMajor",
      "type": "number",
      "array": true,
      "length": 2,
      "default": [90, 360]
    }, {
      "name": "stepMinor",
      "type": "number",
      "array": true,
      "length": 2,
      "default": [10, 10]
    }, {
      "name": "precision",
      "type": "number",
      "default": 2.5
    }]
  };
  var prototype$1a = inherits(Graticule, Transform$1);

  prototype$1a.transform = function (_, pulse) {
    var src = this.value,
        gen = this.generator,
        t;

    if (!src.length || _.modified()) {
      for (var prop in _) {
        if (isFunction(gen[prop])) {
          gen[prop](_[prop]);
        }
      }
    }

    t = gen();

    if (src.length) {
      pulse.mod.push(replace(src[0], t));
    } else {
      pulse.add.push(ingest(t));
    }

    src[0] = t;
    return pulse;
  };

  /**
   * Render a heatmap image for input raster grid data.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} [params.field] - The field with raster grid
   *   data. If unspecified, the tuple itself is interpreted as a raster grid.
   * @param {string} [params.color] - A constant color value or function for
   *   individual pixel color. If a function, it will be invoked with an input
   *   object that includes $x, $y, $value, and $max fields for the grid.
   * @param {number} [params.opacity] - A constant opacity value or function for
   *   individual pixel opacity. If a function, it will be invoked with an input
   *   object that includes $x, $y, $value, and $max fields for the grid.
   * @param {string} [params.resolve] - The method for resolving maximum values
   *   across multiple input grids. If 'independent' (the default), maximum
   *   calculation will be performed separately for each grid. If 'shared',
   *   a single global maximum will be used for all input grids.
   * @param {string} [params.as='image'] - The output field in which to store
   *   the generated bitmap canvas images (default 'image').
   */

  function Heatmap(params) {
    Transform$1.call(this, null, params);
  }
  Heatmap.Definition = {
    "type": "heatmap",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "color",
      "type": "string",
      "expr": true
    }, {
      "name": "opacity",
      "type": "number",
      "expr": true
    }, {
      "name": "resolve",
      "type": "enum",
      "values": ["shared", "independent"],
      "default": "independent"
    }, {
      "name": "as",
      "type": "string",
      "default": "image"
    }]
  };
  var prototype$1b = inherits(Heatmap, Transform$1);

  prototype$1b.transform = function (_, pulse) {
    if (!pulse.changed() && !_.modified()) {
      return pulse.StopPropagation;
    }

    var source = pulse.materialize(pulse.SOURCE).source,
        shared = _.resolve === 'shared',
        field = _.field || identity,
        opacity = opacity_(_.opacity, _),
        color = color_(_.color, _),
        as = _.as || 'image',
        obj = {
      $x: 0,
      $y: 0,
      $value: 0,
      $max: shared ? max(source.map(function (t) {
        return max(field(t).values);
      })) : 0
    };
    source.forEach(function (t) {
      var v = field(t); // build proxy data object

      var o = extend({}, t, obj); // set maximum value if not globally shared

      if (!shared) o.$max = max(v.values || []); // generate canvas image
      // optimize color/opacity if not pixel-dependent

      t[as] = toCanvas(v, o, color.dep ? color : constant(color(o)), opacity.dep ? opacity : constant(opacity(o)));
    });
    return pulse.reflow(true).modifies(as);
  }; // get image color function


  function color_(color, _) {
    var f;

    if (isFunction(color)) {
      f = function f(obj) {
        return rgb(color(obj, _));
      };

      f.dep = dependency(color);
    } else {
      // default to mid-grey
      f = constant(rgb(color || '#888'));
    }

    return f;
  } // get image opacity function


  function opacity_(opacity, _) {
    var f;

    if (isFunction(opacity)) {
      f = function f(obj) {
        return opacity(obj, _);
      };

      f.dep = dependency(opacity);
    } else if (opacity) {
      f = constant(opacity);
    } else {
      // default to [0, max] opacity gradient
      f = function f(obj) {
        return obj.$value / obj.$max || 0;
      };

      f.dep = true;
    }

    return f;
  } // check if function depends on individual pixel data


  function dependency(f) {
    if (!isFunction(f)) return false;
    var set = toSet(accessorFields(f));
    return set.$x || set.$y || set.$value || set.$max;
  } // render raster grid to canvas


  function toCanvas(grid, obj, color, opacity) {
    var n = grid.width,
        m = grid.height,
        x1 = grid.x1 || 0,
        y1 = grid.y1 || 0,
        x2 = grid.x2 || n,
        y2 = grid.y2 || m,
        val = grid.values,
        value = val ? function (i) {
      return val[i];
    } : zero,
        can = canvas$1(x2 - x1, y2 - y1),
        ctx = can.getContext('2d'),
        img = ctx.getImageData(0, 0, x2 - x1, y2 - y1),
        pix = img.data;

    for (var j = y1, k = 0; j < y2; ++j) {
      obj.$y = j - y1;

      for (var i = x1, r = j * n; i < x2; ++i, k += 4) {
        obj.$x = i - x1;
        obj.$value = value(i + r);
        var v = color(obj);
        pix[k + 0] = v.r;
        pix[k + 1] = v.g;
        pix[k + 2] = v.b;
        pix[k + 3] = ~~(255 * opacity(obj));
      }
    }

    ctx.putImageData(img, 0, 0);
    return can;
  }

  /**
   * Maintains a cartographic projection.
   * @constructor
   * @param {object} params - The parameters for this operator.
   */

  function Projection(params) {
    Transform$1.call(this, null, params);
    this.modified(true); // always treat as modified
  }
  var prototype$1c = inherits(Projection, Transform$1);

  prototype$1c.transform = function (_, pulse) {
    var proj = this.value;

    if (!proj || _.modified('type')) {
      this.value = proj = create$2(_.type);
      projectionProperties.forEach(function (prop) {
        if (_[prop] != null) set$1(proj, prop, _[prop]);
      });
    } else {
      projectionProperties.forEach(function (prop) {
        if (_.modified(prop)) set$1(proj, prop, _[prop]);
      });
    }

    if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
    if (_.fit) fit$1(proj, _);
    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
  };

  function fit$1(proj, _) {
    var data = collectGeoJSON(_.fit);
    _.extent ? proj.fitExtent(_.extent, data) : _.size ? proj.fitSize(_.size, data) : 0;
  }

  function create$2(type) {
    var constructor = projection$1((type || 'mercator').toLowerCase());
    if (!constructor) error('Unrecognized projection type: ' + type);
    return constructor();
  }

  function set$1(proj, key, value) {
    if (isFunction(proj[key])) proj[key](value);
  }

  function collectGeoJSON(data) {
    data = array(data);
    return data.length === 1 ? data[0] : {
      type: FeatureCollection,
      features: data.reduce(function (a, f) {
        return a.concat(featurize(f));
      }, [])
    };
  }

  function featurize(f) {
    return f.type === FeatureCollection ? f.features : array(f).filter(function (d) {
      return d != null;
    }).map(function (d) {
      return d.type === Feature ? d : {
        type: Feature,
        geometry: d
      };
    });
  }



  var geo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    contour: Contour,
    geojson: GeoJSON,
    geopath: GeoPath,
    geopoint: GeoPoint,
    geoshape: GeoShape,
    graticule: Graticule,
    heatmap: Heatmap,
    isocontour: Isocontour,
    kde2d: KDE2D,
    projection: Projection
  });

  function forceCenter (x, y) {
    var nodes;
    if (x == null) x = 0;
    if (y == null) y = 0;

    function force() {
      var i,
          n = nodes.length,
          node,
          sx = 0,
          sy = 0;

      for (i = 0; i < n; ++i) {
        node = nodes[i], sx += node.x, sy += node.y;
      }

      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
        node = nodes[i], node.x -= sx, node.y -= sy;
      }
    }

    force.initialize = function (_) {
      nodes = _;
    };

    force.x = function (_) {
      return arguments.length ? (x = +_, force) : x;
    };

    force.y = function (_) {
      return arguments.length ? (y = +_, force) : y;
    };

    return force;
  }

  function tree_add (d) {
    var x = +this._x.call(null, d),
        y = +this._y.call(null, d);
    return add$2(this.cover(x, y), x, y, d);
  }

  function add$2(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

    var parent,
        node = tree._root,
        leaf = {
      data: d
    },
        x0 = tree._x0,
        y0 = tree._y0,
        x1 = tree._x1,
        y1 = tree._y1,
        xm,
        ym,
        xp,
        yp,
        right,
        bottom,
        i,
        j; // If the tree is empty, initialize the root as a leaf.

    if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

    while (node.length) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
    } // Is the new point is exactly coincident with the existing point?


    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

    do {
      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

    return parent[j] = node, parent[i] = leaf, tree;
  }

  function addAll(data) {
    var d,
        i,
        n = data.length,
        x,
        y,
        xz = new Array(n),
        yz = new Array(n),
        x0 = Infinity,
        y0 = Infinity,
        x1 = -Infinity,
        y1 = -Infinity; // Compute the points and their extent.

    for (i = 0; i < n; ++i) {
      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
      xz[i] = x;
      yz[i] = y;
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
      if (y < y0) y0 = y;
      if (y > y1) y1 = y;
    } // If there were no (valid) points, abort.


    if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.

    this.cover(x0, y0).cover(x1, y1); // Add the new points.

    for (i = 0; i < n; ++i) {
      add$2(this, xz[i], yz[i], data[i]);
    }

    return this;
  }

  function tree_cover (x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

    var x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1; // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!

    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1;
      y1 = (y0 = Math.floor(y)) + 1;
    } // Otherwise, double repeatedly to cover.
    else {
        var z = x1 - x0,
            node = this._root,
            parent,
            i;

        while (x0 > x || x >= x1 || y0 > y || y >= y1) {
          i = (y < y0) << 1 | x < x0;
          parent = new Array(4), parent[i] = node, node = parent, z *= 2;

          switch (i) {
            case 0:
              x1 = x0 + z, y1 = y0 + z;
              break;

            case 1:
              x0 = x1 - z, y1 = y0 + z;
              break;

            case 2:
              x1 = x0 + z, y0 = y1 - z;
              break;

            case 3:
              x0 = x1 - z, y0 = y1 - z;
              break;
          }
        }

        if (this._root && this._root.length) this._root = node;
      }

    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
  }

  function tree_data () {
    var data = [];
    this.visit(function (node) {
      if (!node.length) do {
        data.push(node.data);
      } while (node = node.next);
    });
    return data;
  }

  function tree_extent (_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
  }

  function Quad (node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
  }

  function tree_find (x, y, radius) {
    var data,
        x0 = this._x0,
        y0 = this._y0,
        x1,
        y1,
        x2,
        y2,
        x3 = this._x1,
        y3 = this._y1,
        quads = [],
        node = this._root,
        q,
        i;
    if (node) quads.push(new Quad(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity;else {
      x0 = x - radius, y0 = y - radius;
      x3 = x + radius, y3 = y + radius;
      radius *= radius;
    }

    while (q = quads.pop()) {
      // Stop searching if this quadrant can’t contain a closer node.
      if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

      if (node.length) {
        var xm = (x1 + x2) / 2,
            ym = (y1 + y2) / 2;
        quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

        if (i = (y >= ym) << 1 | x >= xm) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
      } // Visit this point. (Visiting coincident points isn’t necessary!)
      else {
          var dx = x - +this._x.call(null, node.data),
              dy = y - +this._y.call(null, node.data),
              d2 = dx * dx + dy * dy;

          if (d2 < radius) {
            var d = Math.sqrt(radius = d2);
            x0 = x - d, y0 = y - d;
            x3 = x + d, y3 = y + d;
            data = node.data;
          }
        }
    }

    return data;
  }

  function tree_remove (d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

    var parent,
        node = this._root,
        retainer,
        previous,
        next,
        x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1,
        x,
        y,
        xm,
        ym,
        right,
        bottom,
        i,
        j; // If the tree is empty, initialize the root as a leaf.

    if (!node) return this; // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.

    if (node.length) while (true) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
      if (!node.length) break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
    } // Find the point to remove.

    while (node.data !== d) {
      if (!(previous = node, node = node.next)) return this;
    }

    if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

    if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

    if (!parent) return this._root = next, this; // Remove this leaf.

    next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
      if (retainer) retainer[j] = node;else this._root = node;
    }

    return this;
  }
  function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i) {
      this.remove(data[i]);
    }

    return this;
  }

  function tree_root () {
    return this._root;
  }

  function tree_size () {
    var size = 0;
    this.visit(function (node) {
      if (!node.length) do {
        ++size;
      } while (node = node.next);
    });
    return size;
  }

  function tree_visit (callback) {
    var quads = [],
        q,
        node = this._root,
        child,
        x0,
        y0,
        x1,
        y1;
    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));

    while (q = quads.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2,
            ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      }
    }

    return this;
  }

  function tree_visitAfter (callback) {
    var quads = [],
        next = [],
        q;
    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));

    while (q = quads.pop()) {
      var node = q.node;

      if (node.length) {
        var child,
            x0 = q.x0,
            y0 = q.y0,
            x1 = q.x1,
            y1 = q.y1,
            xm = (x0 + x1) / 2,
            ym = (y0 + y1) / 2;
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      }

      next.push(q);
    }

    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }

    return this;
  }

  function defaultX(d) {
    return d[0];
  }
  function tree_x (_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }

  function defaultY(d) {
    return d[1];
  }
  function tree_y (_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }

  function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }

  function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
  }

  function leaf_copy(leaf) {
    var copy = {
      data: leaf.data
    },
        next = copy;

    while (leaf = leaf.next) {
      next = next.next = {
        data: leaf.data
      };
    }

    return copy;
  }

  var treeProto = quadtree.prototype = Quadtree.prototype;

  treeProto.copy = function () {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
        node = this._root,
        nodes,
        child;
    if (!node) return copy;
    if (!node.length) return copy._root = leaf_copy(node), copy;
    nodes = [{
      source: node,
      target: copy._root = new Array(4)
    }];

    while (node = nodes.pop()) {
      for (var i = 0; i < 4; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({
            source: child,
            target: node.target[i] = new Array(4)
          });else node.target[i] = leaf_copy(child);
        }
      }
    }

    return copy;
  };

  treeProto.add = tree_add;
  treeProto.addAll = addAll;
  treeProto.cover = tree_cover;
  treeProto.data = tree_data;
  treeProto.extent = tree_extent;
  treeProto.find = tree_find;
  treeProto.remove = tree_remove;
  treeProto.removeAll = removeAll;
  treeProto.root = tree_root;
  treeProto.size = tree_size;
  treeProto.visit = tree_visit;
  treeProto.visitAfter = tree_visitAfter;
  treeProto.x = tree_x;
  treeProto.y = tree_y;

  function constant$4 (x) {
    return function () {
      return x;
    };
  }

  function jiggle () {
    return (Math.random() - 0.5) * 1e-6;
  }

  function x$2(d) {
    return d.x + d.vx;
  }

  function y$2(d) {
    return d.y + d.vy;
  }

  function forceCollide (radius) {
    var nodes,
        radii,
        strength = 1,
        iterations = 1;
    if (typeof radius !== "function") radius = constant$4(radius == null ? 1 : +radius);

    function force() {
      var i,
          n = nodes.length,
          tree,
          node,
          xi,
          yi,
          ri,
          ri2;

      for (var k = 0; k < iterations; ++k) {
        tree = quadtree(nodes, x$2, y$2).visitAfter(prepare);

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          ri = radii[node.index], ri2 = ri * ri;
          xi = node.x + node.vx;
          yi = node.y + node.vy;
          tree.visit(apply);
        }
      }

      function apply(quad, x0, y0, x1, y1) {
        var data = quad.data,
            rj = quad.r,
            r = ri + rj;

        if (data) {
          if (data.index > node.index) {
            var x = xi - data.x - data.vx,
                y = yi - data.y - data.vy,
                l = x * x + y * y;

            if (l < r * r) {
              if (x === 0) x = jiggle(), l += x * x;
              if (y === 0) y = jiggle(), l += y * y;
              l = (r - (l = Math.sqrt(l))) / l * strength;
              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
              node.vy += (y *= l) * r;
              data.vx -= x * (r = 1 - r);
              data.vy -= y * r;
            }
          }

          return;
        }

        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
      }
    }

    function prepare(quad) {
      if (quad.data) return quad.r = radii[quad.data.index];

      for (var i = quad.r = 0; i < 4; ++i) {
        if (quad[i] && quad[i].r > quad.r) {
          quad.r = quad[i].r;
        }
      }
    }

    function initialize() {
      if (!nodes) return;
      var i,
          n = nodes.length,
          node;
      radii = new Array(n);

      for (i = 0; i < n; ++i) {
        node = nodes[i], radii[node.index] = +radius(node, i, nodes);
      }
    }

    force.initialize = function (_) {
      nodes = _;
      initialize();
    };

    force.iterations = function (_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };

    force.strength = function (_) {
      return arguments.length ? (strength = +_, force) : strength;
    };

    force.radius = function (_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : radius;
    };

    return force;
  }

  function index(d) {
    return d.index;
  }

  function find$2(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("missing: " + nodeId);
    return node;
  }

  function forceLink (links) {
    var id = index,
        strength = defaultStrength,
        strengths,
        distance = constant$4(30),
        distances,
        nodes,
        count,
        bias,
        iterations = 1;
    if (links == null) links = [];

    function defaultStrength(link) {
      return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }

    function force(alpha) {
      for (var k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
          link = links[i], source = link.source, target = link.target;
          x = target.x + target.vx - source.x - source.vx || jiggle();
          y = target.y + target.vy - source.y - source.vy || jiggle();
          l = Math.sqrt(x * x + y * y);
          l = (l - distances[i]) / l * alpha * strengths[i];
          x *= l, y *= l;
          target.vx -= x * (b = bias[i]);
          target.vy -= y * b;
          source.vx += x * (b = 1 - b);
          source.vy += y * b;
        }
      }
    }

    function initialize() {
      if (!nodes) return;
      var i,
          n = nodes.length,
          m = links.length,
          nodeById = new Map(nodes.map(function (d, i) {
        return [id(d, i, nodes), d];
      })),
          link;

      for (i = 0, count = new Array(n); i < m; ++i) {
        link = links[i], link.index = i;
        if (_typeof(link.source) !== "object") link.source = find$2(nodeById, link.source);
        if (_typeof(link.target) !== "object") link.target = find$2(nodeById, link.target);
        count[link.source.index] = (count[link.source.index] || 0) + 1;
        count[link.target.index] = (count[link.target.index] || 0) + 1;
      }

      for (i = 0, bias = new Array(m); i < m; ++i) {
        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
      }

      strengths = new Array(m), initializeStrength();
      distances = new Array(m), initializeDistance();
    }

    function initializeStrength() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
      }
    }

    function initializeDistance() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
      }
    }

    force.initialize = function (_) {
      nodes = _;
      initialize();
    };

    force.links = function (_) {
      return arguments.length ? (links = _, initialize(), force) : links;
    };

    force.id = function (_) {
      return arguments.length ? (id = _, force) : id;
    };

    force.iterations = function (_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };

    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initializeStrength(), force) : strength;
    };

    force.distance = function (_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant$4(+_), initializeDistance(), force) : distance;
    };

    return force;
  }

  var noop$4 = {
    value: function value() {}
  };

  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
      _[t] = [];
    }

    return new Dispatch(_);
  }

  function Dispatch(_) {
    this._ = _;
  }

  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function (t) {
      var name = "",
          i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
      return {
        type: t,
        name: name
      };
    });
  }

  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function on(typename, callback) {
      var _ = this._,
          T = parseTypenames(typename + "", _),
          t,
          i = -1,
          n = T.length; // If no callback was specified, return the callback of the given type and name.

      if (arguments.length < 2) {
        while (++i < n) {
          if ((t = (typename = T[i]).type) && (t = get$5(_[t], typename.name))) return t;
        }

        return;
      } // If a type was specified, set the callback for the given type and name.
      // Otherwise, if a null callback was specified, remove callbacks of the given name.


      if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

      while (++i < n) {
        if (t = (typename = T[i]).type) _[t] = set$2(_[t], typename.name, callback);else if (callback == null) for (t in _) {
          _[t] = set$2(_[t], typename.name, null);
        }
      }

      return this;
    },
    copy: function copy() {
      var copy = {},
          _ = this._;

      for (var t in _) {
        copy[t] = _[t].slice();
      }

      return new Dispatch(copy);
    },
    call: function call(type, that) {
      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
        args[i] = arguments[i + 2];
      }
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

      for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
        t[i].value.apply(that, args);
      }
    },
    apply: function apply(type, that, args) {
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
        t[i].value.apply(that, args);
      }
    }
  };

  function get$5(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value;
      }
    }
  }

  function set$2(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        type[i] = noop$4, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }

    if (callback != null) type.push({
      name: name,
      value: callback
    });
    return type;
  }

  var frame = 0,
      // is an animation frame pending?
  timeout = 0,
      // is a timeout pending?
  interval = 0,
      // are any timers active?
  pokeDelay = 1000,
      // how frequently we check for clock skew
  taskHead,
      taskTail,
      clockLast = 0,
      clockNow = 0,
      clockSkew = 0,
      clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
      setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
    setTimeout(f, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }

  function clearNow() {
    clockNow = 0;
  }

  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function restart(callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

      if (!this._next && taskTail !== this) {
        if (taskTail) taskTail._next = this;else taskHead = this;
        taskTail = this;
      }

      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function stop() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush() {
    now(); // Get the current time, if not already set.

    ++frame; // Pretend we’ve set an alarm, if we haven’t already.

    var t = taskHead,
        e;

    while (t) {
      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
      t = t._next;
    }

    --frame;
  }

  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;

    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }

  function poke() {
    var now = clock.now(),
        delay = now - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
  }

  function nap() {
    var t0,
        t1 = taskHead,
        t2,
        time = Infinity;

    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }

    taskTail = t0;
    sleep(time);
  }

  function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.

    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

    if (delay > 24) {
      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval) interval = clearInterval(interval);
    } else {
      if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  function interval$1 (callback, delay, time) {
    var t = new Timer(),
        total = delay;
    if (delay == null) return t.restart(callback, delay, time), t;
    delay = +delay, time = time == null ? now() : +time;
    t.restart(function tick(elapsed) {
      elapsed += total;
      t.restart(tick, total += delay, time);
      callback(elapsed);
    }, delay, time);
    return t;
  }

  function x$3(d) {
    return d.x;
  }
  function y$3(d) {
    return d.y;
  }
  var initialRadius = 10,
      initialAngle = Math.PI * (3 - Math.sqrt(5));
  function forceSimulation (_nodes) {
    var simulation,
        _alpha = 1,
        _alphaMin = 0.001,
        _alphaDecay = 1 - Math.pow(_alphaMin, 1 / 300),
        _alphaTarget = 0,
        _velocityDecay = 0.6,
        forces = new Map(),
        stepper = timer(step),
        event = dispatch("tick", "end");

    if (_nodes == null) _nodes = [];

    function step() {
      tick();
      event.call("tick", simulation);

      if (_alpha < _alphaMin) {
        stepper.stop();
        event.call("end", simulation);
      }
    }

    function tick(iterations) {
      var i,
          n = _nodes.length,
          node;
      if (iterations === undefined) iterations = 1;

      for (var k = 0; k < iterations; ++k) {
        _alpha += (_alphaTarget - _alpha) * _alphaDecay;
        forces.forEach(function (force) {
          force(_alpha);
        });

        for (i = 0; i < n; ++i) {
          node = _nodes[i];
          if (node.fx == null) node.x += node.vx *= _velocityDecay;else node.x = node.fx, node.vx = 0;
          if (node.fy == null) node.y += node.vy *= _velocityDecay;else node.y = node.fy, node.vy = 0;
        }
      }

      return simulation;
    }

    function initializeNodes() {
      for (var i = 0, n = _nodes.length, node; i < n; ++i) {
        node = _nodes[i], node.index = i;
        if (node.fx != null) node.x = node.fx;
        if (node.fy != null) node.y = node.fy;

        if (isNaN(node.x) || isNaN(node.y)) {
          var radius = initialRadius * Math.sqrt(i),
              angle = i * initialAngle;
          node.x = radius * Math.cos(angle);
          node.y = radius * Math.sin(angle);
        }

        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0;
        }
      }
    }

    function initializeForce(force) {
      if (force.initialize) force.initialize(_nodes);
      return force;
    }

    initializeNodes();
    return simulation = {
      tick: tick,
      restart: function restart() {
        return stepper.restart(step), simulation;
      },
      stop: function stop() {
        return stepper.stop(), simulation;
      },
      nodes: function nodes(_) {
        return arguments.length ? (_nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : _nodes;
      },
      alpha: function alpha(_) {
        return arguments.length ? (_alpha = +_, simulation) : _alpha;
      },
      alphaMin: function alphaMin(_) {
        return arguments.length ? (_alphaMin = +_, simulation) : _alphaMin;
      },
      alphaDecay: function alphaDecay(_) {
        return arguments.length ? (_alphaDecay = +_, simulation) : +_alphaDecay;
      },
      alphaTarget: function alphaTarget(_) {
        return arguments.length ? (_alphaTarget = +_, simulation) : _alphaTarget;
      },
      velocityDecay: function velocityDecay(_) {
        return arguments.length ? (_velocityDecay = 1 - _, simulation) : 1 - _velocityDecay;
      },
      force: function force(name, _) {
        return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
      },
      find: function find(x, y, radius) {
        var i = 0,
            n = _nodes.length,
            dx,
            dy,
            d2,
            node,
            closest;
        if (radius == null) radius = Infinity;else radius *= radius;

        for (i = 0; i < n; ++i) {
          node = _nodes[i];
          dx = x - node.x;
          dy = y - node.y;
          d2 = dx * dx + dy * dy;
          if (d2 < radius) closest = node, radius = d2;
        }

        return closest;
      },
      on: function on(name, _) {
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
      }
    };
  }

  function forceManyBody () {
    var nodes,
        node,
        alpha,
        strength = constant$4(-30),
        strengths,
        distanceMin2 = 1,
        distanceMax2 = Infinity,
        theta2 = 0.81;

    function force(_) {
      var i,
          n = nodes.length,
          tree = quadtree(nodes, x$3, y$3).visitAfter(accumulate);

      for (alpha = _, i = 0; i < n; ++i) {
        node = nodes[i], tree.visit(apply);
      }
    }

    function initialize() {
      if (!nodes) return;
      var i,
          n = nodes.length,
          node;
      strengths = new Array(n);

      for (i = 0; i < n; ++i) {
        node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
      }
    }

    function accumulate(quad) {
      var strength = 0,
          q,
          c,
          weight = 0,
          x,
          y,
          i; // For internal nodes, accumulate forces from child quadrants.

      if (quad.length) {
        for (x = y = i = 0; i < 4; ++i) {
          if ((q = quad[i]) && (c = Math.abs(q.value))) {
            strength += q.value, weight += c, x += c * q.x, y += c * q.y;
          }
        }

        quad.x = x / weight;
        quad.y = y / weight;
      } // For leaf nodes, accumulate forces from coincident quadrants.
      else {
          q = quad;
          q.x = q.data.x;
          q.y = q.data.y;

          do {
            strength += strengths[q.data.index];
          } while (q = q.next);
        }

      quad.value = strength;
    }

    function apply(quad, x1, _, x2) {
      if (!quad.value) return true;
      var x = quad.x - node.x,
          y = quad.y - node.y,
          w = x2 - x1,
          l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
      // Limit forces for very close nodes; randomize direction if coincident.

      if (w * w / theta2 < l) {
        if (l < distanceMax2) {
          if (x === 0) x = jiggle(), l += x * x;
          if (y === 0) y = jiggle(), l += y * y;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
          node.vx += x * quad.value * alpha / l;
          node.vy += y * quad.value * alpha / l;
        }

        return true;
      } // Otherwise, process points directly.
      else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


      if (quad.data !== node || quad.next) {
        if (x === 0) x = jiggle(), l += x * x;
        if (y === 0) y = jiggle(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
      }

      do {
        if (quad.data !== node) {
          w = strengths[quad.data.index] * alpha / l;
          node.vx += x * w;
          node.vy += y * w;
        }
      } while (quad = quad.next);
    }

    force.initialize = function (_) {
      nodes = _;
      initialize();
    };

    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
    };

    force.distanceMin = function (_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };

    force.distanceMax = function (_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };

    force.theta = function (_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };

    return force;
  }

  function forceX (x) {
    var strength = constant$4(0.1),
        nodes,
        strengths,
        xz;
    if (typeof x !== "function") x = constant$4(x == null ? 0 : +x);

    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
      }
    }

    function initialize() {
      if (!nodes) return;
      var i,
          n = nodes.length;
      strengths = new Array(n);
      xz = new Array(n);

      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }

    force.initialize = function (_) {
      nodes = _;
      initialize();
    };

    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
    };

    force.x = function (_) {
      return arguments.length ? (x = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : x;
    };

    return force;
  }

  function forceY (y) {
    var strength = constant$4(0.1),
        nodes,
        strengths,
        yz;
    if (typeof y !== "function") y = constant$4(y == null ? 0 : +y);

    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
      }
    }

    function initialize() {
      if (!nodes) return;
      var i,
          n = nodes.length;
      strengths = new Array(n);
      yz = new Array(n);

      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }

    force.initialize = function (_) {
      nodes = _;
      initialize();
    };

    force.strength = function (_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
    };

    force.y = function (_) {
      return arguments.length ? (y = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : y;
    };

    return force;
  }

  var ForceMap = {
    center: forceCenter,
    collide: forceCollide,
    nbody: forceManyBody,
    link: forceLink,
    x: forceX,
    y: forceY
  };
  var Forces = 'forces',
      ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],
      ForceConfig = ['static', 'iterations'],
      ForceOutput = ['x', 'y', 'vx', 'vy'];
  /**
   * Force simulation layout.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<object>} params.forces - The forces to apply.
   */

  function Force(params) {
    Transform$1.call(this, null, params);
  }
  Force.Definition = {
    "type": "Force",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "static",
      "type": "boolean",
      "default": false
    }, {
      "name": "restart",
      "type": "boolean",
      "default": false
    }, {
      "name": "iterations",
      "type": "number",
      "default": 300
    }, {
      "name": "alpha",
      "type": "number",
      "default": 1
    }, {
      "name": "alphaMin",
      "type": "number",
      "default": 0.001
    }, {
      "name": "alphaTarget",
      "type": "number",
      "default": 0
    }, {
      "name": "velocityDecay",
      "type": "number",
      "default": 0.4
    }, {
      "name": "forces",
      "type": "param",
      "array": true,
      "params": [{
        "key": {
          "force": "center"
        },
        "params": [{
          "name": "x",
          "type": "number",
          "default": 0
        }, {
          "name": "y",
          "type": "number",
          "default": 0
        }]
      }, {
        "key": {
          "force": "collide"
        },
        "params": [{
          "name": "radius",
          "type": "number",
          "expr": true
        }, {
          "name": "strength",
          "type": "number",
          "default": 0.7
        }, {
          "name": "iterations",
          "type": "number",
          "default": 1
        }]
      }, {
        "key": {
          "force": "nbody"
        },
        "params": [{
          "name": "strength",
          "type": "number",
          "default": -30
        }, {
          "name": "theta",
          "type": "number",
          "default": 0.9
        }, {
          "name": "distanceMin",
          "type": "number",
          "default": 1
        }, {
          "name": "distanceMax",
          "type": "number"
        }]
      }, {
        "key": {
          "force": "link"
        },
        "params": [{
          "name": "links",
          "type": "data"
        }, {
          "name": "id",
          "type": "field"
        }, {
          "name": "distance",
          "type": "number",
          "default": 30,
          "expr": true
        }, {
          "name": "strength",
          "type": "number",
          "expr": true
        }, {
          "name": "iterations",
          "type": "number",
          "default": 1
        }]
      }, {
        "key": {
          "force": "x"
        },
        "params": [{
          "name": "strength",
          "type": "number",
          "default": 0.1
        }, {
          "name": "x",
          "type": "field"
        }]
      }, {
        "key": {
          "force": "y"
        },
        "params": [{
          "name": "strength",
          "type": "number",
          "default": 0.1
        }, {
          "name": "y",
          "type": "field"
        }]
      }]
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "modify": false,
      "default": ForceOutput
    }]
  };
  var prototype$1d = inherits(Force, Transform$1);

  prototype$1d.transform = function (_, pulse) {
    var sim = this.value,
        change = pulse.changed(pulse.ADD_REM),
        params = _.modified(ForceParams),
        iters = _.iterations || 300; // configure simulation


    if (!sim) {
      this.value = sim = simulation(pulse.source, _);
      sim.on('tick', rerun(pulse.dataflow, this));

      if (!_.static) {
        change = true;
        sim.tick(); // ensure we run on init
      }

      pulse.modifies('index');
    } else {
      if (change) {
        pulse.modifies('index');
        sim.nodes(pulse.source);
      }

      if (params || pulse.changed(pulse.MOD)) {
        setup(sim, _, 0, pulse);
      }
    } // run simulation


    if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {
      sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));

      if (_.static) {
        for (sim.stop(); --iters >= 0;) {
          sim.tick();
        }
      } else {
        if (sim.stopped()) sim.restart();
        if (!change) return pulse.StopPropagation; // defer to sim ticks
      }
    }

    return this.finish(_, pulse);
  };

  prototype$1d.finish = function (_, pulse) {
    var dataflow = pulse.dataflow; // inspect dependencies, touch link source data

    for (var args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {
      arg = args[j];

      if (arg.name !== Forces || arg.op._argval.force !== 'link') {
        continue;
      }

      for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {
        if (ops[i].name === 'links' && (op = ops[i].op.source)) {
          dataflow.pulse(op, dataflow.changeset().reflow());
          break;
        }
      }
    } // reflow all nodes


    return pulse.reflow(_.modified()).modifies(ForceOutput);
  };

  function rerun(df, op) {
    return function () {
      df.touch(op).run();
    };
  }

  function simulation(nodes, _) {
    var sim = forceSimulation(nodes),
        stopped = false,
        stop = sim.stop,
        restart = sim.restart;

    sim.stopped = function () {
      return stopped;
    };

    sim.restart = function () {
      stopped = false;
      return restart();
    };

    sim.stop = function () {
      stopped = true;
      return stop();
    };

    return setup(sim, _, true).on('end', function () {
      stopped = true;
    });
  }

  function setup(sim, _, init, pulse) {
    var f = array(_.forces),
        i,
        n,
        p,
        name;

    for (i = 0, n = ForceParams.length; i < n; ++i) {
      p = ForceParams[i];
      if (p !== Forces && _.modified(p)) sim[p](_[p]);
    }

    for (i = 0, n = f.length; i < n; ++i) {
      name = Forces + i;
      p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;
      if (p) sim.force(name, p);
    }

    for (n = sim.numForces || 0; i < n; ++i) {
      sim.force(Forces + i, null); // remove
    }

    sim.numForces = f.length;
    return sim;
  }

  function modified(f, pulse) {
    var k, v;

    for (k in f) {
      if (isFunction(v = f[k]) && pulse.modified(accessorFields(v))) return 1;
    }

    return 0;
  }

  function getForce(_) {
    var f, p;

    if (!hasOwnProperty$1(ForceMap, _.force)) {
      error('Unrecognized force: ' + _.force);
    }

    f = ForceMap[_.force]();

    for (p in _) {
      if (isFunction(f[p])) setForceParam(f[p], _[p], _);
    }

    return f;
  }

  function setForceParam(f, v, _) {
    f(isFunction(v) ? function (d) {
      return v(d, _);
    } : v);
  }



  var force = /*#__PURE__*/Object.freeze({
    __proto__: null,
    force: Force
  });

  // Build lookup table mapping tuple keys to tree node instances
  function lookup$4 (tree, key, filter) {
    var map = {};
    tree.each(function (node) {
      var t = node.data;
      if (filter(t)) map[key(t)] = node;
    });
    tree.lookup = map;
    return tree;
  }

  function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
  }

  function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
  }

  function meanXReduce(x, c) {
    return x + c.x;
  }

  function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
  }

  function maxYReduce(y, c) {
    return Math.max(y, c.y);
  }

  function leafLeft(node) {
    var children;

    while (children = node.children) {
      node = children[0];
    }

    return node;
  }

  function leafRight(node) {
    var children;

    while (children = node.children) {
      node = children[children.length - 1];
    }

    return node;
  }

  function cluster () {
    var separation = defaultSeparation,
        dx = 1,
        dy = 1,
        nodeSize = false;

    function cluster(root) {
      var previousNode,
          x = 0; // First walk, computing the initial x & y values.

      root.eachAfter(function (node) {
        var children = node.children;

        if (children) {
          node.x = meanX(children);
          node.y = maxY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = leafLeft(root),
          right = leafRight(root),
          x0 = left.x - separation(left, right) / 2,
          x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

      return root.eachAfter(nodeSize ? function (node) {
        node.x = (node.x - root.x) * dx;
        node.y = (root.y - node.y) * dy;
      } : function (node) {
        node.x = (node.x - x0) / (x1 - x0) * dx;
        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
      });
    }

    cluster.separation = function (x) {
      return arguments.length ? (separation = x, cluster) : separation;
    };

    cluster.size = function (x) {
      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
    };

    cluster.nodeSize = function (x) {
      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
    };

    return cluster;
  }

  function count(node) {
    var sum = 0,
        children = node.children,
        i = children && children.length;
    if (!i) sum = 1;else while (--i >= 0) {
      sum += children[i].value;
    }
    node.value = sum;
  }

  function node_count () {
    return this.eachAfter(count);
  }

  function node_each (callback) {
    var node = this,
        current,
        next = [node],
        children,
        i,
        n;

    do {
      current = next.reverse(), next = [];

      while (node = current.pop()) {
        callback(node), children = node.children;
        if (children) for (i = 0, n = children.length; i < n; ++i) {
          next.push(children[i]);
        }
      }
    } while (next.length);

    return this;
  }

  function node_eachBefore (callback) {
    var node = this,
        nodes = [node],
        children,
        i;

    while (node = nodes.pop()) {
      callback(node), children = node.children;
      if (children) for (i = children.length - 1; i >= 0; --i) {
        nodes.push(children[i]);
      }
    }

    return this;
  }

  function node_eachAfter (callback) {
    var node = this,
        nodes = [node],
        next = [],
        children,
        i,
        n;

    while (node = nodes.pop()) {
      next.push(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        nodes.push(children[i]);
      }
    }

    while (node = next.pop()) {
      callback(node);
    }

    return this;
  }

  function node_sum (value) {
    return this.eachAfter(function (node) {
      var sum = +value(node.data) || 0,
          children = node.children,
          i = children && children.length;

      while (--i >= 0) {
        sum += children[i].value;
      }

      node.value = sum;
    });
  }

  function node_sort (compare) {
    return this.eachBefore(function (node) {
      if (node.children) {
        node.children.sort(compare);
      }
    });
  }

  function node_path (end) {
    var start = this,
        ancestor = leastCommonAncestor(start, end),
        nodes = [start];

    while (start !== ancestor) {
      start = start.parent;
      nodes.push(start);
    }

    var k = nodes.length;

    while (end !== ancestor) {
      nodes.splice(k, 0, end);
      end = end.parent;
    }

    return nodes;
  }

  function leastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = a.ancestors(),
        bNodes = b.ancestors(),
        c = null;
    a = aNodes.pop();
    b = bNodes.pop();

    while (a === b) {
      c = a;
      a = aNodes.pop();
      b = bNodes.pop();
    }

    return c;
  }

  function node_ancestors () {
    var node = this,
        nodes = [node];

    while (node = node.parent) {
      nodes.push(node);
    }

    return nodes;
  }

  function node_descendants () {
    var nodes = [];
    this.each(function (node) {
      nodes.push(node);
    });
    return nodes;
  }

  function node_leaves () {
    var leaves = [];
    this.eachBefore(function (node) {
      if (!node.children) {
        leaves.push(node);
      }
    });
    return leaves;
  }

  function node_links () {
    var root = this,
        links = [];
    root.each(function (node) {
      if (node !== root) {
        // Don’t include the root’s parent, if any.
        links.push({
          source: node.parent,
          target: node
        });
      }
    });
    return links;
  }

  function hierarchy(data, children) {
    var root = new Node(data),
        valued = +data.value && (root.value = data.value),
        node,
        nodes = [root],
        child,
        childs,
        i,
        n;
    if (children == null) children = defaultChildren;

    while (node = nodes.pop()) {
      if (valued) node.value = +node.data.value;

      if ((childs = children(node.data)) && (n = childs.length)) {
        node.children = new Array(n);

        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = node.children[i] = new Node(childs[i]));
          child.parent = node;
          child.depth = node.depth + 1;
        }
      }
    }

    return root.eachBefore(computeHeight);
  }

  function node_copy() {
    return hierarchy(this).eachBefore(copyData);
  }

  function defaultChildren(d) {
    return d.children;
  }

  function copyData(node) {
    node.data = node.data.data;
  }

  function computeHeight(node) {
    var height = 0;

    do {
      node.height = height;
    } while ((node = node.parent) && node.height < ++height);
  }
  function Node(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
  }
  Node.prototype = hierarchy.prototype = {
    constructor: Node,
    count: node_count,
    each: node_each,
    eachAfter: node_eachAfter,
    eachBefore: node_eachBefore,
    sum: node_sum,
    sort: node_sort,
    path: node_path,
    ancestors: node_ancestors,
    descendants: node_descendants,
    leaves: node_leaves,
    links: node_links,
    copy: node_copy
  };

  var slice$1 = Array.prototype.slice;
  function shuffle(array) {
    var m = array.length,
        t,
        i;

    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m];
      array[m] = array[i];
      array[i] = t;
    }

    return array;
  }

  function enclose (circles) {
    var i = 0,
        n = (circles = shuffle(slice$1.call(circles))).length,
        B = [],
        p,
        e;

    while (i < n) {
      p = circles[i];
      if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
    }

    return e;
  }

  function extendBasis(B, p) {
    var i, j;
    if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

    for (i = 0; i < B.length; ++i) {
      if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
        return [B[i], p];
      }
    } // If we get here then B must have at least two elements.


    for (i = 0; i < B.length - 1; ++i) {
      for (j = i + 1; j < B.length; ++j) {
        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
          return [B[i], B[j], p];
        }
      }
    } // If we get here then something is very wrong.


    throw new Error();
  }

  function enclosesNot(a, b) {
    var dr = a.r - b.r,
        dx = b.x - a.x,
        dy = b.y - a.y;
    return dr < 0 || dr * dr < dx * dx + dy * dy;
  }

  function enclosesWeak(a, b) {
    var dr = a.r - b.r + 1e-6,
        dx = b.x - a.x,
        dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
  }

  function enclosesWeakAll(a, B) {
    for (var i = 0; i < B.length; ++i) {
      if (!enclosesWeak(a, B[i])) {
        return false;
      }
    }

    return true;
  }

  function encloseBasis(B) {
    switch (B.length) {
      case 1:
        return encloseBasis1(B[0]);

      case 2:
        return encloseBasis2(B[0], B[1]);

      case 3:
        return encloseBasis3(B[0], B[1], B[2]);
    }
  }

  function encloseBasis1(a) {
    return {
      x: a.x,
      y: a.y,
      r: a.r
    };
  }

  function encloseBasis2(a, b) {
    var x1 = a.x,
        y1 = a.y,
        r1 = a.r,
        x2 = b.x,
        y2 = b.y,
        r2 = b.r,
        x21 = x2 - x1,
        y21 = y2 - y1,
        r21 = r2 - r1,
        l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
      x: (x1 + x2 + x21 / l * r21) / 2,
      y: (y1 + y2 + y21 / l * r21) / 2,
      r: (l + r1 + r2) / 2
    };
  }

  function encloseBasis3(a, b, c) {
    var x1 = a.x,
        y1 = a.y,
        r1 = a.r,
        x2 = b.x,
        y2 = b.y,
        r2 = b.r,
        x3 = c.x,
        y3 = c.y,
        r3 = c.r,
        a2 = x1 - x2,
        a3 = x1 - x3,
        b2 = y1 - y2,
        b3 = y1 - y3,
        c2 = r2 - r1,
        c3 = r3 - r1,
        d1 = x1 * x1 + y1 * y1 - r1 * r1,
        d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
        d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
        ab = a3 * b2 - a2 * b3,
        xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
        xb = (b3 * c2 - b2 * c3) / ab,
        ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
        yb = (a2 * c3 - a3 * c2) / ab,
        A = xb * xb + yb * yb - 1,
        B = 2 * (r1 + xa * xb + ya * yb),
        C = xa * xa + ya * ya - r1 * r1,
        r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
    return {
      x: x1 + xa + xb * r,
      y: y1 + ya + yb * r,
      r: r
    };
  }

  function place(b, a, c) {
    var dx = b.x - a.x,
        x,
        a2,
        dy = b.y - a.y,
        y,
        b2,
        d2 = dx * dx + dy * dy;

    if (d2) {
      a2 = a.r + c.r, a2 *= a2;
      b2 = b.r + c.r, b2 *= b2;

      if (a2 > b2) {
        x = (d2 + b2 - a2) / (2 * d2);
        y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
        c.x = b.x - x * dx - y * dy;
        c.y = b.y - x * dy + y * dx;
      } else {
        x = (d2 + a2 - b2) / (2 * d2);
        y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
        c.x = a.x + x * dx - y * dy;
        c.y = a.y + x * dy + y * dx;
      }
    } else {
      c.x = a.x + c.r;
      c.y = a.y;
    }
  }

  function intersects$1(a, b) {
    var dr = a.r + b.r - 1e-6,
        dx = b.x - a.x,
        dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
  }

  function score(node) {
    var a = node._,
        b = node.next._,
        ab = a.r + b.r,
        dx = (a.x * b.r + b.x * a.r) / ab,
        dy = (a.y * b.r + b.y * a.r) / ab;
    return dx * dx + dy * dy;
  }

  function Node$1(circle) {
    this._ = circle;
    this.next = null;
    this.previous = null;
  }

  function packEnclose(circles) {
    if (!(n = circles.length)) return 0;
    var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

    a = circles[0], a.x = 0, a.y = 0;
    if (!(n > 1)) return a.r; // Place the second circle.

    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
    if (!(n > 2)) return a.r + b.r; // Place the third circle.

    place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
    a.next = c.previous = b;
    b.next = a.previous = c;
    c.next = b.previous = a; // Attempt to place each remaining circle…

    pack: for (i = 3; i < n; ++i) {
      place(a._, b._, c = circles[i]), c = new Node$1(c); // Find the closest intersecting circle on the front-chain, if any.
      // “Closeness” is determined by linear distance along the front-chain.
      // “Ahead” or “behind” is likewise determined by linear distance.

      j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

      do {
        if (sj <= sk) {
          if (intersects$1(j._, c._)) {
            b = j, a.next = b, b.previous = a, --i;
            continue pack;
          }

          sj += j._.r, j = j.next;
        } else {
          if (intersects$1(k._, c._)) {
            a = k, a.next = b, b.previous = a, --i;
            continue pack;
          }

          sk += k._.r, k = k.previous;
        }
      } while (j !== k.next); // Success! Insert the new circle c between a and b.


      c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

      aa = score(a);

      while ((c = c.next) !== b) {
        if ((ca = score(c)) < aa) {
          a = c, aa = ca;
        }
      }

      b = a.next;
    } // Compute the enclosing circle of the front chain.


    a = [b._], c = b;

    while ((c = c.next) !== b) {
      a.push(c._);
    }

    c = enclose(a); // Translate the circles to put the enclosing circle around the origin.

    for (i = 0; i < n; ++i) {
      a = circles[i], a.x -= c.x, a.y -= c.y;
    }

    return c.r;
  }

  function optional(f) {
    return f == null ? null : required(f);
  }
  function required(f) {
    if (typeof f !== "function") throw new Error();
    return f;
  }

  function constantZero() {
    return 0;
  }
  function constant$5 (x) {
    return function () {
      return x;
    };
  }

  function defaultRadius(d) {
    return Math.sqrt(d.value);
  }

  function pack () {
    var radius = null,
        dx = 1,
        dy = 1,
        padding = constantZero;

    function pack(root) {
      root.x = dx / 2, root.y = dy / 2;

      if (radius) {
        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
      } else {
        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
      }

      return root;
    }

    pack.radius = function (x) {
      return arguments.length ? (radius = optional(x), pack) : radius;
    };

    pack.size = function (x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
    };

    pack.padding = function (x) {
      return arguments.length ? (padding = typeof x === "function" ? x : constant$5(+x), pack) : padding;
    };

    return pack;
  }

  function radiusLeaf(radius) {
    return function (node) {
      if (!node.children) {
        node.r = Math.max(0, +radius(node) || 0);
      }
    };
  }

  function packChildren(padding, k) {
    return function (node) {
      if (children = node.children) {
        var children,
            i,
            n = children.length,
            r = padding(node) * k || 0,
            e;
        if (r) for (i = 0; i < n; ++i) {
          children[i].r += r;
        }
        e = packEnclose(children);
        if (r) for (i = 0; i < n; ++i) {
          children[i].r -= r;
        }
        node.r = e + r;
      }
    };
  }

  function translateChild(k) {
    return function (node) {
      var parent = node.parent;
      node.r *= k;

      if (parent) {
        node.x = parent.x + k * node.x;
        node.y = parent.y + k * node.y;
      }
    };
  }

  function roundNode (node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
  }

  function treemapDice (parent, x0, y0, x1, y1) {
    var nodes = parent.children,
        node,
        i = -1,
        n = nodes.length,
        k = parent.value && (x1 - x0) / parent.value;

    while (++i < n) {
      node = nodes[i], node.y0 = y0, node.y1 = y1;
      node.x0 = x0, node.x1 = x0 += node.value * k;
    }
  }

  function partition$4 () {
    var dx = 1,
        dy = 1,
        padding = 0,
        round = false;

    function partition(root) {
      var n = root.height + 1;
      root.x0 = root.y0 = padding;
      root.x1 = dx;
      root.y1 = dy / n;
      root.eachBefore(positionNode(dy, n));
      if (round) root.eachBefore(roundNode);
      return root;
    }

    function positionNode(dy, n) {
      return function (node) {
        if (node.children) {
          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
        }

        var x0 = node.x0,
            y0 = node.y0,
            x1 = node.x1 - padding,
            y1 = node.y1 - padding;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
      };
    }

    partition.round = function (x) {
      return arguments.length ? (round = !!x, partition) : round;
    };

    partition.size = function (x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
    };

    partition.padding = function (x) {
      return arguments.length ? (padding = +x, partition) : padding;
    };

    return partition;
  }

  var keyPrefix = "$",
      // Protect against keys like “__proto__”.
  preroot = {
    depth: -1
  },
      ambiguous = {};

  function defaultId(d) {
    return d.id;
  }

  function defaultParentId(d) {
    return d.parentId;
  }

  function stratify () {
    var id = defaultId,
        parentId = defaultParentId;

    function stratify(data) {
      var d,
          i,
          n = data.length,
          root,
          parent,
          node,
          nodes = new Array(n),
          nodeId,
          nodeKey,
          nodeByKey = {};

      for (i = 0; i < n; ++i) {
        d = data[i], node = nodes[i] = new Node(d);

        if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
          nodeKey = keyPrefix + (node.id = nodeId);
          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
        }
      }

      for (i = 0; i < n; ++i) {
        node = nodes[i], nodeId = parentId(data[i], i, data);

        if (nodeId == null || !(nodeId += "")) {
          if (root) throw new Error("multiple roots");
          root = node;
        } else {
          parent = nodeByKey[keyPrefix + nodeId];
          if (!parent) throw new Error("missing: " + nodeId);
          if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
          if (parent.children) parent.children.push(node);else parent.children = [node];
          node.parent = parent;
        }
      }

      if (!root) throw new Error("no root");
      root.parent = preroot;
      root.eachBefore(function (node) {
        node.depth = node.parent.depth + 1;
        --n;
      }).eachBefore(computeHeight);
      root.parent = null;
      if (n > 0) throw new Error("cycle");
      return root;
    }

    stratify.id = function (x) {
      return arguments.length ? (id = required(x), stratify) : id;
    };

    stratify.parentId = function (x) {
      return arguments.length ? (parentId = required(x), stratify) : parentId;
    };

    return stratify;
  }

  function defaultSeparation$1(a, b) {
    return a.parent === b.parent ? 1 : 2;
  } // function radialSeparation(a, b) {
  //   return (a.parent === b.parent ? 1 : 2) / a.depth;
  // }
  // This function is used to traverse the left contour of a subtree (or
  // subforest). It returns the successor of v on this contour. This successor is
  // either given by the leftmost child of v or by the thread of v. The function
  // returns null if and only if v is on the highest level of its subtree.


  function nextLeft(v) {
    var children = v.children;
    return children ? children[0] : v.t;
  } // This function works analogously to nextLeft.


  function nextRight(v) {
    var children = v.children;
    return children ? children[children.length - 1] : v.t;
  } // Shifts the current subtree rooted at w+. This is done by increasing
  // prelim(w+) and mod(w+) by shift.


  function moveSubtree(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  } // All other shifts, applied to the smaller subtrees between w- and w+, are
  // performed by this function. To prepare the shifts, we have to adjust
  // change(w+), shift(w+), and change(w-).


  function executeShifts(v) {
    var shift = 0,
        change = 0,
        children = v.children,
        i = children.length,
        w;

    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  } // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
  // returns the specified (default) ancestor.


  function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }

  function TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null; // default ancestor

    this.a = this; // ancestor

    this.z = 0; // prelim

    this.m = 0; // mod

    this.c = 0; // change

    this.s = 0; // shift

    this.t = null; // thread

    this.i = i; // number
  }

  TreeNode.prototype = Object.create(Node.prototype);

  function treeRoot(root) {
    var tree = new TreeNode(root, 0),
        node,
        nodes = [tree],
        child,
        children,
        i,
        n;

    while (node = nodes.pop()) {
      if (children = node._.children) {
        node.children = new Array(n = children.length);

        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = node.children[i] = new TreeNode(children[i], i));
          child.parent = node;
        }
      }
    }

    (tree.parent = new TreeNode(null, 0)).children = [tree];
    return tree;
  } // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


  function tree () {
    var separation = defaultSeparation$1,
        dx = 1,
        dy = 1,
        nodeSize = null;

    function tree(root) {
      var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

      t.eachAfter(firstWalk), t.parent.m = -t.z;
      t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

      if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
      // Compute the left-most, right-most, and depth-most nodes for extents.
      else {
          var left = root,
              right = root,
              bottom = root;
          root.eachBefore(function (node) {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
            if (node.depth > bottom.depth) bottom = node;
          });
          var s = left === right ? 1 : separation(left, right) / 2,
              tx = s - left.x,
              kx = dx / (right.x + s + tx),
              ky = dy / (bottom.depth || 1);
          root.eachBefore(function (node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
          });
        }
      return root;
    } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
    // applied recursively to the children of v, as well as the function
    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
    // node v is placed to the midpoint of its outermost children.


    function firstWalk(v) {
      var children = v.children,
          siblings = v.parent.children,
          w = v.i ? siblings[v.i - 1] : null;

      if (children) {
        executeShifts(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;

        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }

      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    } // Computes all real x-coordinates by summing up the modifiers recursively.


    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    } // The core of the algorithm. Here, a new subtree is combined with the
    // previous subtrees. Threads are used to traverse the inside and outside
    // contours of the left and right subtree up to the highest common level. The
    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
    // superscript o means outside and i means inside, the subscript - means left
    // subtree and + means right subtree. For summing up the modifiers along the
    // contour, we use respective variables si+, si-, so-, and so+. Whenever two
    // nodes of the inside contours conflict, we compute the left one of the
    // greatest uncommon ancestors using the function ANCESTOR and call MOVE
    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
    // Finally, we add a new thread (if necessary).


    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v,
            vop = v,
            vim = w,
            vom = vip.parent.children[0],
            sip = vip.m,
            sop = vop.m,
            sim = vim.m,
            som = vom.m,
            shift;

        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
          vom = nextLeft(vom);
          vop = nextRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

          if (shift > 0) {
            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }

          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }

        if (vim && !nextRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }

        if (vip && !nextLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }

      return ancestor;
    }

    function sizeNode(node) {
      node.x *= dx;
      node.y = node.depth * dy;
    }

    tree.separation = function (x) {
      return arguments.length ? (separation = x, tree) : separation;
    };

    tree.size = function (x) {
      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
    };

    tree.nodeSize = function (x) {
      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
    };

    return tree;
  }

  function treemapSlice (parent, x0, y0, x1, y1) {
    var nodes = parent.children,
        node,
        i = -1,
        n = nodes.length,
        k = parent.value && (y1 - y0) / parent.value;

    while (++i < n) {
      node = nodes[i], node.x0 = x0, node.x1 = x1;
      node.y0 = y0, node.y1 = y0 += node.value * k;
    }
  }

  var phi = (1 + Math.sqrt(5)) / 2;
  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
    var rows = [],
        nodes = parent.children,
        row,
        nodeValue,
        i0 = 0,
        i1 = 0,
        n = nodes.length,
        dx,
        dy,
        value = parent.value,
        sumValue,
        minValue,
        maxValue,
        newRatio,
        minRatio,
        alpha,
        beta;

    while (i0 < n) {
      dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

      do {
        sumValue = nodes[i1++].value;
      } while (!sumValue && i1 < n);

      minValue = maxValue = sumValue;
      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
      beta = sumValue * sumValue * alpha;
      minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

      for (; i1 < n; ++i1) {
        sumValue += nodeValue = nodes[i1].value;
        if (nodeValue < minValue) minValue = nodeValue;
        if (nodeValue > maxValue) maxValue = nodeValue;
        beta = sumValue * sumValue * alpha;
        newRatio = Math.max(maxValue / beta, beta / minValue);

        if (newRatio > minRatio) {
          sumValue -= nodeValue;
          break;
        }

        minRatio = newRatio;
      } // Position and record the row orientation.


      rows.push(row = {
        value: sumValue,
        dice: dx < dy,
        children: nodes.slice(i0, i1)
      });
      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
      value -= sumValue, i0 = i1;
    }

    return rows;
  }
  var treemapSquarify = (function custom(ratio) {
    function squarify(parent, x0, y0, x1, y1) {
      squarifyRatio(ratio, parent, x0, y0, x1, y1);
    }

    squarify.ratio = function (x) {
      return custom((x = +x) > 1 ? x : 1);
    };

    return squarify;
  })(phi);

  function treemap () {
    var tile = treemapSquarify,
        round = false,
        dx = 1,
        dy = 1,
        paddingStack = [0],
        paddingInner = constantZero,
        paddingTop = constantZero,
        paddingRight = constantZero,
        paddingBottom = constantZero,
        paddingLeft = constantZero;

    function treemap(root) {
      root.x0 = root.y0 = 0;
      root.x1 = dx;
      root.y1 = dy;
      root.eachBefore(positionNode);
      paddingStack = [0];
      if (round) root.eachBefore(roundNode);
      return root;
    }

    function positionNode(node) {
      var p = paddingStack[node.depth],
          x0 = node.x0 + p,
          y0 = node.y0 + p,
          x1 = node.x1 - p,
          y1 = node.y1 - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;

      if (node.children) {
        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
        x0 += paddingLeft(node) - p;
        y0 += paddingTop(node) - p;
        x1 -= paddingRight(node) - p;
        y1 -= paddingBottom(node) - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        tile(node, x0, y0, x1, y1);
      }
    }

    treemap.round = function (x) {
      return arguments.length ? (round = !!x, treemap) : round;
    };

    treemap.size = function (x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
    };

    treemap.tile = function (x) {
      return arguments.length ? (tile = required(x), treemap) : tile;
    };

    treemap.padding = function (x) {
      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
    };

    treemap.paddingInner = function (x) {
      return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$5(+x), treemap) : paddingInner;
    };

    treemap.paddingOuter = function (x) {
      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
    };

    treemap.paddingTop = function (x) {
      return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$5(+x), treemap) : paddingTop;
    };

    treemap.paddingRight = function (x) {
      return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$5(+x), treemap) : paddingRight;
    };

    treemap.paddingBottom = function (x) {
      return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$5(+x), treemap) : paddingBottom;
    };

    treemap.paddingLeft = function (x) {
      return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$5(+x), treemap) : paddingLeft;
    };

    return treemap;
  }

  function treemapBinary (parent, x0, y0, x1, y1) {
    var nodes = parent.children,
        i,
        n = nodes.length,
        sum,
        sums = new Array(n + 1);

    for (sums[0] = sum = i = 0; i < n; ++i) {
      sums[i + 1] = sum += nodes[i].value;
    }

    partition(0, n, parent.value, x0, y0, x1, y1);

    function partition(i, j, value, x0, y0, x1, y1) {
      if (i >= j - 1) {
        var node = nodes[i];
        node.x0 = x0, node.y0 = y0;
        node.x1 = x1, node.y1 = y1;
        return;
      }

      var valueOffset = sums[i],
          valueTarget = value / 2 + valueOffset,
          k = i + 1,
          hi = j - 1;

      while (k < hi) {
        var mid = k + hi >>> 1;
        if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
      }

      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
      var valueLeft = sums[k] - valueOffset,
          valueRight = value - valueLeft;

      if (x1 - x0 > y1 - y0) {
        var xk = (x0 * valueRight + x1 * valueLeft) / value;
        partition(i, k, valueLeft, x0, y0, xk, y1);
        partition(k, j, valueRight, xk, y0, x1, y1);
      } else {
        var yk = (y0 * valueRight + y1 * valueLeft) / value;
        partition(i, k, valueLeft, x0, y0, x1, yk);
        partition(k, j, valueRight, x0, yk, x1, y1);
      }
    }
  }

  function treemapSliceDice (parent, x0, y0, x1, y1) {
    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
  }

  var treemapResquarify = (function custom(ratio) {
    function resquarify(parent, x0, y0, x1, y1) {
      if ((rows = parent._squarify) && rows.ratio === ratio) {
        var rows,
            row,
            nodes,
            i,
            j = -1,
            n,
            m = rows.length,
            value = parent.value;

        while (++j < m) {
          row = rows[j], nodes = row.children;

          for (i = row.value = 0, n = nodes.length; i < n; ++i) {
            row.value += nodes[i].value;
          }

          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
          value -= row.value;
        }
      } else {
        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
        rows.ratio = ratio;
      }
    }

    resquarify.ratio = function (x) {
      return custom((x = +x) > 1 ? x : 1);
    };

    return resquarify;
  })(phi);

  /**
   * Nest tuples into a tree structure, grouped by key values.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
   * @param {boolean} [params.generate=false] - A boolean flag indicating if
   *   non-leaf nodes generated by this transform should be included in the
   *   output. The default (false) includes only the input data (leaf nodes)
   *   in the data stream.
   */

  function Nest(params) {
    Transform$1.call(this, null, params);
  }
  Nest.Definition = {
    "type": "Nest",
    "metadata": {
      "treesource": true,
      "changes": true
    },
    "params": [{
      "name": "keys",
      "type": "field",
      "array": true
    }, {
      "name": "generate",
      "type": "boolean"
    }]
  };
  var prototype$1e = inherits(Nest, Transform$1);

  function children(n) {
    return n.values;
  }

  prototype$1e.transform = function (_, pulse) {
    if (!pulse.source) {
      error('Nest transform requires an upstream data source.');
    }

    var gen = _.generate,
        mod = _.modified(),
        out = pulse.clone(),
        tree = this.value;

    if (!tree || mod || pulse.changed()) {
      // collect nodes to remove
      if (tree) {
        tree.each(function (node) {
          if (node.children && isTuple(node.data)) {
            out.rem.push(node.data);
          }
        });
      } // generate new tree structure


      this.value = tree = hierarchy({
        values: array(_.keys).reduce(function (n, k) {
          n.key(k);
          return n;
        }, nest()).entries(out.source)
      }, children); // collect nodes to add

      if (gen) {
        tree.each(function (node) {
          if (node.children) {
            node = ingest(node.data);
            out.add.push(node);
            out.source.push(node);
          }
        });
      } // build lookup table


      lookup$4(tree, tupleid, tupleid);
    }

    out.source.root = tree;
    return out;
  };

  function nest() {
    var keys = [],
        nest;

    function apply(array, depth) {
      if (depth >= keys.length) {
        return array;
      }

      var i = -1,
          n = array.length,
          key = keys[depth++],
          keyValue,
          value,
          valuesByKey = {},
          values,
          result = {};

      while (++i < n) {
        keyValue = key(value = array[i]) + '';

        if (values = valuesByKey[keyValue]) {
          values.push(value);
        } else {
          valuesByKey[keyValue] = [value];
        }
      }

      for (keyValue in valuesByKey) {
        result[keyValue] = apply(valuesByKey[keyValue], depth);
      }

      return result;
    }

    function _entries(map, depth) {
      if (++depth > keys.length) return map;
      var array = [],
          k;

      for (k in map) {
        array.push({
          key: k,
          values: _entries(map[k], depth)
        });
      }

      return array;
    }

    return nest = {
      entries: function entries(array) {
        return _entries(apply(array, 0), 0);
      },
      key: function key(d) {
        keys.push(d);
        return nest;
      }
    };
  }

  /**
   * Abstract class for tree layout.
   * @constructor
   * @param {object} params - The parameters for this operator.
   */

  function HierarchyLayout(params) {
    Transform$1.call(this, null, params);
  }
  var prototype$1f = inherits(HierarchyLayout, Transform$1);

  prototype$1f.transform = function (_, pulse) {
    if (!pulse.source || !pulse.source.root) {
      error(this.constructor.name + ' transform requires a backing tree data source.');
    }

    var layout = this.layout(_.method),
        fields = this.fields,
        root = pulse.source.root,
        as = _.as || fields;
    if (_.field) root.sum(_.field);else root.count();
    if (_.sort) root.sort(stableCompare(_.sort, function (d) {
      return d.data;
    }));
    setParams(layout, this.params, _);

    if (layout.separation) {
      layout.separation(_.separation !== false ? defaultSeparation$2 : one);
    }

    try {
      this.value = layout(root);
    } catch (err) {
      error(err);
    }

    root.each(function (node) {
      setFields(node, fields, as);
    });
    return pulse.reflow(_.modified()).modifies(as).modifies('leaf');
  };

  function setParams(layout, params, _) {
    for (var p, i = 0, n = params.length; i < n; ++i) {
      p = params[i];
      if (p in _) layout[p](_[p]);
    }
  }

  function setFields(node, fields, as) {
    var t = node.data;

    for (var i = 0, n = fields.length - 1; i < n; ++i) {
      t[as[i]] = node[fields[i]];
    }

    t[as[n]] = node.children ? node.children.length : 0;
  }

  function defaultSeparation$2(a, b) {
    return a.parent === b.parent ? 1 : 2;
  }

  var Output$1 = ['x', 'y', 'r', 'depth', 'children'];
  /**
   * Packed circle tree layout.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The value field to size nodes.
   */

  function Pack(params) {
    HierarchyLayout.call(this, params);
  }
  Pack.Definition = {
    "type": "Pack",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "padding",
      "type": "number",
      "default": 0
    }, {
      "name": "radius",
      "type": "field",
      "default": null
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$1.length,
      "default": Output$1
    }]
  };
  var prototype$1g = inherits(Pack, HierarchyLayout);
  prototype$1g.layout = pack;
  prototype$1g.params = ['radius', 'size', 'padding'];
  prototype$1g.fields = Output$1;

  var Output$2 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
  /**
   * Partition tree layout.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The value field to size nodes.
   */

  function Partition(params) {
    HierarchyLayout.call(this, params);
  }
  Partition.Definition = {
    "type": "Partition",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "padding",
      "type": "number",
      "default": 0
    }, {
      "name": "round",
      "type": "boolean",
      "default": false
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$2.length,
      "default": Output$2
    }]
  };
  var prototype$1h = inherits(Partition, HierarchyLayout);
  prototype$1h.layout = partition$4;
  prototype$1h.params = ['size', 'round', 'padding'];
  prototype$1h.fields = Output$2;

  /**
   * Stratify a collection of tuples into a tree structure based on
   * id and parent id fields.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.key - Unique key field for each tuple.
   * @param {function(object): *} params.parentKey - Field with key for parent tuple.
   */

  function Stratify(params) {
    Transform$1.call(this, null, params);
  }
  Stratify.Definition = {
    "type": "Stratify",
    "metadata": {
      "treesource": true
    },
    "params": [{
      "name": "key",
      "type": "field",
      "required": true
    }, {
      "name": "parentKey",
      "type": "field",
      "required": true
    }]
  };
  var prototype$1i = inherits(Stratify, Transform$1);

  prototype$1i.transform = function (_, pulse) {
    if (!pulse.source) {
      error('Stratify transform requires an upstream data source.');
    }

    var tree = this.value,
        mod = _.modified(),
        out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),
        run = !this.value || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields); // prevent upstream source pollution


    out.source = out.source.slice();

    if (run) {
      if (out.source.length) {
        tree = lookup$4(stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, truthy);
      } else {
        tree = lookup$4(stratify()([{}]), _.key, _.key);
      }
    }

    out.source.root = this.value = tree;
    return out;
  };

  var Layouts = {
    tidy: tree,
    cluster: cluster
  };
  var Output$3 = ['x', 'y', 'depth', 'children'];
  /**
   * Tree layout. Depending on the method parameter, performs either
   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
   * @constructor
   * @param {object} params - The parameters for this operator.
   */

  function Tree(params) {
    HierarchyLayout.call(this, params);
  }
  Tree.Definition = {
    "type": "Tree",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "method",
      "type": "enum",
      "default": "tidy",
      "values": ["tidy", "cluster"]
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "nodeSize",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "separation",
      "type": "boolean",
      "default": true
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$3.length,
      "default": Output$3
    }]
  };
  var prototype$1j = inherits(Tree, HierarchyLayout);
  /**
   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
   */

  prototype$1j.layout = function (method) {
    var m = method || 'tidy';
    if (hasOwnProperty$1(Layouts, m)) return Layouts[m]();else error('Unrecognized Tree layout method: ' + m);
  };

  prototype$1j.params = ['size', 'nodeSize'];
  prototype$1j.fields = Output$3;

  /**
   * Generate tuples representing links between tree nodes.
   * The resulting tuples will contain 'source' and 'target' fields,
   * which point to parent and child node tuples, respectively.
   * @constructor
   * @param {object} params - The parameters for this operator.
   */

  function TreeLinks(params) {
    Transform$1.call(this, [], params);
  }
  TreeLinks.Definition = {
    "type": "TreeLinks",
    "metadata": {
      "tree": true,
      "generates": true,
      "changes": true
    },
    "params": []
  };
  var prototype$1k = inherits(TreeLinks, Transform$1);

  prototype$1k.transform = function (_, pulse) {
    var links = this.value,
        tree = pulse.source && pulse.source.root,
        out = pulse.fork(pulse.NO_SOURCE),
        lut = {};
    if (!tree) error('TreeLinks transform requires a tree data source.');

    if (pulse.changed(pulse.ADD_REM)) {
      // remove previous links
      out.rem = links; // build lookup table of valid tuples

      pulse.visit(pulse.SOURCE, function (t) {
        lut[tupleid(t)] = 1;
      }); // generate links for all edges incident on valid tuples

      tree.each(function (node) {
        var t = node.data,
            p = node.parent && node.parent.data;

        if (p && lut[tupleid(t)] && lut[tupleid(p)]) {
          out.add.push(ingest({
            source: p,
            target: t
          }));
        }
      });
      this.value = out.add;
    } else if (pulse.changed(pulse.MOD)) {
      // build lookup table of modified tuples
      pulse.visit(pulse.MOD, function (t) {
        lut[tupleid(t)] = 1;
      }); // gather links incident on modified tuples

      links.forEach(function (link) {
        if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {
          out.mod.push(link);
        }
      });
    }

    return out;
  };

  var Tiles = {
    binary: treemapBinary,
    dice: treemapDice,
    slice: treemapSlice,
    slicedice: treemapSliceDice,
    squarify: treemapSquarify,
    resquarify: treemapResquarify
  };
  var Output$4 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];
  /**
   * Treemap layout.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.field - The value field to size nodes.
   */

  function Treemap(params) {
    HierarchyLayout.call(this, params);
  }
  Treemap.Definition = {
    "type": "Treemap",
    "metadata": {
      "tree": true,
      "modifies": true
    },
    "params": [{
      "name": "field",
      "type": "field"
    }, {
      "name": "sort",
      "type": "compare"
    }, {
      "name": "method",
      "type": "enum",
      "default": "squarify",
      "values": ["squarify", "resquarify", "binary", "dice", "slice", "slicedice"]
    }, {
      "name": "padding",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingInner",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingOuter",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingTop",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingRight",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingBottom",
      "type": "number",
      "default": 0
    }, {
      "name": "paddingLeft",
      "type": "number",
      "default": 0
    }, {
      "name": "ratio",
      "type": "number",
      "default": 1.618033988749895
    }, {
      "name": "round",
      "type": "boolean",
      "default": false
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": Output$4.length,
      "default": Output$4
    }]
  };
  var prototype$1l = inherits(Treemap, HierarchyLayout);
  /**
   * Treemap layout generator. Adds 'method' and 'ratio' parameters
   * to configure the underlying tile method.
   */

  prototype$1l.layout = function () {
    var x = treemap();

    x.ratio = function (_) {
      var t = x.tile();
      if (t.ratio) x.tile(t.ratio(_));
    };

    x.method = function (_) {
      if (hasOwnProperty$1(Tiles, _)) x.tile(Tiles[_]);else error('Unrecognized Treemap layout method: ' + _);
    };

    return x;
  };

  prototype$1l.params = ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];
  prototype$1l.fields = Output$4;



  var tree$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    nest: Nest,
    pack: Pack,
    partition: Partition,
    stratify: Stratify,
    tree: Tree,
    treelinks: TreeLinks,
    treemap: Treemap
  });

  function partition$5 (data, groupby) {
    var groups = [],
        get = function get(f) {
      return f(t);
    },
        map,
        i,
        n,
        t,
        k,
        g; // partition data points into stack groups


    if (groupby == null) {
      groups.push(data);
    } else {
      for (map = {}, i = 0, n = data.length; i < n; ++i) {
        t = data[i];
        k = groupby.map(get);
        g = map[k];

        if (!g) {
          map[k] = g = [];
          g.dims = k;
          groups.push(g);
        }

        g.push(t);
      }
    }

    return groups;
  }

  /**
   * Compute locally-weighted regression fits for one or more data groups.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.x - An accessor for the predictor data field.
   * @param {function(object): *} params.y - An accessor for the predicted data field.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
   * @param {number} [params.bandwidth=0.3] - The loess bandwidth.
   */

  function Loess(params) {
    Transform$1.call(this, null, params);
  }
  Loess.Definition = {
    "type": "Loess",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "bandwidth",
      "type": "number",
      "default": 0.3
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }]
  };
  var prototype$1m = inherits(Loess, Transform$1);

  prototype$1m.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var source = pulse.materialize(pulse.SOURCE).source,
          groups = partition$5(source, _.groupby),
          names = (_.groupby || []).map(accessorName),
          m = names.length,
          as = _.as || [accessorName(_.x), accessorName(_.y)],
          values = [];
      groups.forEach(function (g) {
        regressionLoess(g, _.x, _.y, _.bandwidth || 0.3).forEach(function (p) {
          var t = {};

          for (var i = 0; i < m; ++i) {
            t[names[i]] = g.dims[i];
          }

          t[as[0]] = p[0];
          t[as[1]] = p[1];
          values.push(ingest(t));
        });
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  };

  var Methods$1 = {
    linear: regressionLinear,
    log: regressionLog,
    exp: regressionExp,
    pow: regressionPow,
    quad: regressionQuad,
    poly: regressionPoly
  };

  function degreesOfFreedom(method, order) {
    return method === 'poly' ? order : method === 'quad' ? 2 : 1;
  }
  /**
   * Compute regression fits for one or more data groups.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {function(object): *} params.x - An accessor for the predictor data field.
   * @param {function(object): *} params.y - An accessor for the predicted data field.
   * @param {string} [params.method='linear'] - The regression method to apply.
   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
   * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.
   * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.
   */


  function Regression(params) {
    Transform$1.call(this, null, params);
  }
  Regression.Definition = {
    "type": "Regression",
    "metadata": {
      "generates": true
    },
    "params": [{
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "groupby",
      "type": "field",
      "array": true
    }, {
      "name": "method",
      "type": "string",
      "default": "linear",
      "values": Object.keys(Methods$1)
    }, {
      "name": "order",
      "type": "number",
      "default": 3
    }, {
      "name": "extent",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "params",
      "type": "boolean",
      "default": false
    }, {
      "name": "as",
      "type": "string",
      "array": true
    }]
  };
  var prototype$1n = inherits(Regression, Transform$1);

  prototype$1n.transform = function (_, pulse) {
    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

    if (!this.value || pulse.changed() || _.modified()) {
      var source = pulse.materialize(pulse.SOURCE).source,
          groups = partition$5(source, _.groupby),
          names = (_.groupby || []).map(accessorName),
          method = _.method || 'linear',
          order = _.order || 3,
          dof = degreesOfFreedom(method, order),
          as = _.as || [accessorName(_.x), accessorName(_.y)],
          fit = Methods$1[method],
          values = [];
      var domain = _.extent;

      if (!hasOwnProperty$1(Methods$1, method)) {
        error('Invalid regression method: ' + method);
      }

      if (domain != null) {
        if (method === 'log' && domain[0] <= 0) {
          pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');
          domain = null;
        }
      }

      groups.forEach(function (g) {
        var n = g.length;

        if (n <= dof) {
          pulse.dataflow.warn('Skipping regression with more parameters than data points.');
          return;
        }

        var model = fit(g, _.x, _.y, order);

        if (_.params) {
          // if parameter vectors requested return those
          values.push(ingest({
            keys: g.dims,
            coef: model.coef,
            rSquared: model.rSquared
          }));
          return;
        }

        var dom = domain || extent(g, _.x),
            add = function add(p) {
          var t = {};

          for (var i = 0; i < names.length; ++i) {
            t[names[i]] = g.dims[i];
          }

          t[as[0]] = p[0];
          t[as[1]] = p[1];
          values.push(ingest(t));
        };

        if (method === 'linear') {
          // for linear regression we only need the end points
          dom.forEach(function (x) {
            return add([x, model.predict(x)]);
          });
        } else {
          // otherwise return trend line sample points
          sampleCurve(model.predict, dom, 25, 200).forEach(add);
        }
      });
      if (this.value) out.rem = this.value;
      this.value = out.add = out.source = values;
    }

    return out;
  };



  var reg = /*#__PURE__*/Object.freeze({
    __proto__: null,
    loess: Loess,
    regression: Regression
  });

  var EPSILON$2 = Math.pow(2, -52);
  var EDGE_STACK = new Uint32Array(512);

  var Delaunator = /*#__PURE__*/function () {
    _createClass(Delaunator, null, [{
      key: "from",
      value: function from(points) {
        var getX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetX;
        var getY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetY;
        var n = points.length;
        var coords = new Float64Array(n * 2);

        for (var i = 0; i < n; i++) {
          var p = points[i];
          coords[2 * i] = getX(p);
          coords[2 * i + 1] = getY(p);
        }

        return new Delaunator(coords);
      }
    }]);

    function Delaunator(coords) {
      _classCallCheck(this, Delaunator);

      var n = coords.length >> 1;
      if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');
      this.coords = coords; // arrays that will store the triangulation graph

      var maxTriangles = Math.max(2 * n - 5, 0);
      this._triangles = new Uint32Array(maxTriangles * 3);
      this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull

      this._hashSize = Math.ceil(Math.sqrt(n));
      this._hullPrev = new Uint32Array(n); // edge to prev edge

      this._hullNext = new Uint32Array(n); // edge to next edge

      this._hullTri = new Uint32Array(n); // edge to adjacent triangle

      this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash
      // temporary arrays for sorting points

      this._ids = new Uint32Array(n);
      this._dists = new Float64Array(n);
      this.update();
    }

    _createClass(Delaunator, [{
      key: "update",
      value: function update() {
        var coords = this.coords,
            hullPrev = this._hullPrev,
            hullNext = this._hullNext,
            hullTri = this._hullTri,
            hullHash = this._hullHash;
        var n = coords.length >> 1; // populate an array of point indices; calculate input data bbox

        var minX = Infinity;
        var minY = Infinity;
        var maxX = -Infinity;
        var maxY = -Infinity;

        for (var i = 0; i < n; i++) {
          var x = coords[2 * i];
          var y = coords[2 * i + 1];
          if (x < minX) minX = x;
          if (y < minY) minY = y;
          if (x > maxX) maxX = x;
          if (y > maxY) maxY = y;
          this._ids[i] = i;
        }

        var cx = (minX + maxX) / 2;
        var cy = (minY + maxY) / 2;
        var minDist = Infinity;
        var i0, i1, i2; // pick a seed point close to the center

        for (var _i = 0; _i < n; _i++) {
          var d = dist(cx, cy, coords[2 * _i], coords[2 * _i + 1]);

          if (d < minDist) {
            i0 = _i;
            minDist = d;
          }
        }

        var i0x = coords[2 * i0];
        var i0y = coords[2 * i0 + 1];
        minDist = Infinity; // find the point closest to the seed

        for (var _i2 = 0; _i2 < n; _i2++) {
          if (_i2 === i0) continue;

          var _d = dist(i0x, i0y, coords[2 * _i2], coords[2 * _i2 + 1]);

          if (_d < minDist && _d > 0) {
            i1 = _i2;
            minDist = _d;
          }
        }

        var i1x = coords[2 * i1];
        var i1y = coords[2 * i1 + 1];
        var minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two

        for (var _i3 = 0; _i3 < n; _i3++) {
          if (_i3 === i0 || _i3 === i1) continue;
          var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * _i3], coords[2 * _i3 + 1]);

          if (r < minRadius) {
            i2 = _i3;
            minRadius = r;
          }
        }

        var i2x = coords[2 * i2];
        var i2y = coords[2 * i2 + 1];

        if (minRadius === Infinity) {
          // order collinear points by dx (or dy if all x are identical)
          // and return the list as a hull
          for (var _i4 = 0; _i4 < n; _i4++) {
            this._dists[_i4] = coords[2 * _i4] - coords[0] || coords[2 * _i4 + 1] - coords[1];
          }

          quicksort(this._ids, this._dists, 0, n - 1);
          var hull = new Uint32Array(n);
          var j = 0;

          for (var _i5 = 0, d0 = -Infinity; _i5 < n; _i5++) {
            var id = this._ids[_i5];

            if (this._dists[id] > d0) {
              hull[j++] = id;
              d0 = this._dists[id];
            }
          }

          this.hull = hull.subarray(0, j);
          this.triangles = new Uint32Array(0);
          this.halfedges = new Uint32Array(0);
          return;
        } // swap the order of the seed points for counter-clockwise orientation


        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
          var _i6 = i1;
          var _x = i1x;
          var _y = i1y;
          i1 = i2;
          i1x = i2x;
          i1y = i2y;
          i2 = _i6;
          i2x = _x;
          i2y = _y;
        }

        var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
        this._cx = center.x;
        this._cy = center.y;

        for (var _i7 = 0; _i7 < n; _i7++) {
          this._dists[_i7] = dist(coords[2 * _i7], coords[2 * _i7 + 1], center.x, center.y);
        } // sort the points by distance from the seed triangle circumcenter


        quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull

        this._hullStart = i0;
        var hullSize = 3;
        hullNext[i0] = hullPrev[i2] = i1;
        hullNext[i1] = hullPrev[i0] = i2;
        hullNext[i2] = hullPrev[i1] = i0;
        hullTri[i0] = 0;
        hullTri[i1] = 1;
        hullTri[i2] = 2;
        hullHash.fill(-1);
        hullHash[this._hashKey(i0x, i0y)] = i0;
        hullHash[this._hashKey(i1x, i1y)] = i1;
        hullHash[this._hashKey(i2x, i2y)] = i2;
        this.trianglesLen = 0;

        this._addTriangle(i0, i1, i2, -1, -1, -1);

        for (var k = 0, xp, yp; k < this._ids.length; k++) {
          var _i8 = this._ids[k];
          var _x2 = coords[2 * _i8];
          var _y2 = coords[2 * _i8 + 1]; // skip near-duplicate points

          if (k > 0 && Math.abs(_x2 - xp) <= EPSILON$2 && Math.abs(_y2 - yp) <= EPSILON$2) continue;
          xp = _x2;
          yp = _y2; // skip seed triangle points

          if (_i8 === i0 || _i8 === i1 || _i8 === i2) continue; // find a visible edge on the convex hull using edge hash

          var start = 0;

          for (var _j = 0, key = this._hashKey(_x2, _y2); _j < this._hashSize; _j++) {
            start = hullHash[(key + _j) % this._hashSize];
            if (start !== -1 && start !== hullNext[start]) break;
          }

          start = hullPrev[start];
          var e = start,
              q = void 0;

          while (q = hullNext[e], !orient(_x2, _y2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {
            e = q;

            if (e === start) {
              e = -1;
              break;
            }
          }

          if (e === -1) continue; // likely a near-duplicate point; skip it
          // add the first triangle from the point

          var t = this._addTriangle(e, _i8, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition


          hullTri[_i8] = this._legalize(t + 2);
          hullTri[e] = t; // keep track of boundary triangles on the hull

          hullSize++; // walk forward through the hull, adding more triangles and flipping recursively

          var _n = hullNext[e];

          while (q = hullNext[_n], orient(_x2, _y2, coords[2 * _n], coords[2 * _n + 1], coords[2 * q], coords[2 * q + 1])) {
            t = this._addTriangle(_n, _i8, q, hullTri[_i8], -1, hullTri[_n]);
            hullTri[_i8] = this._legalize(t + 2);
            hullNext[_n] = _n; // mark as removed

            hullSize--;
            _n = q;
          } // walk backward from the other side, adding more triangles and flipping


          if (e === start) {
            while (q = hullPrev[e], orient(_x2, _y2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {
              t = this._addTriangle(q, _i8, e, -1, hullTri[e], hullTri[q]);

              this._legalize(t + 2);

              hullTri[q] = t;
              hullNext[e] = e; // mark as removed

              hullSize--;
              e = q;
            }
          } // update the hull indices


          this._hullStart = hullPrev[_i8] = e;
          hullNext[e] = hullPrev[_n] = _i8;
          hullNext[_i8] = _n; // save the two new edges in the hash table

          hullHash[this._hashKey(_x2, _y2)] = _i8;
          hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
        }

        this.hull = new Uint32Array(hullSize);

        for (var _i9 = 0, _e = this._hullStart; _i9 < hullSize; _i9++) {
          this.hull[_i9] = _e;
          _e = hullNext[_e];
        } // trim typed triangle mesh arrays


        this.triangles = this._triangles.subarray(0, this.trianglesLen);
        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
      }
    }, {
      key: "_hashKey",
      value: function _hashKey(x, y) {
        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
      }
    }, {
      key: "_legalize",
      value: function _legalize(a) {
        var triangles = this._triangles,
            halfedges = this._halfedges,
            coords = this.coords;
        var i = 0;
        var ar = 0; // recursion eliminated with a fixed-size stack

        while (true) {
          var b = halfedges[a];
          /* if the pair of triangles doesn't satisfy the Delaunay condition
           * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
           * then do the same check/flip recursively for the new pair of triangles
           *
           *           pl                    pl
           *          /||\                  /  \
           *       al/ || \bl            al/    \a
           *        /  ||  \              /      \
           *       /  a||b  \    flip    /___ar___\
           *     p0\   ||   /p1   =>   p0\---bl---/p1
           *        \  ||  /              \      /
           *       ar\ || /br             b\    /br
           *          \||/                  \  /
           *           pr                    pr
           */

          var a0 = a - a % 3;
          ar = a0 + (a + 2) % 3;

          if (b === -1) {
            // convex hull edge
            if (i === 0) break;
            a = EDGE_STACK[--i];
            continue;
          }

          var b0 = b - b % 3;
          var al = a0 + (a + 1) % 3;
          var bl = b0 + (b + 2) % 3;
          var p0 = triangles[ar];
          var pr = triangles[a];
          var pl = triangles[al];
          var p1 = triangles[bl];
          var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);

          if (illegal) {
            triangles[a] = p1;
            triangles[b] = p0;
            var hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference

            if (hbl === -1) {
              var e = this._hullStart;

              do {
                if (this._hullTri[e] === bl) {
                  this._hullTri[e] = a;
                  break;
                }

                e = this._hullPrev[e];
              } while (e !== this._hullStart);
            }

            this._link(a, hbl);

            this._link(b, halfedges[ar]);

            this._link(ar, bl);

            var br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input

            if (i < EDGE_STACK.length) {
              EDGE_STACK[i++] = br;
            }
          } else {
            if (i === 0) break;
            a = EDGE_STACK[--i];
          }
        }

        return ar;
      }
    }, {
      key: "_link",
      value: function _link(a, b) {
        this._halfedges[a] = b;
        if (b !== -1) this._halfedges[b] = a;
      } // add a new triangle given vertex indices and adjacent half-edge ids

    }, {
      key: "_addTriangle",
      value: function _addTriangle(i0, i1, i2, a, b, c) {
        var t = this.trianglesLen;
        this._triangles[t] = i0;
        this._triangles[t + 1] = i1;
        this._triangles[t + 2] = i2;

        this._link(t, a);

        this._link(t + 1, b);

        this._link(t + 2, c);

        this.trianglesLen += 3;
        return t;
      }
    }]);

    return Delaunator;
  }(); // monotonically increases with real angle, but doesn't need expensive trigonometry

  function pseudoAngle(dx, dy) {
    var p = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
  }

  function dist(ax, ay, bx, by) {
    var dx = ax - bx;
    var dy = ay - by;
    return dx * dx + dy * dy;
  } // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check


  function orientIfSure(px, py, rx, ry, qx, qy) {
    var l = (ry - py) * (qx - px);
    var r = (rx - px) * (qy - py);
    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
  } // a more robust orientation test that's stable in a given triangle (to fix robustness issues)


  function orient(rx, ry, qx, qy, px, py) {
    var sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
    return sign < 0;
  }

  function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    var dx = ax - px;
    var dy = ay - py;
    var ex = bx - px;
    var ey = by - py;
    var fx = cx - px;
    var fy = cy - py;
    var ap = dx * dx + dy * dy;
    var bp = ex * ex + ey * ey;
    var cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
  }

  function circumradius(ax, ay, bx, by, cx, cy) {
    var dx = bx - ax;
    var dy = by - ay;
    var ex = cx - ax;
    var ey = cy - ay;
    var bl = dx * dx + dy * dy;
    var cl = ex * ex + ey * ey;
    var d = 0.5 / (dx * ey - dy * ex);
    var x = (ey * bl - dy * cl) * d;
    var y = (dx * cl - ex * bl) * d;
    return x * x + y * y;
  }

  function circumcenter(ax, ay, bx, by, cx, cy) {
    var dx = bx - ax;
    var dy = by - ay;
    var ex = cx - ax;
    var ey = cy - ay;
    var bl = dx * dx + dy * dy;
    var cl = ex * ex + ey * ey;
    var d = 0.5 / (dx * ey - dy * ex);
    var x = ax + (ey * bl - dy * cl) * d;
    var y = ay + (dx * cl - ex * bl) * d;
    return {
      x: x,
      y: y
    };
  }

  function quicksort(ids, dists, left, right) {
    if (right - left <= 20) {
      for (var i = left + 1; i <= right; i++) {
        var temp = ids[i];
        var tempDist = dists[temp];
        var j = i - 1;

        while (j >= left && dists[ids[j]] > tempDist) {
          ids[j + 1] = ids[j--];
        }

        ids[j + 1] = temp;
      }
    } else {
      var median = left + right >> 1;

      var _i10 = left + 1;

      var _j2 = right;
      swap$2(ids, median, _i10);
      if (dists[ids[left]] > dists[ids[right]]) swap$2(ids, left, right);
      if (dists[ids[_i10]] > dists[ids[right]]) swap$2(ids, _i10, right);
      if (dists[ids[left]] > dists[ids[_i10]]) swap$2(ids, left, _i10);
      var _temp = ids[_i10];
      var _tempDist = dists[_temp];

      while (true) {
        do {
          _i10++;
        } while (dists[ids[_i10]] < _tempDist);

        do {
          _j2--;
        } while (dists[ids[_j2]] > _tempDist);

        if (_j2 < _i10) break;
        swap$2(ids, _i10, _j2);
      }

      ids[left + 1] = ids[_j2];
      ids[_j2] = _temp;

      if (right - _i10 + 1 >= _j2 - left) {
        quicksort(ids, dists, _i10, right);
        quicksort(ids, dists, left, _j2 - 1);
      } else {
        quicksort(ids, dists, left, _j2 - 1);
        quicksort(ids, dists, _i10, right);
      }
    }
  }

  function swap$2(arr, i, j) {
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }

  function defaultGetX(p) {
    return p[0];
  }

  function defaultGetY(p) {
    return p[1];
  }

  var epsilon$5 = 1e-6;

  var Path$1 = /*#__PURE__*/function () {
    function Path() {
      _classCallCheck(this, Path);

      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath

      this._ = "";
    }

    _createClass(Path, [{
      key: "moveTo",
      value: function moveTo(x, y) {
        this._ += "M".concat(this._x0 = this._x1 = +x, ",").concat(this._y0 = this._y1 = +y);
      }
    }, {
      key: "closePath",
      value: function closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      }
    }, {
      key: "lineTo",
      value: function lineTo(x, y) {
        this._ += "L".concat(this._x1 = +x, ",").concat(this._y1 = +y);
      }
    }, {
      key: "arc",
      value: function arc(x, y, r) {
        x = +x, y = +y, r = +r;
        var x0 = x + r;
        var y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += "M".concat(x0, ",").concat(y0);else if (Math.abs(this._x1 - x0) > epsilon$5 || Math.abs(this._y1 - y0) > epsilon$5) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += "A".concat(r, ",").concat(r, ",0,1,1,").concat(x - r, ",").concat(y, "A").concat(r, ",").concat(r, ",0,1,1,").concat(this._x1 = x0, ",").concat(this._y1 = y0);
      }
    }, {
      key: "rect",
      value: function rect(x, y, w, h) {
        this._ += "M".concat(this._x0 = this._x1 = +x, ",").concat(this._y0 = this._y1 = +y, "h").concat(+w, "v").concat(+h, "h").concat(-w, "Z");
      }
    }, {
      key: "value",
      value: function value() {
        return this._ || null;
      }
    }]);

    return Path;
  }();

  var Polygon = /*#__PURE__*/function () {
    function Polygon() {
      _classCallCheck(this, Polygon);

      this._ = [];
    }

    _createClass(Polygon, [{
      key: "moveTo",
      value: function moveTo(x, y) {
        this._.push([x, y]);
      }
    }, {
      key: "closePath",
      value: function closePath() {
        this._.push(this._[0].slice());
      }
    }, {
      key: "lineTo",
      value: function lineTo(x, y) {
        this._.push([x, y]);
      }
    }, {
      key: "value",
      value: function value() {
        return this._.length ? this._ : null;
      }
    }]);

    return Polygon;
  }();

  var Voronoi = /*#__PURE__*/function () {
    function Voronoi(delaunay) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 960, 500],
          _ref2 = _slicedToArray(_ref, 4),
          xmin = _ref2[0],
          ymin = _ref2[1],
          xmax = _ref2[2],
          ymax = _ref2[3];

      _classCallCheck(this, Voronoi);

      if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
      this.delaunay = delaunay;
      this._circumcenters = new Float64Array(delaunay.points.length * 2);
      this.vectors = new Float64Array(delaunay.points.length * 2);
      this.xmax = xmax, this.xmin = xmin;
      this.ymax = ymax, this.ymin = ymin;

      this._init();
    }

    _createClass(Voronoi, [{
      key: "update",
      value: function update() {
        this.delaunay.update();

        this._init();

        return this;
      }
    }, {
      key: "_init",
      value: function _init() {
        var _this$delaunay = this.delaunay,
            points = _this$delaunay.points,
            hull = _this$delaunay.hull,
            triangles = _this$delaunay.triangles,
            vectors = this.vectors; // Compute circumcenters.

        var circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);

        for (var i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
          var t1 = triangles[i] * 2;
          var t2 = triangles[i + 1] * 2;
          var t3 = triangles[i + 2] * 2;
          var _x = points[t1];
          var _y = points[t1 + 1];
          var x2 = points[t2];
          var y2 = points[t2 + 1];
          var x3 = points[t3];
          var y3 = points[t3 + 1];
          var dx = x2 - _x;
          var dy = y2 - _y;
          var ex = x3 - _x;
          var ey = y3 - _y;
          var bl = dx * dx + dy * dy;
          var cl = ex * ex + ey * ey;
          var ab = (dx * ey - dy * ex) * 2;

          if (!ab) {
            // degenerate case (collinear diagram)
            x = (_x + x3) / 2 - 1e8 * ey;
            y = (_y + y3) / 2 + 1e8 * ex;
          } else if (Math.abs(ab) < 1e-8) {
            // almost equal points (degenerate triangle)
            x = (_x + x3) / 2;
            y = (_y + y3) / 2;
          } else {
            var d = 1 / ab;
            x = _x + (ey * bl - dy * cl) * d;
            y = _y + (dx * cl - ex * bl) * d;
          }

          circumcenters[j] = x;
          circumcenters[j + 1] = y;
        } // Compute exterior cell rays.


        var h = hull[hull.length - 1];
        var p0,
            p1 = h * 4;
        var x0,
            x1 = points[2 * h];
        var y0,
            y1 = points[2 * h + 1];
        vectors.fill(0);

        for (var _i = 0; _i < hull.length; ++_i) {
          h = hull[_i];
          p0 = p1, x0 = x1, y0 = y1;
          p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
          vectors[p0 + 2] = vectors[p1] = y0 - y1;
          vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
      }
    }, {
      key: "render",
      value: function render(context) {
        var buffer = context == null ? context = new Path$1() : undefined;
        var _this$delaunay2 = this.delaunay,
            halfedges = _this$delaunay2.halfedges,
            inedges = _this$delaunay2.inedges,
            hull = _this$delaunay2.hull,
            circumcenters = this.circumcenters,
            vectors = this.vectors;
        if (hull.length <= 1) return null;

        for (var i = 0, n = halfedges.length; i < n; ++i) {
          var j = halfedges[i];
          if (j < i) continue;
          var ti = Math.floor(i / 3) * 2;
          var tj = Math.floor(j / 3) * 2;
          var xi = circumcenters[ti];
          var yi = circumcenters[ti + 1];
          var xj = circumcenters[tj];
          var yj = circumcenters[tj + 1];

          this._renderSegment(xi, yi, xj, yj, context);
        }

        var h0,
            h1 = hull[hull.length - 1];

        for (var _i2 = 0; _i2 < hull.length; ++_i2) {
          h0 = h1, h1 = hull[_i2];
          var t = Math.floor(inedges[h1] / 3) * 2;
          var x = circumcenters[t];
          var y = circumcenters[t + 1];
          var v = h0 * 4;

          var p = this._project(x, y, vectors[v + 2], vectors[v + 3]);

          if (p) this._renderSegment(x, y, p[0], p[1], context);
        }

        return buffer && buffer.value();
      }
    }, {
      key: "renderBounds",
      value: function renderBounds(context) {
        var buffer = context == null ? context = new Path$1() : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
      }
    }, {
      key: "renderCell",
      value: function renderCell(i, context) {
        var buffer = context == null ? context = new Path$1() : undefined;

        var points = this._clip(i);

        if (points === null) return;
        context.moveTo(points[0], points[1]);
        var n = points.length;

        while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) {
          n -= 2;
        }

        for (var _i3 = 2; _i3 < n; _i3 += 2) {
          if (points[_i3] !== points[_i3 - 2] || points[_i3 + 1] !== points[_i3 - 1]) context.lineTo(points[_i3], points[_i3 + 1]);
        }

        context.closePath();
        return buffer && buffer.value();
      }
    }, {
      key: "cellPolygons",
      value: /*#__PURE__*/regeneratorRuntime.mark(function cellPolygons() {
        var points, i, n, cell;
        return regeneratorRuntime.wrap(function cellPolygons$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                points = this.delaunay.points;
                i = 0, n = points.length / 2;

              case 2:
                if (!(i < n)) {
                  _context.next = 10;
                  break;
                }

                cell = this.cellPolygon(i);

                if (!cell) {
                  _context.next = 7;
                  break;
                }

                _context.next = 7;
                return cell;

              case 7:
                ++i;
                _context.next = 2;
                break;

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, cellPolygons, this);
      })
    }, {
      key: "cellPolygon",
      value: function cellPolygon(i) {
        var polygon = new Polygon();
        this.renderCell(i, polygon);
        return polygon.value();
      }
    }, {
      key: "_renderSegment",
      value: function _renderSegment(x0, y0, x1, y1, context) {
        var S;

        var c0 = this._regioncode(x0, y0);

        var c1 = this._regioncode(x1, y1);

        if (c0 === 0 && c1 === 0) {
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
          context.moveTo(S[0], S[1]);
          context.lineTo(S[2], S[3]);
        }
      }
    }, {
      key: "contains",
      value: function contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
      }
    }, {
      key: "neighbors",
      value: /*#__PURE__*/regeneratorRuntime.mark(function neighbors(i) {
        var ci, _iterator, _step, j, cj, ai, li, aj, lj;

        return regeneratorRuntime.wrap(function neighbors$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                ci = this._clip(i);

                if (!ci) {
                  _context2.next = 33;
                  break;
                }

                _iterator = _createForOfIteratorHelper(this.delaunay.neighbors(i));
                _context2.prev = 3;

                _iterator.s();

              case 5:
                if ((_step = _iterator.n()).done) {
                  _context2.next = 25;
                  break;
                }

                j = _step.value;
                cj = this._clip(j); // find the common edge

                if (!cj) {
                  _context2.next = 23;
                  break;
                }

                ai = 0, li = ci.length;

              case 10:
                if (!(ai < li)) {
                  _context2.next = 23;
                  break;
                }

                aj = 0, lj = cj.length;

              case 12:
                if (!(aj < lj)) {
                  _context2.next = 20;
                  break;
                }

                if (!(ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj])) {
                  _context2.next = 17;
                  break;
                }

                _context2.next = 16;
                return j;

              case 16:
                return _context2.abrupt("break", 23);

              case 17:
                aj += 2;
                _context2.next = 12;
                break;

              case 20:
                ai += 2;
                _context2.next = 10;
                break;

              case 23:
                _context2.next = 5;
                break;

              case 25:
                _context2.next = 30;
                break;

              case 27:
                _context2.prev = 27;
                _context2.t0 = _context2["catch"](3);

                _iterator.e(_context2.t0);

              case 30:
                _context2.prev = 30;

                _iterator.f();

                return _context2.finish(30);

              case 33:
              case "end":
                return _context2.stop();
            }
          }
        }, neighbors, this, [[3, 27, 30, 33]]);
      })
    }, {
      key: "_cell",
      value: function _cell(i) {
        var circumcenters = this.circumcenters,
            _this$delaunay3 = this.delaunay,
            inedges = _this$delaunay3.inedges,
            halfedges = _this$delaunay3.halfedges,
            triangles = _this$delaunay3.triangles;
        var e0 = inedges[i];
        if (e0 === -1) return null; // coincident point

        var points = [];
        var e = e0;

        do {
          var t = Math.floor(e / 3);
          points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation

          e = halfedges[e];
        } while (e !== e0 && e !== -1);

        return points;
      }
    }, {
      key: "_clip",
      value: function _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }

        var points = this._cell(i);

        if (points === null) return null;
        var V = this.vectors;
        var v = i * 4;
        return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);
      }
    }, {
      key: "_clipFinite",
      value: function _clipFinite(i, points) {
        var n = points.length;
        var P = null;
        var x0,
            y0,
            x1 = points[n - 2],
            y1 = points[n - 1];

        var c0,
            c1 = this._regioncode(x1, y1);

        var e0, e1;

        for (var j = 0; j < n; j += 2) {
          x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
          c0 = c1, c1 = this._regioncode(x1, y1);

          if (c0 === 0 && c1 === 0) {
            e0 = e1, e1 = 0;
            if (P) P.push(x1, y1);else P = [x1, y1];
          } else {
            var S = void 0,
                sx0 = void 0,
                sy0 = void 0,
                sx1 = void 0,
                sy1 = void 0;

            if (c0 === 0) {
              if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
              var _S = S;

              var _S2 = _slicedToArray(_S, 4);

              sx0 = _S2[0];
              sy0 = _S2[1];
              sx1 = _S2[2];
              sy1 = _S2[3];
            } else {
              if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
              var _S3 = S;

              var _S4 = _slicedToArray(_S3, 4);

              sx1 = _S4[0];
              sy1 = _S4[1];
              sx0 = _S4[2];
              sy0 = _S4[3];
              e0 = e1, e1 = this._edgecode(sx0, sy0);
              if (e0 && e1) this._edge(i, e0, e1, P, P.length);
              if (P) P.push(sx0, sy0);else P = [sx0, sy0];
            }

            e0 = e1, e1 = this._edgecode(sx1, sy1);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx1, sy1);else P = [sx1, sy1];
          }
        }

        if (P) {
          e0 = e1, e1 = this._edgecode(P[0], P[1]);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }

        return P;
      }
    }, {
      key: "_clipSegment",
      value: function _clipSegment(x0, y0, x1, y1, c0, c1) {
        while (true) {
          if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
          if (c0 & c1) return null;
          var x = void 0,
              y = void 0,
              c = c0 || c1;
          if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
          if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
      }
    }, {
      key: "_clipInfinite",
      value: function _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        var P = Array.from(points),
            p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);

        if (P = this._clipFinite(i, P)) {
          for (var j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
          }
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
        }

        return P;
      }
    }, {
      key: "_edge",
      value: function _edge(i, e0, e1, P, j) {
        while (e0 !== e1) {
          var x = void 0,
              y = void 0;

          switch (e0) {
            case 5:
              e0 = 4;
              continue;
            // top-left

            case 4:
              e0 = 6, x = this.xmax, y = this.ymin;
              break;
            // top

            case 6:
              e0 = 2;
              continue;
            // top-right

            case 2:
              e0 = 10, x = this.xmax, y = this.ymax;
              break;
            // right

            case 10:
              e0 = 8;
              continue;
            // bottom-right

            case 8:
              e0 = 9, x = this.xmin, y = this.ymax;
              break;
            // bottom

            case 9:
              e0 = 1;
              continue;
            // bottom-left

            case 1:
              e0 = 5, x = this.xmin, y = this.ymin;
              break;
            // left
          }

          if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
            P.splice(j, 0, x, y), j += 2;
          }
        }

        if (P.length > 4) {
          for (var _i4 = 0; _i4 < P.length; _i4 += 2) {
            var _j = (_i4 + 2) % P.length,
                k = (_i4 + 4) % P.length;

            if (P[_i4] === P[_j] && P[_j] === P[k] || P[_i4 + 1] === P[_j + 1] && P[_j + 1] === P[k + 1]) P.splice(_j, 2), _i4 -= 2;
          }
        }

        return j;
      }
    }, {
      key: "_project",
      value: function _project(x0, y0, vx, vy) {
        var t = Infinity,
            c,
            x,
            y;

        if (vy < 0) {
          // top
          if (y0 <= this.ymin) return null;
          if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) {
          // bottom
          if (y0 >= this.ymax) return null;
          if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }

        if (vx > 0) {
          // right
          if (x0 >= this.xmax) return null;
          if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) {
          // left
          if (x0 <= this.xmin) return null;
          if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }

        return [x, y];
      }
    }, {
      key: "_edgecode",
      value: function _edgecode(x, y) {
        return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
      }
    }, {
      key: "_regioncode",
      value: function _regioncode(x, y) {
        return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
      }
    }]);

    return Voronoi;
  }();

  var _marked$2 = /*#__PURE__*/regeneratorRuntime.mark(flatIterable);
  var tau$3 = 2 * Math.PI;

  function pointX(p) {
    return p[0];
  }

  function pointY(p) {
    return p[1];
  } // A triangulation is collinear if all its triangles have a non-null area


  function collinear$1(d) {
    var triangles = d.triangles,
        coords = d.coords;

    for (var i = 0; i < triangles.length; i += 3) {
      var a = 2 * triangles[i],
          b = 2 * triangles[i + 1],
          c = 2 * triangles[i + 2],
          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
      if (cross > 1e-10) return false;
    }

    return true;
  }

  function jitter(x, y, r) {
    return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
  }

  var Delaunay = /*#__PURE__*/function () {
    _createClass(Delaunay, null, [{
      key: "from",
      value: function from(points) {
        var fx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pointX;
        var fy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : pointY;
        var that = arguments.length > 3 ? arguments[3] : undefined;
        return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
      }
    }]);

    function Delaunay(points) {
      _classCallCheck(this, Delaunay);

      this._delaunator = new Delaunator(points);
      this.inedges = new Int32Array(points.length / 2);
      this._hullIndex = new Int32Array(points.length / 2);
      this.points = this._delaunator.coords;

      this._init();
    }

    _createClass(Delaunay, [{
      key: "update",
      value: function update() {
        this._delaunator.update();

        this._init();

        return this;
      }
    }, {
      key: "_init",
      value: function _init() {
        var d = this._delaunator,
            points = this.points; // check for collinear

        if (d.hull && d.hull.length > 2 && collinear$1(d)) {
          this.collinear = Int32Array.from({
            length: points.length / 2
          }, function (_, i) {
            return i;
          }).sort(function (i, j) {
            return points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1];
          }); // for exact neighbors

          var e = this.collinear[0],
              f = this.collinear[this.collinear.length - 1],
              bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]],
              r = 1e-8 * Math.sqrt(Math.pow(bounds[3] - bounds[1], 2) + Math.pow(bounds[2] - bounds[0], 2));

          for (var i = 0, n = points.length / 2; i < n; ++i) {
            var p = jitter(points[2 * i], points[2 * i + 1], r);
            points[2 * i] = p[0];
            points[2 * i + 1] = p[1];
          }

          this._delaunator = new Delaunator(points);
        } else {
          delete this.collinear;
        }

        var halfedges = this.halfedges = this._delaunator.halfedges;
        var hull = this.hull = this._delaunator.hull;
        var triangles = this.triangles = this._delaunator.triangles;
        var inedges = this.inedges.fill(-1);

        var hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges


        for (var _e = 0, _n = halfedges.length; _e < _n; ++_e) {
          var _p = triangles[_e % 3 === 2 ? _e - 2 : _e + 1];
          if (halfedges[_e] === -1 || inedges[_p] === -1) inedges[_p] = _e;
        }

        for (var _i = 0, _n2 = hull.length; _i < _n2; ++_i) {
          hullIndex[hull[_i]] = _i;
        } // degenerate case: 1 or 2 (distinct) points


        if (hull.length <= 2 && hull.length > 0) {
          this.triangles = new Int32Array(3).fill(-1);
          this.halfedges = new Int32Array(3).fill(-1);
          this.triangles[0] = hull[0];
          this.triangles[1] = hull[1];
          this.triangles[2] = hull[1];
          inedges[hull[0]] = 1;
          if (hull.length === 2) inedges[hull[1]] = 0;
        }
      }
    }, {
      key: "voronoi",
      value: function voronoi(bounds) {
        return new Voronoi(this, bounds);
      }
    }, {
      key: "neighbors",
      value: /*#__PURE__*/regeneratorRuntime.mark(function neighbors(i) {
        var inedges, hull, _hullIndex, halfedges, triangles, collinear, l, e0, e, p0, p;

        return regeneratorRuntime.wrap(function neighbors$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                inedges = this.inedges, hull = this.hull, _hullIndex = this._hullIndex, halfedges = this.halfedges, triangles = this.triangles, collinear = this.collinear; // degenerate case with several collinear points

                if (!collinear) {
                  _context.next = 10;
                  break;
                }

                l = collinear.indexOf(i);

                if (!(l > 0)) {
                  _context.next = 6;
                  break;
                }

                _context.next = 6;
                return collinear[l - 1];

              case 6:
                if (!(l < collinear.length - 1)) {
                  _context.next = 9;
                  break;
                }

                _context.next = 9;
                return collinear[l + 1];

              case 9:
                return _context.abrupt("return");

              case 10:
                e0 = inedges[i];

                if (!(e0 === -1)) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return");

              case 13:
                // coincident point
                e = e0, p0 = -1;

              case 14:
                _context.next = 16;
                return p0 = triangles[e];

              case 16:
                e = e % 3 === 2 ? e - 2 : e + 1;

                if (!(triangles[e] !== i)) {
                  _context.next = 19;
                  break;
                }

                return _context.abrupt("return");

              case 19:
                // bad triangulation
                e = halfedges[e];

                if (!(e === -1)) {
                  _context.next = 26;
                  break;
                }

                p = hull[(_hullIndex[i] + 1) % hull.length];

                if (!(p !== p0)) {
                  _context.next = 25;
                  break;
                }

                _context.next = 25;
                return p;

              case 25:
                return _context.abrupt("return");

              case 26:
                if (e !== e0) {
                  _context.next = 14;
                  break;
                }

              case 27:
              case "end":
                return _context.stop();
            }
          }
        }, neighbors, this);
      })
    }, {
      key: "find",
      value: function find(x, y) {
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        var i0 = i;
        var c;

        while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) {
          i = c;
        }

        return c;
      }
    }, {
      key: "_step",
      value: function _step(i, x, y) {
        var inedges = this.inedges,
            hull = this.hull,
            _hullIndex = this._hullIndex,
            halfedges = this.halfedges,
            triangles = this.triangles,
            points = this.points;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        var c = i;
        var dc = Math.pow(x - points[i * 2], 2) + Math.pow(y - points[i * 2 + 1], 2);
        var e0 = inedges[i];
        var e = e0;

        do {
          var t = triangles[e];
          var dt = Math.pow(x - points[t * 2], 2) + Math.pow(y - points[t * 2 + 1], 2);
          if (dt < dc) dc = dt, c = t;
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation

          e = halfedges[e];

          if (e === -1) {
            e = hull[(_hullIndex[i] + 1) % hull.length];

            if (e !== t) {
              if (Math.pow(x - points[e * 2], 2) + Math.pow(y - points[e * 2 + 1], 2) < dc) return e;
            }

            break;
          }
        } while (e !== e0);

        return c;
      }
    }, {
      key: "render",
      value: function render(context) {
        var buffer = context == null ? context = new Path$1() : undefined;
        var points = this.points,
            halfedges = this.halfedges,
            triangles = this.triangles;

        for (var i = 0, n = halfedges.length; i < n; ++i) {
          var j = halfedges[i];
          if (j < i) continue;
          var ti = triangles[i] * 2;
          var tj = triangles[j] * 2;
          context.moveTo(points[ti], points[ti + 1]);
          context.lineTo(points[tj], points[tj + 1]);
        }

        this.renderHull(context);
        return buffer && buffer.value();
      }
    }, {
      key: "renderPoints",
      value: function renderPoints(context) {
        var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
        var buffer = context == null ? context = new Path$1() : undefined;
        var points = this.points;

        for (var i = 0, n = points.length; i < n; i += 2) {
          var x = points[i],
              y = points[i + 1];
          context.moveTo(x + r, y);
          context.arc(x, y, r, 0, tau$3);
        }

        return buffer && buffer.value();
      }
    }, {
      key: "renderHull",
      value: function renderHull(context) {
        var buffer = context == null ? context = new Path$1() : undefined;
        var hull = this.hull,
            points = this.points;
        var h = hull[0] * 2,
            n = hull.length;
        context.moveTo(points[h], points[h + 1]);

        for (var i = 1; i < n; ++i) {
          var _h = 2 * hull[i];

          context.lineTo(points[_h], points[_h + 1]);
        }

        context.closePath();
        return buffer && buffer.value();
      }
    }, {
      key: "hullPolygon",
      value: function hullPolygon() {
        var polygon = new Polygon();
        this.renderHull(polygon);
        return polygon.value();
      }
    }, {
      key: "renderTriangle",
      value: function renderTriangle(i, context) {
        var buffer = context == null ? context = new Path$1() : undefined;
        var points = this.points,
            triangles = this.triangles;
        var t0 = triangles[i *= 3] * 2;
        var t1 = triangles[i + 1] * 2;
        var t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
      }
    }, {
      key: "trianglePolygons",
      value: /*#__PURE__*/regeneratorRuntime.mark(function trianglePolygons() {
        var triangles, i, n;
        return regeneratorRuntime.wrap(function trianglePolygons$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                triangles = this.triangles;
                i = 0, n = triangles.length / 3;

              case 2:
                if (!(i < n)) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 5;
                return this.trianglePolygon(i);

              case 5:
                ++i;
                _context2.next = 2;
                break;

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, trianglePolygons, this);
      })
    }, {
      key: "trianglePolygon",
      value: function trianglePolygon(i) {
        var polygon = new Polygon();
        this.renderTriangle(i, polygon);
        return polygon.value();
      }
    }]);

    return Delaunay;
  }();

  function flatArray(points, fx, fy, that) {
    var n = points.length;
    var array = new Float64Array(n * 2);

    for (var i = 0; i < n; ++i) {
      var p = points[i];
      array[i * 2] = fx.call(that, p, i, points);
      array[i * 2 + 1] = fy.call(that, p, i, points);
    }

    return array;
  }

  function flatIterable(points, fx, fy, that) {
    var i, _iterator, _step2, p;

    return regeneratorRuntime.wrap(function flatIterable$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            i = 0;
            _iterator = _createForOfIteratorHelper(points);
            _context3.prev = 2;

            _iterator.s();

          case 4:
            if ((_step2 = _iterator.n()).done) {
              _context3.next = 13;
              break;
            }

            p = _step2.value;
            _context3.next = 8;
            return fx.call(that, p, i, points);

          case 8:
            _context3.next = 10;
            return fy.call(that, p, i, points);

          case 10:
            ++i;

          case 11:
            _context3.next = 4;
            break;

          case 13:
            _context3.next = 18;
            break;

          case 15:
            _context3.prev = 15;
            _context3.t0 = _context3["catch"](2);

            _iterator.e(_context3.t0);

          case 18:
            _context3.prev = 18;

            _iterator.f();

            return _context3.finish(18);

          case 21:
          case "end":
            return _context3.stop();
        }
      }
    }, _marked$2, null, [[2, 15, 18, 21]]);
  }

  function Voronoi$1(params) {
    Transform$1.call(this, null, params);
  }
  Voronoi$1.Definition = {
    "type": "Voronoi",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "x",
      "type": "field",
      "required": true
    }, {
      "name": "y",
      "type": "field",
      "required": true
    }, {
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "extent",
      "type": "array",
      "array": true,
      "length": 2,
      "default": [[-1e5, -1e5], [1e5, 1e5]],
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }, {
      "name": "as",
      "type": "string",
      "default": "path"
    }]
  };
  var prototype$1o = inherits(Voronoi$1, Transform$1);
  var defaultExtent = [-1e5, -1e5, 1e5, 1e5];

  prototype$1o.transform = function (_, pulse) {
    var as = _.as || 'path',
        data = pulse.source; // nothing to do if no data

    if (!data || !data.length) return pulse; // configure and construct voronoi diagram

    var s = _.size;
    s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;
    var voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths

    for (var i = 0, n = data.length; i < n; ++i) {
      var polygon = voronoi.cellPolygon(i);
      data[i][as] = polygon ? toPathString(polygon) : null;
    }

    return pulse.reflow(_.modified()).modifies(as);
  }; // suppress duplicated end point vertices


  function toPathString(p) {
    var x = p[0][0],
        y = p[0][1];
    var n = p.length - 1;

    for (; p[n][0] === x && p[n][1] === y; --n) {
    }

    return 'M' + p.slice(0, n + 1).join('L') + 'Z';
  }



  var voronoi = /*#__PURE__*/Object.freeze({
    __proto__: null,
    voronoi: Voronoi$1
  });

  /*
  Copyright (c) 2013, Jason Davies.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

    * The name Jason Davies may not be used to endorse or promote products
      derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
  // Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
  // Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf

  var cloudRadians = Math.PI / 180,
      cw = 1 << 11 >> 5,
      ch = 1 << 11;
  function cloud () {
    var size = [256, 256],
        text,
        font,
        fontSize,
        fontStyle,
        fontWeight,
        rotate,
        padding,
        spiral = archimedeanSpiral,
        words = [],
        random = Math.random,
        cloud = {};

    cloud.layout = function () {
      var contextAndRatio = getContext(canvas$1()),
          board = zeroArray((size[0] >> 5) * size[1]),
          bounds = null,
          n = words.length,
          i = -1,
          tags = [],
          data = words.map(function (d) {
        return {
          text: text(d),
          font: font(d),
          style: fontStyle(d),
          weight: fontWeight(d),
          rotate: rotate(d),
          size: ~~(fontSize(d) + 1e-14),
          padding: padding(d),
          xoff: 0,
          yoff: 0,
          x1: 0,
          y1: 0,
          x0: 0,
          y0: 0,
          hasText: false,
          sprite: null,
          datum: d
        };
      }).sort(function (a, b) {
        return b.size - a.size;
      });

      while (++i < n) {
        var d = data[i];
        d.x = size[0] * (random() + .5) >> 1;
        d.y = size[1] * (random() + .5) >> 1;
        cloudSprite(contextAndRatio, d, data, i);

        if (d.hasText && place(board, d, bounds)) {
          tags.push(d);
          if (bounds) cloudBounds(bounds, d);else bounds = [{
            x: d.x + d.x0,
            y: d.y + d.y0
          }, {
            x: d.x + d.x1,
            y: d.y + d.y1
          }]; // Temporary hack

          d.x -= size[0] >> 1;
          d.y -= size[1] >> 1;
        }
      }

      return tags;
    };

    function getContext(canvas) {
      canvas.width = canvas.height = 1;
      var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
      canvas.width = (cw << 5) / ratio;
      canvas.height = ch / ratio;
      var context = canvas.getContext("2d");
      context.fillStyle = context.strokeStyle = "red";
      context.textAlign = "center";
      return {
        context: context,
        ratio: ratio
      };
    }

    function place(board, tag, bounds) {
      var startX = tag.x,
          startY = tag.y,
          maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
          s = spiral(size),
          dt = random() < .5 ? 1 : -1,
          t = -dt,
          dxdy,
          dx,
          dy;

      while (dxdy = s(t += dt)) {
        dx = ~~dxdy[0];
        dy = ~~dxdy[1];
        if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
        tag.x = startX + dx;
        tag.y = startY + dy;
        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue; // TODO only check for collisions within current bounds.

        if (!bounds || !cloudCollide(tag, board, size[0])) {
          if (!bounds || collideRects(tag, bounds)) {
            var sprite = tag.sprite,
                w = tag.width >> 5,
                sw = size[0] >> 5,
                lx = tag.x - (w << 4),
                sx = lx & 0x7f,
                msx = 32 - sx,
                h = tag.y1 - tag.y0,
                x = (tag.y + tag.y0) * sw + (lx >> 5),
                last;

            for (var j = 0; j < h; j++) {
              last = 0;

              for (var i = 0; i <= w; i++) {
                board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
              }

              x += sw;
            }

            tag.sprite = null;
            return true;
          }
        }
      }

      return false;
    }

    cloud.words = function (_) {
      if (arguments.length) {
        words = _;
        return cloud;
      } else {
        return words;
      }
    };

    cloud.size = function (_) {
      if (arguments.length) {
        size = [+_[0], +_[1]];
        return cloud;
      } else {
        return size;
      }
    };

    cloud.font = function (_) {
      if (arguments.length) {
        font = functor(_);
        return cloud;
      } else {
        return font;
      }
    };

    cloud.fontStyle = function (_) {
      if (arguments.length) {
        fontStyle = functor(_);
        return cloud;
      } else {
        return fontStyle;
      }
    };

    cloud.fontWeight = function (_) {
      if (arguments.length) {
        fontWeight = functor(_);
        return cloud;
      } else {
        return fontWeight;
      }
    };

    cloud.rotate = function (_) {
      if (arguments.length) {
        rotate = functor(_);
        return cloud;
      } else {
        return rotate;
      }
    };

    cloud.text = function (_) {
      if (arguments.length) {
        text = functor(_);
        return cloud;
      } else {
        return text;
      }
    };

    cloud.spiral = function (_) {
      if (arguments.length) {
        spiral = spirals[_] || _;
        return cloud;
      } else {
        return spiral;
      }
    };

    cloud.fontSize = function (_) {
      if (arguments.length) {
        fontSize = functor(_);
        return cloud;
      } else {
        return fontSize;
      }
    };

    cloud.padding = function (_) {
      if (arguments.length) {
        padding = functor(_);
        return cloud;
      } else {
        return padding;
      }
    };

    cloud.random = function (_) {
      if (arguments.length) {
        random = _;
        return cloud;
      } else {
        return random;
      }
    };

    return cloud;
  } // Fetches a monochrome sprite bitmap for the specified text.
  // Load in batches for speed.

  function cloudSprite(contextAndRatio, d, data, di) {
    if (d.sprite) return;
    var c = contextAndRatio.context,
        ratio = contextAndRatio.ratio;
    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
    var x = 0,
        y = 0,
        maxh = 0,
        n = data.length,
        w,
        w32,
        h,
        i,
        j;
    --di;

    while (++di < n) {
      d = data[di];
      c.save();
      c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
      w = c.measureText(d.text + "m").width * ratio;
      h = d.size << 1;

      if (d.rotate) {
        var sr = Math.sin(d.rotate * cloudRadians),
            cr = Math.cos(d.rotate * cloudRadians),
            wcr = w * cr,
            wsr = w * sr,
            hcr = h * cr,
            hsr = h * sr;
        w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
      } else {
        w = w + 0x1f >> 5 << 5;
      }

      if (h > maxh) maxh = h;

      if (x + w >= cw << 5) {
        x = 0;
        y += maxh;
        maxh = 0;
      }

      if (y + h >= ch) break;
      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
      if (d.rotate) c.rotate(d.rotate * cloudRadians);
      c.fillText(d.text, 0, 0);

      if (d.padding) {
        c.lineWidth = 2 * d.padding;
        c.strokeText(d.text, 0, 0);
      }

      c.restore();
      d.width = w;
      d.height = h;
      d.xoff = x;
      d.yoff = y;
      d.x1 = w >> 1;
      d.y1 = h >> 1;
      d.x0 = -d.x1;
      d.y0 = -d.y1;
      d.hasText = true;
      x += w;
    }

    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
        sprite = [];

    while (--di >= 0) {
      d = data[di];
      if (!d.hasText) continue;
      w = d.width;
      w32 = w >> 5;
      h = d.y1 - d.y0; // Zero the buffer

      for (i = 0; i < h * w32; i++) {
        sprite[i] = 0;
      }

      x = d.xoff;
      if (x == null) return;
      y = d.yoff;
      var seen = 0,
          seenRow = -1;

      for (j = 0; j < h; j++) {
        for (i = 0; i < w; i++) {
          var k = w32 * j + (i >> 5),
              m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
          sprite[k] |= m;
          seen |= m;
        }

        if (seen) seenRow = j;else {
          d.y0++;
          h--;
          j--;
          y++;
        }
      }

      d.y1 = d.y0 + seenRow;
      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
    }
  } // Use mask-based collision detection.


  function cloudCollide(tag, board, sw) {
    sw >>= 5;
    var sprite = tag.sprite,
        w = tag.width >> 5,
        lx = tag.x - (w << 4),
        sx = lx & 0x7f,
        msx = 32 - sx,
        h = tag.y1 - tag.y0,
        x = (tag.y + tag.y0) * sw + (lx >> 5),
        last;

    for (var j = 0; j < h; j++) {
      last = 0;

      for (var i = 0; i <= w; i++) {
        if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;
      }

      x += sw;
    }

    return false;
  }

  function cloudBounds(bounds, d) {
    var b0 = bounds[0],
        b1 = bounds[1];
    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
  }

  function collideRects(a, b) {
    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
  }

  function archimedeanSpiral(size) {
    var e = size[0] / size[1];
    return function (t) {
      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
    };
  }

  function rectangularSpiral(size) {
    var dy = 4,
        dx = dy * size[0] / size[1],
        x = 0,
        y = 0;
    return function (t) {
      var sign = t < 0 ? -1 : 1; // See triangular numbers: T_n = n * (n + 1) / 2.

      switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
        case 0:
          x += dx;
          break;

        case 1:
          y += dy;
          break;

        case 2:
          x -= dx;
          break;

        default:
          y -= dy;
          break;
      }

      return [x, y];
    };
  } // TODO reuse arrays?


  function zeroArray(n) {
    var a = [],
        i = -1;

    while (++i < n) {
      a[i] = 0;
    }

    return a;
  }

  function functor(d) {
    return typeof d === "function" ? d : function () {
      return d;
    };
  }

  var spirals = {
    archimedean: archimedeanSpiral,
    rectangular: rectangularSpiral
  };

  var Output$5 = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];
  var Params$1 = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];
  function Wordcloud(params) {
    Transform$1.call(this, cloud(), params);
  }
  Wordcloud.Definition = {
    "type": "Wordcloud",
    "metadata": {
      "modifies": true
    },
    "params": [{
      "name": "size",
      "type": "number",
      "array": true,
      "length": 2
    }, {
      "name": "font",
      "type": "string",
      "expr": true,
      "default": "sans-serif"
    }, {
      "name": "fontStyle",
      "type": "string",
      "expr": true,
      "default": "normal"
    }, {
      "name": "fontWeight",
      "type": "string",
      "expr": true,
      "default": "normal"
    }, {
      "name": "fontSize",
      "type": "number",
      "expr": true,
      "default": 14
    }, {
      "name": "fontSizeRange",
      "type": "number",
      "array": "nullable",
      "default": [10, 50]
    }, {
      "name": "rotate",
      "type": "number",
      "expr": true,
      "default": 0
    }, {
      "name": "text",
      "type": "field"
    }, {
      "name": "spiral",
      "type": "string",
      "values": ["archimedean", "rectangular"]
    }, {
      "name": "padding",
      "type": "number",
      "expr": true
    }, {
      "name": "as",
      "type": "string",
      "array": true,
      "length": 7,
      "default": Output$5
    }]
  };
  var prototype$1p = inherits(Wordcloud, Transform$1);

  prototype$1p.transform = function (_, pulse) {
    if (_.size && !(_.size[0] && _.size[1])) {
      error('Wordcloud size dimensions must be non-zero.');
    }

    function modp(param) {
      var p = _[param];
      return isFunction(p) && pulse.modified(p.fields);
    }

    var mod = _.modified();

    if (!(mod || pulse.changed(pulse.ADD_REM) || Params$1.some(modp))) return;
    var data = pulse.materialize(pulse.SOURCE).source,
        layout = this.value,
        as = _.as || Output$5,
        fontSize = _.fontSize || 14,
        range;
    isFunction(fontSize) ? range = _.fontSizeRange : fontSize = constant(fontSize); // create font size scaling function as needed

    if (range) {
      var fsize = fontSize,
          sizeScale = scale$2('sqrt')().domain(extent(data, fsize)).range(range);

      fontSize = function fontSize(x) {
        return sizeScale(fsize(x));
      };
    }

    data.forEach(function (t) {
      t[as[0]] = NaN;
      t[as[1]] = NaN;
      t[as[3]] = 0;
    }); // configure layout

    var words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(random).layout();
    var size = layout.size(),
        dx = size[0] >> 1,
        dy = size[1] >> 1,
        i = 0,
        n = words.length,
        w,
        t;

    for (; i < n; ++i) {
      w = words[i];
      t = w.datum;
      t[as[0]] = w.x + dx;
      t[as[1]] = w.y + dy;
      t[as[2]] = w.font;
      t[as[3]] = w.size;
      t[as[4]] = w.style;
      t[as[5]] = w.weight;
      t[as[6]] = w.rotate;
    }

    return pulse.reflow(mod).modifies(as);
  };



  var wordcloud = /*#__PURE__*/Object.freeze({
    __proto__: null,
    wordcloud: Wordcloud
  });

  function array8(n) {
    return new Uint8Array(n);
  }
  function array16(n) {
    return new Uint16Array(n);
  }
  function array32(n) {
    return new Uint32Array(n);
  }

  /**
   * Maintains CrossFilter state.
   */

  function Bitmaps() {
    var width = 8,
        _data = [],
        _seen = array32(0),
        _curr = array$2(0, width),
        _prev = array$2(0, width);

    return {
      data: function data() {
        return _data;
      },
      seen: function seen() {
        return _seen = lengthen(_seen, _data.length);
      },
      add: function add(array) {
        for (var i = 0, j = _data.length, n = array.length, t; i < n; ++i) {
          t = array[i];
          t._index = j++;

          _data.push(t);
        }
      },
      remove: function remove(num, map) {
        // map: index -> boolean (true => remove)
        var n = _data.length,
            copy = Array(n - num),
            reindex = _data,
            // reuse old data array for index map
        t,
            i,
            j; // seek forward to first removal

        for (i = 0; !map[i] && i < n; ++i) {
          copy[i] = _data[i];
          reindex[i] = i;
        } // condense arrays


        for (j = i; i < n; ++i) {
          t = _data[i];

          if (!map[i]) {
            reindex[i] = j;
            _curr[j] = _curr[i];
            _prev[j] = _prev[i];
            copy[j] = t;
            t._index = j++;
          } else {
            reindex[i] = -1;
          }

          _curr[i] = 0; // clear unused bits
        }

        _data = copy;
        return reindex;
      },
      size: function size() {
        return _data.length;
      },
      curr: function curr() {
        return _curr;
      },
      prev: function prev() {
        return _prev;
      },
      reset: function reset(k) {
        _prev[k] = _curr[k];
      },
      all: function all() {
        return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;
      },
      set: function set(k, one) {
        _curr[k] |= one;
      },
      clear: function clear(k, one) {
        _curr[k] &= ~one;
      },
      resize: function resize(n, m) {
        var k = _curr.length;

        if (n > k || m > width) {
          width = Math.max(m, width);
          _curr = array$2(n, width, _curr);
          _prev = array$2(n, width);
        }
      }
    };
  }

  function lengthen(array, length, copy) {
    if (array.length >= length) return array;
    copy = copy || new array.constructor(length);
    copy.set(array);
    return copy;
  }

  function array$2(n, m, array) {
    var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);
    if (array) copy.set(array);
    return copy;
  }

  function Dimension (index, i, query) {
    var bit = 1 << i;
    return {
      one: bit,
      zero: ~bit,
      range: query.slice(),
      bisect: index.bisect,
      index: index.index,
      size: index.size,
      onAdd: function onAdd(added, curr) {
        var dim = this,
            range = dim.bisect(dim.range, added.value),
            idx = added.index,
            lo = range[0],
            hi = range[1],
            n1 = idx.length,
            i;

        for (i = 0; i < lo; ++i) {
          curr[idx[i]] |= bit;
        }

        for (i = hi; i < n1; ++i) {
          curr[idx[i]] |= bit;
        }

        return dim;
      }
    };
  }

  /**
   * Maintains a list of values, sorted by key.
   */

  function SortedIndex() {
    var _index = array32(0),
        value = [],
        _size = 0;

    function insert(key, data, base) {
      if (!data.length) return [];
      var n0 = _size,
          n1 = data.length,
          addv = Array(n1),
          addi = array32(n1),
          oldv,
          oldi,
          i;

      for (i = 0; i < n1; ++i) {
        addv[i] = key(data[i]);
        addi[i] = i;
      }

      addv = sort$1(addv, addi);

      if (n0) {
        oldv = value;
        oldi = _index;
        value = Array(n0 + n1);
        _index = array32(n0 + n1);
        merge$2(base, oldv, oldi, n0, addv, addi, n1, value, _index);
      } else {
        if (base > 0) for (i = 0; i < n1; ++i) {
          addi[i] += base;
        }
        value = addv;
        _index = addi;
      }

      _size = n0 + n1;
      return {
        index: addi,
        value: addv
      };
    }

    function remove(num, map) {
      // map: index -> remove
      var n = _size,
          idx,
          i,
          j; // seek forward to first removal

      for (i = 0; !map[_index[i]] && i < n; ++i) {
      } // condense index and value arrays


      for (j = i; i < n; ++i) {
        if (!map[idx = _index[i]]) {
          _index[j] = idx;
          value[j] = value[i];
          ++j;
        }
      }

      _size = n - num;
    }

    function reindex(map) {
      for (var i = 0, n = _size; i < n; ++i) {
        _index[i] = map[_index[i]];
      }
    }

    function bisect(range, array) {
      var n;

      if (array) {
        n = array.length;
      } else {
        array = value;
        n = _size;
      }

      return [bisectLeft(array, range[0], 0, n), bisectRight(array, range[1], 0, n)];
    }

    return {
      insert: insert,
      remove: remove,
      bisect: bisect,
      reindex: reindex,
      index: function index() {
        return _index;
      },
      size: function size() {
        return _size;
      }
    };
  }

  function sort$1(values, index) {
    values.sort.call(index, function (a, b) {
      var x = values[a],
          y = values[b];
      return x < y ? -1 : x > y ? 1 : 0;
    });
    return permute(values, index);
  }

  function merge$2(base, value0, index0, n0, value1, index1, n1, value, index) {
    var i0 = 0,
        i1 = 0,
        i;

    for (i = 0; i0 < n0 && i1 < n1; ++i) {
      if (value0[i0] < value1[i1]) {
        value[i] = value0[i0];
        index[i] = index0[i0++];
      } else {
        value[i] = value1[i1];
        index[i] = index1[i1++] + base;
      }
    }

    for (; i0 < n0; ++i0, ++i) {
      value[i] = value0[i0];
      index[i] = index0[i0];
    }

    for (; i1 < n1; ++i1, ++i) {
      value[i] = value1[i1];
      index[i] = index1[i1] + base;
    }
  }

  /**
   * An indexed multi-dimensional filter.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
   * @param {Array} params.query - An array of per-dimension range queries.
   */

  function CrossFilter(params) {
    Transform$1.call(this, Bitmaps(), params);
    this._indices = null;
    this._dims = null;
  }
  CrossFilter.Definition = {
    "type": "CrossFilter",
    "metadata": {},
    "params": [{
      "name": "fields",
      "type": "field",
      "array": true,
      "required": true
    }, {
      "name": "query",
      "type": "array",
      "array": true,
      "required": true,
      "content": {
        "type": "number",
        "array": true,
        "length": 2
      }
    }]
  };
  var prototype$1q = inherits(CrossFilter, Transform$1);

  prototype$1q.transform = function (_, pulse) {
    if (!this._dims) {
      return this.init(_, pulse);
    } else {
      var init = _.modified('fields') || _.fields.some(function (f) {
        return pulse.modified(f.fields);
      });

      return init ? this.reinit(_, pulse) : this.eval(_, pulse);
    }
  };

  prototype$1q.init = function (_, pulse) {
    var fields = _.fields,
        query = _.query,
        indices = this._indices = {},
        dims = this._dims = [],
        m = query.length,
        i = 0,
        key,
        index; // instantiate indices and dimensions

    for (; i < m; ++i) {
      key = fields[i].fname;
      index = indices[key] || (indices[key] = SortedIndex());
      dims.push(Dimension(index, i, query[i]));
    }

    return this.eval(_, pulse);
  };

  prototype$1q.reinit = function (_, pulse) {
    var output = pulse.materialize().fork(),
        fields = _.fields,
        query = _.query,
        indices = this._indices,
        dims = this._dims,
        bits = this.value,
        curr = bits.curr(),
        prev = bits.prev(),
        all = bits.all(),
        out = output.rem = output.add,
        mod = output.mod,
        m = query.length,
        adds = {},
        add,
        index,
        key,
        mods,
        remMap,
        modMap,
        i,
        n,
        f; // set prev to current state

    prev.set(curr); // if pulse has remove tuples, process them first

    if (pulse.rem.length) {
      remMap = this.remove(_, pulse, output);
    } // if pulse has added tuples, add them to state


    if (pulse.add.length) {
      bits.add(pulse.add);
    } // if pulse has modified tuples, create an index map


    if (pulse.mod.length) {
      modMap = {};

      for (mods = pulse.mod, i = 0, n = mods.length; i < n; ++i) {
        modMap[mods[i]._index] = 1;
      }
    } // re-initialize indices as needed, update curr bitmap


    for (i = 0; i < m; ++i) {
      f = fields[i];

      if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {
        key = f.fname;

        if (!(add = adds[key])) {
          indices[key] = index = SortedIndex();
          adds[key] = add = index.insert(f, pulse.source, 0);
        }

        dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);
      }
    } // visit each tuple
    // if filter state changed, push index to add/rem
    // else if in mod and passes a filter, push index to mod


    for (i = 0, n = bits.data().length; i < n; ++i) {
      if (remMap[i]) {
        // skip if removed tuple
        continue;
      } else if (prev[i] !== curr[i]) {
        // add if state changed
        out.push(i);
      } else if (modMap[i] && curr[i] !== all) {
        // otherwise, pass mods through
        mod.push(i);
      }
    }

    bits.mask = (1 << m) - 1;
    return output;
  };

  prototype$1q.eval = function (_, pulse) {
    var output = pulse.materialize().fork(),
        m = this._dims.length,
        mask = 0;

    if (pulse.rem.length) {
      this.remove(_, pulse, output);
      mask |= (1 << m) - 1;
    }

    if (_.modified('query') && !_.modified('fields')) {
      mask |= this.update(_, pulse, output);
    }

    if (pulse.add.length) {
      this.insert(_, pulse, output);
      mask |= (1 << m) - 1;
    }

    if (pulse.mod.length) {
      this.modify(pulse, output);
      mask |= (1 << m) - 1;
    }

    this.value.mask = mask;
    return output;
  };

  prototype$1q.insert = function (_, pulse, output) {
    var tuples = pulse.add,
        bits = this.value,
        dims = this._dims,
        indices = this._indices,
        fields = _.fields,
        adds = {},
        out = output.add,
        k = bits.size(),
        n = k + tuples.length,
        m = dims.length,
        j,
        key,
        add; // resize bitmaps and add tuples as needed

    bits.resize(n, m);
    bits.add(tuples);
    var curr = bits.curr(),
        prev = bits.prev(),
        all = bits.all(); // add to dimensional indices

    for (j = 0; j < m; ++j) {
      key = fields[j].fname;
      add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));
      dims[j].onAdd(add, curr);
    } // set previous filters, output if passes at least one filter


    for (; k < n; ++k) {
      prev[k] = all;
      if (curr[k] !== all) out.push(k);
    }
  };

  prototype$1q.modify = function (pulse, output) {
    var out = output.mod,
        bits = this.value,
        curr = bits.curr(),
        all = bits.all(),
        tuples = pulse.mod,
        i,
        n,
        k;

    for (i = 0, n = tuples.length; i < n; ++i) {
      k = tuples[i]._index;
      if (curr[k] !== all) out.push(k);
    }
  };

  prototype$1q.remove = function (_, pulse, output) {
    var indices = this._indices,
        bits = this.value,
        curr = bits.curr(),
        prev = bits.prev(),
        all = bits.all(),
        map = {},
        out = output.rem,
        tuples = pulse.rem,
        i,
        n,
        k,
        f; // process tuples, output if passes at least one filter

    for (i = 0, n = tuples.length; i < n; ++i) {
      k = tuples[i]._index;
      map[k] = 1; // build index map

      prev[k] = f = curr[k];
      curr[k] = all;
      if (f !== all) out.push(k);
    } // remove from dimensional indices


    for (k in indices) {
      indices[k].remove(n, map);
    }

    this.reindex(pulse, n, map);
    return map;
  }; // reindex filters and indices after propagation completes


  prototype$1q.reindex = function (pulse, num, map) {
    var indices = this._indices,
        bits = this.value;
    pulse.runAfter(function () {
      var indexMap = bits.remove(num, map);

      for (var key in indices) {
        indices[key].reindex(indexMap);
      }
    });
  };

  prototype$1q.update = function (_, pulse, output) {
    var dims = this._dims,
        query = _.query,
        stamp = pulse.stamp,
        m = dims.length,
        mask = 0,
        i,
        q; // survey how many queries have changed

    output.filters = 0;

    for (q = 0; q < m; ++q) {
      if (_.modified('query', q)) {
        i = q;
        ++mask;
      }
    }

    if (mask === 1) {
      // only one query changed, use more efficient update
      mask = dims[i].one;
      this.incrementOne(dims[i], query[i], output.add, output.rem);
    } else {
      // multiple queries changed, perform full record keeping
      for (q = 0, mask = 0; q < m; ++q) {
        if (!_.modified('query', q)) continue;
        mask |= dims[q].one;
        this.incrementAll(dims[q], query[q], stamp, output.add);
        output.rem = output.add; // duplicate add/rem for downstream resolve
      }
    }

    return mask;
  };

  prototype$1q.incrementAll = function (dim, query, stamp, out) {
    var bits = this.value,
        seen = bits.seen(),
        curr = bits.curr(),
        prev = bits.prev(),
        index = dim.index(),
        old = dim.bisect(dim.range),
        range = dim.bisect(query),
        lo1 = range[0],
        hi1 = range[1],
        lo0 = old[0],
        hi0 = old[1],
        one = dim.one,
        i,
        j,
        k; // Fast incremental update based on previous lo index.

    if (lo1 < lo0) {
      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    } else if (lo1 > lo0) {
      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    } // Fast incremental update based on previous hi index.


    if (hi1 > hi0) {
      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    } else if (hi1 < hi0) {
      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
        k = index[i];

        if (seen[k] !== stamp) {
          prev[k] = curr[k];
          seen[k] = stamp;
          out.push(k);
        }

        curr[k] ^= one;
      }
    }

    dim.range = query.slice();
  };

  prototype$1q.incrementOne = function (dim, query, add, rem) {
    var bits = this.value,
        curr = bits.curr(),
        index = dim.index(),
        old = dim.bisect(dim.range),
        range = dim.bisect(query),
        lo1 = range[0],
        hi1 = range[1],
        lo0 = old[0],
        hi0 = old[1],
        one = dim.one,
        i,
        j,
        k; // Fast incremental update based on previous lo index.

    if (lo1 < lo0) {
      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        add.push(k);
      }
    } else if (lo1 > lo0) {
      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        rem.push(k);
      }
    } // Fast incremental update based on previous hi index.


    if (hi1 > hi0) {
      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        add.push(k);
      }
    } else if (hi1 < hi0) {
      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
        k = index[i];
        curr[k] ^= one;
        rem.push(k);
      }
    }

    dim.range = query.slice();
  };

  /**
   * Selectively filters tuples by resolving against a filter bitmap.
   * Useful for processing the output of a cross-filter transform.
   * @constructor
   * @param {object} params - The parameters for this operator.
   * @param {object} params.ignore - A bit mask indicating which filters to ignore.
   * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
   *   parameter value is a reference to a {@link CrossFilter} transform.
   */

  function ResolveFilter(params) {
    Transform$1.call(this, null, params);
  }
  ResolveFilter.Definition = {
    "type": "ResolveFilter",
    "metadata": {},
    "params": [{
      "name": "ignore",
      "type": "number",
      "required": true,
      "description": "A bit mask indicating which filters to ignore."
    }, {
      "name": "filter",
      "type": "object",
      "required": true,
      "description": "Per-tuple filter bitmaps from a CrossFilter transform."
    }]
  };
  var prototype$1r = inherits(ResolveFilter, Transform$1);

  prototype$1r.transform = function (_, pulse) {
    var ignore = ~(_.ignore || 0),
        // bit mask where zeros -> dims to ignore
    bitmap = _.filter,
        mask = bitmap.mask; // exit early if no relevant filter changes

    if ((mask & ignore) === 0) return pulse.StopPropagation;

    var output = pulse.fork(pulse.ALL),
        data = bitmap.data(),
        curr = bitmap.curr(),
        prev = bitmap.prev(),
        pass = function pass(k) {
      return !(curr[k] & ignore) ? data[k] : null;
    }; // propagate all mod tuples that pass the filter


    output.filter(output.MOD, pass); // determine add & rem tuples via filter functions
    // for efficiency, we do *not* populate new arrays,
    // instead we add filter functions applied downstream

    if (!(mask & mask - 1)) {
      // only one filter changed
      output.filter(output.ADD, pass);
      output.filter(output.REM, function (k) {
        return (curr[k] & ignore) === mask ? data[k] : null;
      });
    } else {
      // multiple filters changed
      output.filter(output.ADD, function (k) {
        var c = curr[k] & ignore,
            f = !c && c ^ prev[k] & ignore;
        return f ? data[k] : null;
      });
      output.filter(output.REM, function (k) {
        var c = curr[k] & ignore,
            f = c && !(c ^ (c ^ prev[k] & ignore));
        return f ? data[k] : null;
      });
    } // add filter to source data in case of reflow...


    return output.filter(output.SOURCE, function (t) {
      return pass(t._index);
    });
  };



  var xf = /*#__PURE__*/Object.freeze({
    __proto__: null,
    crossfilter: CrossFilter,
    resolvefilter: ResolveFilter
  });

  var version = "5.10.1";

  // initialize aria role and label attributes
  function initializeAria(view) {
    var el = view.container();

    if (el) {
      el.setAttribute('role', 'figure');
      ariaLabel(el, view.description());
    }
  } // update aria-label if we have a DOM container element

  function ariaLabel(el, desc) {
    if (el) desc == null ? el.removeAttribute('aria-label') : el.setAttribute('aria-label', desc);
  }

  function background$1 (view) {
    // respond to background signal
    view.add(null, function (_) {
      view._background = _.bg;
      view._resize = 1;
      return _.bg;
    }, {
      bg: view._signals.background
    });
  }

  var Default = 'default';
  function cursor (view) {
    var cursor = view._signals.cursor; // add cursor signal to dataflow, if needed

    if (!cursor) {
      view._signals.cursor = cursor = view.add({
        user: Default,
        item: null
      });
    } // evaluate cursor on each mousemove event


    view.on(view.events('view', 'mousemove'), cursor, function (_, event) {
      var value = cursor.value,
          user = value ? isString(value) ? value : value.user : Default,
          item = event.item && event.item.cursor || null;
      return value && user === value.user && item == value.item ? value : {
        user: user,
        item: item
      };
    }); // when cursor signal updates, set visible cursor

    view.add(null, function (_) {
      var user = _.cursor,
          item = this.value;

      if (!isString(user)) {
        item = user.item;
        user = user.user;
      }

      setCursor(user && user !== Default ? user : item || user);
      return item;
    }, {
      cursor: cursor
    });
  }

  function setCursor(cursor) {
    // set cursor on document body
    // this ensures cursor applies even if dragging out of view
    if (typeof document !== 'undefined' && document.body) {
      document.body.style.cursor = cursor;
    }
  }

  function dataref(view, name) {
    var data = view._runtime.data;

    if (!hasOwnProperty$1(data, name)) {
      error('Unrecognized data set: ' + name);
    }

    return data[name];
  }
  function data(name, values) {
    return arguments.length < 2 ? dataref(this, name).values.value : change.call(this, name, changeset().remove(truthy).insert(values));
  }
  function change(name, changes) {
    if (!isChangeSet(changes)) {
      error('Second argument to changes must be a changeset.');
    }

    var dataset = dataref(this, name);
    dataset.modified = true;
    return this.pulse(dataset.input, changes);
  }
  function insert(name, _) {
    return change.call(this, name, changeset().insert(_));
  }
  function remove(name, _) {
    return change.call(this, name, changeset().remove(_));
  }

  function width(view) {
    var padding = view.padding();
    return Math.max(0, view._viewWidth + padding.left + padding.right);
  }
  function height(view) {
    var padding = view.padding();
    return Math.max(0, view._viewHeight + padding.top + padding.bottom);
  }
  function offset$3(view) {
    var padding = view.padding(),
        origin = view._origin;
    return [padding.left + origin[0], padding.top + origin[1]];
  }
  function resizeRenderer(view) {
    var origin = offset$3(view),
        w = width(view),
        h = height(view);

    view._renderer.background(view.background());

    view._renderer.resize(w, h, origin);

    view._handler.origin(origin);

    view._resizeListeners.forEach(function (handler) {
      try {
        handler(w, h);
      } catch (error) {
        view.error(error);
      }
    });
  }

  /**
   * Extend an event with additional view-specific methods.
   * Adds a new property ('vega') to an event that provides a number
   * of methods for querying information about the current interaction.
   * The vega object provides the following methods:
   *   view - Returns the backing View instance.
   *   item - Returns the currently active scenegraph item (if any).
   *   group - Returns the currently active scenegraph group (if any).
   *     This method accepts a single string-typed argument indicating the name
   *     of the desired parent group. The scenegraph will be traversed from
   *     the item up towards the root to search for a matching group. If no
   *     argument is provided the enclosing group for the active item is
   *     returned, unless the item it itself a group, in which case it is
   *     returned directly.
   *   xy - Returns a two-element array containing the x and y coordinates for
   *     mouse or touch events. For touch events, this is based on the first
   *     elements in the changedTouches array. This method accepts a single
   *     argument: either an item instance or mark name that should serve as
   *     the reference coordinate system. If no argument is provided the
   *     top-level view coordinate system is assumed.
   *   x - Returns the current x-coordinate, accepts the same arguments as xy.
   *   y - Returns the current y-coordinate, accepts the same arguments as xy.
   * @param {Event} event - The input event to extend.
   * @param {Item} item - The currently active scenegraph item (if any).
   * @return {Event} - The extended input event.
   */

  function eventExtend (view, event, item) {
    var r = view._renderer,
        el = r && r.canvas(),
        p,
        e,
        translate;

    if (el) {
      translate = offset$3(view);
      e = event.changedTouches ? event.changedTouches[0] : event;
      p = point(e, el);
      p[0] -= translate[0];
      p[1] -= translate[1];
    }

    event.dataflow = view;
    event.item = item;
    event.vega = extension(view, item, p);
    return event;
  }

  function extension(view, item, point) {
    var itemGroup = item ? item.mark.marktype === 'group' ? item : item.mark.group : null;

    function group(name) {
      var g = itemGroup,
          i;
      if (name) for (i = item; i; i = i.mark.group) {
        if (i.mark.name === name) {
          g = i;
          break;
        }
      }
      return g && g.mark && g.mark.interactive ? g : {};
    }

    function xy(item) {
      if (!item) return point;
      if (isString(item)) item = group(item);
      var p = point.slice();

      while (item) {
        p[0] -= item.x || 0;
        p[1] -= item.y || 0;
        item = item.mark && item.mark.group;
      }

      return p;
    }

    return {
      view: constant(view),
      item: constant(item || {}),
      group: group,
      xy: xy,
      x: function x(item) {
        return xy(item)[0];
      },
      y: function y(item) {
        return xy(item)[1];
      }
    };
  }

  var VIEW = 'view',
      TIMER = 'timer',
      WINDOW = 'window',
      NO_TRAP = {
    trap: false
  };
  /**
   * Initialize event handling configuration.
   * @param {object} config - The configuration settings.
   * @return {object}
   */

  function initializeEventConfig(config) {
    var events = extend({
      defaults: {}
    }, config);

    var unpack = function unpack(obj, keys) {
      keys.forEach(function (k) {
        if (isArray(obj[k])) obj[k] = toSet(obj[k]);
      });
    };

    unpack(events.defaults, ['prevent', 'allow']);
    unpack(events, ['view', 'window', 'selector']);
    return events;
  }

  function prevent(view, type) {
    var def = view._eventConfig.defaults,
        prevent = def.prevent,
        allow = def.allow;
    return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();
  }

  function permit(view, key, type) {
    var rule = view._eventConfig && view._eventConfig[key];

    if (rule === false || isObject(rule) && !rule[type]) {
      view.warn("Blocked ".concat(key, " ").concat(type, " event listener."));
      return false;
    }

    return true;
  }
  /**
   * Create a new event stream from an event source.
   * @param {object} source - The event source to monitor.
   * @param {string} type - The event type.
   * @param {function(object): boolean} [filter] - Event filter function.
   * @return {EventStream}
   */


  function events$1(source, type, filter) {
    var view = this,
        s = new EventStream(filter),
        send = function send(e, item) {
      view.runAsync(null, function () {
        if (source === VIEW && prevent(view, type)) {
          e.preventDefault();
        }

        s.receive(eventExtend(view, e, item));
      });
    },
        sources;

    if (source === TIMER) {
      if (permit(view, 'timer', type)) {
        view.timer(send, type);
      }
    } else if (source === VIEW) {
      if (permit(view, 'view', type)) {
        // send traps errors, so use {trap: false} option
        view.addEventListener(type, send, NO_TRAP);
      }
    } else {
      if (source === WINDOW) {
        if (permit(view, 'window', type) && typeof window !== 'undefined') {
          sources = [window];
        }
      } else if (typeof document !== 'undefined') {
        if (permit(view, 'selector', type)) {
          sources = document.querySelectorAll(source);
        }
      }

      if (!sources) {
        view.warn('Can not resolve event source: ' + source);
      } else {
        for (var i = 0, n = sources.length; i < n; ++i) {
          sources[i].addEventListener(type, send);
        }

        view._eventListeners.push({
          type: type,
          sources: sources,
          handler: send
        });
      }
    }

    return s;
  }

  function itemFilter(event) {
    return event.item;
  }

  function markTarget(event) {
    // grab upstream collector feeding the mark operator
    return event.item.mark.source;
  }

  function invoke(name) {
    return function (_, event) {
      return event.vega.view().changeset().encode(event.item, name);
    };
  }

  function hover (hoverSet, leaveSet) {
    hoverSet = [hoverSet || 'hover'];
    leaveSet = [leaveSet || 'update', hoverSet[0]]; // invoke hover set upon mouseover

    this.on(this.events('view', 'mouseover', itemFilter), markTarget, invoke(hoverSet)); // invoke leave set upon mouseout

    this.on(this.events('view', 'mouseout', itemFilter), markTarget, invoke(leaveSet));
    return this;
  }

  /**
   * Finalize a View instance that is being removed.
   * Cancel any running timers.
   * Remove all external event listeners.
   * Remove any currently displayed tooltip.
   */
  function finalize () {
    var tooltip = this._tooltip,
        timers = this._timers,
        listeners = this._eventListeners,
        n,
        m,
        e;
    n = timers.length;

    while (--n >= 0) {
      timers[n].stop();
    }

    n = listeners.length;

    while (--n >= 0) {
      e = listeners[n];
      m = e.sources.length;

      while (--m >= 0) {
        e.sources[m].removeEventListener(e.type, e.handler);
      }
    }

    if (tooltip) {
      tooltip.call(this, this._handler, null, null, null);
    }

    return this;
  }

  function element$1 (tag, attr, text) {
    var el = document.createElement(tag);

    for (var key in attr) {
      el.setAttribute(key, attr[key]);
    }

    if (text != null) el.textContent = text;
    return el;
  }

  var BindClass = 'vega-bind',
      NameClass = 'vega-bind-name',
      RadioClass = 'vega-bind-radio',
      OptionClass = 'vega-option-';
  /**
   * Bind a signal to an external HTML input element. The resulting two-way
   * binding will propagate input changes to signals, and propagate signal
   * changes to the input element state. If this view instance has no parent
   * element, we assume the view is headless and no bindings are created.
   * @param {Element|string} el - The parent DOM element to which the input
   *   element should be appended as a child. If string-valued, this argument
   *   will be treated as a CSS selector. If null or undefined, the parent
   *   element of this view will be used as the element.
   * @param {object} param - The binding parameters which specify the signal
   *   to bind to, the input element type, and type-specific configuration.
   * @return {View} - This view instance.
   */

  function bind$1 (view, el, binding) {
    if (!el) return;
    var param = binding.param,
        bind = binding.state;

    if (!bind) {
      bind = binding.state = {
        elements: null,
        active: false,
        set: null,
        update: function update(value) {
          if (value !== view.signal(param.signal)) {
            view.runAsync(null, function () {
              bind.source = true;
              view.signal(param.signal, value);
            });
          }
        }
      };

      if (param.debounce) {
        bind.update = debounce(param.debounce, bind.update);
      }
    }

    generate$1(bind, el, param, view.signal(param.signal));

    if (!bind.active) {
      view.on(view._signals[param.signal], null, function () {
        bind.source ? bind.source = false : bind.set(view.signal(param.signal));
      });
      bind.active = true;
    }

    return bind;
  }
  /**
   * Generate an HTML input form element and bind it to a signal.
   */

  function generate$1(bind, el, param, value) {
    var div = element$1('div', {
      'class': BindClass
    });
    div.appendChild(element$1('span', {
      'class': NameClass
    }, param.name || param.signal));
    el.appendChild(div);
    var input = form;

    switch (param.input) {
      case 'checkbox':
        input = checkbox;
        break;

      case 'select':
        input = select;
        break;

      case 'radio':
        input = radio;
        break;

      case 'range':
        input = range$3;
        break;
    }

    input(bind, div, param, value);
  }
  /**
   * Generates an arbitrary input form element.
   * The input type is controlled via user-provided parameters.
   */


  function form(bind, el, param, value) {
    var node = element$1('input');

    for (var key in param) {
      if (key !== 'signal' && key !== 'element') {
        node.setAttribute(key === 'input' ? 'type' : key, param[key]);
      }
    }

    node.setAttribute('name', param.signal);
    node.value = value;
    el.appendChild(node);
    node.addEventListener('input', function () {
      bind.update(node.value);
    });
    bind.elements = [node];

    bind.set = function (value) {
      node.value = value;
    };
  }
  /**
   * Generates a checkbox input element.
   */


  function checkbox(bind, el, param, value) {
    var attr = {
      type: 'checkbox',
      name: param.signal
    };
    if (value) attr.checked = true;
    var node = element$1('input', attr);
    el.appendChild(node);
    node.addEventListener('change', function () {
      bind.update(node.checked);
    });
    bind.elements = [node];

    bind.set = function (value) {
      node.checked = !!value || null;
    };
  }
  /**
   * Generates a selection list input element.
   */


  function select(bind, el, param, value) {
    var node = element$1('select', {
      name: param.signal
    }),
        label = param.labels || [];
    param.options.forEach(function (option, i) {
      var attr = {
        value: option
      };
      if (valuesEqual(option, value)) attr.selected = true;
      node.appendChild(element$1('option', attr, (label[i] || option) + ''));
    });
    el.appendChild(node);
    node.addEventListener('change', function () {
      bind.update(param.options[node.selectedIndex]);
    });
    bind.elements = [node];

    bind.set = function (value) {
      for (var i = 0, n = param.options.length; i < n; ++i) {
        if (valuesEqual(param.options[i], value)) {
          node.selectedIndex = i;
          return;
        }
      }
    };
  }
  /**
   * Generates a radio button group.
   */


  function radio(bind, el, param, value) {
    var group = element$1('span', {
      'class': RadioClass
    }),
        label = param.labels || [];
    el.appendChild(group);
    bind.elements = param.options.map(function (option, i) {
      var id = OptionClass + param.signal + '-' + option;
      var attr = {
        id: id,
        type: 'radio',
        name: param.signal,
        value: option
      };
      if (valuesEqual(option, value)) attr.checked = true;
      var input = element$1('input', attr);
      input.addEventListener('change', function () {
        bind.update(option);
      });
      group.appendChild(input);
      group.appendChild(element$1('label', {
        'for': id
      }, (label[i] || option) + ''));
      return input;
    });

    bind.set = function (value) {
      var nodes = bind.elements,
          i = 0,
          n = nodes.length;

      for (; i < n; ++i) {
        if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
      }
    };
  }
  /**
   * Generates a slider input element.
   */


  function range$3(bind, el, param, value) {
    value = value !== undefined ? value : (+param.max + +param.min) / 2;
    var max = param.max != null ? param.max : Math.max(100, +value) || 100,
        min = param.min || Math.min(0, max, +value) || 0,
        step = param.step || tickStep(min, max, 100);
    var node = element$1('input', {
      type: 'range',
      name: param.signal,
      min: min,
      max: max,
      step: step
    });
    node.value = value;
    var label = element$1('label', {}, +value);
    el.appendChild(node);
    el.appendChild(label);

    function update() {
      label.textContent = node.value;
      bind.update(+node.value);
    } // subscribe to both input and change


    node.addEventListener('input', update);
    node.addEventListener('change', update);
    bind.elements = [node];

    bind.set = function (value) {
      node.value = value;
      label.textContent = value;
    };
  }

  function valuesEqual(a, b) {
    return a === b || a + '' === b + '';
  }

  function initializeRenderer (view, r, el, constructor, scaleFactor, opt) {
    r = r || new constructor(view.loader());
    return r.initialize(el, width(view), height(view), offset$3(view), scaleFactor, opt).background(view.background());
  }

  function trap (view, fn) {
    return !fn ? null : function () {
      try {
        fn.apply(this, arguments);
      } catch (error) {
        view.error(error);
      }
    };
  }

  function initializeHandler (view, prevHandler, el, constructor) {
    // instantiate scenegraph handler
    var handler = new constructor(view.loader(), trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, offset$3(view), view); // transfer event handlers

    if (prevHandler) {
      prevHandler.handlers().forEach(function (h) {
        handler.on(h.type, h.handler);
      });
    }

    return handler;
  }

  function initialize$1 (el, elBind) {
    var view = this,
        type = view._renderType,
        config = view._eventConfig.bind,
        module = renderModule(type); // containing dom element

    el = view._el = el ? lookup$5(view, el) : null; // initialize aria attributes

    initializeAria(view); // select appropriate renderer & handler

    if (!module) view.error('Unrecognized renderer type: ' + type);
    var Handler = module.handler || CanvasHandler,
        Renderer = el ? module.renderer : module.headless; // initialize renderer and input handler

    view._renderer = !Renderer ? null : initializeRenderer(view, view._renderer, el, Renderer);
    view._handler = initializeHandler(view, view._handler, el, Handler);
    view._redraw = true; // initialize signal bindings

    if (el && config !== 'none') {
      elBind = elBind ? view._elBind = lookup$5(view, elBind) : el.appendChild(element$1('div', {
        'class': 'vega-bindings'
      }));

      view._bind.forEach(function (_) {
        if (_.param.element && config !== 'container') {
          _.element = lookup$5(view, _.param.element);
        }
      });

      view._bind.forEach(function (_) {
        bind$1(view, _.element || elBind, _);
      });
    }

    return view;
  }

  function lookup$5(view, el) {
    if (typeof el === 'string') {
      if (typeof document !== 'undefined') {
        el = document.querySelector(el);

        if (!el) {
          view.error('Signal bind element not found: ' + el);
          return null;
        }
      } else {
        view.error('DOM document instance not found.');
        return null;
      }
    }

    if (el) {
      try {
        el.innerHTML = '';
      } catch (e) {
        el = null;
        view.error(e);
      }
    }

    return el;
  }

  var number$5 = function number(_) {
    return +_ || 0;
  };

  var paddingObject = function paddingObject(_) {
    return {
      top: _,
      bottom: _,
      left: _,
      right: _
    };
  };

  function padding (_) {
    return isObject(_) ? {
      top: number$5(_.top),
      bottom: number$5(_.bottom),
      left: number$5(_.left),
      right: number$5(_.right)
    } : paddingObject(number$5(_));
  }

  /**
   * Render the current scene in a headless fashion.
   * This method is asynchronous, returning a Promise instance.
   * @return {Promise} - A Promise that resolves to a renderer.
   */

  function renderHeadless (view, type, scaleFactor, opt) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var module, ctr;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              module = renderModule(type), ctr = module && module.headless;
              if (!ctr) error('Unrecognized renderer type: ' + type);
              _context.next = 4;
              return view.runAsync();

            case 4:
              return _context.abrupt("return", initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })());
  }

  /**
   * Produce an image URL for the visualization. Depending on the type
   * parameter, the generated URL contains data for either a PNG or SVG image.
   * The URL can be used (for example) to download images of the visualization.
   * This method is asynchronous, returning a Promise instance.
   * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
   *   The 'canvas' and 'png' types are synonyms for a PNG image.
   * @return {Promise} - A promise that resolves to an image URL.
   */

  function renderToImageURL (type, scaleFactor) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var r;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (type !== RenderType.Canvas && type !== RenderType.SVG && type !== RenderType.PNG) {
                error('Unrecognized image type: ' + type);
              }

              _context.next = 3;
              return renderHeadless(this, type, scaleFactor);

            case 3:
              r = _context.sent;
              return _context.abrupt("return", type === RenderType.SVG ? toBlobURL(r.svg(), 'image/svg+xml') : r.canvas().toDataURL('image/png'));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }).call(this));
  }

  function toBlobURL(data, mime) {
    var blob = new Blob([data], {
      type: mime
    });
    return window.URL.createObjectURL(blob);
  }

  /**
   * Produce a Canvas instance containing a rendered visualization.
   * This method is asynchronous, returning a Promise instance.
   * @return {Promise} - A promise that resolves to a Canvas instance.
   */

  function renderToCanvas (scaleFactor, opt) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var r;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return renderHeadless(this, RenderType.Canvas, scaleFactor, opt);

            case 2:
              r = _context.sent;
              return _context.abrupt("return", r.canvas());

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }).call(this));
  }

  /**
   * Produce a rendered SVG string of the visualization.
   * This method is asynchronous, returning a Promise instance.
   * @return {Promise} - A promise that resolves to an SVG string.
   */

  function renderToSVG (scaleFactor) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var r;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return renderHeadless(this, RenderType.SVG, scaleFactor);

            case 2:
              r = _context.sent;
              return _context.abrupt("return", r.svg());

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }).call(this));
  }

  var RawCode = 'RawCode';
  var Literal = 'Literal';
  var Property = 'Property';
  var Identifier$1 = 'Identifier';
  var ArrayExpression = 'ArrayExpression';
  var BinaryExpression = 'BinaryExpression';
  var CallExpression = 'CallExpression';
  var ConditionalExpression = 'ConditionalExpression';
  var LogicalExpression = 'LogicalExpression';
  var MemberExpression = 'MemberExpression';
  var ObjectExpression = 'ObjectExpression';
  var UnaryExpression = 'UnaryExpression';
  function ASTNode(type) {
    this.type = type;
  }

  ASTNode.prototype.visit = function (visitor) {
    var node = this,
        c,
        i,
        n;
    if (visitor(node)) return 1;

    for (c = children$1(node), i = 0, n = c.length; i < n; ++i) {
      if (c[i].visit(visitor)) return 1;
    }
  };

  function children$1(node) {
    switch (node.type) {
      case ArrayExpression:
        return node.elements;

      case BinaryExpression:
      case LogicalExpression:
        return [node.left, node.right];

      case CallExpression:
        var args = node.arguments.slice();
        args.unshift(node.callee);
        return args;

      case ConditionalExpression:
        return [node.test, node.consequent, node.alternate];

      case MemberExpression:
        return [node.object, node.property];

      case ObjectExpression:
        return node.properties;

      case Property:
        return [node.key, node.value];

      case UnaryExpression:
        return [node.argument];

      case Identifier$1:
      case Literal:
      case RawCode:
      default:
        return [];
    }
  }

  /*
    The following expression parser is based on Esprima (http://esprima.org/).
    Original header comment and license for Esprima is included here:

    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
  var TokenName, source$1, index$1, length, lookahead;
  var TokenBooleanLiteral = 1,
      TokenEOF = 2,
      TokenIdentifier = 3,
      TokenKeyword = 4,
      TokenNullLiteral = 5,
      TokenNumericLiteral = 6,
      TokenPunctuator = 7,
      TokenStringLiteral = 8,
      TokenRegularExpression = 9;
  TokenName = {};
  TokenName[TokenBooleanLiteral] = 'Boolean';
  TokenName[TokenEOF] = '<end>';
  TokenName[TokenIdentifier] = 'Identifier';
  TokenName[TokenKeyword] = 'Keyword';
  TokenName[TokenNullLiteral] = 'Null';
  TokenName[TokenNumericLiteral] = 'Numeric';
  TokenName[TokenPunctuator] = 'Punctuator';
  TokenName[TokenStringLiteral] = 'String';
  TokenName[TokenRegularExpression] = 'RegularExpression';
  var SyntaxArrayExpression = 'ArrayExpression',
      SyntaxBinaryExpression = 'BinaryExpression',
      SyntaxCallExpression = 'CallExpression',
      SyntaxConditionalExpression = 'ConditionalExpression',
      SyntaxIdentifier = 'Identifier',
      SyntaxLiteral = 'Literal',
      SyntaxLogicalExpression = 'LogicalExpression',
      SyntaxMemberExpression = 'MemberExpression',
      SyntaxObjectExpression = 'ObjectExpression',
      SyntaxProperty = 'Property',
      SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.

  var MessageUnexpectedToken = 'Unexpected token %0',
      MessageUnexpectedNumber = 'Unexpected number',
      MessageUnexpectedString = 'Unexpected string',
      MessageUnexpectedIdentifier = 'Unexpected identifier',
      MessageUnexpectedReserved = 'Unexpected reserved word',
      MessageUnexpectedEOS = 'Unexpected end of input',
      MessageInvalidRegExp = 'Invalid regular expression',
      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',
      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',
      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';
  var ILLEGAL = 'ILLEGAL',
      DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.

  var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),
      // eslint-disable-next-line no-misleading-character-class
  RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"); // Ensure the condition is true, otherwise throw an error.
  // This is only to have a better contract semantic, i.e. another safety net
  // to catch a logic error. The condition shall be fulfilled in normal case.
  // Do NOT use this to enforce a certain condition on any user input.

  function assert$1(condition, message) {
    /* istanbul ignore next */
    if (!condition) {
      throw new Error('ASSERT: ' + message);
    }
  }

  function isDecimalDigit(ch) {
    return ch >= 0x30 && ch <= 0x39; // 0..9
  }

  function isHexDigit(ch) {
    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
  }

  function isOctalDigit(ch) {
    return '01234567'.indexOf(ch) >= 0;
  } // 7.2 White Space


  function isWhiteSpace(ch) {
    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;
  } // 7.3 Line Terminators


  function isLineTerminator(ch) {
    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
  } // 7.6 Identifier Names and Identifiers


  function isIdentifierStart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));
  }

  function isIdentifierPart(ch) {
    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)
    ch >= 0x41 && ch <= 0x5A || // A..Z
    ch >= 0x61 && ch <= 0x7A || // a..z
    ch >= 0x30 && ch <= 0x39 || // 0..9
    ch === 0x5C || // \ (backslash)
    ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));
  } // 7.6.1.1 Keywords


  var keywords = {
    'if': 1,
    'in': 1,
    'do': 1,
    'var': 1,
    'for': 1,
    'new': 1,
    'try': 1,
    'let': 1,
    'this': 1,
    'else': 1,
    'case': 1,
    'void': 1,
    'with': 1,
    'enum': 1,
    'while': 1,
    'break': 1,
    'catch': 1,
    'throw': 1,
    'const': 1,
    'yield': 1,
    'class': 1,
    'super': 1,
    'return': 1,
    'typeof': 1,
    'delete': 1,
    'switch': 1,
    'export': 1,
    'import': 1,
    'public': 1,
    'static': 1,
    'default': 1,
    'finally': 1,
    'extends': 1,
    'package': 1,
    'private': 1,
    'function': 1,
    'continue': 1,
    'debugger': 1,
    'interface': 1,
    'protected': 1,
    'instanceof': 1,
    'implements': 1
  };

  function skipComment() {
    var ch;

    while (index$1 < length) {
      ch = source$1.charCodeAt(index$1);

      if (isWhiteSpace(ch) || isLineTerminator(ch)) {
        ++index$1;
      } else {
        break;
      }
    }
  }

  function scanHexEscape(prefix) {
    var i,
        len,
        ch,
        code = 0;
    len = prefix === 'u' ? 4 : 2;

    for (i = 0; i < len; ++i) {
      if (index$1 < length && isHexDigit(source$1[index$1])) {
        ch = source$1[index$1++];
        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }

    return String.fromCharCode(code);
  }

  function scanUnicodeCodePointEscape() {
    var ch, code, cu1, cu2;
    ch = source$1[index$1];
    code = 0; // At least, one hex digit is required.

    if (ch === '}') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    while (index$1 < length) {
      ch = source$1[index$1++];

      if (!isHexDigit(ch)) {
        break;
      }

      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
    }

    if (code > 0x10FFFF || ch !== '}') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    } // UTF-16 Encoding


    if (code <= 0xFFFF) {
      return String.fromCharCode(code);
    }

    cu1 = (code - 0x10000 >> 10) + 0xD800;
    cu2 = (code - 0x10000 & 1023) + 0xDC00;
    return String.fromCharCode(cu1, cu2);
  }

  function getEscapedIdentifier() {
    var ch, id;
    ch = source$1.charCodeAt(index$1++);
    id = String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

    if (ch === 0x5C) {
      if (source$1.charCodeAt(index$1) !== 0x75) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      ++index$1;
      ch = scanHexEscape('u');

      if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      id = ch;
    }

    while (index$1 < length) {
      ch = source$1.charCodeAt(index$1);

      if (!isIdentifierPart(ch)) {
        break;
      }

      ++index$1;
      id += String.fromCharCode(ch); // '\u' (U+005C, U+0075) denotes an escaped character.

      if (ch === 0x5C) {
        id = id.substr(0, id.length - 1);

        if (source$1.charCodeAt(index$1) !== 0x75) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }

        ++index$1;
        ch = scanHexEscape('u');

        if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }

        id += ch;
      }
    }

    return id;
  }

  function getIdentifier() {
    var start, ch;
    start = index$1++;

    while (index$1 < length) {
      ch = source$1.charCodeAt(index$1);

      if (ch === 0x5C) {
        // Blackslash (U+005C) marks Unicode escape sequence.
        index$1 = start;
        return getEscapedIdentifier();
      }

      if (isIdentifierPart(ch)) {
        ++index$1;
      } else {
        break;
      }
    }

    return source$1.slice(start, index$1);
  }

  function scanIdentifier() {
    var start, id, type;
    start = index$1; // Backslash (U+005C) starts an escaped character.

    id = source$1.charCodeAt(index$1) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.

    if (id.length === 1) {
      type = TokenIdentifier;
    } else if (keywords.hasOwnProperty(id)) {
      // eslint-disable-line no-prototype-builtins
      type = TokenKeyword;
    } else if (id === 'null') {
      type = TokenNullLiteral;
    } else if (id === 'true' || id === 'false') {
      type = TokenBooleanLiteral;
    } else {
      type = TokenIdentifier;
    }

    return {
      type: type,
      value: id,
      start: start,
      end: index$1
    };
  } // 7.7 Punctuators


  function scanPunctuator() {
    var start = index$1,
        code = source$1.charCodeAt(index$1),
        code2,
        ch1 = source$1[index$1],
        ch2,
        ch3,
        ch4;

    switch (code) {
      // Check for most common single-character punctuators.
      case 0x2E: // . dot

      case 0x28: // ( open bracket

      case 0x29: // ) close bracket

      case 0x3B: // ; semicolon

      case 0x2C: // , comma

      case 0x7B: // { open curly brace

      case 0x7D: // } close curly brace

      case 0x5B: // [

      case 0x5D: // ]

      case 0x3A: // :

      case 0x3F: // ?

      case 0x7E:
        // ~
        ++index$1;
        return {
          type: TokenPunctuator,
          value: String.fromCharCode(code),
          start: start,
          end: index$1
        };

      default:
        code2 = source$1.charCodeAt(index$1 + 1); // '=' (U+003D) marks an assignment or comparison operator.

        if (code2 === 0x3D) {
          switch (code) {
            case 0x2B: // +

            case 0x2D: // -

            case 0x2F: // /

            case 0x3C: // <

            case 0x3E: // >

            case 0x5E: // ^

            case 0x7C: // |

            case 0x25: // %

            case 0x26: // &

            case 0x2A:
              // *
              index$1 += 2;
              return {
                type: TokenPunctuator,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                start: start,
                end: index$1
              };

            case 0x21: // !

            case 0x3D:
              // =
              index$1 += 2; // !== and ===

              if (source$1.charCodeAt(index$1) === 0x3D) {
                ++index$1;
              }

              return {
                type: TokenPunctuator,
                value: source$1.slice(start, index$1),
                start: start,
                end: index$1
              };
          }
        }

    } // 4-character punctuator: >>>=


    ch4 = source$1.substr(index$1, 4);

    if (ch4 === '>>>=') {
      index$1 += 4;
      return {
        type: TokenPunctuator,
        value: ch4,
        start: start,
        end: index$1
      };
    } // 3-character punctuators: === !== >>> <<= >>=


    ch3 = ch4.substr(0, 3);

    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
      index$1 += 3;
      return {
        type: TokenPunctuator,
        value: ch3,
        start: start,
        end: index$1
      };
    } // Other 2-character punctuators: ++ -- << >> && ||


    ch2 = ch3.substr(0, 2);

    if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {
      index$1 += 2;
      return {
        type: TokenPunctuator,
        value: ch2,
        start: start,
        end: index$1
      };
    } // 1-character punctuators: < > = ! + - * % & | ^ /


    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
      ++index$1;
      return {
        type: TokenPunctuator,
        value: ch1,
        start: start,
        end: index$1
      };
    }

    throwError({}, MessageUnexpectedToken, ILLEGAL);
  } // 7.8.3 Numeric Literals


  function scanHexLiteral(start) {
    var number = '';

    while (index$1 < length) {
      if (!isHexDigit(source$1[index$1])) {
        break;
      }

      number += source$1[index$1++];
    }

    if (number.length === 0) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    if (isIdentifierStart(source$1.charCodeAt(index$1))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenNumericLiteral,
      value: parseInt('0x' + number, 16),
      start: start,
      end: index$1
    };
  }

  function scanOctalLiteral(start) {
    var number = '0' + source$1[index$1++];

    while (index$1 < length) {
      if (!isOctalDigit(source$1[index$1])) {
        break;
      }

      number += source$1[index$1++];
    }

    if (isIdentifierStart(source$1.charCodeAt(index$1)) || isDecimalDigit(source$1.charCodeAt(index$1))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenNumericLiteral,
      value: parseInt(number, 8),
      octal: true,
      start: start,
      end: index$1
    };
  }

  function scanNumericLiteral() {
    var number, start, ch;
    ch = source$1[index$1];
    assert$1(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
    start = index$1;
    number = '';

    if (ch !== '.') {
      number = source$1[index$1++];
      ch = source$1[index$1]; // Hex number starts with '0x'.
      // Octal number starts with '0'.

      if (number === '0') {
        if (ch === 'x' || ch === 'X') {
          ++index$1;
          return scanHexLiteral(start);
        }

        if (isOctalDigit(ch)) {
          return scanOctalLiteral(start);
        } // decimal number starts with '0' such as '09' is illegal.


        if (ch && isDecimalDigit(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }

      while (isDecimalDigit(source$1.charCodeAt(index$1))) {
        number += source$1[index$1++];
      }

      ch = source$1[index$1];
    }

    if (ch === '.') {
      number += source$1[index$1++];

      while (isDecimalDigit(source$1.charCodeAt(index$1))) {
        number += source$1[index$1++];
      }

      ch = source$1[index$1];
    }

    if (ch === 'e' || ch === 'E') {
      number += source$1[index$1++];
      ch = source$1[index$1];

      if (ch === '+' || ch === '-') {
        number += source$1[index$1++];
      }

      if (isDecimalDigit(source$1.charCodeAt(index$1))) {
        while (isDecimalDigit(source$1.charCodeAt(index$1))) {
          number += source$1[index$1++];
        }
      } else {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }
    }

    if (isIdentifierStart(source$1.charCodeAt(index$1))) {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenNumericLiteral,
      value: parseFloat(number),
      start: start,
      end: index$1
    };
  } // 7.8.4 String Literals


  function scanStringLiteral() {
    var str = '',
        quote,
        start,
        ch,
        code,
        octal = false;
    quote = source$1[index$1];
    assert$1(quote === '\'' || quote === '"', 'String literal must starts with a quote');
    start = index$1;
    ++index$1;

    while (index$1 < length) {
      ch = source$1[index$1++];

      if (ch === quote) {
        quote = '';
        break;
      } else if (ch === '\\') {
        ch = source$1[index$1++];

        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
          switch (ch) {
            case 'u':
            case 'x':
              if (source$1[index$1] === '{') {
                ++index$1;
                str += scanUnicodeCodePointEscape();
              } else {
                str += scanHexEscape(ch);
              }

              break;

            case 'n':
              str += '\n';
              break;

            case 'r':
              str += '\r';
              break;

            case 't':
              str += '\t';
              break;

            case 'b':
              str += '\b';
              break;

            case 'f':
              str += '\f';
              break;

            case 'v':
              str += '\x0B';
              break;

            default:
              if (isOctalDigit(ch)) {
                code = '01234567'.indexOf(ch); // \0 is not octal escape sequence

                if (code !== 0) {
                  octal = true;
                }

                if (index$1 < length && isOctalDigit(source$1[index$1])) {
                  octal = true;
                  code = code * 8 + '01234567'.indexOf(source$1[index$1++]); // 3 digits are only allowed when string starts
                  // with 0, 1, 2, 3

                  if ('0123'.indexOf(ch) >= 0 && index$1 < length && isOctalDigit(source$1[index$1])) {
                    code = code * 8 + '01234567'.indexOf(source$1[index$1++]);
                  }
                }

                str += String.fromCharCode(code);
              } else {
                str += ch;
              }

              break;
          }
        } else {
          if (ch === '\r' && source$1[index$1] === '\n') {
            ++index$1;
          }
        }
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        break;
      } else {
        str += ch;
      }
    }

    if (quote !== '') {
      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    return {
      type: TokenStringLiteral,
      value: str,
      octal: octal,
      start: start,
      end: index$1
    };
  }

  function testRegExp(pattern, flags) {
    var tmp = pattern;

    if (flags.indexOf('u') >= 0) {
      // Replace each astral symbol and every Unicode code point
      // escape sequence with a single ASCII symbol to avoid throwing on
      // regular expressions that are only valid in combination with the
      // `/u` flag.
      // Note: replacing with the ASCII symbol `x` might cause false
      // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
      // perfectly valid pattern that is equivalent to `[a-b]`, but it
      // would be replaced by `[x-b]` which throws an error.
      tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function ($0, $1) {
        if (parseInt($1, 16) <= 0x10FFFF) {
          return 'x';
        }

        throwError({}, MessageInvalidRegExp);
      }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
    } // First, detect invalid regular expressions.


    try {
      new RegExp(tmp);
    } catch (e) {
      throwError({}, MessageInvalidRegExp);
    } // Return a regular expression object for this pattern-flag pair, or
    // `null` in case the current environment doesn't support the flags it
    // uses.


    try {
      return new RegExp(pattern, flags);
    } catch (exception) {
      return null;
    }
  }

  function scanRegExpBody() {
    var ch, str, classMarker, terminated, body;
    ch = source$1[index$1];
    assert$1(ch === '/', 'Regular expression literal must start with a slash');
    str = source$1[index$1++];
    classMarker = false;
    terminated = false;

    while (index$1 < length) {
      ch = source$1[index$1++];
      str += ch;

      if (ch === '\\') {
        ch = source$1[index$1++]; // ECMA-262 7.8.5

        if (isLineTerminator(ch.charCodeAt(0))) {
          throwError({}, MessageUnterminatedRegExp);
        }

        str += ch;
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        throwError({}, MessageUnterminatedRegExp);
      } else if (classMarker) {
        if (ch === ']') {
          classMarker = false;
        }
      } else {
        if (ch === '/') {
          terminated = true;
          break;
        } else if (ch === '[') {
          classMarker = true;
        }
      }
    }

    if (!terminated) {
      throwError({}, MessageUnterminatedRegExp);
    } // Exclude leading and trailing slash.


    body = str.substr(1, str.length - 2);
    return {
      value: body,
      literal: str
    };
  }

  function scanRegExpFlags() {
    var ch, str, flags;
    str = '';
    flags = '';

    while (index$1 < length) {
      ch = source$1[index$1];

      if (!isIdentifierPart(ch.charCodeAt(0))) {
        break;
      }

      ++index$1;

      if (ch === '\\' && index$1 < length) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      } else {
        flags += ch;
        str += ch;
      }
    }

    if (flags.search(/[^gimuy]/g) >= 0) {
      throwError({}, MessageInvalidRegExp, flags);
    }

    return {
      value: flags,
      literal: str
    };
  }

  function scanRegExp() {
    var start, body, flags, value;
    lookahead = null;
    skipComment();
    start = index$1;
    body = scanRegExpBody();
    flags = scanRegExpFlags();
    value = testRegExp(body.value, flags.value);
    return {
      literal: body.literal + flags.literal,
      value: value,
      regex: {
        pattern: body.value,
        flags: flags.value
      },
      start: start,
      end: index$1
    };
  }

  function isIdentifierName(token) {
    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;
  }

  function advance() {
    var ch;
    skipComment();

    if (index$1 >= length) {
      return {
        type: TokenEOF,
        start: index$1,
        end: index$1
      };
    }

    ch = source$1.charCodeAt(index$1);

    if (isIdentifierStart(ch)) {
      return scanIdentifier();
    } // Very common: ( and ) and ;


    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
      return scanPunctuator();
    } // String literal starts with single quote (U+0027) or double quote (U+0022).


    if (ch === 0x27 || ch === 0x22) {
      return scanStringLiteral();
    } // Dot (.) U+002E can also start a floating-point number, hence the need
    // to check the next character.


    if (ch === 0x2E) {
      if (isDecimalDigit(source$1.charCodeAt(index$1 + 1))) {
        return scanNumericLiteral();
      }

      return scanPunctuator();
    }

    if (isDecimalDigit(ch)) {
      return scanNumericLiteral();
    }

    return scanPunctuator();
  }

  function lex() {
    var token;
    token = lookahead;
    index$1 = token.end;
    lookahead = advance();
    index$1 = token.end;
    return token;
  }

  function peek$1() {
    var pos;
    pos = index$1;
    lookahead = advance();
    index$1 = pos;
  }

  function finishArrayExpression(elements) {
    var node = new ASTNode(SyntaxArrayExpression);
    node.elements = elements;
    return node;
  }

  function finishBinaryExpression(operator, left, right) {
    var node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);
    node.operator = operator;
    node.left = left;
    node.right = right;
    return node;
  }

  function finishCallExpression(callee, args) {
    var node = new ASTNode(SyntaxCallExpression);
    node.callee = callee;
    node.arguments = args;
    return node;
  }

  function finishConditionalExpression(test, consequent, alternate) {
    var node = new ASTNode(SyntaxConditionalExpression);
    node.test = test;
    node.consequent = consequent;
    node.alternate = alternate;
    return node;
  }

  function finishIdentifier(name) {
    var node = new ASTNode(SyntaxIdentifier);
    node.name = name;
    return node;
  }

  function finishLiteral(token) {
    var node = new ASTNode(SyntaxLiteral);
    node.value = token.value;
    node.raw = source$1.slice(token.start, token.end);

    if (token.regex) {
      if (node.raw === '//') {
        node.raw = '/(?:)/';
      }

      node.regex = token.regex;
    }

    return node;
  }

  function finishMemberExpression(accessor, object, property) {
    var node = new ASTNode(SyntaxMemberExpression);
    node.computed = accessor === '[';
    node.object = object;
    node.property = property;
    if (!node.computed) property.member = true;
    return node;
  }

  function finishObjectExpression(properties) {
    var node = new ASTNode(SyntaxObjectExpression);
    node.properties = properties;
    return node;
  }

  function finishProperty(kind, key, value) {
    var node = new ASTNode(SyntaxProperty);
    node.key = key;
    node.value = value;
    node.kind = kind;
    return node;
  }

  function finishUnaryExpression(operator, argument) {
    var node = new ASTNode(SyntaxUnaryExpression);
    node.operator = operator;
    node.argument = argument;
    node.prefix = true;
    return node;
  } // Throw an exception


  function throwError(token, messageFormat) {
    var error,
        args = Array.prototype.slice.call(arguments, 2),
        msg = messageFormat.replace(/%(\d)/g, function (whole, index) {
      assert$1(index < args.length, 'Message reference must be in range');
      return args[index];
    });
    error = new Error(msg);
    error.index = index$1;
    error.description = msg;
    throw error;
  } // Throw an exception because of the token.


  function throwUnexpected(token) {
    if (token.type === TokenEOF) {
      throwError(token, MessageUnexpectedEOS);
    }

    if (token.type === TokenNumericLiteral) {
      throwError(token, MessageUnexpectedNumber);
    }

    if (token.type === TokenStringLiteral) {
      throwError(token, MessageUnexpectedString);
    }

    if (token.type === TokenIdentifier) {
      throwError(token, MessageUnexpectedIdentifier);
    }

    if (token.type === TokenKeyword) {
      throwError(token, MessageUnexpectedReserved);
    } // BooleanLiteral, NullLiteral, or Punctuator.


    throwError(token, MessageUnexpectedToken, token.value);
  } // Expect the next token to match the specified punctuator.
  // If not, an exception will be thrown.


  function expect(value) {
    var token = lex();

    if (token.type !== TokenPunctuator || token.value !== value) {
      throwUnexpected(token);
    }
  } // Return true if the next token matches the specified punctuator.


  function match(value) {
    return lookahead.type === TokenPunctuator && lookahead.value === value;
  } // Return true if the next token matches the specified keyword


  function matchKeyword(keyword) {
    return lookahead.type === TokenKeyword && lookahead.value === keyword;
  } // 11.1.4 Array Initialiser


  function parseArrayInitialiser() {
    var elements = [];
    index$1 = lookahead.start;
    expect('[');

    while (!match(']')) {
      if (match(',')) {
        lex();
        elements.push(null);
      } else {
        elements.push(parseConditionalExpression());

        if (!match(']')) {
          expect(',');
        }
      }
    }

    lex();
    return finishArrayExpression(elements);
  } // 11.1.5 Object Initialiser


  function parseObjectPropertyKey() {
    var token;
    index$1 = lookahead.start;
    token = lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.

    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
      if (token.octal) {
        throwError(token, MessageStrictOctalLiteral);
      }

      return finishLiteral(token);
    }

    return finishIdentifier(token.value);
  }

  function parseObjectProperty() {
    var token, key, id, value;
    index$1 = lookahead.start;
    token = lookahead;

    if (token.type === TokenIdentifier) {
      id = parseObjectPropertyKey();
      expect(':');
      value = parseConditionalExpression();
      return finishProperty('init', id, value);
    }

    if (token.type === TokenEOF || token.type === TokenPunctuator) {
      throwUnexpected(token);
    } else {
      key = parseObjectPropertyKey();
      expect(':');
      value = parseConditionalExpression();
      return finishProperty('init', key, value);
    }
  }

  function parseObjectInitialiser() {
    var properties = [],
        property,
        name,
        key,
        map = {},
        toString = String;
    index$1 = lookahead.start;
    expect('{');

    while (!match('}')) {
      property = parseObjectProperty();

      if (property.key.type === SyntaxIdentifier) {
        name = property.key.name;
      } else {
        name = toString(property.key.value);
      }

      key = '$' + name;

      if (Object.prototype.hasOwnProperty.call(map, key)) {
        throwError({}, MessageStrictDuplicateProperty);
      } else {
        map[key] = true;
      }

      properties.push(property);

      if (!match('}')) {
        expect(',');
      }
    }

    expect('}');
    return finishObjectExpression(properties);
  } // 11.1.6 The Grouping Operator


  function parseGroupExpression() {
    var expr;
    expect('(');
    expr = parseExpression();
    expect(')');
    return expr;
  } // 11.1 Primary Expressions


  var legalKeywords = {
    "if": 1,
    "this": 1
  };

  function parsePrimaryExpression() {
    var type, token, expr;

    if (match('(')) {
      return parseGroupExpression();
    }

    if (match('[')) {
      return parseArrayInitialiser();
    }

    if (match('{')) {
      return parseObjectInitialiser();
    }

    type = lookahead.type;
    index$1 = lookahead.start;

    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
      expr = finishIdentifier(lex().value);
    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
      if (lookahead.octal) {
        throwError(lookahead, MessageStrictOctalLiteral);
      }

      expr = finishLiteral(lex());
    } else if (type === TokenKeyword) {
      throw new Error(DISABLED);
    } else if (type === TokenBooleanLiteral) {
      token = lex();
      token.value = token.value === 'true';
      expr = finishLiteral(token);
    } else if (type === TokenNullLiteral) {
      token = lex();
      token.value = null;
      expr = finishLiteral(token);
    } else if (match('/') || match('/=')) {
      expr = finishLiteral(scanRegExp());
      peek$1();
    } else {
      throwUnexpected(lex());
    }

    return expr;
  } // 11.2 Left-Hand-Side Expressions


  function parseArguments() {
    var args = [];
    expect('(');

    if (!match(')')) {
      while (index$1 < length) {
        args.push(parseConditionalExpression());

        if (match(')')) {
          break;
        }

        expect(',');
      }
    }

    expect(')');
    return args;
  }

  function parseNonComputedProperty() {
    var token;
    index$1 = lookahead.start;
    token = lex();

    if (!isIdentifierName(token)) {
      throwUnexpected(token);
    }

    return finishIdentifier(token.value);
  }

  function parseNonComputedMember() {
    expect('.');
    return parseNonComputedProperty();
  }

  function parseComputedMember() {
    var expr;
    expect('[');
    expr = parseExpression();
    expect(']');
    return expr;
  }

  function parseLeftHandSideExpressionAllowCall() {
    var expr, args, property;
    expr = parsePrimaryExpression();

    for (;;) {
      if (match('.')) {
        property = parseNonComputedMember();
        expr = finishMemberExpression('.', expr, property);
      } else if (match('(')) {
        args = parseArguments();
        expr = finishCallExpression(expr, args);
      } else if (match('[')) {
        property = parseComputedMember();
        expr = finishMemberExpression('[', expr, property);
      } else {
        break;
      }
    }

    return expr;
  } // 11.3 Postfix Expressions


  function parsePostfixExpression() {
    var expr = parseLeftHandSideExpressionAllowCall();

    if (lookahead.type === TokenPunctuator) {
      if (match('++') || match('--')) {
        throw new Error(DISABLED);
      }
    }

    return expr;
  } // 11.4 Unary Operators


  function parseUnaryExpression() {
    var token, expr;

    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
      expr = parsePostfixExpression();
    } else if (match('++') || match('--')) {
      throw new Error(DISABLED);
    } else if (match('+') || match('-') || match('~') || match('!')) {
      token = lex();
      expr = parseUnaryExpression();
      expr = finishUnaryExpression(token.value, expr);
    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
      throw new Error(DISABLED);
    } else {
      expr = parsePostfixExpression();
    }

    return expr;
  }

  function binaryPrecedence(token) {
    var prec = 0;

    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
      return 0;
    }

    switch (token.value) {
      case '||':
        prec = 1;
        break;

      case '&&':
        prec = 2;
        break;

      case '|':
        prec = 3;
        break;

      case '^':
        prec = 4;
        break;

      case '&':
        prec = 5;
        break;

      case '==':
      case '!=':
      case '===':
      case '!==':
        prec = 6;
        break;

      case '<':
      case '>':
      case '<=':
      case '>=':
      case 'instanceof':
      case 'in':
        prec = 7;
        break;

      case '<<':
      case '>>':
      case '>>>':
        prec = 8;
        break;

      case '+':
      case '-':
        prec = 9;
        break;

      case '*':
      case '/':
      case '%':
        prec = 11;
        break;
    }

    return prec;
  } // 11.5 Multiplicative Operators
  // 11.6 Additive Operators
  // 11.7 Bitwise Shift Operators
  // 11.8 Relational Operators
  // 11.9 Equality Operators
  // 11.10 Binary Bitwise Operators
  // 11.11 Binary Logical Operators


  function parseBinaryExpression() {
    var marker, markers, expr, token, prec, stack, right, operator, left, i;
    marker = lookahead;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);

    if (prec === 0) {
      return left;
    }

    token.prec = prec;
    lex();
    markers = [marker, lookahead];
    right = parseUnaryExpression();
    stack = [left, token, right];

    while ((prec = binaryPrecedence(lookahead)) > 0) {
      // Reduce: make a binary expression from the three topmost entries.
      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
        right = stack.pop();
        operator = stack.pop().value;
        left = stack.pop();
        markers.pop();
        expr = finishBinaryExpression(operator, left, right);
        stack.push(expr);
      } // Shift.


      token = lex();
      token.prec = prec;
      stack.push(token);
      markers.push(lookahead);
      expr = parseUnaryExpression();
      stack.push(expr);
    } // Final reduce to clean-up the stack.


    i = stack.length - 1;
    expr = stack[i];
    markers.pop();

    while (i > 1) {
      markers.pop();
      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
      i -= 2;
    }

    return expr;
  } // 11.12 Conditional Operator


  function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();

    if (match('?')) {
      lex();
      consequent = parseConditionalExpression();
      expect(':');
      alternate = parseConditionalExpression();
      expr = finishConditionalExpression(expr, consequent, alternate);
    }

    return expr;
  } // 11.14 Comma Operator


  function parseExpression() {
    var expr = parseConditionalExpression();

    if (match(',')) {
      throw new Error(DISABLED); // no sequence expressions
    }

    return expr;
  }

  function parse$6 (code) {
    source$1 = code;
    index$1 = 0;
    length = source$1.length;
    lookahead = null;
    peek$1();
    var expr = parseExpression();

    if (lookahead.type !== TokenEOF) {
      throw new Error("Unexpect token after expression.");
    }

    return expr;
  }

  var constants$1 = {
    NaN: 'NaN',
    E: 'Math.E',
    LN2: 'Math.LN2',
    LN10: 'Math.LN10',
    LOG2E: 'Math.LOG2E',
    LOG10E: 'Math.LOG10E',
    PI: 'Math.PI',
    SQRT1_2: 'Math.SQRT1_2',
    SQRT2: 'Math.SQRT2',
    MIN_VALUE: 'Number.MIN_VALUE',
    MAX_VALUE: 'Number.MAX_VALUE'
  };

  function functions (codegen) {
    function fncall(name, args, cast, type) {
      var obj = codegen(args[0]);

      if (cast) {
        obj = cast + '(' + obj + ')';
        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
      }

      return obj + '.' + name + (type < 0 ? '' : type === 0 ? '()' : '(' + args.slice(1).map(codegen).join(',') + ')');
    }

    function fn(name, cast, type) {
      return function (args) {
        return fncall(name, args, cast, type);
      };
    }

    var DATE = 'new Date',
        STRING = 'String',
        REGEXP = 'RegExp';
    return {
      // MATH functions
      isNaN: 'Number.isNaN',
      isFinite: 'Number.isFinite',
      abs: 'Math.abs',
      acos: 'Math.acos',
      asin: 'Math.asin',
      atan: 'Math.atan',
      atan2: 'Math.atan2',
      ceil: 'Math.ceil',
      cos: 'Math.cos',
      exp: 'Math.exp',
      floor: 'Math.floor',
      log: 'Math.log',
      max: 'Math.max',
      min: 'Math.min',
      pow: 'Math.pow',
      random: 'Math.random',
      round: 'Math.round',
      sin: 'Math.sin',
      sqrt: 'Math.sqrt',
      tan: 'Math.tan',
      clamp: function clamp(args) {
        if (args.length < 3) error('Missing arguments to clamp function.');
        if (args.length > 3) error('Too many arguments to clamp function.');
        var a = args.map(codegen);
        return 'Math.max(' + a[1] + ', Math.min(' + a[2] + ',' + a[0] + '))';
      },
      // DATE functions
      now: 'Date.now',
      utc: 'Date.UTC',
      datetime: DATE,
      date: fn('getDate', DATE, 0),
      day: fn('getDay', DATE, 0),
      year: fn('getFullYear', DATE, 0),
      month: fn('getMonth', DATE, 0),
      hours: fn('getHours', DATE, 0),
      minutes: fn('getMinutes', DATE, 0),
      seconds: fn('getSeconds', DATE, 0),
      milliseconds: fn('getMilliseconds', DATE, 0),
      time: fn('getTime', DATE, 0),
      timezoneoffset: fn('getTimezoneOffset', DATE, 0),
      utcdate: fn('getUTCDate', DATE, 0),
      utcday: fn('getUTCDay', DATE, 0),
      utcyear: fn('getUTCFullYear', DATE, 0),
      utcmonth: fn('getUTCMonth', DATE, 0),
      utchours: fn('getUTCHours', DATE, 0),
      utcminutes: fn('getUTCMinutes', DATE, 0),
      utcseconds: fn('getUTCSeconds', DATE, 0),
      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),
      // sequence functions
      length: fn('length', null, -1),
      join: fn('join', null),
      indexof: fn('indexOf', null),
      lastindexof: fn('lastIndexOf', null),
      slice: fn('slice', null),
      reverse: function reverse(args) {
        return '(' + codegen(args[0]) + ').slice().reverse()';
      },
      // STRING functions
      parseFloat: 'parseFloat',
      parseInt: 'parseInt',
      upper: fn('toUpperCase', STRING, 0),
      lower: fn('toLowerCase', STRING, 0),
      substring: fn('substring', STRING),
      split: fn('split', STRING),
      replace: fn('replace', STRING),
      trim: fn('trim', STRING, 0),
      // REGEXP functions
      regexp: REGEXP,
      test: fn('test', REGEXP),
      // Control Flow functions
      if: function _if(args) {
        if (args.length < 3) error('Missing arguments to if function.');
        if (args.length > 3) error('Too many arguments to if function.');
        var a = args.map(codegen);
        return '(' + a[0] + '?' + a[1] + ':' + a[2] + ')';
      }
    };
  }

  function stripQuotes(s) {
    var n = s && s.length - 1;
    return n && (s[0] === '"' && s[n] === '"' || s[0] === '\'' && s[n] === '\'') ? s.slice(1, -1) : s;
  }

  function codegen (opt) {
    opt = opt || {};
    var whitelist = opt.whitelist ? toSet(opt.whitelist) : {},
        blacklist = opt.blacklist ? toSet(opt.blacklist) : {},
        constants = opt.constants || constants$1,
        functions$1 = (opt.functions || functions)(visit),
        globalvar = opt.globalvar,
        fieldvar = opt.fieldvar,
        globals = {},
        fields = {},
        memberDepth = 0;
    var outputGlobal = isFunction(globalvar) ? globalvar : function (id) {
      return globalvar + '["' + id + '"]';
    };

    function visit(ast) {
      if (isString(ast)) return ast;
      var generator = Generators[ast.type];
      if (generator == null) error('Unsupported type: ' + ast.type);
      return generator(ast);
    }

    var Generators = {
      Literal: function Literal(n) {
        return n.raw;
      },
      Identifier: function Identifier(n) {
        var id = n.name;

        if (memberDepth > 0) {
          return id;
        } else if (hasOwnProperty$1(blacklist, id)) {
          return error('Illegal identifier: ' + id);
        } else if (hasOwnProperty$1(constants, id)) {
          return constants[id];
        } else if (hasOwnProperty$1(whitelist, id)) {
          return id;
        } else {
          globals[id] = 1;
          return outputGlobal(id);
        }
      },
      MemberExpression: function MemberExpression(n) {
        var d = !n.computed;
        var o = visit(n.object);
        if (d) memberDepth += 1;
        var p = visit(n.property);

        if (o === fieldvar) {
          // strip quotes to sanitize field name (#1653)
          fields[stripQuotes(p)] = 1;
        }

        if (d) memberDepth -= 1;
        return o + (d ? '.' + p : '[' + p + ']');
      },
      CallExpression: function CallExpression(n) {
        if (n.callee.type !== 'Identifier') {
          error('Illegal callee type: ' + n.callee.type);
        }

        var callee = n.callee.name;
        var args = n.arguments;
        var fn = hasOwnProperty$1(functions$1, callee) && functions$1[callee];
        if (!fn) error('Unrecognized function: ' + callee);
        return isFunction(fn) ? fn(args) : fn + '(' + args.map(visit).join(',') + ')';
      },
      ArrayExpression: function ArrayExpression(n) {
        return '[' + n.elements.map(visit).join(',') + ']';
      },
      BinaryExpression: function BinaryExpression(n) {
        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
      },
      UnaryExpression: function UnaryExpression(n) {
        return '(' + n.operator + visit(n.argument) + ')';
      },
      ConditionalExpression: function ConditionalExpression(n) {
        return '(' + visit(n.test) + '?' + visit(n.consequent) + ':' + visit(n.alternate) + ')';
      },
      LogicalExpression: function LogicalExpression(n) {
        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
      },
      ObjectExpression: function ObjectExpression(n) {
        return '{' + n.properties.map(visit).join(',') + '}';
      },
      Property: function Property(n) {
        memberDepth += 1;
        var k = visit(n.key);
        memberDepth -= 1;
        return k + ':' + visit(n.value);
      }
    };

    function codegen(ast) {
      var result = {
        code: visit(ast),
        globals: Object.keys(globals),
        fields: Object.keys(fields)
      };
      globals = {};
      fields = {};
      return result;
    }

    codegen.functions = functions$1;
    codegen.constants = constants;
    return codegen;
  }

  var Intersect = 'intersect';
  var Union = 'union';
  var VlMulti = 'vlMulti';
  var Or = 'or';
  var And = 'and';

  var TYPE_ENUM = 'E',
      TYPE_RANGE_INC = 'R',
      TYPE_RANGE_EXC = 'R-E',
      TYPE_RANGE_LE = 'R-LE',
      TYPE_RANGE_RE = 'R-RE',
      UNIT_INDEX = 'index:unit'; // TODO: revisit date coercion?

  function testPoint(datum, entry) {
    var fields = entry.fields,
        values = entry.values,
        n = fields.length,
        i = 0,
        dval,
        f;

    for (; i < n; ++i) {
      f = fields[i];
      f.getter = field.getter || field(f.field);
      dval = f.getter(datum);
      if (isDate(dval)) dval = toNumber(dval);
      if (isDate(values[i])) values[i] = toNumber(values[i]);
      if (isDate(values[i][0])) values[i] = values[i].map(toNumber);

      if (f.type === TYPE_ENUM) {
        // Enumerated fields can either specify individual values (single/multi selections)
        // or an array of values (interval selections).
        if (isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {
          return false;
        }
      } else {
        if (f.type === TYPE_RANGE_INC) {
          if (!inrange(dval, values[i])) return false;
        } else if (f.type === TYPE_RANGE_RE) {
          // Discrete selection of bins test within the range [bin_start, bin_end).
          if (!inrange(dval, values[i], true, false)) return false;
        } else if (f.type === TYPE_RANGE_EXC) {
          // 'R-E'/'R-LE' included for completeness.
          if (!inrange(dval, values[i], false, false)) return false;
        } else if (f.type === TYPE_RANGE_LE) {
          if (!inrange(dval, values[i], false, true)) return false;
        }
      }
    }

    return true;
  }
  /**
   * Tests if a tuple is contained within an interactive selection.
   * @param {string} name - The name of the data set representing the selection.
   *  Tuples in the dataset are of the form
   *  {unit: string, fields: array<fielddef>, values: array<*>}.
   *  Fielddef is of the form
   *  {field: string, channel: string, type: 'E' | 'R'} where
   *  'type' identifies whether tuples in the dataset enumerate
   *  values for the field, or specify a continuous range.
   * @param {object} datum - The tuple to test for inclusion.
   * @param {string} op - The set operation for combining selections.
   *   One of 'intersect' or 'union' (default).
   * @return {boolean} - True if the datum is in the selection, false otherwise.
   */


  function selectionTest(name, datum, op) {
    var data = this.context.data[name],
        entries = data ? data.values.value : [],
        unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,
        intersect = op === Intersect,
        n = entries.length,
        i = 0,
        entry,
        miss,
        count,
        unit,
        b;

    for (; i < n; ++i) {
      entry = entries[i];

      if (unitIdx && intersect) {
        // multi selections union within the same unit and intersect across units.
        miss = miss || {};
        count = miss[unit = entry.unit] || 0; // if we've already matched this unit, skip.

        if (count === -1) continue;
        b = testPoint(datum, entry);
        miss[unit] = b ? -1 : ++count; // if we match and there are no other units return true
        // if we've missed against all tuples in this unit return false

        if (b && unitIdx.size === 1) return true;
        if (!b && count === unitIdx.get(unit).count) return false;
      } else {
        b = testPoint(datum, entry); // if we find a miss and we do require intersection return false
        // if we find a match and we don't require intersection return true

        if (intersect ^ b) return b;
      }
    } // if intersecting and we made it here, then we saw no misses
    // if not intersecting, then we saw no matches
    // if no active selections, return false


    return n && intersect;
  }

  /**
   * Resolves selection for use as a scale domain or reads via the API.
   * @param {string} name - The name of the dataset representing the selection
   * @param {string} [op='union'] - The set operation for combining selections.
   *                 One of 'intersect' or 'union' (default).
   * @returns {object} An object of selected fields and values.
   */

  function selectionResolve(name, op, isMulti) {
    var data = this.context.data[name],
        entries = data ? data.values.value : [],
        resolved = {},
        multiRes = {},
        types = {},
        entry,
        fields,
        values,
        unit,
        field,
        res,
        resUnit,
        type,
        union,
        n = entries.length,
        i = 0,
        j,
        m; // First union all entries within the same unit.

    for (; i < n; ++i) {
      entry = entries[i];
      unit = entry.unit;
      fields = entry.fields;
      values = entry.values;

      for (j = 0, m = fields.length; j < m; ++j) {
        field = fields[j];
        res = resolved[field.field] || (resolved[field.field] = {});
        resUnit = res[unit] || (res[unit] = []);
        types[field.field] = type = field.type.charAt(0);
        union = ops[type + '_union'];
        res[unit] = union(resUnit, array(values[j]));
      } // If the same multi-selection is repeated over views and projected over
      // an encoding, it may operate over different fields making it especially
      // tricky to reliably resolve it. At best, we can de-dupe identical entries
      // but doing so may be more computationally expensive than it is worth.
      // Instead, for now, we simply transform our store representation into
      // a more human-friendly one.


      if (isMulti) {
        resUnit = multiRes[unit] || (multiRes[unit] = []);
        resUnit.push(array(values).reduce(function (obj, curr, j) {
          return obj[fields[j].field] = curr, obj;
        }, {}));
      }
    } // Then resolve fields across units as per the op.


    op = op || Union;
    Object.keys(resolved).forEach(function (field) {
      resolved[field] = Object.keys(resolved[field]).map(function (unit) {
        return resolved[field][unit];
      }).reduce(function (acc, curr) {
        return acc === undefined ? curr : ops[types[field] + '_' + op](acc, curr);
      });
    });
    entries = Object.keys(multiRes);

    if (isMulti && entries.length) {
      resolved[VlMulti] = op === Union ? _defineProperty({}, Or, entries.reduce(function (acc, k) {
        return acc.push.apply(acc, multiRes[k]), acc;
      }, [])) : _defineProperty({}, And, entries.map(function (k) {
        return _defineProperty({}, Or, multiRes[k]);
      }));
    }

    return resolved;
  }
  var ops = {
    E_union: function E_union(base, value) {
      if (!base.length) return value;
      var i = 0,
          n = value.length;

      for (; i < n; ++i) {
        if (base.indexOf(value[i]) < 0) base.push(value[i]);
      }

      return base;
    },
    E_intersect: function E_intersect(base, value) {
      return !base.length ? value : base.filter(function (v) {
        return value.indexOf(v) >= 0;
      });
    },
    R_union: function R_union(base, value) {
      var lo = toNumber(value[0]),
          hi = toNumber(value[1]);

      if (lo > hi) {
        lo = value[1];
        hi = value[0];
      }

      if (!base.length) return [lo, hi];
      if (base[0] > lo) base[0] = lo;
      if (base[1] < hi) base[1] = hi;
      return base;
    },
    R_intersect: function R_intersect(base, value) {
      var lo = toNumber(value[0]),
          hi = toNumber(value[1]);

      if (lo > hi) {
        lo = value[1];
        hi = value[0];
      }

      if (!base.length) return [lo, hi];

      if (hi < base[0] || base[1] < lo) {
        return [];
      } else {
        if (base[0] < lo) base[0] = lo;
        if (base[1] > hi) base[1] = hi;
      }

      return base;
    }
  };

  var DataPrefix = ':',
      IndexPrefix = '@';
  function selectionVisitor(name, args, scope, params) {
    if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');
    var data = args[0].value,
        op = args.length >= 2 && peek(args).value,
        field = 'unit',
        indexName = IndexPrefix + field,
        dataName = DataPrefix + data; // eslint-disable-next-line no-prototype-builtins

    if (op === Intersect && !hasOwnProperty$1(params, indexName)) {
      params[indexName] = scope.getData(data).indataRef(scope, field);
    } // eslint-disable-next-line no-prototype-builtins


    if (!hasOwnProperty$1(params, dataName)) {
      params[dataName] = scope.getData(data).tuplesRef();
    }
  }

  function channel_luminance_value(channelValue) {
    var val = channelValue / 255;

    if (val <= 0.03928) {
      return val / 12.92;
    }

    return Math.pow((val + 0.055) / 1.055, 2.4);
  }

  function luminance(color) {
    var c = rgb(color),
        r = channel_luminance_value(c.r),
        g = channel_luminance_value(c.g),
        b = channel_luminance_value(c.b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  } // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef

  function contrast(color1, color2) {
    var lum1 = luminance(color1),
        lum2 = luminance(color2),
        lumL = Math.max(lum1, lum2),
        lumD = Math.min(lum1, lum2);
    return (lumL + 0.05) / (lumD + 0.05);
  }

  function data$1(name) {
    var data = this.context.data[name];
    return data ? data.values.value : [];
  }
  function indata(name, field, value) {
    var index = this.context.data[name]['index:' + field],
        entry = index ? index.value.get(value) : undefined;
    return entry ? entry.count : entry;
  }
  function setdata(name, tuples) {
    var df = this.context.dataflow,
        data = this.context.data[name],
        input = data.input;
    df.pulse(input, df.changeset().remove(truthy).insert(tuples));
    return 1;
  }

  function encode$2 (item, name, retval) {
    if (item) {
      var df = this.context.dataflow,
          target = item.mark.source;
      df.pulse(target, df.changeset().encode(item, name));
    }

    return retval !== undefined ? retval : item;
  }

  var formatCache = {};

  function formatter$1(type, method, specifier) {
    var k = type + ':' + specifier,
        e = formatCache[k];

    if (!e || e[0] !== method) {
      formatCache[k] = e = [method, method(specifier)];
    }

    return e[1];
  }

  function format$4(_, specifier) {
    return formatter$1('format', format$3, specifier)(_);
  }
  function timeFormat$2(_, specifier) {
    return formatter$1('timeFormat', timeFormat$1, specifier)(_);
  }
  function utcFormat$2(_, specifier) {
    return formatter$1('utcFormat', utcFormat$1, specifier)(_);
  }
  function timeParse$1(_, specifier) {
    return formatter$1('timeParse', timeParse, specifier)(_);
  }
  function utcParse$1(_, specifier) {
    return formatter$1('utcParse', utcParse, specifier)(_);
  }
  var dateObj = new Date(2000, 0, 1);

  function time$1(month, day, specifier) {
    if (!Number.isInteger(month) || !Number.isInteger(day)) return '';
    dateObj.setYear(2000);
    dateObj.setMonth(month);
    dateObj.setDate(day);
    return timeFormat$2(dateObj, specifier);
  }

  function monthFormat(month) {
    return time$1(month, 1, '%B');
  }
  function monthAbbrevFormat(month) {
    return time$1(month, 1, '%b');
  }
  function dayFormat(day) {
    return time$1(0, 2 + day, '%A');
  }
  function dayAbbrevFormat(day) {
    return time$1(0, 2 + day, '%a');
  }

  function getScale(name, ctx) {
    var s;
    return isFunction(name) ? name : isString(name) ? (s = ctx.scales[name]) && s.value : undefined;
  }
  function range$4(name, group) {
    var s = getScale(name, (group || this).context);
    return s && s.range ? s.range() : [];
  }
  function domain$1(name, group) {
    var s = getScale(name, (group || this).context);
    return s ? s.domain() : [];
  }
  function bandwidth(name, group) {
    var s = getScale(name, (group || this).context);
    return s && s.bandwidth ? s.bandwidth() : 0;
  }
  function bandspace(count, paddingInner, paddingOuter) {
    return bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);
  }
  function copy$2(name, group) {
    var s = getScale(name, (group || this).context);
    return s ? s.copy() : undefined;
  }
  function scale$3(name, value, group) {
    var s = getScale(name, (group || this).context);
    return s && value !== undefined ? s(value) : undefined;
  }
  function invert(name, range, group) {
    var s = getScale(name, (group || this).context);
    return !s ? undefined : isArray(range) ? (s.invertRange || s.invert)(range) : (s.invert || s.invertExtent)(range);
  }

  function geoMethod(methodName, globalMethod) {
    return function (projection, geojson, group) {
      if (projection) {
        // projection defined, use it
        var p = getScale(projection, (group || this).context);
        return p && p.path[methodName](geojson);
      } else {
        // projection undefined, use global method
        return globalMethod(geojson);
      }
    };
  }

  var geoArea = geoMethod('area', area$3);
  var geoBounds = geoMethod('bounds', bounds$1);
  var geoCentroid = geoMethod('centroid', centroid);

  function inScope (item) {
    var group = this.context.group,
        value = false;
    if (group) while (item) {
      if (item === group) {
        value = true;
        break;
      }

      item = item.mark.group;
    }
    return value;
  }

  function intersect$3 (b, opt, group) {
    if (!b) return [];

    var _b = _slicedToArray(b, 2),
        u = _b[0],
        v = _b[1],
        box = new Bounds().set(u[0], u[1], v[0], v[1]),
        scene = group || this.context.dataflow.scenegraph().root;

    return intersect$1(scene, box, filter$2(opt));
  }

  function filter$2(opt) {
    var p = null;

    if (opt) {
      var types = array(opt.marktype),
          names = array(opt.markname);

      p = function p(_) {
        return (!types.length || types.some(function (t) {
          return _.marktype === t;
        })) && (!names.length || names.some(function (s) {
          return _.name === s;
        }));
      };
    }

    return p;
  }

  function log$4(df, method, args) {
    try {
      df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));
    } catch (err) {
      df.warn(err);
    }

    return args[args.length - 1];
  }

  function warn() {
    return log$4(this.context.dataflow, 'warn', arguments);
  }
  function info() {
    return log$4(this.context.dataflow, 'info', arguments);
  }
  function debug$2() {
    return log$4(this.context.dataflow, 'debug', arguments);
  }

  function merge$3 () {
    var args = [].slice.call(arguments);
    args.unshift({});
    return extend.apply(null, args);
  }

  function equal(a, b) {
    return a === b || a !== a && b !== b ? true : isArray(a) ? isArray(b) && a.length === b.length ? equalArray(a, b) : false : isObject(a) && isObject(b) ? equalObject(a, b) : false;
  }

  function equalArray(a, b) {
    for (var i = 0, n = a.length; i < n; ++i) {
      if (!equal(a[i], b[i])) return false;
    }

    return true;
  }

  function equalObject(a, b) {
    for (var key in a) {
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  function removePredicate(props) {
    return function (_) {
      return equalObject(props, _);
    };
  }

  function modify (name, insert, remove, toggle, modify, values) {
    var df = this.context.dataflow,
        data = this.context.data[name],
        input = data.input,
        changes = data.changes,
        stamp = df.stamp(),
        predicate,
        key;

    if (df._trigger === false || !(input.value.length || insert || toggle)) {
      // nothing to do!
      return 0;
    }

    if (!changes || changes.stamp < stamp) {
      data.changes = changes = df.changeset();
      changes.stamp = stamp;
      df.runAfter(function () {
        data.modified = true;
        df.pulse(input, changes).run();
      }, true, 1);
    }

    if (remove) {
      predicate = remove === true ? truthy : isArray(remove) || isTuple(remove) ? remove : removePredicate(remove);
      changes.remove(predicate);
    }

    if (insert) {
      changes.insert(insert);
    }

    if (toggle) {
      predicate = removePredicate(toggle);

      if (input.value.some(predicate)) {
        changes.remove(predicate);
      } else {
        changes.insert(toggle);
      }
    }

    if (modify) {
      for (key in values) {
        changes.modify(modify, key, values[key]);
      }
    }

    return 1;
  }

  function pinchDistance(event) {
    var t = event.touches,
        dx = t[0].clientX - t[1].clientX,
        dy = t[0].clientY - t[1].clientY;
    return Math.sqrt(dx * dx + dy * dy);
  }
  function pinchAngle(event) {
    var t = event.touches;
    return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);
  }

  function scaleGradient (scale, p0, p1, count, group) {
    scale = getScale(scale, (group || this).context);
    var gradient = Gradient(p0, p1);
    var stops = scale.domain(),
        min = stops[0],
        max = peek(stops),
        fraction = identity;

    if (!(max - min)) {
      // expand scale if domain has zero span, fix #1479
      scale = (scale.interpolator ? scale$2('sequential')().interpolator(scale.interpolator()) : scale$2('linear')().interpolate(scale.interpolate()).range(scale.range())).domain([min = 0, max = 1]);
    } else {
      fraction = scaleFraction(scale, min, max);
    }

    if (scale.ticks) {
      stops = scale.ticks(+count || 15);
      if (min !== stops[0]) stops.unshift(min);
      if (max !== peek(stops)) stops.push(max);
    }

    stops.forEach(function (_) {
      return gradient.stop(fraction(_), scale(_));
    });
    return gradient;
  }

  function geoShape(projection, geojson, group) {
    var p = getScale(projection, (group || this).context);
    return function (context) {
      return p ? p.path.context(context)(geojson) : '';
    };
  }
  function pathShape(path) {
    var p = null;
    return function (context) {
      return context ? pathRender(context, p = p || pathParse(path)) : path;
    };
  }

  var EMPTY = {};

  function datum(d) {
    return d.data;
  }

  function treeNodes(name, context) {
    var tree = data$1.call(context, name);
    return tree.root && tree.root.lookup || EMPTY;
  }

  function treePath(name, source, target) {
    var nodes = treeNodes(name, this),
        s = nodes[source],
        t = nodes[target];
    return s && t ? s.path(t).map(datum) : undefined;
  }
  function treeAncestors(name, node) {
    var n = treeNodes(name, this)[node];
    return n ? n.ancestors().map(datum) : undefined;
  }

  var _window = typeof window !== 'undefined' && window || null;

  function screen() {
    return _window ? _window.screen : {};
  }
  function windowSize() {
    return _window ? [_window.innerWidth, _window.innerHeight] : [undefined, undefined];
  }
  function containerSize() {
    var view = this.context.dataflow,
        el = view.container && view.container();
    return el ? [el.clientWidth, el.clientHeight] : [undefined, undefined];
  }

  var DataPrefix$1 = ':';
  var IndexPrefix$1 = '@';
  var ScalePrefix = '%';
  var SignalPrefix = '$';

  function dataVisitor(name, args, scope, params) {
    if (args[0].type !== Literal) {
      error('First argument to data functions must be a string literal.');
    }

    var data = args[0].value,
        dataName = DataPrefix$1 + data;

    if (!hasOwnProperty$1(dataName, params)) {
      try {
        params[dataName] = scope.getData(data).tuplesRef();
      } catch (err) {// if data set does not exist, there's nothing to track
      }
    }
  }
  function indataVisitor(name, args, scope, params) {
    if (args[0].type !== Literal) error('First argument to indata must be a string literal.');
    if (args[1].type !== Literal) error('Second argument to indata must be a string literal.');
    var data = args[0].value,
        field = args[1].value,
        indexName = IndexPrefix$1 + field;

    if (!hasOwnProperty$1(indexName, params)) {
      params[indexName] = scope.getData(data).indataRef(scope, field);
    }
  }
  function scaleVisitor(name, args, scope, params) {
    if (args[0].type === Literal) {
      // add scale dependency
      addScaleDependency(scope, params, args[0].value);
    } else if (args[0].type === Identifier$1) {
      // indirect scale lookup; add all scales as parameters
      for (name in scope.scales) {
        addScaleDependency(scope, params, name);
      }
    }
  }

  function addScaleDependency(scope, params, name) {
    var scaleName = ScalePrefix + name;

    if (!hasOwnProperty$1(params, scaleName)) {
      try {
        params[scaleName] = scope.scaleRef(name);
      } catch (err) {// TODO: error handling? warning?
      }
    }
  }

  var functionContext = {
    random: function random$1() {
      return random();
    },
    // override default
    cumulativeNormal: cumulativeNormal,
    cumulativeLogNormal: cumulativeLogNormal,
    cumulativeUniform: cumulativeUniform,
    densityNormal: densityNormal,
    densityLogNormal: densityLogNormal,
    densityUniform: densityUniform,
    quantileNormal: quantileNormal,
    quantileLogNormal: quantileLogNormal,
    quantileUniform: quantileUniform,
    sampleNormal: sampleNormal,
    sampleLogNormal: sampleLogNormal,
    sampleUniform: sampleUniform,
    isArray: isArray,
    isBoolean: isBoolean,
    isDate: isDate,
    isDefined: function isDefined(_) {
      return _ !== undefined;
    },
    isNumber: isNumber,
    isObject: isObject,
    isRegExp: isRegExp,
    isString: isString,
    isTuple: isTuple,
    isValid: function isValid(_) {
      return _ != null && _ === _;
    },
    toBoolean: toBoolean,
    toDate: toDate,
    toNumber: toNumber,
    toString: toString,
    flush: flush,
    lerp: lerp,
    merge: merge$3,
    pad: pad,
    peek: peek,
    span: span,
    inrange: inrange,
    truncate: truncate,
    rgb: rgb,
    lab: lab,
    hcl: hcl,
    hsl: hsl,
    luminance: luminance,
    contrast: contrast,
    sequence: sequence,
    format: format$4,
    utcFormat: utcFormat$2,
    utcParse: utcParse$1,
    utcOffset: utcOffset,
    utcSequence: utcSequence,
    timeFormat: timeFormat$2,
    timeParse: timeParse$1,
    timeOffset: timeOffset,
    timeSequence: timeSequence,
    timeUnitSpecifier: timeUnitSpecifier,
    monthFormat: monthFormat,
    monthAbbrevFormat: monthAbbrevFormat,
    dayFormat: dayFormat,
    dayAbbrevFormat: dayAbbrevFormat,
    quarter: quarter,
    utcquarter: utcquarter,
    warn: warn,
    info: info,
    debug: debug$2,
    extent: extent,
    inScope: inScope,
    intersect: intersect$3,
    clampRange: clampRange,
    pinchDistance: pinchDistance,
    pinchAngle: pinchAngle,
    screen: screen,
    containerSize: containerSize,
    windowSize: windowSize,
    bandspace: bandspace,
    setdata: setdata,
    pathShape: pathShape,
    panLinear: panLinear,
    panLog: panLog,
    panPow: panPow,
    panSymlog: panSymlog,
    zoomLinear: zoomLinear,
    zoomLog: zoomLog,
    zoomPow: zoomPow,
    zoomSymlog: zoomSymlog,
    encode: encode$2,
    modify: modify
  };
  var eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'],
      // event functions
  eventPrefix = 'event.vega.',
      // event function prefix
  thisPrefix = 'this.',
      // function context prefix
  astVisitors = {}; // AST visitors for dependency analysis
  // Build expression function registry

  function buildFunctions(codegen) {
    var fn = functions(codegen);
    eventFunctions.forEach(function (name) {
      return fn[name] = eventPrefix + name;
    });

    for (var name in functionContext) {
      fn[name] = thisPrefix + name;
    }

    return fn;
  } // Register an expression function


  function expressionFunction(name, fn, visitor) {
    if (arguments.length === 1) {
      return functionContext[name];
    } // register with the functionContext


    functionContext[name] = fn; // if there is an astVisitor register that, too

    if (visitor) astVisitors[name] = visitor; // if the code generator has already been initialized,
    // we need to also register the function with it

    if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
    return this;
  } // register expression functions with ast visitors

  expressionFunction('bandwidth', bandwidth, scaleVisitor);
  expressionFunction('copy', copy$2, scaleVisitor);
  expressionFunction('domain', domain$1, scaleVisitor);
  expressionFunction('range', range$4, scaleVisitor);
  expressionFunction('invert', invert, scaleVisitor);
  expressionFunction('scale', scale$3, scaleVisitor);
  expressionFunction('gradient', scaleGradient, scaleVisitor);
  expressionFunction('geoArea', geoArea, scaleVisitor);
  expressionFunction('geoBounds', geoBounds, scaleVisitor);
  expressionFunction('geoCentroid', geoCentroid, scaleVisitor);
  expressionFunction('geoShape', geoShape, scaleVisitor);
  expressionFunction('indata', indata, indataVisitor);
  expressionFunction('data', data$1, dataVisitor);
  expressionFunction('treePath', treePath, dataVisitor);
  expressionFunction('treeAncestors', treeAncestors, dataVisitor); // register Vega-Lite selection functions

  expressionFunction('vlSelectionTest', selectionTest, selectionVisitor);
  expressionFunction('vlSelectionResolve', selectionResolve, selectionVisitor); // Export code generator and parameters

  var codegenParams = {
    blacklist: ['_'],
    whitelist: ['datum', 'event', 'item'],
    fieldvar: 'datum',
    globalvar: function globalvar(id) {
      return '_[' + $(SignalPrefix + id) + ']';
    },
    functions: buildFunctions,
    constants: constants$1,
    visitors: astVisitors
  };
  var codeGenerator = codegen(codegenParams);

  /**
   * Parse an expression given the argument signature and body code.
   */
  function expression(args, code, ctx) {
    // wrap code in return statement if expression does not terminate
    if (code[code.length - 1] !== ';') {
      code = 'return(' + code + ');';
    }

    var fn = Function.apply(null, args.concat(code));
    return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
  }
  /**
   * Parse an expression used to update an operator value.
   */

  function operatorExpression(code, ctx) {
    return expression(['_'], code, ctx);
  }
  /**
   * Parse an expression provided as an operator parameter value.
   */

  function parameterExpression(code, ctx) {
    return expression(['datum', '_'], code, ctx);
  }
  /**
   * Parse an expression applied to an event stream.
   */

  function eventExpression(code, ctx) {
    return expression(['event'], code, ctx);
  }
  /**
   * Parse an expression used to handle an event-driven operator update.
   */

  function handlerExpression(code, ctx) {
    return expression(['_', 'event'], code, ctx);
  }
  /**
   * Parse an expression that performs visual encoding.
   */

  function encodeExpression(code, ctx) {
    return expression(['item', '_'], code, ctx);
  }

  /**
   * Parse a set of operator parameters.
   */

  function parseParameters(spec, ctx, params) {
    params = params || {};
    var key, value;

    for (key in spec) {
      value = spec[key];
      params[key] = isArray(value) ? value.map(function (v) {
        return parseParameter(v, ctx, params);
      }) : parseParameter(value, ctx, params);
    }

    return params;
  }
  /**
   * Parse a single parameter.
   */

  function parseParameter(spec, ctx, params) {
    if (!spec || !isObject(spec)) return spec;

    for (var i = 0, n = PARSERS.length, p; i < n; ++i) {
      p = PARSERS[i];

      if (hasOwnProperty$1(spec, p.key)) {
        return p.parse(spec, ctx, params);
      }
    }

    return spec;
  }
  /** Reference parsers. */


  var PARSERS = [{
    key: '$ref',
    parse: getOperator
  }, {
    key: '$key',
    parse: getKey
  }, {
    key: '$expr',
    parse: getExpression
  }, {
    key: '$field',
    parse: getField$1
  }, {
    key: '$encode',
    parse: getEncode
  }, {
    key: '$compare',
    parse: getCompare
  }, {
    key: '$context',
    parse: getContext
  }, {
    key: '$subflow',
    parse: getSubflow
  }, {
    key: '$tupleid',
    parse: getTupleId
  }];
  /**
   * Resolve an operator reference.
   */

  function getOperator(_, ctx) {
    return ctx.get(_.$ref) || error('Operator not defined: ' + _.$ref);
  }
  /**
   * Resolve an expression reference.
   */


  function getExpression(_, ctx, params) {
    if (_.$params) {
      // parse expression parameters
      parseParameters(_.$params, ctx, params);
    }

    var k = 'e:' + _.$expr + '_' + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = accessor(parameterExpression(_.$expr, ctx), _.$fields, _.$name));
  }
  /**
   * Resolve a key accessor reference.
   */


  function getKey(_, ctx) {
    var k = 'k:' + _.$key + '_' + !!_.$flat;
    return ctx.fn[k] || (ctx.fn[k] = key(_.$key, _.$flat));
  }
  /**
   * Resolve a field accessor reference.
   */


  function getField$1(_, ctx) {
    if (!_.$field) return null;
    var k = 'f:' + _.$field + '_' + _.$name;
    return ctx.fn[k] || (ctx.fn[k] = field(_.$field, _.$name));
  }
  /**
   * Resolve a comparator function reference.
   */


  function getCompare(_, ctx) {
    var k = 'c:' + _.$compare + '_' + _.$order,
        c = array(_.$compare).map(function (_) {
      return _ && _.$tupleid ? tupleid : _;
    });
    return ctx.fn[k] || (ctx.fn[k] = compare$2(c, _.$order));
  }
  /**
   * Resolve an encode operator reference.
   */


  function getEncode(_, ctx) {
    var spec = _.$encode,
        encode = {},
        name,
        enc;

    for (name in spec) {
      enc = spec[name];
      encode[name] = accessor(encodeExpression(enc.$expr, ctx), enc.$fields);
      encode[name].output = enc.$output;
    }

    return encode;
  }
  /**
   * Resolve a context reference.
   */


  function getContext(_, ctx) {
    return ctx;
  }
  /**
   * Resolve a recursive subflow specification.
   */


  function getSubflow(_, ctx) {
    var spec = _.$subflow;
    return function (dataflow, key, parent) {
      var subctx = parse$7(spec, ctx.fork()),
          op = subctx.get(spec.operators[0].id),
          p = subctx.signals.parent;
      if (p) p.set(parent);
      return op;
    };
  }
  /**
   * Resolve a tuple id reference.
   */


  function getTupleId() {
    return tupleid;
  }

  function canonicalType(type) {
    return (type + '').toLowerCase();
  }
  function isOperator(type) {
    return canonicalType(type) === 'operator';
  }
  function isCollect(type) {
    return canonicalType(type) === 'collect';
  }

  /**
   * Parse a dataflow operator.
   */

  function parseOperator (spec, ctx) {
    if (isOperator(spec.type) || !spec.type) {
      ctx.operator(spec, spec.update ? operatorExpression(spec.update, ctx) : null);
    } else {
      ctx.transform(spec, spec.type);
    }
  }
  /**
   * Parse and assign operator parameters.
   */

  function parseOperatorParameters(spec, ctx) {
    if (spec.params) {
      var op = ctx.get(spec.id);
      if (!op) error('Invalid operator id: ' + spec.id);
      ctx.dataflow.connect(op, op.parameters(parseParameters(spec.params, ctx), spec.react, spec.initonly));
    }
  }

  /**
   * Parse an event stream specification.
   */

  function parseStream (spec, ctx) {
    var filter = spec.filter != null ? eventExpression(spec.filter, ctx) : undefined,
        stream = spec.stream != null ? ctx.get(spec.stream) : undefined,
        args;

    if (spec.source) {
      stream = ctx.events(spec.source, spec.type, filter);
    } else if (spec.merge) {
      args = spec.merge.map(ctx.get.bind(ctx));
      stream = args[0].merge.apply(args[0], args.slice(1));
    }

    if (spec.between) {
      args = spec.between.map(ctx.get.bind(ctx));
      stream = stream.between(args[0], args[1]);
    }

    if (spec.filter) {
      stream = stream.filter(filter);
    }

    if (spec.throttle != null) {
      stream = stream.throttle(+spec.throttle);
    }

    if (spec.debounce != null) {
      stream = stream.debounce(+spec.debounce);
    }

    if (stream == null) {
      error('Invalid stream definition: ' + JSON.stringify(spec));
    }

    if (spec.consume) stream.consume(true);
    ctx.stream(spec, stream);
  }

  /**
   * Parse an event-driven operator update.
   */

  function parseUpdate (spec, ctx) {
    var srcid = isObject(srcid = spec.source) ? srcid.$ref : srcid,
        source = ctx.get(srcid),
        target = null,
        update = spec.update,
        params = undefined;
    if (!source) error('Source not defined: ' + spec.source);

    if (spec.target && spec.target.$expr) {
      target = eventExpression(spec.target.$expr, ctx);
    } else {
      target = ctx.get(spec.target);
    }

    if (update && update.$expr) {
      if (update.$params) {
        params = parseParameters(update.$params, ctx);
      }

      update = handlerExpression(update.$expr, ctx);
    }

    ctx.update(spec, source, target, update, params);
  }

  /**
   * Parse a serialized dataflow specification.
   */

  function parse$7 (spec, ctx) {
    var operators = spec.operators || []; // parse background

    if (spec.background) {
      ctx.background = spec.background;
    } // parse event configuration


    if (spec.eventConfig) {
      ctx.eventConfig = spec.eventConfig;
    } // parse operators


    operators.forEach(function (entry) {
      parseOperator(entry, ctx);
    }); // parse operator parameters

    operators.forEach(function (entry) {
      parseOperatorParameters(entry, ctx);
    }); // parse streams

    (spec.streams || []).forEach(function (entry) {
      parseStream(entry, ctx);
    }); // parse updates

    (spec.updates || []).forEach(function (entry) {
      parseUpdate(entry, ctx);
    });
    return ctx.resolve();
  }

  var SKIP$3 = {
    skip: true
  };
  function getState(options) {
    var ctx = this,
        state = {};

    if (options.signals) {
      var signals = state.signals = {};
      Object.keys(ctx.signals).forEach(function (key) {
        var op = ctx.signals[key];

        if (options.signals(key, op)) {
          signals[key] = op.value;
        }
      });
    }

    if (options.data) {
      var data = state.data = {};
      Object.keys(ctx.data).forEach(function (key) {
        var dataset = ctx.data[key];

        if (options.data(key, dataset)) {
          data[key] = dataset.input.value;
        }
      });
    }

    if (ctx.subcontext && options.recurse !== false) {
      state.subcontext = ctx.subcontext.map(function (ctx) {
        return ctx.getState(options);
      });
    }

    return state;
  }
  function setState(state) {
    var ctx = this,
        df = ctx.dataflow,
        data = state.data,
        signals = state.signals;
    Object.keys(signals || {}).forEach(function (key) {
      df.update(ctx.signals[key], signals[key], SKIP$3);
    });
    Object.keys(data || {}).forEach(function (key) {
      df.pulse(ctx.data[key].input, df.changeset().remove(truthy).insert(data[key]));
    });
    (state.subcontext || []).forEach(function (substate, i) {
      var subctx = ctx.subcontext[i];
      if (subctx) subctx.setState(substate);
    });
  }

  /**
   * Context objects store the current parse state.
   * Enables lookup of parsed operators, event streams, accessors, etc.
   * Provides a 'fork' method for creating child contexts for subflows.
   */

  function context$2 (df, transforms, functions) {
    return new Context(df, transforms, functions);
  }

  function Context(df, transforms, functions) {
    this.dataflow = df;
    this.transforms = transforms;
    this.events = df.events.bind(df);
    this.signals = {};
    this.scales = {};
    this.nodes = {};
    this.data = {};
    this.fn = {};

    if (functions) {
      this.functions = Object.create(functions);
      this.functions.context = this;
    }
  }

  function ContextFork(ctx) {
    this.dataflow = ctx.dataflow;
    this.transforms = ctx.transforms;
    this.functions = ctx.functions;
    this.events = ctx.events;
    this.signals = Object.create(ctx.signals);
    this.scales = Object.create(ctx.scales);
    this.nodes = Object.create(ctx.nodes);
    this.data = Object.create(ctx.data);
    this.fn = Object.create(ctx.fn);

    if (ctx.functions) {
      this.functions = Object.create(ctx.functions);
      this.functions.context = this;
    }
  }

  Context.prototype = ContextFork.prototype = {
    fork: function fork() {
      var ctx = new ContextFork(this);
      (this.subcontext || (this.subcontext = [])).push(ctx);
      return ctx;
    },
    get: function get(id) {
      return this.nodes[id];
    },
    set: function set(id, node) {
      return this.nodes[id] = node;
    },
    add: function add(spec, op) {
      var ctx = this,
          df = ctx.dataflow,
          data;
      ctx.set(spec.id, op);

      if (isCollect(spec.type) && (data = spec.value)) {
        if (data.$ingest) {
          df.ingest(op, data.$ingest, data.$format);
        } else if (data.$request) {
          df.preload(op, data.$request, data.$format);
        } else {
          df.pulse(op, df.changeset().insert(data));
        }
      }

      if (spec.root) {
        ctx.root = op;
      }

      if (spec.parent) {
        var p = ctx.get(spec.parent.$ref);

        if (p) {
          df.connect(p, [op]);
          op.targets().add(p);
        } else {
          (ctx.unresolved = ctx.unresolved || []).push(function () {
            p = ctx.get(spec.parent.$ref);
            df.connect(p, [op]);
            op.targets().add(p);
          });
        }
      }

      if (spec.signal) {
        ctx.signals[spec.signal] = op;
      }

      if (spec.scale) {
        ctx.scales[spec.scale] = op;
      }

      if (spec.data) {
        for (var name in spec.data) {
          data = ctx.data[name] || (ctx.data[name] = {});
          spec.data[name].forEach(function (role) {
            data[role] = op;
          });
        }
      }
    },
    resolve: function resolve() {
      (this.unresolved || []).forEach(function (fn) {
        fn();
      });
      delete this.unresolved;
      return this;
    },
    operator: function operator(spec, update) {
      this.add(spec, this.dataflow.add(spec.value, update));
    },
    transform: function transform(spec, type) {
      this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)]));
    },
    stream: function stream(spec, _stream) {
      this.set(spec.id, _stream);
    },
    update: function update(spec, stream, target, _update, params) {
      this.dataflow.on(stream, target, _update, params, spec.options);
    },
    getState: getState,
    setState: setState
  };

  function runtime (view, spec, functions) {
    var fn = functions || functionContext;
    return parse$7(spec, context$2(view, transforms, fn));
  }

  function scale$4(name) {
    var scales = this._runtime.scales;

    if (!hasOwnProperty$1(scales, name)) {
      error('Unrecognized scale or projection: ' + name);
    }

    return scales[name].value;
  }

  var Width = 'width',
      Height = 'height',
      Padding$1 = 'padding',
      Skip = {
    skip: true
  };
  function viewWidth(view, width) {
    var a = view.autosize(),
        p = view.padding();
    return width - (a && a.contains === Padding$1 ? p.left + p.right : 0);
  }
  function viewHeight(view, height) {
    var a = view.autosize(),
        p = view.padding();
    return height - (a && a.contains === Padding$1 ? p.top + p.bottom : 0);
  }
  function initializeResize(view) {
    var s = view._signals,
        w = s[Width],
        h = s[Height],
        p = s[Padding$1];

    function resetSize() {
      view._autosize = view._resize = 1;
    } // respond to width signal


    view._resizeWidth = view.add(null, function (_) {
      view._width = _.size;
      view._viewWidth = viewWidth(view, _.size);
      resetSize();
    }, {
      size: w
    }); // respond to height signal

    view._resizeHeight = view.add(null, function (_) {
      view._height = _.size;
      view._viewHeight = viewHeight(view, _.size);
      resetSize();
    }, {
      size: h
    }); // respond to padding signal

    var resizePadding = view.add(null, resetSize, {
      pad: p
    }); // set rank to run immediately after source signal

    view._resizeWidth.rank = w.rank + 1;
    view._resizeHeight.rank = h.rank + 1;
    resizePadding.rank = p.rank + 1;
  }
  function resizeView(viewWidth, viewHeight, width, height, origin, auto) {
    this.runAfter(function (view) {
      var rerun = 0; // reset autosize flag

      view._autosize = 0; // width value changed: update signal, skip resize op

      if (view.width() !== width) {
        rerun = 1;
        view.signal(Width, width, Skip); // set width, skip update calc

        view._resizeWidth.skip(true); // skip width resize handler

      } // height value changed: update signal, skip resize op


      if (view.height() !== height) {
        rerun = 1;
        view.signal(Height, height, Skip); // set height, skip update calc

        view._resizeHeight.skip(true); // skip height resize handler

      } // view width changed: update view property, set resize flag


      if (view._viewWidth !== viewWidth) {
        view._resize = 1;
        view._viewWidth = viewWidth;
      } // view height changed: update view property, set resize flag


      if (view._viewHeight !== viewHeight) {
        view._resize = 1;
        view._viewHeight = viewHeight;
      } // origin changed: update view property, set resize flag


      if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
        view._resize = 1;
        view._origin = origin;
      } // run dataflow on width/height signal change


      if (rerun) view.run('enter');
      if (auto) view.runAfter(function (v) {
        return v.resize();
      });
    }, false, 1);
  }

  /**
   * Get the current view state, consisting of signal values and/or data sets.
   * @param {object} [options] - Options flags indicating which state to export.
   *   If unspecified, all signals and data sets will be exported.
   * @param {function(string, Operator):boolean} [options.signals] - Optional
   *   predicate function for testing if a signal should be included in the
   *   exported state. If unspecified, all signals will be included, except for
   *   those named 'parent' or those which refer to a Transform value.
   * @param {function(string, object):boolean} [options.data] - Optional
   *   predicate function for testing if a data set's input should be included
   *   in the exported state. If unspecified, all data sets that have been
   *   explicitly modified will be included.
   * @param {boolean} [options.recurse=true] - Flag indicating if the exported
   *   state should recursively include state from group mark sub-contexts.
   * @return {object} - An object containing the exported state values.
   */

  function getState$1(options) {
    return this._runtime.getState(options || {
      data: dataTest,
      signals: signalTest,
      recurse: true
    });
  }

  function dataTest(name, data) {
    return data.modified && isArray(data.input.value) && name.indexOf('_:vega:_');
  }

  function signalTest(name, op) {
    return !(name === 'parent' || op instanceof transforms.proxy);
  }
  /**
   * Sets the current view state and updates the view by invoking run.
   * @param {object} state - A state object containing signal and/or
   *   data set values, following the format used by the getState method.
   * @return {View} - This view instance.
   */


  function setState$1(state) {
    this.runAsync(null, function (v) {
      v._trigger = false;

      v._runtime.setState(state);
    }, function (v) {
      v._trigger = true;
    });
    return this;
  }

  function timer$1 (callback, delay) {
    function tick(elapsed) {
      callback({
        timestamp: Date.now(),
        elapsed: elapsed
      });
    }

    this._timers.push(interval$1(tick, delay));
  }

  function defaultTooltip$1 (handler, event, item, value) {
    var el = handler.element();
    if (el) el.setAttribute('title', formatTooltip(value));
  }

  function formatTooltip(value) {
    return value == null ? '' : isArray(value) ? formatArray$1(value) : isObject(value) && !isDate(value) ? formatObject(value) : value + '';
  }

  function formatObject(obj) {
    return Object.keys(obj).map(function (key) {
      var v = obj[key];
      return key + ': ' + (isArray(v) ? formatArray$1(v) : formatValue$2(v));
    }).join('\n');
  }

  function formatArray$1(value) {
    return '[' + value.map(formatValue$2).join(', ') + ']';
  }

  function formatValue$2(value) {
    return isArray(value) ? "[\u2026]" : isObject(value) && !isDate(value) ? "{\u2026}" : value;
  }

  /**
   * Create a new View instance from a Vega dataflow runtime specification.
   * The generated View will not immediately be ready for display. Callers
   * should also invoke the initialize method (e.g., to set the parent
   * DOM element in browser-based deployment) and then invoke the run
   * method to evaluate the dataflow graph. Rendering will automatically
   * be peformed upon dataflow runs.
   * @constructor
   * @param {object} spec - The Vega dataflow runtime specification.
   */

  function View(spec, options) {
    var view = this;
    options = options || {};
    Dataflow.call(view);
    if (options.loader) view.loader(options.loader);
    if (options.logger) view.logger(options.logger);
    if (options.logLevel != null) view.logLevel(options.logLevel);
    view._el = null;
    view._elBind = null;
    view._renderType = options.renderer || RenderType.Canvas;
    view._scenegraph = new Scenegraph();
    var root = view._scenegraph.root; // initialize renderer, handler and event management

    view._renderer = null;
    view._tooltip = options.tooltip || defaultTooltip$1, view._redraw = true;
    view._handler = new CanvasHandler().scene(root);
    view._preventDefault = false;
    view._timers = [];
    view._eventListeners = [];
    view._resizeListeners = []; // initialize event configuration

    view._eventConfig = initializeEventConfig(spec.eventConfig); // initialize dataflow graph

    var ctx = runtime(view, spec, options.functions);
    view._runtime = ctx;
    view._signals = ctx.signals;
    view._bind = (spec.bindings || []).map(function (_) {
      return {
        state: null,
        param: extend({}, _)
      };
    }); // initialize scenegraph

    if (ctx.root) ctx.root.set(root);
    root.source = ctx.data.root.input;
    view.pulse(ctx.data.root.input, view.changeset().insert(root.items)); // initialize view size

    view._width = view.width();
    view._height = view.height();
    view._viewWidth = viewWidth(view, view._width);
    view._viewHeight = viewHeight(view, view._height);
    view._origin = [0, 0];
    view._resize = 0;
    view._autosize = 1;
    initializeResize(view); // initialize background color

    background$1(view); // initialize cursor

    cursor(view); // initialize view description

    view.description(spec.description); // initialize hover proessing, if requested

    if (options.hover) view.hover(); // initialize DOM container(s) and renderer

    if (options.container) view.initialize(options.container, options.bind);
  }
  var prototype$1s = inherits(View, Dataflow); // -- DATAFLOW / RENDERING ----

  prototype$1s.evaluate = function (encode, prerun, postrun) {
    return __async( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Dataflow.prototype.evaluate.call(this, encode, prerun);

            case 2:
              if (!(this._redraw || this._resize)) {
                _context.next = 14;
                break;
              }

              _context.prev = 3;

              if (!this._renderer) {
                _context.next = 8;
                break;
              }

              if (this._resize) {
                this._resize = 0;
                resizeRenderer(this);
              }

              _context.next = 8;
              return this._renderer.renderAsync(this._scenegraph.root);

            case 8:
              this._redraw = false;
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](3);
              this.error(_context.t0);

            case 14:
              // evaluate postrun
              if (postrun) asyncCallback(this, postrun);
              return _context.abrupt("return", this);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[3, 11]]);
    }).call(this));
  };

  prototype$1s.dirty = function (item) {
    this._redraw = true;
    this._renderer && this._renderer.dirty(item);
  }; // -- GET / SET ----


  prototype$1s.description = function (text) {
    if (arguments.length) {
      var desc = text != null ? text + '' : null;
      if (desc !== this._desc) ariaLabel(this._el, this._desc = desc);
      return this;
    }

    return this._desc;
  };

  prototype$1s.container = function () {
    return this._el;
  };

  prototype$1s.scenegraph = function () {
    return this._scenegraph;
  };

  prototype$1s.origin = function () {
    return this._origin.slice();
  };

  function lookupSignal(view, name) {
    return hasOwnProperty$1(view._signals, name) ? view._signals[name] : error('Unrecognized signal name: ' + $(name));
  }

  prototype$1s.signal = function (name, value, options) {
    var op = lookupSignal(this, name);
    return arguments.length === 1 ? op.value : this.update(op, value, options);
  };

  prototype$1s.width = function (_) {
    return arguments.length ? this.signal('width', _) : this.signal('width');
  };

  prototype$1s.height = function (_) {
    return arguments.length ? this.signal('height', _) : this.signal('height');
  };

  prototype$1s.padding = function (_) {
    return arguments.length ? this.signal('padding', padding(_)) : padding(this.signal('padding'));
  };

  prototype$1s.autosize = function (_) {
    return arguments.length ? this.signal('autosize', _) : this.signal('autosize');
  };

  prototype$1s.background = function (_) {
    return arguments.length ? this.signal('background', _) : this.signal('background');
  };

  prototype$1s.renderer = function (type) {
    if (!arguments.length) return this._renderType;
    if (!renderModule(type)) error('Unrecognized renderer type: ' + type);

    if (type !== this._renderType) {
      this._renderType = type;

      this._resetRenderer();
    }

    return this;
  };

  prototype$1s.tooltip = function (handler) {
    if (!arguments.length) return this._tooltip;

    if (handler !== this._tooltip) {
      this._tooltip = handler;

      this._resetRenderer();
    }

    return this;
  };

  prototype$1s.loader = function (loader) {
    if (!arguments.length) return this._loader;

    if (loader !== this._loader) {
      Dataflow.prototype.loader.call(this, loader);

      this._resetRenderer();
    }

    return this;
  };

  prototype$1s.resize = function () {
    // set flag to perform autosize
    this._autosize = 1; // touch autosize signal to ensure top-level ViewLayout runs

    return this.touch(lookupSignal(this, 'autosize'));
  };

  prototype$1s._resetRenderer = function () {
    if (this._renderer) {
      this._renderer = null;
      this.initialize(this._el, this._elBind);
    }
  }; // -- SIZING ----


  prototype$1s._resizeView = resizeView; // -- EVENT HANDLING ----

  prototype$1s.addEventListener = function (type, handler, options) {
    var callback = handler;

    if (!(options && options.trap === false)) {
      // wrap callback in error handler
      callback = trap(this, handler);
      callback.raw = handler;
    }

    this._handler.on(type, callback);

    return this;
  };

  prototype$1s.removeEventListener = function (type, handler) {
    var handlers = this._handler.handlers(type),
        i = handlers.length,
        h,
        t; // search registered handlers, remove if match found


    while (--i >= 0) {
      t = handlers[i].type;
      h = handlers[i].handler;

      if (type === t && (handler === h || handler === h.raw)) {
        this._handler.off(t, h);

        break;
      }
    }

    return this;
  };

  prototype$1s.addResizeListener = function (handler) {
    var l = this._resizeListeners;

    if (l.indexOf(handler) < 0) {
      // add handler if it isn't already registered
      // note: error trapping handled elsewhere, so
      // no need to wrap handlers here
      l.push(handler);
    }

    return this;
  };

  prototype$1s.removeResizeListener = function (handler) {
    var l = this._resizeListeners,
        i = l.indexOf(handler);

    if (i >= 0) {
      l.splice(i, 1);
    }

    return this;
  };

  function findOperatorHandler(op, handler) {
    var t = op._targets || [],
        h = t.filter(function (op) {
      var u = op._update;
      return u && u.handler === handler;
    });
    return h.length ? h[0] : null;
  }

  function addOperatorListener(view, name, op, handler) {
    var h = findOperatorHandler(op, handler);

    if (!h) {
      h = trap(this, function () {
        handler(name, op.value);
      });
      h.handler = handler;
      view.on(op, null, h);
    }

    return view;
  }

  function removeOperatorListener(view, op, handler) {
    var h = findOperatorHandler(op, handler);
    if (h) op._targets.remove(h);
    return view;
  }

  prototype$1s.addSignalListener = function (name, handler) {
    return addOperatorListener(this, name, lookupSignal(this, name), handler);
  };

  prototype$1s.removeSignalListener = function (name, handler) {
    return removeOperatorListener(this, lookupSignal(this, name), handler);
  };

  prototype$1s.addDataListener = function (name, handler) {
    return addOperatorListener(this, name, dataref(this, name).values, handler);
  };

  prototype$1s.removeDataListener = function (name, handler) {
    return removeOperatorListener(this, dataref(this, name).values, handler);
  };

  prototype$1s.preventDefault = function (_) {
    if (arguments.length) {
      this._preventDefault = _;
      return this;
    } else {
      return this._preventDefault;
    }
  };

  prototype$1s.timer = timer$1;
  prototype$1s.events = events$1;
  prototype$1s.finalize = finalize;
  prototype$1s.hover = hover; // -- DATA ----

  prototype$1s.data = data;
  prototype$1s.change = change;
  prototype$1s.insert = insert;
  prototype$1s.remove = remove; // -- SCALES --

  prototype$1s.scale = scale$4; // -- INITIALIZATION ----

  prototype$1s.initialize = initialize$1; // -- HEADLESS RENDERING ----

  prototype$1s.toImageURL = renderToImageURL;
  prototype$1s.toCanvas = renderToCanvas;
  prototype$1s.toSVG = renderToSVG; // -- SAVE / RESTORE STATE ----

  prototype$1s.getState = getState$1;
  prototype$1s.setState = setState$1;

  function parseAutosize (spec) {
    return isObject(spec) ? spec : {
      type: spec || 'pad'
    };
  }

  var number$6 = function number(_) {
    return +_ || 0;
  };

  var paddingObject$1 = function paddingObject(_) {
    return {
      top: _,
      bottom: _,
      left: _,
      right: _
    };
  };

  function parsePadding (spec) {
    return !isObject(spec) ? paddingObject$1(number$6(spec)) : spec.signal ? spec : {
      top: number$6(spec.top),
      bottom: number$6(spec.bottom),
      left: number$6(spec.left),
      right: number$6(spec.right)
    };
  }

  var OUTER = 'outer',
      OUTER_INVALID = ['value', 'update', 'init', 'react', 'bind'];

  function outerError(prefix, name) {
    error(prefix + ' for "outer" push: ' + $(name));
  }

  function parseSignal (signal, scope) {
    var name = signal.name;

    if (signal.push === OUTER) {
      // signal must already be defined, raise error if not
      if (!scope.signals[name]) outerError('No prior signal definition', name); // signal push must not use properties reserved for standard definition

      OUTER_INVALID.forEach(function (prop) {
        if (signal[prop] !== undefined) outerError('Invalid property ', prop);
      });
    } else {
      // define a new signal in the current scope
      var op = scope.addSignal(name, signal.value);
      if (signal.react === false) op.react = false;
      if (signal.bind) scope.addBinding(name, signal.bind);
    }
  }

  function parseExpression$1 (expr, scope, preamble) {
    var params = {},
        ast,
        gen; // parse the expression to an abstract syntax tree (ast)

    try {
      expr = isString(expr) ? expr : $(expr) + '';
      ast = parse$6(expr);
    } catch (err) {
      error('Expression parse error: ' + expr);
    } // analyze ast function calls for dependencies


    ast.visit(function visitor(node) {
      if (node.type !== CallExpression) return;
      var name = node.callee.name,
          visit = codegenParams.visitors[name];
      if (visit) visit(name, node.arguments, scope, params);
    }); // perform code generation

    gen = codeGenerator(ast); // collect signal dependencies

    gen.globals.forEach(function (name) {
      var signalName = SignalPrefix + name;

      if (!hasOwnProperty$1(params, signalName) && scope.getSignal(name)) {
        params[signalName] = scope.signalRef(name);
      }
    }); // return generated expression code and dependencies

    return {
      $expr: preamble ? preamble + 'return(' + gen.code + ');' : gen.code,
      $fields: gen.fields,
      $params: params
    };
  }

  function Entry(type, value, params, parent) {
    this.id = -1;
    this.type = type;
    this.value = value;
    this.params = params;
    if (parent) this.parent = parent;
  }
  function entry(type, value, params, parent) {
    return new Entry(type, value, params, parent);
  }
  function operator(value, params) {
    return entry('operator', value, params);
  } // -----

  function ref(op) {
    var ref = {
      $ref: op.id
    }; // if operator not yet registered, cache ref to resolve later

    if (op.id < 0) (op.refs = op.refs || []).push(ref);
    return ref;
  }
  function fieldRef(field, name) {
    return name ? {
      $field: field,
      $name: name
    } : {
      $field: field
    };
  }
  var keyFieldRef = fieldRef('key');
  function compareRef(fields, orders) {
    return {
      $compare: fields,
      $order: orders
    };
  }
  function keyRef(fields, flat) {
    var ref = {
      $key: fields
    };
    if (flat) ref.$flat = true;
    return ref;
  } // -----

  var Ascending = 'ascending';
  var Descending = 'descending';
  function sortKey(sort) {
    return !isObject(sort) ? '' : (sort.order === Descending ? '-' : '+') + aggrField(sort.op, sort.field);
  }
  function aggrField(op, field) {
    return (op && op.signal ? '$' + op.signal : op || '') + (op && field ? '_' : '') + (field && field.signal ? '$' + field.signal : field || '');
  } // -----

  var Scope = 'scope';
  var View$1 = 'view';
  function isSignal(_) {
    return _ && _.signal;
  }
  function isExpr(_) {
    return _ && _.expr;
  }
  function hasSignal(_) {
    if (isSignal(_)) return true;
    if (isObject(_)) for (var key in _) {
      if (hasSignal(_[key])) return true;
    }
    return false;
  }
  function value$1(specValue, defaultValue) {
    return specValue != null ? specValue : defaultValue;
  }
  function deref(v) {
    return v && v.signal || v;
  }

  var Timer$1 = 'timer';
  function parseStream$1(stream, scope) {
    var method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : error('Invalid stream specification: ' + $(stream));
    return method(stream, scope);
  }

  function eventSource(source) {
    return source === Scope ? View$1 : source || View$1;
  }

  function mergeStream(stream, scope) {
    var list = stream.merge.map(function (s) {
      return parseStream$1(s, scope);
    }),
        entry = streamParameters({
      merge: list
    }, stream, scope);
    return scope.addStream(entry).id;
  }

  function nestedStream(stream, scope) {
    var id = parseStream$1(stream.stream, scope),
        entry = streamParameters({
      stream: id
    }, stream, scope);
    return scope.addStream(entry).id;
  }

  function eventStream(stream, scope) {
    var id, entry;

    if (stream.type === Timer$1) {
      id = scope.event(Timer$1, stream.throttle);
      stream = {
        between: stream.between,
        filter: stream.filter
      };
    } else {
      id = scope.event(eventSource(stream.source), stream.type);
    }

    entry = streamParameters({
      stream: id
    }, stream, scope);
    return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;
  }

  function streamParameters(entry, stream, scope) {
    var param = stream.between;

    if (param) {
      if (param.length !== 2) {
        error('Stream "between" parameter must have 2 entries: ' + $(stream));
      }

      entry.between = [parseStream$1(param[0], scope), parseStream$1(param[1], scope)];
    }

    param = stream.filter ? [].concat(stream.filter) : [];

    if (stream.marktype || stream.markname || stream.markrole) {
      // add filter for mark type, name and/or role
      param.push(filterMark(stream.marktype, stream.markname, stream.markrole));
    }

    if (stream.source === Scope) {
      // add filter to limit events from sub-scope only
      param.push('inScope(event.item)');
    }

    if (param.length) {
      entry.filter = parseExpression$1('(' + param.join(')&&(') + ')').$expr;
    }

    if ((param = stream.throttle) != null) {
      entry.throttle = +param;
    }

    if ((param = stream.debounce) != null) {
      entry.debounce = +param;
    }

    if (stream.consume) {
      entry.consume = true;
    }

    return entry;
  }

  function filterMark(type, name, role) {
    var item = 'event.item';
    return item + (type && type !== '*' ? '&&' + item + '.mark.marktype===\'' + type + '\'' : '') + (role ? '&&' + item + '.mark.role===\'' + role + '\'' : '') + (name ? '&&' + item + '.mark.name===\'' + name + '\'' : '');
  }

  /**
   * Parse an event selector string.
   * Returns an array of event stream definitions.
   */
  function parseSelector (selector, source, marks) {
    DEFAULT_SOURCE = source || VIEW$1;
    MARKS = marks || DEFAULT_MARKS;
    return parseMerge(selector.trim()).map(parseSelector$1);
  }
  var VIEW$1 = 'view',
      LBRACK = '[',
      RBRACK = ']',
      LBRACE = '{',
      RBRACE = '}',
      COLON = ':',
      COMMA = ',',
      NAME$1 = '@',
      GT = '>',
      ILLEGAL$1 = /[[\]{}]/,
      DEFAULT_SOURCE,
      MARKS,
      DEFAULT_MARKS = {
    '*': 1,
    arc: 1,
    area: 1,
    group: 1,
    image: 1,
    line: 1,
    path: 1,
    rect: 1,
    rule: 1,
    shape: 1,
    symbol: 1,
    text: 1,
    trail: 1
  };

  function isMarkType(type) {
    return MARKS[type];
  }

  function find$3(s, i, endChar, pushChar, popChar) {
    var count = 0,
        n = s.length,
        c;

    for (; i < n; ++i) {
      c = s[i];
      if (!count && c === endChar) return i;else if (popChar && popChar.indexOf(c) >= 0) --count;else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
    }

    return i;
  }

  function parseMerge(s) {
    var output = [],
        start = 0,
        n = s.length,
        i = 0;

    while (i < n) {
      i = find$3(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
      output.push(s.substring(start, i).trim());
      start = ++i;
    }

    if (output.length === 0) {
      throw 'Empty event selector: ' + s;
    }

    return output;
  }

  function parseSelector$1(s) {
    return s[0] === '[' ? parseBetween(s) : parseStream$2(s);
  }

  function parseBetween(s) {
    var n = s.length,
        i = 1,
        b,
        stream;
    i = find$3(s, i, RBRACK, LBRACK, RBRACK);

    if (i === n) {
      throw 'Empty between selector: ' + s;
    }

    b = parseMerge(s.substring(1, i));

    if (b.length !== 2) {
      throw 'Between selector must have two elements: ' + s;
    }

    s = s.slice(i + 1).trim();

    if (s[0] !== GT) {
      throw 'Expected \'>\' after between selector: ' + s;
    }

    b = b.map(parseSelector$1);
    stream = parseSelector$1(s.slice(1).trim());

    if (stream.between) {
      return {
        between: b,
        stream: stream
      };
    } else {
      stream.between = b;
    }

    return stream;
  }

  function parseStream$2(s) {
    var stream = {
      source: DEFAULT_SOURCE
    },
        source = [],
        throttle = [0, 0],
        markname = 0,
        start = 0,
        n = s.length,
        i = 0,
        j,
        filter; // extract throttle from end

    if (s[n - 1] === RBRACE) {
      i = s.lastIndexOf(LBRACE);

      if (i >= 0) {
        try {
          throttle = parseThrottle(s.substring(i + 1, n - 1));
        } catch (e) {
          throw 'Invalid throttle specification: ' + s;
        }

        s = s.slice(0, i).trim();
        n = s.length;
      } else throw 'Unmatched right brace: ' + s;

      i = 0;
    }

    if (!n) throw s; // set name flag based on first char

    if (s[0] === NAME$1) markname = ++i; // extract first part of multi-part stream selector

    j = find$3(s, i, COLON);

    if (j < n) {
      source.push(s.substring(start, j).trim());
      start = i = ++j;
    } // extract remaining part of stream selector


    i = find$3(s, i, LBRACK);

    if (i === n) {
      source.push(s.substring(start, n).trim());
    } else {
      source.push(s.substring(start, i).trim());
      filter = [];
      start = ++i;
      if (start === n) throw 'Unmatched left bracket: ' + s;
    } // extract filters


    while (i < n) {
      i = find$3(s, i, RBRACK);
      if (i === n) throw 'Unmatched left bracket: ' + s;
      filter.push(s.substring(start, i).trim());
      if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
      start = ++i;
    } // marshall event stream specification


    if (!(n = source.length) || ILLEGAL$1.test(source[n - 1])) {
      throw 'Invalid event selector: ' + s;
    }

    if (n > 1) {
      stream.type = source[1];

      if (markname) {
        stream.markname = source[0].slice(1);
      } else if (isMarkType(source[0])) {
        stream.marktype = source[0];
      } else {
        stream.source = source[0];
      }
    } else {
      stream.type = source[0];
    }

    if (stream.type.slice(-1) === '!') {
      stream.consume = true;
      stream.type = stream.type.slice(0, -1);
    }

    if (filter != null) stream.filter = filter;
    if (throttle[0]) stream.throttle = throttle[0];
    if (throttle[1]) stream.debounce = throttle[1];
    return stream;
  }

  function parseThrottle(s) {
    var a = s.split(COMMA);
    if (!s.length || a.length > 2) throw s;
    return a.map(function (_) {
      var x = +_;
      if (x !== x) throw s;
      return x;
    });
  }

  var preamble = 'var datum=event.item&&event.item.datum;';
  function parseUpdate$1 (spec, scope, target) {
    var events = spec.events,
        update = spec.update,
        encode = spec.encode,
        sources = [],
        entry = {
      target: target
    };

    if (!events) {
      error('Signal update missing events specification.');
    } // interpret as an event selector string


    if (isString(events)) {
      events = parseSelector(events, scope.isSubscope() ? Scope : View$1);
    } // separate event streams from signal updates


    events = array(events).filter(function (s) {
      return s.signal || s.scale ? (sources.push(s), 0) : 1;
    }); // merge internal operator listeners

    if (sources.length > 1) {
      sources = [mergeSources(sources)];
    } // merge event streams, include as source


    if (events.length) {
      sources.push(events.length > 1 ? {
        merge: events
      } : events[0]);
    }

    if (encode != null) {
      if (update) error('Signal encode and update are mutually exclusive.');
      update = 'encode(item(),' + $(encode) + ')';
    } // resolve update value


    entry.update = isString(update) ? parseExpression$1(update, scope, preamble) : update.expr != null ? parseExpression$1(update.expr, scope, preamble) : update.value != null ? update.value : update.signal != null ? {
      $expr: '_.value',
      $params: {
        value: scope.signalRef(update.signal)
      }
    } : error('Invalid signal update specification.');

    if (spec.force) {
      entry.options = {
        force: true
      };
    }

    sources.forEach(function (source) {
      scope.addUpdate(extend(streamSource(source, scope), entry));
    });
  }

  function streamSource(stream, scope) {
    return {
      source: stream.signal ? scope.signalRef(stream.signal) : stream.scale ? scope.scaleRef(stream.scale) : parseStream$1(stream, scope)
    };
  }

  function mergeSources(sources) {
    return {
      signal: '[' + sources.map(function (s) {
        return s.scale ? 'scale("' + s.scale + '")' : s.signal;
      }) + ']'
    };
  }

  function parseSignalUpdates (signal, scope) {
    var op = scope.getSignal(signal.name),
        expr = signal.update;

    if (signal.init) {
      if (expr) {
        error('Signals can not include both init and update expressions.');
      } else {
        expr = signal.init;
        op.initonly = true;
      }
    }

    if (expr) {
      expr = parseExpression$1(expr, scope);
      op.update = expr.$expr;
      op.params = expr.$params;
    }

    if (signal.on) {
      signal.on.forEach(function (_) {
        parseUpdate$1(_, scope, op.id);
      });
    }
  }

  function transform$3(name) {
    return function (params, value, parent) {
      return entry(name, value, params || undefined, parent);
    };
  }

  var Aggregate$1 = transform$3('aggregate');
  var AxisTicks$1 = transform$3('axisticks');
  var Bound$1 = transform$3('bound');
  var Collect$1 = transform$3('collect');
  var Compare$1 = transform$3('compare');
  var DataJoin$1 = transform$3('datajoin');
  var Encode$1 = transform$3('encode');
  var Expression$1 = transform$3('expression');
  var Facet$1 = transform$3('facet');
  var Field$1 = transform$3('field');
  var Key$1 = transform$3('key');
  var LegendEntries$1 = transform$3('legendentries');
  var Load$1 = transform$3('load');
  var Mark$1 = transform$3('mark');
  var MultiExtent$1 = transform$3('multiextent');
  var MultiValues$1 = transform$3('multivalues');
  var Overlap$1 = transform$3('overlap');
  var Params$2 = transform$3('params');
  var PreFacet$1 = transform$3('prefacet');
  var Projection$1 = transform$3('projection');
  var Proxy$2 = transform$3('proxy');
  var Relay$1 = transform$3('relay');
  var Render$1 = transform$3('render');
  var Scale$1 = transform$3('scale');
  var Sieve$1 = transform$3('sieve');
  var SortItems$1 = transform$3('sortitems');
  var ViewLayout$1 = transform$3('viewlayout');
  var Values$1 = transform$3('values');

  var FIELD_REF_ID = 0;
  var MULTIDOMAIN_SORT_OPS = {
    min: 'min',
    max: 'max',
    count: 'sum'
  };
  function initScale(spec, scope) {
    var type = spec.type || 'linear';

    if (!isValidScaleType(type)) {
      error('Unrecognized scale type: ' + $(type));
    }

    scope.addScale(spec.name, {
      type: type,
      domain: undefined
    });
  }
  function parseScale(spec, scope) {
    var params = scope.getScale(spec.name).params,
        key;
    params.domain = parseScaleDomain(spec.domain, spec, scope);

    if (spec.range != null) {
      params.range = parseScaleRange(spec, scope, params);
    }

    if (spec.interpolate != null) {
      parseScaleInterpolate(spec.interpolate, params);
    }

    if (spec.nice != null) {
      params.nice = parseScaleNice(spec.nice);
    }

    if (spec.bins != null) {
      params.bins = parseScaleBins(spec.bins, scope);
    }

    for (key in spec) {
      if (hasOwnProperty$1(params, key) || key === 'name') continue;
      params[key] = parseLiteral(spec[key], scope);
    }
  }

  function parseLiteral(v, scope) {
    return !isObject(v) ? v : v.signal ? scope.signalRef(v.signal) : error('Unsupported object: ' + $(v));
  }

  function parseArray(v, scope) {
    return v.signal ? scope.signalRef(v.signal) : v.map(function (v) {
      return parseLiteral(v, scope);
    });
  }

  function dataLookupError(name) {
    error('Can not find data set: ' + $(name));
  } // -- SCALE DOMAIN ----


  function parseScaleDomain(domain, spec, scope) {
    if (!domain) {
      if (spec.domainMin != null || spec.domainMax != null) {
        error('No scale domain defined for domainMin/domainMax to override.');
      }

      return; // default domain
    }

    return domain.signal ? scope.signalRef(domain.signal) : (isArray(domain) ? explicitDomain : domain.fields ? multipleDomain : singularDomain)(domain, spec, scope);
  }

  function explicitDomain(domain, spec, scope) {
    return domain.map(function (v) {
      return parseLiteral(v, scope);
    });
  }

  function singularDomain(domain, spec, scope) {
    var data = scope.getData(domain.data);
    if (!data) dataLookupError(domain.data);
    return isDiscrete(spec.type) ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false)) : isQuantile(spec.type) ? data.domainRef(scope, domain.field) : data.extentRef(scope, domain.field);
  }

  function multipleDomain(domain, spec, scope) {
    var data = domain.data,
        fields = domain.fields.reduce(function (dom, d) {
      d = isString(d) ? {
        data: data,
        field: d
      } : isArray(d) || d.signal ? fieldRef$1(d, scope) : d;
      dom.push(d);
      return dom;
    }, []);
    return (isDiscrete(spec.type) ? ordinalMultipleDomain : isQuantile(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain, scope, fields);
  }

  function fieldRef$1(data, scope) {
    var name = '_:vega:_' + FIELD_REF_ID++,
        coll = Collect$1({});

    if (isArray(data)) {
      coll.value = {
        $ingest: data
      };
    } else if (data.signal) {
      var code = 'setdata(' + $(name) + ',' + data.signal + ')';
      coll.params.input = scope.signalRef(code);
    }

    scope.addDataPipeline(name, [coll, Sieve$1({})]);
    return {
      data: name,
      field: 'data'
    };
  }

  function ordinalMultipleDomain(domain, scope, fields) {
    var sort = parseSort(domain.sort, true),
        counts,
        p,
        a,
        c,
        v; // get value counts for each domain field

    counts = fields.map(function (f) {
      var data = scope.getData(f.data);
      if (!data) dataLookupError(f.data);
      return data.countsRef(scope, f.field, sort);
    }); // aggregate the results from each domain field

    p = {
      groupby: keyFieldRef,
      pulse: counts
    };

    if (sort) {
      a = sort.op || 'count';
      v = sort.field ? aggrField(a, sort.field) : 'count';
      p.ops = [MULTIDOMAIN_SORT_OPS[a]];
      p.fields = [scope.fieldRef(v)];
      p.as = [v];
    }

    a = scope.add(Aggregate$1(p)); // collect aggregate output

    c = scope.add(Collect$1({
      pulse: ref(a)
    })); // extract values for combined domain

    v = scope.add(Values$1({
      field: keyFieldRef,
      sort: scope.sortRef(sort),
      pulse: ref(c)
    }));
    return ref(v);
  }

  function parseSort(sort, multidomain) {
    if (sort) {
      if (!sort.field && !sort.op) {
        if (isObject(sort)) sort.field = 'key';else sort = {
          field: 'key'
        };
      } else if (!sort.field && sort.op !== 'count') {
        error('No field provided for sort aggregate op: ' + sort.op);
      } else if (multidomain && sort.field) {
        if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) {
          error('Multiple domain scales can not be sorted using ' + sort.op);
        }
      }
    }

    return sort;
  }

  function quantileMultipleDomain(domain, scope, fields) {
    // get value arrays for each domain field
    var values = fields.map(function (f) {
      var data = scope.getData(f.data);
      if (!data) dataLookupError(f.data);
      return data.domainRef(scope, f.field);
    }); // combine value arrays

    return ref(scope.add(MultiValues$1({
      values: values
    })));
  }

  function numericMultipleDomain(domain, scope, fields) {
    // get extents for each domain field
    var extents = fields.map(function (f) {
      var data = scope.getData(f.data);
      if (!data) dataLookupError(f.data);
      return data.extentRef(scope, f.field);
    }); // combine extents

    return ref(scope.add(MultiExtent$1({
      extents: extents
    })));
  } // -- SCALE BINS -----


  function parseScaleBins(v, scope) {
    return v.signal || isArray(v) ? parseArray(v, scope) : scope.objectProperty(v);
  } // -- SCALE NICE -----


  function parseScaleNice(nice) {
    return isObject(nice) ? {
      interval: parseLiteral(nice.interval),
      step: parseLiteral(nice.step)
    } : parseLiteral(nice);
  } // -- SCALE INTERPOLATION -----


  function parseScaleInterpolate(interpolate, params) {
    params.interpolate = parseLiteral(interpolate.type || interpolate);

    if (interpolate.gamma != null) {
      params.interpolateGamma = parseLiteral(interpolate.gamma);
    }
  } // -- SCALE RANGE -----


  function parseScaleRange(spec, scope, params) {
    var range = spec.range,
        config = scope.config.range;

    if (range.signal) {
      return scope.signalRef(range.signal);
    } else if (isString(range)) {
      if (config && hasOwnProperty$1(config, range)) {
        spec = extend({}, spec, {
          range: config[range]
        });
        return parseScaleRange(spec, scope, params);
      } else if (range === 'width') {
        range = [0, {
          signal: 'width'
        }];
      } else if (range === 'height') {
        range = isDiscrete(spec.type) ? [0, {
          signal: 'height'
        }] : [{
          signal: 'height'
        }, 0];
      } else {
        error('Unrecognized scale range value: ' + $(range));
      }
    } else if (range.scheme) {
      params.scheme = isArray(range.scheme) ? parseArray(range.scheme, scope) : parseLiteral(range.scheme, scope);
      if (range.extent) params.schemeExtent = parseArray(range.extent, scope);
      if (range.count) params.schemeCount = parseLiteral(range.count, scope);
      return;
    } else if (range.step) {
      params.rangeStep = parseLiteral(range.step, scope);
      return;
    } else if (isDiscrete(spec.type) && !isArray(range)) {
      return parseScaleDomain(range, spec, scope);
    } else if (!isArray(range)) {
      error('Unsupported range type: ' + $(range));
    }

    return range.map(function (v) {
      return (isArray(v) ? parseArray : parseLiteral)(v, scope);
    });
  }

  function parseProjection (proj, scope) {
    var config = scope.config.projection || {},
        params = {};

    for (var name in proj) {
      if (name === 'name') continue;
      params[name] = parseParameter$1(proj[name], name, scope);
    } // apply projection defaults from config


    for (name in config) {
      if (params[name] == null) {
        params[name] = parseParameter$1(config[name], name, scope);
      }
    }

    scope.addProjection(proj.name, params);
  }

  function parseParameter$1(_, name, scope) {
    return isArray(_) ? _.map(function (_) {
      return parseParameter$1(_, name, scope);
    }) : !isObject(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === 'fit' ? _ : error('Unsupported parameter object: ' + $(_));
  }

  var Top$1 = 'top';
  var Left$1 = 'left';
  var Right$1 = 'right';
  var Bottom$1 = 'bottom';
  var Center$1 = 'center';
  var Vertical = 'vertical';
  var Start$1 = 'start';
  var Middle$1 = 'middle';
  var End$1 = 'end';
  var Index = 'index';
  var Label = 'label';
  var Offset = 'offset';
  var Perc = 'perc';
  var Perc2 = 'perc2';
  var Size = 'size';
  var Value = 'value';
  var GuideLabelStyle = 'guide-label';
  var GuideTitleStyle = 'guide-title';
  var GroupTitleStyle = 'group-title';
  var GroupSubtitleStyle = 'group-subtitle';
  var Symbols$2 = 'symbol';
  var Gradient$2 = 'gradient';
  var Discrete$2 = 'discrete'; // Encoding channels supported by legends
  // In priority order of 'canonical' scale

  var LegendScales = ['size', 'shape', 'fill', 'stroke', 'strokeWidth', 'strokeDash', 'opacity'];
  var Skip$1 = {
    name: 1,
    style: 1,
    interactive: 1
  };
  var zero$4 = {
    value: 0
  };
  var one$2 = {
    value: 1
  };

  var Skip$2 = toSet(['rule']),
      Swap = toSet(['group', 'image', 'rect']);
  function adjustSpatial (encode, marktype) {
    var code = '';
    if (Skip$2[marktype]) return code;

    if (encode.x2) {
      if (encode.x) {
        if (Swap[marktype]) {
          code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';
        }

        code += 'o.width=o.x2-o.x;';
      } else {
        code += 'o.x=o.x2-(o.width||0);';
      }
    }

    if (encode.xc) {
      code += 'o.x=o.xc-(o.width||0)/2;';
    }

    if (encode.y2) {
      if (encode.y) {
        if (Swap[marktype]) {
          code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';
        }

        code += 'o.height=o.y2-o.y;';
      } else {
        code += 'o.y=o.y2-(o.height||0);';
      }
    }

    if (encode.yc) {
      code += 'o.y=o.yc-(o.height||0)/2;';
    }

    return code;
  }

  function color$2 (enc, scope, params, fields) {
    function color(type, x, y, z) {
      var a = entry$1(null, x, scope, params, fields),
          b = entry$1(null, y, scope, params, fields),
          c = entry$1(null, z, scope, params, fields);
      return 'this.' + type + '(' + [a, b, c].join(',') + ').toString()';
    }

    return enc.c ? color('hcl', enc.h, enc.c, enc.l) : enc.h || enc.s ? color('hsl', enc.h, enc.s, enc.l) : enc.l || enc.a ? color('lab', enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? color('rgb', enc.r, enc.g, enc.b) : null;
  }

  function expression$1 (code, scope, params, fields) {
    var expr = parseExpression$1(code, scope);
    expr.$fields.forEach(function (name) {
      fields[name] = 1;
    });
    extend(params, expr.$params);
    return expr.$expr;
  }

  function field$1 (ref, scope, params, fields) {
    return resolve$1(isObject(ref) ? ref : {
      datum: ref
    }, scope, params, fields);
  }

  function resolve$1(ref, scope, params, fields) {
    var object, level, field;

    if (ref.signal) {
      object = 'datum';
      field = expression$1(ref.signal, scope, params, fields);
    } else if (ref.group || ref.parent) {
      level = Math.max(1, ref.level || 1);
      object = 'item';

      while (level-- > 0) {
        object += '.mark.group';
      }

      if (ref.parent) {
        field = ref.parent;
        object += '.datum';
      } else {
        field = ref.group;
      }
    } else if (ref.datum) {
      object = 'datum';
      field = ref.datum;
    } else {
      error('Invalid field reference: ' + $(ref));
    }

    if (!ref.signal) {
      if (isString(field)) {
        fields[field] = 1; // TODO review field tracking?

        field = splitAccessPath(field).map($).join('][');
      } else {
        field = resolve$1(field, scope, params, fields);
      }
    }

    return object + '[' + field + ']';
  }

  function property (property, scope, params, fields) {
    return isObject(property) ? '(' + entry$1(null, property, scope, params, fields) + ')' : property;
  }

  function scale$5 (enc, value, scope, params, fields) {
    var scale = getScale$1(enc.scale, scope, params, fields),
        interp,
        func,
        flag;

    if (enc.range != null) {
      // pull value from scale range
      interp = +enc.range;
      func = scale + '.range()';
      value = interp === 0 ? func + '[0]' : '($=' + func + ',' + (interp === 1 ? '$[$.length-1]' : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';
    } else {
      // run value through scale and/or pull scale bandwidth
      if (value !== undefined) value = scale + '(' + value + ')';

      if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {
        func = scale + '.bandwidth';

        if (enc.band.signal) {
          interp = func + '()*' + property(enc.band, scope, params, fields);
        } else {
          interp = +enc.band;
          interp = func + '()' + (interp === 1 ? '' : '*' + interp);
        } // if we don't know the scale type, check for bandwidth


        if (flag < 0) interp = '(' + func + '?' + interp + ':0)';
        value = (value ? value + '+' : '') + interp;

        if (enc.extra) {
          // include logic to handle extraneous elements
          value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';
        }
      }

      if (value == null) value = '0';
    }

    return value;
  }

  function hasBandwidth(name, scope) {
    if (!isString(name)) return -1;
    var type = scope.scaleType(name);
    return type === 'band' || type === 'point' ? 1 : 0;
  }

  function getScale$1(name, scope, params, fields) {
    var scaleName;

    if (isString(name)) {
      // direct scale lookup; add scale as parameter
      scaleName = ScalePrefix + name;

      if (!hasOwnProperty$1(params, scaleName)) {
        params[scaleName] = scope.scaleRef(name);
      }

      scaleName = $(scaleName);
    } else {
      // indirect scale lookup; add all scales as parameters
      for (scaleName in scope.scales) {
        params[ScalePrefix + scaleName] = scope.scaleRef(scaleName);
      }

      scaleName = $(ScalePrefix) + '+' + (name.signal ? '(' + expression$1(name.signal, scope, params, fields) + ')' : field$1(name, scope, params, fields));
    }

    return '_[' + scaleName + ']';
  }

  function gradient$1 (enc, scope, params, fields) {
    return 'this.gradient(' + getScale$1(enc.gradient, scope, params, fields) + ',' + $(enc.start) + ',' + $(enc.stop) + ',' + $(enc.count) + ')';
  }

  function entry$1 (channel, enc, scope, params, fields) {
    if (enc.gradient != null) {
      return gradient$1(enc, scope, params, fields);
    }

    var value = enc.signal ? expression$1(enc.signal, scope, params, fields) : enc.color ? color$2(enc.color, scope, params, fields) : enc.field != null ? field$1(enc.field, scope, params, fields) : enc.value !== undefined ? $(enc.value) : undefined;

    if (enc.scale != null) {
      value = scale$5(enc, value, scope, params, fields);
    }

    if (value === undefined) {
      value = null;
    }

    if (enc.exponent != null) {
      value = 'Math.pow(' + value + ',' + property(enc.exponent, scope, params, fields) + ')';
    }

    if (enc.mult != null) {
      value += '*' + property(enc.mult, scope, params, fields);
    }

    if (enc.offset != null) {
      value += '+' + property(enc.offset, scope, params, fields);
    }

    if (enc.round) {
      value = 'Math.round(' + value + ')';
    }

    return value;
  }

  function set$3 (obj, key, value) {
    var o = obj + '[' + $(key) + ']';
    return "$=".concat(value, ";if(").concat(o, "!==$)").concat(o, "=$,m=1;");
  }

  function rule$1 (channel, rules, scope, params, fields) {
    var code = '';
    rules.forEach(function (rule) {
      var value = entry$1(channel, rule, scope, params, fields);
      code += rule.test ? expression$1(rule.test, scope, params, fields) + '?' + value + ':' : value;
    }); // if no else clause, terminate with null (vega/vega#1366)

    if (peek(code) === ':') {
      code += 'null';
    }

    return set$3('o', channel, code);
  }

  function parseEncode(encode, marktype, params, scope) {
    var fields = {},
        code = 'var o=item,datum=o.datum,m=0,$;',
        channel,
        enc,
        value;

    for (channel in encode) {
      enc = encode[channel];

      if (isArray(enc)) {
        // rule
        code += rule$1(channel, enc, scope, params, fields);
      } else {
        value = entry$1(channel, enc, scope, params, fields);
        code += set$3('o', channel, value);
      }
    }

    code += adjustSpatial(encode, marktype);
    code += 'return m;';
    return {
      $expr: code,
      $fields: Object.keys(fields),
      $output: Object.keys(encode)
    };
  }

  var MarkRole = 'mark';
  var FrameRole$1 = 'frame';
  var ScopeRole$1 = 'scope';
  var AxisRole$1 = 'axis';
  var AxisDomainRole = 'axis-domain';
  var AxisGridRole = 'axis-grid';
  var AxisLabelRole = 'axis-label';
  var AxisTickRole = 'axis-tick';
  var AxisTitleRole = 'axis-title';
  var LegendRole$1 = 'legend';
  var LegendBandRole = 'legend-band';
  var LegendEntryRole = 'legend-entry';
  var LegendGradientRole = 'legend-gradient';
  var LegendLabelRole = 'legend-label';
  var LegendSymbolRole = 'legend-symbol';
  var LegendTitleRole = 'legend-title';
  var TitleRole$1 = 'title';
  var TitleTextRole = 'title-text';
  var TitleSubtitleRole = 'title-subtitle';

  function encoder(_) {
    return isObject(_) && !isArray(_) ? extend({}, _) : {
      value: _
    };
  }
  function addEncode(object, name, value, set) {
    if (value != null) {
      // Always assign signal to update, even if the signal is from the enter block
      if (isObject(value) && !isArray(value)) {
        object.update[name] = value;
      } else {
        object[set || 'enter'][name] = {
          value: value
        };
      }

      return 1;
    } else {
      return 0;
    }
  }
  function addEncoders(object, enter, update) {
    for (var name in enter) {
      addEncode(object, name, enter[name]);
    }

    for (var _name in update) {
      addEncode(object, _name, update[_name], 'update');
    }
  }
  function extendEncode(encode, extra, skip) {
    for (var name in extra) {
      if (skip && hasOwnProperty$1(skip, name)) continue;
      encode[name] = extend(encode[name] || {}, extra[name]);
    }

    return encode;
  }
  function encoders(encode, type, role, style, scope, params) {
    var enc, key;
    params = params || {};
    params.encoders = {
      $encode: enc = {}
    };
    encode = applyDefaults(encode, type, role, style, scope.config);

    for (key in encode) {
      enc[key] = parseEncode(encode[key], type, params, scope);
    }

    return params;
  }

  function applyDefaults(encode, type, role, style, config) {
    var defaults = {},
        enter = {},
        update,
        key,
        skip,
        props; // if text mark, apply global lineBreak settings (#2370)

    key = 'lineBreak';

    if (type === 'text' && config[key] != null && !has(key, encode)) {
      applyDefault(defaults, key, config[key]);
    } // ignore legend and axis roles


    if (role == 'legend' || String(role).startsWith('axis')) {
      role = null;
    } // resolve mark config


    props = role === FrameRole$1 ? config.group : role === MarkRole ? extend({}, config.mark, config[type]) : null;

    for (key in props) {
      // do not apply defaults if relevant fields are defined
      skip = has(key, encode) || (key === 'fill' || key === 'stroke') && (has('fill', encode) || has('stroke', encode));
      if (!skip) applyDefault(defaults, key, props[key]);
    } // resolve styles, apply with increasing precedence


    array(style).forEach(function (name) {
      var props = config.style && config.style[name];

      for (var key in props) {
        if (!has(key, encode)) {
          applyDefault(defaults, key, props[key]);
        }
      }
    });
    encode = extend({}, encode); // defensive copy

    for (key in defaults) {
      props = defaults[key];

      if (props.signal) {
        (update = update || {})[key] = props;
      } else {
        enter[key] = props;
      }
    }

    encode.enter = extend(enter, encode.enter);
    if (update) encode.update = extend(update, encode.update);
    return encode;
  }

  function applyDefault(defaults, key, value) {
    defaults[key] = value && value.signal ? {
      signal: value.signal
    } : {
      value: value
    };
  }

  function has(key, encode) {
    return encode && (encode.enter && encode.enter[key] || encode.update && encode.update[key]);
  }

  function guideMark (type, role, style, key, dataRef, encode, extras) {
    return {
      type: type,
      name: extras ? extras.name : undefined,
      role: role,
      style: extras && extras.style || style,
      key: key,
      from: dataRef,
      interactive: !!(extras && extras.interactive),
      encode: extendEncode(encode, extras, Skip$1)
    };
  }

  function lookup$6(spec, config) {
    var _ = function _(name, dflt) {
      return value$1(spec[name], value$1(config[name], dflt));
    };

    _.isVertical = function (s) {
      return Vertical === value$1(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));
    };

    _.gradientLength = function () {
      return value$1(spec.gradientLength, config.gradientLength || config.gradientWidth);
    };

    _.gradientThickness = function () {
      return value$1(spec.gradientThickness, config.gradientThickness || config.gradientHeight);
    };

    _.entryColumns = function () {
      return value$1(spec.columns, value$1(config.columns, +_.isVertical(true)));
    };

    return _;
  }
  function getEncoding(name, encode) {
    var v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);
    return v && v.signal ? v : v ? v.value : null;
  }
  function getStyle(name, scope, style) {
    var s = scope.config.style[style];
    return s && s[name];
  }
  function anchorExpr(s, e, m) {
    return "item.anchor === \"".concat(Start$1, "\" ? ").concat(s, " : item.anchor === \"").concat(End$1, "\" ? ").concat(e, " : ").concat(m);
  }
  var alignExpr = anchorExpr($(Left$1), $(Right$1), $(Center$1));
  function tickBand(_) {
    var v = _('tickBand'),
        offset = _('tickOffset'),
        band,
        extra;

    if (!v) {
      // if no tick band entry, fall back on other properties
      band = _('bandPosition');
      extra = _('tickExtra');
    } else if (v.signal) {
      // if signal, augment code to interpret values
      band = {
        signal: "(".concat(v.signal, ")==='extent'?1:0.5")
      };
      extra = {
        signal: "(".concat(v.signal, ")==='extent'?true:false")
      };

      if (!isObject(offset)) {
        offset = {
          signal: "(".concat(v.signal, ")==='extent'?0:").concat(offset)
        };
      }
    } else if (v === 'extent') {
      // if constant, simply set values
      band = 1;
      extra = true;
      offset = 0;
    } else {
      band = 0.5;
      extra = false;
    }

    return {
      extra: extra,
      band: band,
      offset: offset
    };
  }
  function extendOffset(value, offset) {
    return !offset ? value : !value ? offset : !isObject(value) ? {
      value: value,
      offset: offset
    } : _objectSpread2({}, value, {
      offset: extendOffset(value.offset, offset)
    });
  }

  var GroupMark = 'group';
  var RectMark = 'rect';
  var RuleMark = 'rule';
  var SymbolMark = 'symbol';
  var TextMark = 'text';

  function legendGradient (spec, scale, config, userEncode) {
    var _ = lookup$6(spec, config),
        vertical = _.isVertical(),
        thickness = _.gradientThickness(),
        length = _.gradientLength(),
        encode,
        enter,
        start,
        stop,
        width,
        height;

    if (vertical) {
      start = [0, 1];
      stop = [0, 0];
      width = thickness;
      height = length;
    } else {
      start = [0, 0];
      stop = [1, 0];
      width = length;
      height = thickness;
    }

    encode = {
      enter: enter = {
        opacity: zero$4,
        x: zero$4,
        y: zero$4,
        width: encoder(width),
        height: encoder(height)
      },
      update: extend({}, enter, {
        opacity: one$2,
        fill: {
          gradient: scale,
          start: start,
          stop: stop
        }
      }),
      exit: {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      stroke: _('gradientStrokeColor'),
      strokeWidth: _('gradientStrokeWidth')
    }, {
      // update
      opacity: _('gradientOpacity')
    });
    return guideMark(RectMark, LegendGradientRole, null, undefined, undefined, encode, userEncode);
  }

  function legendGradientDiscrete (spec, scale, config, userEncode, dataRef) {
    var _ = lookup$6(spec, config),
        vertical = _.isVertical(),
        thickness = _.gradientThickness(),
        length = _.gradientLength(),
        encode,
        enter,
        u,
        v,
        uu,
        vv,
        adjust = '';

    vertical ? (u = 'y', uu = 'y2', v = 'x', vv = 'width', adjust = '1-') : (u = 'x', uu = 'x2', v = 'y', vv = 'height');
    enter = {
      opacity: zero$4,
      fill: {
        scale: scale,
        field: Value
      }
    };
    enter[u] = {
      signal: adjust + 'datum.' + Perc,
      mult: length
    };
    enter[v] = zero$4;
    enter[uu] = {
      signal: adjust + 'datum.' + Perc2,
      mult: length
    };
    enter[vv] = encoder(thickness);
    encode = {
      enter: enter,
      update: extend({}, enter, {
        opacity: one$2
      }),
      exit: {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      stroke: _('gradientStrokeColor'),
      strokeWidth: _('gradientStrokeWidth')
    }, {
      // update
      opacity: _('gradientOpacity')
    });
    return guideMark(RectMark, LegendBandRole, null, Value, dataRef, encode, userEncode);
  }

  var alignExpr$1 = "datum.".concat(Perc, "<=0?\"").concat(Left$1, "\":datum.").concat(Perc, ">=1?\"").concat(Right$1, "\":\"").concat(Center$1, "\""),
      baselineExpr = "datum.".concat(Perc, "<=0?\"").concat(Bottom$1, "\":datum.").concat(Perc, ">=1?\"").concat(Top$1, "\":\"").concat(Middle$1, "\"");
  function legendGradientLabels (spec, config, userEncode, dataRef) {
    var _ = lookup$6(spec, config),
        vertical = _.isVertical(),
        thickness = encoder(_.gradientThickness()),
        length = _.gradientLength(),
        overlap = _('labelOverlap'),
        separation = _('labelSeparation'),
        encode,
        enter,
        update,
        u,
        v,
        adjust = '';

    encode = {
      enter: enter = {
        opacity: zero$4
      },
      update: update = {
        opacity: one$2,
        text: {
          field: Label
        }
      },
      exit: {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      fill: _('labelColor'),
      fillOpacity: _('labelOpacity'),
      font: _('labelFont'),
      fontSize: _('labelFontSize'),
      fontStyle: _('labelFontStyle'),
      fontWeight: _('labelFontWeight'),
      limit: value$1(spec.labelLimit, config.gradientLabelLimit)
    });

    if (vertical) {
      enter.align = {
        value: 'left'
      };
      enter.baseline = update.baseline = {
        signal: baselineExpr
      };
      u = 'y';
      v = 'x';
      adjust = '1-';
    } else {
      enter.align = update.align = {
        signal: alignExpr$1
      };
      enter.baseline = {
        value: 'top'
      };
      u = 'x';
      v = 'y';
    }

    enter[u] = update[u] = {
      signal: adjust + 'datum.' + Perc,
      mult: length
    };
    enter[v] = update[v] = thickness;
    thickness.offset = value$1(spec.labelOffset, config.gradientLabelOffset) || 0;
    spec = guideMark(TextMark, LegendLabelRole, GuideLabelStyle, Value, dataRef, encode, userEncode);

    if (overlap) {
      spec.overlap = {
        separation: separation,
        method: overlap,
        order: 'datum.' + Index
      };
    }

    return spec;
  }

  function guideGroup (role, style, name, dataRef, interactive, encode, marks, layout) {
    return {
      type: GroupMark,
      name: name,
      role: role,
      style: style,
      from: dataRef,
      interactive: interactive || false,
      encode: encode,
      marks: marks,
      layout: layout
    };
  }

  function legendSymbolGroups (spec, config, userEncode, dataRef, columns) {
    var _ = lookup$6(spec, config),
        entries = userEncode.entries,
        interactive = !!(entries && entries.interactive),
        name = entries ? entries.name : undefined,
        height = _('clipHeight'),
        symbolOffset = _('symbolOffset'),
        valueRef = {
      data: 'value'
    },
        encode = {},
        xSignal = "(".concat(columns, ") ? datum.").concat(Offset, " : datum.").concat(Size),
        yEncode = height ? encoder(height) : {
      field: Size
    },
        index = "datum.".concat(Index),
        ncols = "max(1, ".concat(columns, ")"),
        enter,
        update,
        labelOffset,
        symbols,
        labels,
        nrows,
        sort;

    yEncode.mult = 0.5; // -- LEGEND SYMBOLS --

    encode = {
      enter: enter = {
        opacity: zero$4,
        x: {
          signal: xSignal,
          mult: 0.5,
          offset: symbolOffset
        },
        y: yEncode
      },
      update: update = {
        opacity: one$2,
        x: enter.x,
        y: enter.y
      },
      exit: {
        opacity: zero$4
      }
    };
    var baseFill = null,
        baseStroke = null;

    if (!spec.fill) {
      baseFill = config.symbolBaseFillColor;
      baseStroke = config.symbolBaseStrokeColor;
    }

    addEncoders(encode, {
      fill: _('symbolFillColor', baseFill),
      shape: _('symbolType'),
      size: _('symbolSize'),
      stroke: _('symbolStrokeColor', baseStroke),
      strokeDash: _('symbolDash'),
      strokeDashOffset: _('symbolDashOffset'),
      strokeWidth: _('symbolStrokeWidth')
    }, {
      // update
      opacity: _('symbolOpacity')
    });
    LegendScales.forEach(function (scale) {
      if (spec[scale]) {
        update[scale] = enter[scale] = {
          scale: spec[scale],
          field: Value
        };
      }
    });
    symbols = guideMark(SymbolMark, LegendSymbolRole, null, Value, valueRef, encode, userEncode.symbols);
    if (height) symbols.clip = true; // -- LEGEND LABELS --

    labelOffset = encoder(symbolOffset);
    labelOffset.offset = _('labelOffset');
    encode = {
      enter: enter = {
        opacity: zero$4,
        x: {
          signal: xSignal,
          offset: labelOffset
        },
        y: yEncode
      },
      update: update = {
        opacity: one$2,
        text: {
          field: Label
        },
        x: enter.x,
        y: enter.y
      },
      exit: {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      align: _('labelAlign'),
      baseline: _('labelBaseline'),
      fill: _('labelColor'),
      fillOpacity: _('labelOpacity'),
      font: _('labelFont'),
      fontSize: _('labelFontSize'),
      fontStyle: _('labelFontStyle'),
      fontWeight: _('labelFontWeight'),
      limit: _('labelLimit')
    });
    labels = guideMark(TextMark, LegendLabelRole, GuideLabelStyle, Value, valueRef, encode, userEncode.labels); // -- LEGEND ENTRY GROUPS --

    encode = {
      enter: {
        noBound: {
          value: !height
        },
        // ignore width/height in bounds calc
        width: zero$4,
        height: height ? encoder(height) : zero$4,
        opacity: zero$4
      },
      exit: {
        opacity: zero$4
      },
      update: update = {
        opacity: one$2,
        row: {
          signal: null
        },
        column: {
          signal: null
        }
      }
    }; // annotate and sort groups to ensure correct ordering

    if (_.isVertical(true)) {
      nrows = "ceil(item.mark.items.length / ".concat(ncols, ")");
      update.row.signal = "".concat(index, "%").concat(nrows);
      update.column.signal = "floor(".concat(index, " / ").concat(nrows, ")");
      sort = {
        field: ['row', index]
      };
    } else {
      update.row.signal = "floor(".concat(index, " / ").concat(ncols, ")");
      update.column.signal = "".concat(index, " % ").concat(ncols);
      sort = {
        field: index
      };
    } // handle zero column case (implies infinite columns)


    update.column.signal = "(".concat(columns, ")?").concat(update.column.signal, ":").concat(index); // facet legend entries into sub-groups

    dataRef = {
      facet: {
        data: dataRef,
        name: 'value',
        groupby: Index
      }
    };
    spec = guideGroup(ScopeRole$1, null, name, dataRef, interactive, extendEncode(encode, entries, Skip$1), [symbols, labels]);
    spec.sort = sort;
    return spec;
  }
  function legendSymbolLayout(spec, config) {
    var _ = lookup$6(spec, config); // layout parameters for legend entries


    return {
      align: _('gridAlign'),
      columns: _.entryColumns(),
      center: {
        row: true,
        column: false
      },
      padding: {
        row: _('rowPadding'),
        column: _('columnPadding')
      }
    };
  }

  var isL = 'item.orient === "left"',
      isR = 'item.orient === "right"',
      isLR = "(".concat(isL, " || ").concat(isR, ")"),
      isVG = "datum.vgrad && ".concat(isLR),
      baseline = anchorExpr('"top"', '"bottom"', '"middle"'),
      alignFlip = anchorExpr('"right"', '"left"', '"center"'),
      exprAlign = "datum.vgrad && ".concat(isR, " ? (").concat(alignFlip, ") : (").concat(isLR, " && !(datum.vgrad && ").concat(isL, ")) ? \"left\" : ").concat(alignExpr),
      exprAnchor = "item._anchor || (".concat(isLR, " ? \"middle\" : \"start\")"),
      exprAngle = "".concat(isVG, " ? (").concat(isL, " ? -90 : 90) : 0"),
      exprBaseline = "".concat(isLR, " ? (datum.vgrad ? (").concat(isR, " ? \"bottom\" : \"top\") : ").concat(baseline, ") : \"top\"");
  function legendTitle (spec, config, userEncode, dataRef) {
    var _ = lookup$6(spec, config),
        encode;

    encode = {
      enter: {
        opacity: zero$4
      },
      update: {
        opacity: one$2,
        x: {
          field: {
            group: 'padding'
          }
        },
        y: {
          field: {
            group: 'padding'
          }
        }
      },
      exit: {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      orient: _('titleOrient'),
      _anchor: _('titleAnchor'),
      anchor: {
        signal: exprAnchor
      },
      angle: {
        signal: exprAngle
      },
      align: {
        signal: exprAlign
      },
      baseline: {
        signal: exprBaseline
      },
      text: spec.title,
      fill: _('titleColor'),
      fillOpacity: _('titleOpacity'),
      font: _('titleFont'),
      fontSize: _('titleFontSize'),
      fontStyle: _('titleFontStyle'),
      fontWeight: _('titleFontWeight'),
      limit: _('titleLimit'),
      lineHeight: _('titleLineHeight')
    }, {
      // require update
      align: _('titleAlign'),
      baseline: _('titleBaseline')
    });
    return guideMark(TextMark, LegendTitleRole, GuideTitleStyle, null, dataRef, encode, userEncode);
  }

  function clip$3 (clip, scope) {
    var expr;

    if (isObject(clip)) {
      if (clip.signal) {
        expr = clip.signal;
      } else if (clip.path) {
        expr = 'pathShape(' + param(clip.path) + ')';
      } else if (clip.sphere) {
        expr = 'geoShape(' + param(clip.sphere) + ', {type: "Sphere"})';
      }
    }

    return expr ? scope.signalRef(expr) : !!clip;
  }

  function param(value) {
    return isObject(value) && value.signal ? value.signal : $(value);
  }

  function getRole (spec) {
    var role = spec.role || '';
    return !role.indexOf('axis') || !role.indexOf('legend') || !role.indexOf('title') ? role : spec.type === GroupMark ? ScopeRole$1 : role || MarkRole;
  }

  function definition$1 (spec) {
    return {
      marktype: spec.type,
      name: spec.name || undefined,
      role: spec.role || getRole(spec),
      zindex: +spec.zindex || undefined
    };
  }

  function interactive (spec, scope) {
    return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;
  }

  /**
   * Parse a data transform specification.
   */

  function parseTransform (spec, scope) {
    var def = definition(spec.type);
    if (!def) error('Unrecognized transform type: ' + $(spec.type));
    var t = entry(def.type.toLowerCase(), null, parseParameters$1(def, spec, scope));
    if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
    t.metadata = def.metadata || {};
    return t;
  }
  /**
   * Parse all parameters of a data transform.
   */

  function parseParameters$1(def, spec, scope) {
    var params = {},
        pdef,
        i,
        n;

    for (i = 0, n = def.params.length; i < n; ++i) {
      pdef = def.params[i];
      params[pdef.name] = parseParameter$2(pdef, spec, scope);
    }

    return params;
  }
  /**
   * Parse a data transform parameter.
   */


  function parseParameter$2(def, spec, scope) {
    var type = def.type,
        value = spec[def.name];

    if (type === 'index') {
      return parseIndexParameter(def, spec, scope);
    } else if (value === undefined) {
      if (def.required) {
        error('Missing required ' + $(spec.type) + ' parameter: ' + $(def.name));
      }

      return;
    } else if (type === 'param') {
      return parseSubParameters(def, spec, scope);
    } else if (type === 'projection') {
      return scope.projectionRef(spec[def.name]);
    }

    return def.array && !isSignal(value) ? value.map(function (v) {
      return parameterValue(def, v, scope);
    }) : parameterValue(def, value, scope);
  }
  /**
   * Parse a single parameter value.
   */


  function parameterValue(def, value, scope) {
    var type = def.type;

    if (isSignal(value)) {
      return isExpr$1(type) ? error('Expression references can not be signals.') : isField(type) ? scope.fieldRef(value) : isCompare(type) ? scope.compareRef(value) : scope.signalRef(value.signal);
    } else {
      var expr = def.expr || isField(type);
      return expr && outerExpr(value) ? scope.exprRef(value.expr, value.as) : expr && outerField(value) ? fieldRef(value.field, value.as) : isExpr$1(type) ? parseExpression$1(value, scope) : isData(type) ? ref(scope.getData(value).values) : isField(type) ? fieldRef(value) : isCompare(type) ? scope.compareRef(value) : value;
    }
  }
  /**
   * Parse parameter for accessing an index of another data set.
   */


  function parseIndexParameter(def, spec, scope) {
    if (!isString(spec.from)) {
      error('Lookup "from" parameter must be a string literal.');
    }

    return scope.getData(spec.from).lookupRef(scope, spec.key);
  }
  /**
   * Parse a parameter that contains one or more sub-parameter objects.
   */


  function parseSubParameters(def, spec, scope) {
    var value = spec[def.name];

    if (def.array) {
      if (!isArray(value)) {
        // signals not allowed!
        error('Expected an array of sub-parameters. Instead: ' + $(value));
      }

      return value.map(function (v) {
        return parseSubParameter(def, v, scope);
      });
    } else {
      return parseSubParameter(def, value, scope);
    }
  }
  /**
   * Parse a sub-parameter object.
   */


  function parseSubParameter(def, value, scope) {
    var params, pdef, k, i, n; // loop over defs to find matching key

    for (i = 0, n = def.params.length; i < n; ++i) {
      pdef = def.params[i];

      for (k in pdef.key) {
        if (pdef.key[k] !== value[k]) {
          pdef = null;
          break;
        }
      }

      if (pdef) break;
    } // raise error if matching key not found


    if (!pdef) error('Unsupported parameter: ' + $(value)); // parse params, create Params transform, return ref

    params = extend(parseParameters$1(pdef, value, scope), pdef.key);
    return ref(scope.add(Params$2(params)));
  } // -- Utilities -----


  function outerExpr(_) {
    return _ && _.expr;
  }
  function outerField(_) {
    return _ && _.field;
  }
  function isData(_) {
    return _ === 'data';
  }
  function isExpr$1(_) {
    return _ === 'expr';
  }
  function isField(_) {
    return _ === 'field';
  }
  function isCompare(_) {
    return _ === 'compare';
  }

  function parseData (from, group, scope) {
    var facet, key, op, dataRef, parent; // if no source data, generate singleton datum

    if (!from) {
      dataRef = ref(scope.add(Collect$1(null, [{}])));
    } // if faceted, process facet specification
    else if (facet = from.facet) {
        if (!group) error('Only group marks can be faceted.'); // use pre-faceted source data, if available

        if (facet.field != null) {
          dataRef = parent = getDataRef(facet, scope);
        } else {
          // generate facet aggregates if no direct data specification
          if (!from.data) {
            op = parseTransform(extend({
              type: 'aggregate',
              groupby: array(facet.groupby)
            }, facet.aggregate), scope);
            op.params.key = scope.keyRef(facet.groupby);
            op.params.pulse = getDataRef(facet, scope);
            dataRef = parent = ref(scope.add(op));
          } else {
            parent = ref(scope.getData(from.data).aggregate);
          }

          key = scope.keyRef(facet.groupby, true);
        }
      } // if not yet defined, get source data reference


    if (!dataRef) {
      dataRef = getDataRef(from, scope);
    }

    return {
      key: key,
      pulse: dataRef,
      parent: parent
    };
  }
  function getDataRef(from, scope) {
    return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);
  }

  function DataScope(scope, input, output, values, aggr) {
    this.scope = scope; // parent scope object

    this.input = input; // first operator in pipeline (tuple input)

    this.output = output; // last operator in pipeline (tuple output)

    this.values = values; // operator for accessing tuples (but not tuple flow)
    // last aggregate in transform pipeline

    this.aggregate = aggr; // lookup table of field indices

    this.index = {};
  }

  DataScope.fromEntries = function (scope, entries) {
    var n = entries.length,
        i = 1,
        input = entries[0],
        values = entries[n - 1],
        output = entries[n - 2],
        aggr = null;

    if (input && input.type === 'load') {
      input = entries[1];
    } // add operator entries to this scope, wire up pulse chain


    scope.add(entries[0]);

    for (; i < n; ++i) {
      entries[i].params.pulse = ref(entries[i - 1]);
      scope.add(entries[i]);
      if (entries[i].type === 'aggregate') aggr = entries[i];
    }

    return new DataScope(scope, input, output, values, aggr);
  };

  var prototype$1t = DataScope.prototype;

  prototype$1t.countsRef = function (scope, field, sort) {
    var ds = this,
        cache = ds.counts || (ds.counts = {}),
        k = fieldKey(field),
        v,
        a,
        p;

    if (k != null) {
      scope = ds.scope;
      v = cache[k];
    }

    if (!v) {
      p = {
        groupby: scope.fieldRef(field, 'key'),
        pulse: ref(ds.output)
      };
      if (sort && sort.field) addSortField(scope, p, sort);
      a = scope.add(Aggregate$1(p));
      v = scope.add(Collect$1({
        pulse: ref(a)
      }));
      v = {
        agg: a,
        ref: ref(v)
      };
      if (k != null) cache[k] = v;
    } else if (sort && sort.field) {
      addSortField(scope, v.agg.params, sort);
    }

    return v.ref;
  };

  function fieldKey(field) {
    return isString(field) ? field : null;
  }

  function addSortField(scope, p, sort) {
    var as = aggrField(sort.op, sort.field),
        s;

    if (p.ops) {
      for (var i = 0, n = p.as.length; i < n; ++i) {
        if (p.as[i] === as) return;
      }
    } else {
      p.ops = ['count'];
      p.fields = [null];
      p.as = ['count'];
    }

    if (sort.op) {
      p.ops.push((s = sort.op.signal) ? scope.signalRef(s) : sort.op);
      p.fields.push(scope.fieldRef(sort.field));
      p.as.push(as);
    }
  }

  function cache(scope, ds, name, optype, field, counts, index) {
    var cache = ds[name] || (ds[name] = {}),
        sort = sortKey(counts),
        k = fieldKey(field),
        v,
        op;

    if (k != null) {
      scope = ds.scope;
      k = k + (sort ? '|' + sort : '');
      v = cache[k];
    }

    if (!v) {
      var params = counts ? {
        field: keyFieldRef,
        pulse: ds.countsRef(scope, field, counts)
      } : {
        field: scope.fieldRef(field),
        pulse: ref(ds.output)
      };
      if (sort) params.sort = scope.sortRef(counts);
      op = scope.add(entry(optype, undefined, params));
      if (index) ds.index[field] = op;
      v = ref(op);
      if (k != null) cache[k] = v;
    }

    return v;
  }

  prototype$1t.tuplesRef = function () {
    return ref(this.values);
  };

  prototype$1t.extentRef = function (scope, field) {
    return cache(scope, this, 'extent', 'extent', field, false);
  };

  prototype$1t.domainRef = function (scope, field) {
    return cache(scope, this, 'domain', 'values', field, false);
  };

  prototype$1t.valuesRef = function (scope, field, sort) {
    return cache(scope, this, 'vals', 'values', field, sort || true);
  };

  prototype$1t.lookupRef = function (scope, field) {
    return cache(scope, this, 'lookup', 'tupleindex', field, false);
  };

  prototype$1t.indataRef = function (scope, field) {
    return cache(scope, this, 'indata', 'tupleindex', field, true, true);
  };

  function parseFacet (spec, scope, group) {
    var facet = spec.from.facet,
        name = facet.name,
        data = getDataRef(facet, scope),
        subscope,
        source,
        values,
        op;

    if (!facet.name) {
      error('Facet must have a name: ' + $(facet));
    }

    if (!facet.data) {
      error('Facet must reference a data set: ' + $(facet));
    }

    if (facet.field) {
      op = scope.add(PreFacet$1({
        field: scope.fieldRef(facet.field),
        pulse: data
      }));
    } else if (facet.groupby) {
      op = scope.add(Facet$1({
        key: scope.keyRef(facet.groupby),
        group: ref(scope.proxy(group.parent)),
        pulse: data
      }));
    } else {
      error('Facet must specify groupby or field: ' + $(facet));
    } // initialize facet subscope


    subscope = scope.fork();
    source = subscope.add(Collect$1());
    values = subscope.add(Sieve$1({
      pulse: ref(source)
    }));
    subscope.addData(name, new DataScope(subscope, source, source, values));
    subscope.addSignal('parent', null); // parse faceted subflow

    op.params.subflow = {
      $subflow: parseSpec(spec, subscope).toRuntime()
    };
  }

  function parseSubflow (spec, scope, input) {
    var op = scope.add(PreFacet$1({
      pulse: input.pulse
    })),
        subscope = scope.fork();
    subscope.add(Sieve$1());
    subscope.addSignal('parent', null); // parse group mark subflow

    op.params.subflow = {
      $subflow: parseSpec(spec, subscope).toRuntime()
    };
  }

  function parseTrigger (spec, scope, name) {
    var remove = spec.remove,
        insert = spec.insert,
        toggle = spec.toggle,
        modify = spec.modify,
        values = spec.values,
        op = scope.add(operator()),
        update,
        expr;
    update = 'if(' + spec.trigger + ',modify("' + name + '",' + [insert, remove, toggle, modify, values].map(function (_) {
      return _ == null ? 'null' : _;
    }).join(',') + '),0)';
    expr = parseExpression$1(update, scope);
    op.update = expr.$expr;
    op.params = expr.$params;
  }

  function parseMark (spec, scope) {
    var role = getRole(spec),
        group = spec.type === GroupMark,
        facet = spec.from && spec.from.facet,
        layout = spec.layout || role === ScopeRole$1 || role === FrameRole$1,
        nested = role === MarkRole || layout || facet,
        overlap = spec.overlap,
        ops,
        op,
        input,
        store,
        enc,
        bound,
        render,
        sieve,
        name,
        joinRef,
        markRef,
        encodeRef,
        layoutRef,
        boundRef; // resolve input data

    input = parseData(spec.from, group, scope); // data join to map tuples to visual items

    op = scope.add(DataJoin$1({
      key: input.key || (spec.key ? fieldRef(spec.key) : undefined),
      pulse: input.pulse,
      clean: !group
    }));
    joinRef = ref(op); // collect visual items

    op = store = scope.add(Collect$1({
      pulse: joinRef
    })); // connect visual items to scenegraph

    op = scope.add(Mark$1({
      markdef: definition$1(spec),
      interactive: interactive(spec.interactive, scope),
      clip: clip$3(spec.clip, scope),
      context: {
        $context: true
      },
      groups: scope.lookup(),
      parent: scope.signals.parent ? scope.signalRef('parent') : null,
      index: scope.markpath(),
      pulse: ref(op)
    }));
    markRef = ref(op); // add visual encoders

    op = enc = scope.add(Encode$1(encoders(spec.encode, spec.type, role, spec.style, scope, {
      mod: false,
      pulse: markRef
    }))); // monitor parent marks to propagate changes

    op.params.parent = scope.encode(); // add post-encoding transforms, if defined

    if (spec.transform) {
      spec.transform.forEach(function (_) {
        var tx = parseTransform(_, scope),
            md = tx.metadata;

        if (md.generates || md.changes) {
          error('Mark transforms should not generate new data.');
        }

        if (!md.nomod) enc.params.mod = true; // update encode mod handling

        tx.params.pulse = ref(op);
        scope.add(op = tx);
      });
    } // if item sort specified, perform post-encoding


    if (spec.sort) {
      op = scope.add(SortItems$1({
        sort: scope.compareRef(spec.sort),
        pulse: ref(op)
      }));
    }

    encodeRef = ref(op); // add view layout operator if needed

    if (facet || layout) {
      layout = scope.add(ViewLayout$1({
        layout: scope.objectProperty(spec.layout),
        legends: scope.legends,
        mark: markRef,
        pulse: encodeRef
      }));
      layoutRef = ref(layout);
    } // compute bounding boxes


    bound = scope.add(Bound$1({
      mark: markRef,
      pulse: layoutRef || encodeRef
    }));
    boundRef = ref(bound); // if group mark, recurse to parse nested content

    if (group) {
      // juggle layout & bounds to ensure they run *after* any faceting transforms
      if (nested) {
        ops = scope.operators;
        ops.pop();
        if (layout) ops.pop();
      }

      scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
      facet ? parseFacet(spec, scope, input) // explicit facet
      : nested ? parseSubflow(spec, scope, input) // standard mark group
      : parseSpec(spec, scope); // guide group, we can avoid nested scopes

      scope.popState();

      if (nested) {
        if (layout) ops.push(layout);
        ops.push(bound);
      }
    } // if requested, add overlap removal transform


    if (overlap) {
      boundRef = parseOverlap(overlap, boundRef, scope);
    } // render / sieve items


    render = scope.add(Render$1({
      pulse: boundRef
    }));
    sieve = scope.add(Sieve$1({
      pulse: ref(render)
    }, undefined, scope.parent())); // if mark is named, make accessible as reactive geometry
    // add trigger updates if defined

    if (spec.name != null) {
      name = spec.name;
      scope.addData(name, new DataScope(scope, store, render, sieve));
      if (spec.on) spec.on.forEach(function (on) {
        if (on.insert || on.remove || on.toggle) {
          error('Marks only support modify triggers.');
        }

        parseTrigger(on, scope, name);
      });
    }
  }

  function parseOverlap(overlap, source, scope) {
    var method = overlap.method,
        bound = overlap.bound,
        sep = overlap.separation,
        tol;
    var params = {
      separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,
      method: isSignal(method) ? scope.signalRef(method.signal) : method,
      pulse: source
    };

    if (overlap.order) {
      params.sort = scope.compareRef({
        field: overlap.order
      });
    }

    if (bound) {
      tol = bound.tolerance;
      params.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;
      params.boundScale = scope.scaleRef(bound.scale);
      params.boundOrient = bound.orient;
    }

    return ref(scope.add(Overlap$1(params)));
  }

  function parseLegend (spec, scope) {
    var config = scope.config.legend,
        encode = spec.encode || {},
        legendEncode = encode.legend || {},
        name = legendEncode.name || undefined,
        interactive = legendEncode.interactive,
        style = legendEncode.style,
        _ = lookup$6(spec, config),
        entryEncode,
        entryLayout,
        params,
        children,
        type,
        datum,
        dataRef,
        entryRef,
        group; // resolve 'canonical' scale name


    var scale = LegendScales.reduce(function (a, b) {
      return a || spec[b];
    }, 0);
    if (!scale) error('Missing valid scale for legend.'); // resolve legend type (symbol, gradient, or discrete gradient)

    type = legendType(spec, scope.scaleType(scale)); // single-element data source for legend group

    datum = {
      title: spec.title != null,
      type: type,
      vgrad: type !== 'symbol' && _.isVertical()
    };
    dataRef = ref(scope.add(Collect$1(null, [datum]))); // encoding properties for legend group

    legendEncode = extendEncode(buildLegendEncode(_, config), legendEncode, Skip$1); // encoding properties for legend entry sub-group

    entryEncode = {
      enter: {
        x: {
          value: 0
        },
        y: {
          value: 0
        }
      }
    }; // data source for legend values

    entryRef = ref(scope.add(LegendEntries$1(params = {
      type: type,
      scale: scope.scaleRef(scale),
      count: scope.objectProperty(_('tickCount')),
      limit: scope.property(_('symbolLimit')),
      values: scope.objectProperty(spec.values),
      minstep: scope.property(spec.tickMinStep),
      formatType: scope.property(spec.formatType),
      formatSpecifier: scope.property(spec.format)
    }))); // continuous gradient legend

    if (type === Gradient$2) {
      children = [legendGradient(spec, scale, config, encode.gradient), legendGradientLabels(spec, config, encode.labels, entryRef)]; // adjust default tick count based on the gradient length

      params.count = params.count || scope.signalRef("max(2,2*floor((".concat(deref(_.gradientLength()), ")/100))"));
    } // discrete gradient legend
    else if (type === Discrete$2) {
        children = [legendGradientDiscrete(spec, scale, config, encode.gradient, entryRef), legendGradientLabels(spec, config, encode.labels, entryRef)];
      } // symbol legend
      else {
          // determine legend symbol group layout
          entryLayout = legendSymbolLayout(spec, config);
          children = [legendSymbolGroups(spec, config, encode, entryRef, deref(entryLayout.columns))]; // pass symbol size information to legend entry generator

          params.size = sizeExpression(spec, scope, children[0].marks);
        } // generate legend marks


    children = [guideGroup(LegendEntryRole, null, null, dataRef, interactive, entryEncode, children, entryLayout)]; // include legend title if defined

    if (datum.title) {
      children.push(legendTitle(spec, config, encode.title, dataRef));
    } // build legend specification


    group = guideGroup(LegendRole$1, style, name, dataRef, interactive, legendEncode, children);
    if (spec.zindex) group.zindex = spec.zindex; // parse legend specification

    return parseMark(group, scope);
  }

  function legendType(spec, scaleType) {
    var type = spec.type || Symbols$2;

    if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {
      type = isContinuous(scaleType) ? Gradient$2 : isDiscretizing(scaleType) ? Discrete$2 : Symbols$2;
    }

    return type !== Gradient$2 ? type : isDiscretizing(scaleType) ? Discrete$2 : Gradient$2;
  }

  function scaleCount(spec) {
    return LegendScales.reduce(function (count, type) {
      return count + (spec[type] ? 1 : 0);
    }, 0);
  }

  function buildLegendEncode(_, config) {
    var encode = {
      enter: {},
      update: {}
    };
    addEncoders(encode, {
      orient: _('orient'),
      offset: _('offset'),
      padding: _('padding'),
      titlePadding: _('titlePadding'),
      cornerRadius: _('cornerRadius'),
      fill: _('fillColor'),
      stroke: _('strokeColor'),
      strokeWidth: config.strokeWidth,
      strokeDash: config.strokeDash,
      x: _('legendX'),
      y: _('legendY')
    });
    return encode;
  }

  function sizeExpression(spec, scope, marks) {
    var size = deref(getChannel('size', spec, marks)),
        strokeWidth = deref(getChannel('strokeWidth', spec, marks)),
        fontSize = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));
    return parseExpression$1("max(ceil(sqrt(".concat(size, ")+").concat(strokeWidth, "),").concat(fontSize, ")"), scope);
  }

  function getChannel(name, spec, marks) {
    return spec[name] ? "scale(\"".concat(spec[name], "\",datum)") : getEncoding(name, marks[0].encode);
  }

  function getFontSize(encode, scope, style) {
    return getEncoding('fontSize', encode) || getStyle('fontSize', scope, style);
  }

  var angleExpr = "item.orient===\"".concat(Left$1, "\"?-90:item.orient===\"").concat(Right$1, "\"?90:0");
  function parseTitle (spec, scope) {
    spec = isString(spec) ? {
      text: spec
    } : spec;

    var _ = lookup$6(spec, scope.config.title),
        encode = spec.encode || {},
        userEncode = encode.group || {},
        name = userEncode.name || undefined,
        interactive = userEncode.interactive,
        style = userEncode.style,
        children = [],
        dataRef,
        group; // single-element data source for group title


    dataRef = ref(scope.add(Collect$1(null, [{}]))); // include title text

    children.push(buildTitle(spec, _, titleEncode(spec), dataRef)); // include subtitle text

    if (spec.subtitle) {
      children.push(buildSubTitle(spec, _, encode.subtitle, dataRef));
    } // build title specification


    group = guideGroup(TitleRole$1, style, name, dataRef, interactive, groupEncode(_, userEncode), children);
    if (spec.zindex) group.zindex = spec.zindex; // parse title specification

    return parseMark(group, scope);
  } // provide backwards-compatibility for title custom encode;
  // the top-level encode block has been *deprecated*.

  function titleEncode(spec) {
    var encode = spec.encode;
    return encode && encode.title || extend({
      name: spec.name,
      interactive: spec.interactive,
      style: spec.style
    }, encode);
  }

  function groupEncode(_, userEncode) {
    var encode = {
      enter: {},
      update: {}
    };
    addEncoders(encode, {
      orient: _('orient'),
      anchor: _('anchor'),
      align: {
        signal: alignExpr
      },
      angle: {
        signal: angleExpr
      },
      limit: _('limit'),
      frame: _('frame'),
      offset: _('offset') || 0,
      padding: _('subtitlePadding')
    });
    return extendEncode(encode, userEncode, Skip$1);
  }

  function buildTitle(spec, _, userEncode, dataRef) {
    var zero = {
      value: 0
    },
        text = spec.text,
        encode = {
      enter: {
        opacity: zero
      },
      update: {
        opacity: {
          value: 1
        }
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      text: text,
      align: {
        signal: 'item.mark.group.align'
      },
      angle: {
        signal: 'item.mark.group.angle'
      },
      limit: {
        signal: 'item.mark.group.limit'
      },
      baseline: 'top',
      dx: _('dx'),
      dy: _('dy'),
      fill: _('color'),
      font: _('font'),
      fontSize: _('fontSize'),
      fontStyle: _('fontStyle'),
      fontWeight: _('fontWeight'),
      lineHeight: _('lineHeight')
    }, {
      // update
      align: _('align'),
      angle: _('angle'),
      baseline: _('baseline')
    });
    return guideMark(TextMark, TitleTextRole, GroupTitleStyle, null, dataRef, encode, userEncode);
  }

  function buildSubTitle(spec, _, userEncode, dataRef) {
    var zero = {
      value: 0
    },
        text = spec.subtitle,
        encode = {
      enter: {
        opacity: zero
      },
      update: {
        opacity: {
          value: 1
        }
      },
      exit: {
        opacity: zero
      }
    };
    addEncoders(encode, {
      text: text,
      align: {
        signal: 'item.mark.group.align'
      },
      angle: {
        signal: 'item.mark.group.angle'
      },
      limit: {
        signal: 'item.mark.group.limit'
      },
      baseline: 'top',
      dx: _('dx'),
      dy: _('dy'),
      fill: _('subtitleColor'),
      font: _('subtitleFont'),
      fontSize: _('subtitleFontSize'),
      fontStyle: _('subtitleFontStyle'),
      fontWeight: _('subtitleFontWeight'),
      lineHeight: _('subtitleLineHeight')
    }, {
      // update
      align: _('align'),
      angle: _('angle'),
      baseline: _('baseline')
    });
    return guideMark(TextMark, TitleSubtitleRole, GroupSubtitleStyle, null, dataRef, encode, userEncode);
  }

  function parseData$1(data, scope) {
    var transforms = [];

    if (data.transform) {
      data.transform.forEach(function (tx) {
        transforms.push(parseTransform(tx, scope));
      });
    }

    if (data.on) {
      data.on.forEach(function (on) {
        parseTrigger(on, scope, data.name);
      });
    }

    scope.addDataPipeline(data.name, analyze(data, scope, transforms));
  }
  /**
   * Analyze a data pipeline, add needed operators.
   */

  function analyze(data, scope, ops) {
    var output = [],
        source = null,
        modify = false,
        generate = false,
        upstream,
        i,
        n,
        t,
        m;

    if (data.values) {
      // hard-wired input data set
      if (hasSignal(data.values) || hasSignal(data.format)) {
        // if either values or format has signal, use dynamic loader
        output.push(load$1(scope, data));
        output.push(source = collect());
      } else {
        // otherwise, ingest upon dataflow init
        output.push(source = collect({
          $ingest: data.values,
          $format: data.format
        }));
      }
    } else if (data.url) {
      // load data from external source
      if (hasSignal(data.url) || hasSignal(data.format)) {
        // if either url or format has signal, use dynamic loader
        output.push(load$1(scope, data));
        output.push(source = collect());
      } else {
        // otherwise, request load upon dataflow init
        output.push(source = collect({
          $request: data.url,
          $format: data.format
        }));
      }
    } else if (data.source) {
      // derives from one or more other data sets
      source = upstream = array(data.source).map(function (d) {
        return ref(scope.getData(d).output);
      });
      output.push(null); // populate later
    } // scan data transforms, add collectors as needed


    for (i = 0, n = ops.length; i < n; ++i) {
      t = ops[i];
      m = t.metadata;

      if (!source && !m.source) {
        output.push(source = collect());
      }

      output.push(t);
      if (m.generates) generate = true;
      if (m.modifies && !generate) modify = true;
      if (m.source) source = t;else if (m.changes) source = null;
    }

    if (upstream) {
      n = upstream.length - 1;
      output[0] = Relay$1({
        derive: modify,
        pulse: n ? upstream : upstream[0]
      });

      if (modify || n) {
        // collect derived and multi-pulse tuples
        output.splice(1, 0, collect());
      }
    }

    if (!source) output.push(collect());
    output.push(Sieve$1({}));
    return output;
  }

  function collect(values) {
    var s = Collect$1({}, values);
    s.metadata = {
      source: true
    };
    return s;
  }

  function load$1(scope, data) {
    return Load$1({
      url: data.url ? scope.property(data.url) : undefined,
      async: data.async ? scope.property(data.async) : undefined,
      values: data.values ? scope.property(data.values) : undefined,
      format: scope.objectProperty(data.format)
    });
  }

  function axisConfig (spec, scope) {
    var config = scope.config,
        orient = spec.orient,
        xy = orient === Top$1 || orient === Bottom$1 ? config.axisX : config.axisY,
        or = config['axis' + orient[0].toUpperCase() + orient.slice(1)],
        band = scope.scaleType(spec.scale) === 'band' && config.axisBand;
    return xy || or || band ? extend({}, config.axis, xy, or, band) : config.axis;
  }

  function axisDomain (spec, config, userEncode, dataRef) {
    var _ = lookup$6(spec, config),
        orient = spec.orient,
        encode,
        enter,
        update,
        u,
        u2,
        v;

    encode = {
      enter: enter = {
        opacity: zero$4
      },
      update: update = {
        opacity: one$2
      },
      exit: {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      stroke: _('domainColor'),
      strokeDash: _('domainDash'),
      strokeDashOffset: _('domainDashOffset'),
      strokeWidth: _('domainWidth'),
      strokeOpacity: _('domainOpacity')
    });

    if (orient === Top$1 || orient === Bottom$1) {
      u = 'x';
      v = 'y';
    } else {
      u = 'y';
      v = 'x';
    }

    u2 = u + '2';
    enter[v] = zero$4;
    update[u] = enter[u] = position(spec, 0);
    update[u2] = enter[u2] = position(spec, 1);
    return guideMark(RuleMark, AxisDomainRole, null, null, dataRef, encode, userEncode);
  }

  function position(spec, pos) {
    return {
      scale: spec.scale,
      range: pos
    };
  }

  function axisGrid (spec, config, userEncode, dataRef, band) {
    var _ = lookup$6(spec, config),
        orient = spec.orient,
        vscale = spec.gridScale,
        sign = orient === Left$1 || orient === Top$1 ? 1 : -1,
        offset = offsetValue$1(spec.offset, sign),
        encode,
        enter,
        exit,
        update,
        tickPos,
        u,
        v,
        v2,
        s;

    encode = {
      enter: enter = {
        opacity: zero$4
      },
      update: update = {
        opacity: one$2
      },
      exit: exit = {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      stroke: _('gridColor'),
      strokeDash: _('gridDash'),
      strokeDashOffset: _('gridDashOffset'),
      strokeOpacity: _('gridOpacity'),
      strokeWidth: _('gridWidth')
    });
    tickPos = {
      scale: spec.scale,
      field: Value,
      band: band.band,
      extra: band.extra,
      offset: band.offset,
      round: _('tickRound')
    };

    if (orient === Top$1 || orient === Bottom$1) {
      u = 'x';
      v = 'y';
      s = 'height';
    } else {
      u = 'y';
      v = 'x';
      s = 'width';
    }

    v2 = v + '2';
    update[u] = enter[u] = exit[u] = tickPos;

    if (vscale) {
      update[v] = enter[v] = {
        scale: vscale,
        range: 0,
        mult: sign,
        offset: offset
      };
      update[v2] = enter[v2] = {
        scale: vscale,
        range: 1,
        mult: sign,
        offset: offset
      };
    } else {
      update[v] = enter[v] = {
        value: 0,
        offset: offset
      };
      update[v2] = enter[v2] = {
        signal: s,
        mult: sign,
        offset: offset
      };
    }

    return guideMark(RuleMark, AxisGridRole, null, Value, dataRef, encode, userEncode);
  }

  function offsetValue$1(offset, sign) {
    if (sign === 1) ; else if (!isObject(offset)) {
      offset = sign * (offset || 0);
    } else {
      var entry = offset = extend({}, offset);

      while (entry.mult != null) {
        if (!isObject(entry.mult)) {
          entry.mult *= sign;
          return offset;
        } else {
          entry = entry.mult = extend({}, entry.mult);
        }
      }

      entry.mult = sign;
    }

    return offset;
  }

  function axisTicks (spec, config, userEncode, dataRef, size, band) {
    var _ = lookup$6(spec, config),
        orient = spec.orient,
        sign = orient === Left$1 || orient === Top$1 ? -1 : 1,
        encode,
        enter,
        exit,
        update,
        tickSize,
        tickPos;

    encode = {
      enter: enter = {
        opacity: zero$4
      },
      update: update = {
        opacity: one$2
      },
      exit: exit = {
        opacity: zero$4
      }
    };
    addEncoders(encode, {
      stroke: _('tickColor'),
      strokeDash: _('tickDash'),
      strokeDashOffset: _('tickDashOffset'),
      strokeOpacity: _('tickOpacity'),
      strokeWidth: _('tickWidth')
    });
    tickSize = encoder(size);
    tickSize.mult = sign;
    tickPos = {
      scale: spec.scale,
      field: Value,
      band: band.band,
      extra: band.extra,
      offset: band.offset,
      round: _('tickRound')
    };

    if (orient === Top$1 || orient === Bottom$1) {
      update.y = enter.y = zero$4;
      update.y2 = enter.y2 = tickSize;
      update.x = enter.x = exit.x = tickPos;
    } else {
      update.x = enter.x = zero$4;
      update.x2 = enter.x2 = tickSize;
      update.y = enter.y = exit.y = tickPos;
    }

    return guideMark(RuleMark, AxisTickRole, null, Value, dataRef, encode, userEncode);
  }

  function flushExpr(scale, threshold, a, b, c) {
    return {
      signal: 'flush(range("' + scale + '"), ' + 'scale("' + scale + '", datum.value), ' + threshold + ',' + a + ',' + b + ',' + c + ')'
    };
  }

  function axisLabels (spec, config, userEncode, dataRef, size, band) {
    var _addEncoders;

    var _ = lookup$6(spec, config),
        orient = spec.orient,
        sign = orient === Left$1 || orient === Top$1 ? -1 : 1,
        isXAxis = orient === Top$1 || orient === Bottom$1,
        scale = spec.scale,
        flush = deref(_('labelFlush')),
        flushOffset = deref(_('labelFlushOffset')),
        flushOn = flush === 0 || !!flush,
        labelAlign = _('labelAlign'),
        labelBaseline = _('labelBaseline'),
        encode,
        enter,
        tickSize,
        tickPos,
        align,
        baseline,
        offset,
        bound,
        overlap,
        separation;

    tickSize = encoder(size);
    tickSize.mult = sign;
    tickSize.offset = encoder(_('labelPadding') || 0);
    tickSize.offset.mult = sign;
    tickPos = {
      scale: scale,
      field: Value,
      band: 0.5,
      offset: extendOffset(band.offset, _('labelOffset'))
    };

    if (isXAxis) {
      align = labelAlign || (flushOn ? flushExpr(scale, flush, '"left"', '"right"', '"center"') : 'center');
      baseline = labelBaseline || (orient === Top$1 ? 'bottom' : 'top');
      offset = !labelAlign;
    } else {
      align = labelAlign || (orient === Right$1 ? 'left' : 'right');
      baseline = labelBaseline || (flushOn ? flushExpr(scale, flush, '"top"', '"bottom"', '"middle"') : 'middle');
      offset = !labelBaseline;
    }

    offset = offset && flushOn && flushOffset ? flushExpr(scale, flush, '-(' + flushOffset + ')', flushOffset, 0) : null;
    encode = {
      enter: enter = {
        opacity: zero$4,
        x: isXAxis ? tickPos : tickSize,
        y: isXAxis ? tickSize : tickPos
      },
      update: {
        opacity: one$2,
        text: {
          field: Label
        },
        x: enter.x,
        y: enter.y
      },
      exit: {
        opacity: zero$4,
        x: enter.x,
        y: enter.y
      }
    };
    addEncoders(encode, (_addEncoders = {}, _defineProperty(_addEncoders, isXAxis ? 'dx' : 'dy', offset), _defineProperty(_addEncoders, "align", align), _defineProperty(_addEncoders, "baseline", baseline), _defineProperty(_addEncoders, "angle", _('labelAngle')), _defineProperty(_addEncoders, "fill", _('labelColor')), _defineProperty(_addEncoders, "fillOpacity", _('labelOpacity')), _defineProperty(_addEncoders, "font", _('labelFont')), _defineProperty(_addEncoders, "fontSize", _('labelFontSize')), _defineProperty(_addEncoders, "fontWeight", _('labelFontWeight')), _defineProperty(_addEncoders, "fontStyle", _('labelFontStyle')), _defineProperty(_addEncoders, "limit", _('labelLimit')), _defineProperty(_addEncoders, "lineHeight", _('labelLineHeight')), _addEncoders));
    bound = _('labelBound');
    overlap = _('labelOverlap');
    separation = _('labelSeparation');
    spec = guideMark(TextMark, AxisLabelRole, GuideLabelStyle, Value, dataRef, encode, userEncode); // if overlap method or bound defined, request label overlap removal

    if (overlap || bound) {
      spec.overlap = {
        separation: separation,
        method: overlap,
        order: 'datum.index',
        bound: bound ? {
          scale: scale,
          orient: orient,
          tolerance: bound
        } : null
      };
    }

    return spec;
  }

  function axisTitle (spec, config, userEncode, dataRef) {
    var _ = lookup$6(spec, config),
        orient = spec.orient,
        sign = orient === Left$1 || orient === Top$1 ? -1 : 1,
        horizontal = orient === Top$1 || orient === Bottom$1,
        encode,
        enter,
        update,
        titlePos;

    encode = {
      enter: enter = {
        opacity: zero$4,
        anchor: encoder(_('titleAnchor')),
        align: {
          signal: alignExpr
        }
      },
      update: update = extend({}, enter, {
        opacity: one$2,
        text: encoder(spec.title)
      }),
      exit: {
        opacity: zero$4
      }
    };
    titlePos = {
      signal: "lerp(range(\"".concat(spec.scale, "\"), ").concat(anchorExpr(0, 1, 0.5), ")")
    };

    if (horizontal) {
      update.x = titlePos;
      enter.angle = {
        value: 0
      };
      enter.baseline = {
        value: orient === Top$1 ? 'bottom' : 'top'
      };
    } else {
      update.y = titlePos;
      enter.angle = {
        value: sign * 90
      };
      enter.baseline = {
        value: 'bottom'
      };
    }

    addEncoders(encode, {
      angle: _('titleAngle'),
      baseline: _('titleBaseline'),
      fill: _('titleColor'),
      fillOpacity: _('titleOpacity'),
      font: _('titleFont'),
      fontSize: _('titleFontSize'),
      fontStyle: _('titleFontStyle'),
      fontWeight: _('titleFontWeight'),
      limit: _('titleLimit'),
      lineHeight: _('titleLineHeight')
    }, {
      // require update
      align: _('titleAlign')
    });
    !addEncode(encode, 'x', _('titleX'), 'update') && !horizontal && !has('x', userEncode) && (encode.enter.auto = {
      value: true
    });
    !addEncode(encode, 'y', _('titleY'), 'update') && horizontal && !has('y', userEncode) && (encode.enter.auto = {
      value: true
    });
    return guideMark(TextMark, AxisTitleRole, GuideTitleStyle, null, dataRef, encode, userEncode);
  }

  function parseAxis (spec, scope) {
    var config = axisConfig(spec, scope),
        encode = spec.encode || {},
        axisEncode = encode.axis || {},
        name = axisEncode.name || undefined,
        interactive = axisEncode.interactive,
        style = axisEncode.style,
        _ = lookup$6(spec, config),
        band = tickBand(_),
        datum,
        dataRef,
        ticksRef,
        size,
        group,
        children; // single-element data source for axis group


    datum = {
      orient: spec.orient,
      ticks: !!_('ticks'),
      labels: !!_('labels'),
      grid: !!_('grid'),
      domain: !!_('domain'),
      title: spec.title != null,
      translate: _('translate')
    };
    dataRef = ref(scope.add(Collect$1({}, [datum]))); // encoding properties for axis group item

    axisEncode = extendEncode({
      update: {
        offset: encoder(_('offset') || 0),
        position: encoder(value$1(spec.position, 0)),
        titlePadding: encoder(_('titlePadding')),
        minExtent: encoder(_('minExtent')),
        maxExtent: encoder(_('maxExtent')),
        range: {
          signal: "abs(span(range(\"".concat(spec.scale, "\")))")
        }
      }
    }, encode.axis, Skip$1); // data source for axis ticks

    ticksRef = ref(scope.add(AxisTicks$1({
      scale: scope.scaleRef(spec.scale),
      extra: scope.property(band.extra),
      count: scope.objectProperty(spec.tickCount),
      values: scope.objectProperty(spec.values),
      minstep: scope.property(spec.tickMinStep),
      formatType: scope.property(spec.formatType),
      formatSpecifier: scope.property(spec.format)
    }))); // generate axis marks

    children = []; // include axis gridlines if requested

    if (datum.grid) {
      children.push(axisGrid(spec, config, encode.grid, ticksRef, band));
    } // include axis ticks if requested


    if (datum.ticks) {
      size = _('tickSize');
      children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));
    } // include axis labels if requested


    if (datum.labels) {
      size = datum.ticks ? size : 0;
      children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));
    } // include axis domain path if requested


    if (datum.domain) {
      children.push(axisDomain(spec, config, encode.domain, dataRef));
    } // include axis title if defined


    if (datum.title) {
      children.push(axisTitle(spec, config, encode.title, dataRef));
    } // build axis specification


    group = guideGroup(AxisRole$1, style, name, dataRef, interactive, axisEncode, children);
    if (spec.zindex) group.zindex = spec.zindex; // parse axis specification

    return parseMark(group, scope);
  }

  function parseSpec (spec, scope, preprocessed) {
    var signals = array(spec.signals),
        scales = array(spec.scales); // parse signal definitions, if not already preprocessed

    if (!preprocessed) signals.forEach(function (_) {
      return parseSignal(_, scope);
    }); // parse cartographic projection definitions

    array(spec.projections).forEach(function (_) {
      return parseProjection(_, scope);
    }); // initialize scale references

    scales.forEach(function (_) {
      return initScale(_, scope);
    }); // parse data sources

    array(spec.data).forEach(function (_) {
      return parseData$1(_, scope);
    }); // parse scale definitions

    scales.forEach(function (_) {
      return parseScale(_, scope);
    }); // parse signal updates

    (preprocessed || signals).forEach(function (_) {
      return parseSignalUpdates(_, scope);
    }); // parse axis definitions

    array(spec.axes).forEach(function (_) {
      return parseAxis(_, scope);
    }); // parse mark definitions

    array(spec.marks).forEach(function (_) {
      return parseMark(_, scope);
    }); // parse legend definitions

    array(spec.legends).forEach(function (_) {
      return parseLegend(_, scope);
    }); // parse title, if defined

    if (spec.title) parseTitle(spec.title, scope); // parse collected lambda (anonymous) expressions

    scope.parseLambdas();
    return scope;
  }

  function parseView(spec, scope) {
    var config = scope.config,
        op,
        input,
        encode,
        parent,
        root,
        signals; // add scenegraph root

    root = ref(scope.root = scope.add(operator())); // parse top-level signal definitions

    signals = collectSignals(spec, config);
    signals.forEach(function (_) {
      return parseSignal(_, scope);
    }); // assign description, event and legend configuration

    scope.description = spec.description || config.description;
    scope.eventConfig = config.events;
    scope.legends = scope.objectProperty(config.legend && config.legend.layout); // store root group item

    input = scope.add(Collect$1()); // encode root group item

    encode = extendEncode({
      enter: {
        x: {
          value: 0
        },
        y: {
          value: 0
        }
      },
      update: {
        width: {
          signal: 'width'
        },
        height: {
          signal: 'height'
        }
      }
    }, spec.encode);
    encode = scope.add(Encode$1(encoders(encode, GroupMark, FrameRole$1, spec.style, scope, {
      pulse: ref(input)
    }))); // perform view layout

    parent = scope.add(ViewLayout$1({
      layout: scope.objectProperty(spec.layout),
      legends: scope.legends,
      autosize: scope.signalRef('autosize'),
      mark: root,
      pulse: ref(encode)
    }));
    scope.operators.pop(); // parse remainder of specification

    scope.pushState(ref(encode), ref(parent), null);
    parseSpec(spec, scope, signals);
    scope.operators.push(parent); // bound / render / sieve root item

    op = scope.add(Bound$1({
      mark: root,
      pulse: ref(parent)
    }));
    op = scope.add(Render$1({
      pulse: ref(op)
    }));
    op = scope.add(Sieve$1({
      pulse: ref(op)
    })); // track metadata for root item

    scope.addData('root', new DataScope(scope, input, input, op));
    return scope;
  }

  function signalObject(name, value) {
    return value && value.signal ? {
      name: name,
      update: value.signal
    } : {
      name: name,
      value: value
    };
  }
  /**
   * Collect top-level signals, merging values as needed. Signals
   * defined in the config signals arrays are added only if that
   * signal is not explicitly defined in the specification.
   * Built-in signals (autosize, background, padding, width, height)
   * receive special treatment. They are initialized using the
   * top-level spec property, or, if undefined in the spec, using
   * the corresponding top-level config property. If this property
   * is a signal reference object, the signal expression maps to the
   * signal 'update' property. If the spec's top-level signal array
   * contains an entry that matches a built-in signal, that entry
   * will be merged with the built-in specification, potentially
   * overwriting existing 'value' or 'update' properties.
   */


  function collectSignals(spec, config) {
    var _ = function _(name) {
      return value$1(spec[name], config[name]);
    },
        signals = [signalObject('background', _('background')), signalObject('autosize', parseAutosize(_('autosize'))), signalObject('padding', parsePadding(_('padding'))), signalObject('width', _('width') || 0), signalObject('height', _('height') || 0)],
        pre = signals.reduce(function (p, s) {
      return p[s.name] = s, p;
    }, {}),
        map = {}; // add spec signal array


    array(spec.signals).forEach(function (s) {
      if (hasOwnProperty$1(pre, s.name)) {
        // merge if built-in signal
        s = extend(pre[s.name], s);
      } else {
        // otherwise add to signal list
        signals.push(s);
      }

      map[s.name] = s;
    }); // add config signal array

    array(config.signals).forEach(function (s) {
      if (!hasOwnProperty$1(map, s.name) && !hasOwnProperty$1(pre, s.name)) {
        // add to signal list if not already defined
        signals.push(s);
      }
    });
    return signals;
  }

  function Scope$1(config) {
    this.config = config;
    this.bindings = [];
    this.field = {};
    this.signals = {};
    this.lambdas = {};
    this.scales = {};
    this.events = {};
    this.data = {};
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this.eventConfig = null;
    this._id = 0;
    this._subid = 0;
    this._nextsub = [0];
    this._parent = [];
    this._encode = [];
    this._lookup = [];
    this._markpath = [];
  }

  function Subscope(scope) {
    this.config = scope.config;
    this.legends = scope.legends;
    this.field = Object.create(scope.field);
    this.signals = Object.create(scope.signals);
    this.lambdas = Object.create(scope.lambdas);
    this.scales = Object.create(scope.scales);
    this.events = Object.create(scope.events);
    this.data = Object.create(scope.data);
    this.streams = [];
    this.updates = [];
    this.operators = [];
    this._id = 0;
    this._subid = ++scope._nextsub[0];
    this._nextsub = scope._nextsub;
    this._parent = scope._parent.slice();
    this._encode = scope._encode.slice();
    this._lookup = scope._lookup.slice();
    this._markpath = scope._markpath;
  }

  var prototype$1u = Scope$1.prototype = Subscope.prototype; // ----

  prototype$1u.fork = function () {
    return new Subscope(this);
  };

  prototype$1u.isSubscope = function () {
    return this._subid > 0;
  };

  prototype$1u.toRuntime = function () {
    this.finish();
    return {
      description: this.description,
      operators: this.operators,
      streams: this.streams,
      updates: this.updates,
      bindings: this.bindings,
      eventConfig: this.eventConfig
    };
  };

  prototype$1u.id = function () {
    return (this._subid ? this._subid + ':' : 0) + this._id++;
  };

  prototype$1u.add = function (op) {
    this.operators.push(op);
    op.id = this.id(); // if pre-registration references exist, resolve them now

    if (op.refs) {
      op.refs.forEach(function (ref) {
        ref.$ref = op.id;
      });
      op.refs = null;
    }

    return op;
  };

  prototype$1u.proxy = function (op) {
    var vref = op instanceof Entry ? ref(op) : op;
    return this.add(Proxy$2({
      value: vref
    }));
  };

  prototype$1u.addStream = function (stream) {
    this.streams.push(stream);
    stream.id = this.id();
    return stream;
  };

  prototype$1u.addUpdate = function (update) {
    this.updates.push(update);
    return update;
  }; // Apply metadata


  prototype$1u.finish = function () {
    var name, ds; // annotate root

    if (this.root) this.root.root = true; // annotate signals

    for (name in this.signals) {
      this.signals[name].signal = name;
    } // annotate scales


    for (name in this.scales) {
      this.scales[name].scale = name;
    } // annotate data sets


    function annotate(op, name, type) {
      var data, list;

      if (op) {
        data = op.data || (op.data = {});
        list = data[name] || (data[name] = []);
        list.push(type);
      }
    }

    for (name in this.data) {
      ds = this.data[name];
      annotate(ds.input, name, 'input');
      annotate(ds.output, name, 'output');
      annotate(ds.values, name, 'values');

      for (var field in ds.index) {
        annotate(ds.index[field], name, 'index:' + field);
      }
    }

    return this;
  }; // ----


  prototype$1u.pushState = function (encode, parent, lookup) {
    this._encode.push(ref(this.add(Sieve$1({
      pulse: encode
    }))));

    this._parent.push(parent);

    this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);

    this._markpath.push(-1);
  };

  prototype$1u.popState = function () {
    this._encode.pop();

    this._parent.pop();

    this._lookup.pop();

    this._markpath.pop();
  };

  prototype$1u.parent = function () {
    return peek(this._parent);
  };

  prototype$1u.encode = function () {
    return peek(this._encode);
  };

  prototype$1u.lookup = function () {
    return peek(this._lookup);
  };

  prototype$1u.markpath = function () {
    var p = this._markpath;
    return ++p[p.length - 1];
  }; // ----


  prototype$1u.fieldRef = function (field, name) {
    if (isString(field)) return fieldRef(field, name);

    if (!field.signal) {
      error('Unsupported field reference: ' + $(field));
    }

    var s = field.signal,
        f = this.field[s],
        params;

    if (!f) {
      params = {
        name: this.signalRef(s)
      };
      if (name) params.as = name;
      this.field[s] = f = ref(this.add(Field$1(params)));
    }

    return f;
  };

  prototype$1u.compareRef = function (cmp) {
    function check(_) {
      if (isSignal(_)) {
        signal = true;
        return scope.signalRef(_.signal);
      } else if (isExpr(_)) {
        signal = true;
        return scope.exprRef(_.expr);
      } else {
        return _;
      }
    }

    var scope = this,
        signal = false,
        fields = array(cmp.field).map(check),
        orders = array(cmp.order).map(check);
    return signal ? ref(this.add(Compare$1({
      fields: fields,
      orders: orders
    }))) : compareRef(fields, orders);
  };

  prototype$1u.keyRef = function (fields, flat) {
    function check(_) {
      if (isSignal(_)) {
        signal = true;
        return ref(sig[_.signal]);
      } else {
        return _;
      }
    }

    var sig = this.signals,
        signal = false;
    fields = array(fields).map(check);
    return signal ? ref(this.add(Key$1({
      fields: fields,
      flat: flat
    }))) : keyRef(fields, flat);
  };

  prototype$1u.sortRef = function (sort) {
    if (!sort) return sort; // including id ensures stable sorting

    var a = aggrField(sort.op, sort.field),
        o = sort.order || Ascending;
    return o.signal ? ref(this.add(Compare$1({
      fields: a,
      orders: this.signalRef(o.signal)
    }))) : compareRef(a, o);
  }; // ----


  prototype$1u.event = function (source, type) {
    var key = source + ':' + type;

    if (!this.events[key]) {
      var id = this.id();
      this.streams.push({
        id: id,
        source: source,
        type: type
      });
      this.events[key] = id;
    }

    return this.events[key];
  }; // ----


  prototype$1u.hasOwnSignal = function (name) {
    return hasOwnProperty$1(this.signals, name);
  };

  prototype$1u.addSignal = function (name, value) {
    if (this.hasOwnSignal(name)) {
      error('Duplicate signal name: ' + $(name));
    }

    var op = value instanceof Entry ? value : this.add(operator(value));
    return this.signals[name] = op;
  };

  prototype$1u.getSignal = function (name) {
    if (!this.signals[name]) {
      error('Unrecognized signal name: ' + $(name));
    }

    return this.signals[name];
  };

  prototype$1u.signalRef = function (s) {
    if (this.signals[s]) {
      return ref(this.signals[s]);
    } else if (!hasOwnProperty$1(this.lambdas, s)) {
      this.lambdas[s] = this.add(operator(null));
    }

    return ref(this.lambdas[s]);
  };

  prototype$1u.parseLambdas = function () {
    var code = Object.keys(this.lambdas);

    for (var i = 0, n = code.length; i < n; ++i) {
      var s = code[i],
          e = parseExpression$1(s, this),
          op = this.lambdas[s];
      op.params = e.$params;
      op.update = e.$expr;
    }
  };

  prototype$1u.property = function (spec) {
    return spec && spec.signal ? this.signalRef(spec.signal) : spec;
  };

  prototype$1u.objectProperty = function (spec) {
    return !spec || !isObject(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));
  };

  function propertyLambda(spec) {
    return (isArray(spec) ? arrayLambda : objectLambda)(spec);
  }

  function arrayLambda(array) {
    var code = '[',
        i = 0,
        n = array.length,
        value;

    for (; i < n; ++i) {
      value = array[i];
      code += (i > 0 ? ',' : '') + (isObject(value) ? value.signal || propertyLambda(value) : $(value));
    }

    return code + ']';
  }

  function objectLambda(obj) {
    var code = '{',
        i = 0,
        key,
        value;

    for (key in obj) {
      value = obj[key];
      code += (++i > 1 ? ',' : '') + $(key) + ':' + (isObject(value) ? value.signal || propertyLambda(value) : $(value));
    }

    return code + '}';
  }

  prototype$1u.exprRef = function (code, name) {
    var params = {
      expr: parseExpression$1(code, this)
    };
    if (name) params.expr.$name = name;
    return ref(this.add(Expression$1(params)));
  };

  prototype$1u.addBinding = function (name, bind) {
    if (!this.bindings) {
      error('Nested signals do not support binding: ' + $(name));
    }

    this.bindings.push(extend({
      signal: name
    }, bind));
  }; // ----


  prototype$1u.addScaleProj = function (name, transform) {
    if (hasOwnProperty$1(this.scales, name)) {
      error('Duplicate scale or projection name: ' + $(name));
    }

    this.scales[name] = this.add(transform);
  };

  prototype$1u.addScale = function (name, params) {
    this.addScaleProj(name, Scale$1(params));
  };

  prototype$1u.addProjection = function (name, params) {
    this.addScaleProj(name, Projection$1(params));
  };

  prototype$1u.getScale = function (name) {
    if (!this.scales[name]) {
      error('Unrecognized scale name: ' + $(name));
    }

    return this.scales[name];
  };

  prototype$1u.projectionRef = prototype$1u.scaleRef = function (name) {
    return ref(this.getScale(name));
  };

  prototype$1u.projectionType = prototype$1u.scaleType = function (name) {
    return this.getScale(name).params.type;
  }; // ----


  prototype$1u.addData = function (name, dataScope) {
    if (hasOwnProperty$1(this.data, name)) {
      error('Duplicate data set name: ' + $(name));
    }

    return this.data[name] = dataScope;
  };

  prototype$1u.getData = function (name) {
    if (!this.data[name]) {
      error('Undefined data set name: ' + $(name));
    }

    return this.data[name];
  };

  prototype$1u.addDataPipeline = function (name, entries) {
    if (hasOwnProperty$1(this.data, name)) {
      error('Duplicate data set name: ' + $(name));
    }

    return this.addData(name, DataScope.fromEntries(this, entries));
  };

  var defaultFont = 'sans-serif',
      defaultSymbolSize = 30,
      defaultStrokeWidth = 2,
      defaultColor = '#4c78a8',
      black = '#000',
      gray = '#888',
      lightGray = '#ddd';
  /**
   * Standard configuration defaults for Vega specification parsing.
   * Users can provide their own (sub-)set of these default values
   * by passing in a config object to the top-level parse method.
   */

  function defaults () {
    return {
      // default visualization description
      description: 'Vega visualization',
      // default padding around visualization
      padding: 0,
      // default for automatic sizing; options: 'none', 'pad', 'fit'
      // or provide an object (e.g., {'type': 'pad', 'resize': true})
      autosize: 'pad',
      // default view background color
      // covers the entire view component
      background: null,
      // default event handling configuration
      // preventDefault for view-sourced event types except 'wheel'
      events: {
        defaults: {
          allow: ['wheel']
        }
      },
      // defaults for top-level group marks
      // accepts mark properties (fill, stroke, etc)
      // covers the data rectangle within group width/height
      group: null,
      // defaults for basic mark types
      // each subset accepts mark properties (fill, stroke, etc)
      mark: null,
      arc: {
        fill: defaultColor
      },
      area: {
        fill: defaultColor
      },
      image: null,
      line: {
        stroke: defaultColor,
        strokeWidth: defaultStrokeWidth
      },
      path: {
        stroke: defaultColor
      },
      rect: {
        fill: defaultColor
      },
      rule: {
        stroke: black
      },
      shape: {
        stroke: defaultColor
      },
      symbol: {
        fill: defaultColor,
        size: 64
      },
      text: {
        fill: black,
        font: defaultFont,
        fontSize: 11
      },
      trail: {
        fill: defaultColor,
        size: defaultStrokeWidth
      },
      // style definitions
      style: {
        // axis & legend labels
        'guide-label': {
          fill: black,
          font: defaultFont,
          fontSize: 10
        },
        // axis & legend titles
        'guide-title': {
          fill: black,
          font: defaultFont,
          fontSize: 11,
          fontWeight: 'bold'
        },
        // headers, including chart title
        'group-title': {
          fill: black,
          font: defaultFont,
          fontSize: 13,
          fontWeight: 'bold'
        },
        // chart subtitle
        'group-subtitle': {
          fill: black,
          font: defaultFont,
          fontSize: 12
        },
        // defaults for styled point marks in Vega-Lite
        point: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth,
          shape: 'circle'
        },
        circle: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth
        },
        square: {
          size: defaultSymbolSize,
          strokeWidth: defaultStrokeWidth,
          shape: 'square'
        },
        // defaults for styled group marks in Vega-Lite
        cell: {
          fill: 'transparent',
          stroke: lightGray
        }
      },
      // defaults for title
      title: {
        orient: 'top',
        anchor: 'middle',
        offset: 4,
        subtitlePadding: 3
      },
      // defaults for axes
      axis: {
        minExtent: 0,
        maxExtent: 200,
        bandPosition: 0.5,
        domain: true,
        domainWidth: 1,
        domainColor: gray,
        grid: false,
        gridWidth: 1,
        gridColor: lightGray,
        labels: true,
        labelAngle: 0,
        labelLimit: 180,
        labelOffset: 0,
        labelPadding: 2,
        ticks: true,
        tickColor: gray,
        tickOffset: 0,
        tickRound: true,
        tickSize: 5,
        tickWidth: 1,
        titlePadding: 4
      },
      // correction for centering bias
      axisBand: {
        tickOffset: -0.5
      },
      // defaults for cartographic projection
      projection: {
        type: 'mercator'
      },
      // defaults for legends
      legend: {
        orient: 'right',
        padding: 0,
        gridAlign: 'each',
        columnPadding: 10,
        rowPadding: 2,
        symbolDirection: 'vertical',
        gradientDirection: 'vertical',
        gradientLength: 200,
        gradientThickness: 16,
        gradientStrokeColor: lightGray,
        gradientStrokeWidth: 0,
        gradientLabelOffset: 2,
        labelAlign: 'left',
        labelBaseline: 'middle',
        labelLimit: 160,
        labelOffset: 4,
        labelOverlap: true,
        symbolLimit: 30,
        symbolType: 'circle',
        symbolSize: 100,
        symbolOffset: 0,
        symbolStrokeWidth: 1.5,
        symbolBaseFillColor: 'transparent',
        symbolBaseStrokeColor: gray,
        titleLimit: 180,
        titleOrient: 'top',
        titlePadding: 5,
        layout: {
          offset: 18,
          direction: 'horizontal',
          left: {
            direction: 'vertical'
          },
          right: {
            direction: 'vertical'
          }
        }
      },
      // defaults for scale ranges
      range: {
        category: {
          scheme: 'tableau10'
        },
        ordinal: {
          scheme: 'blues'
        },
        heatmap: {
          scheme: 'yellowgreenblue'
        },
        ramp: {
          scheme: 'blues'
        },
        diverging: {
          scheme: 'blueorange',
          extent: [1, 0]
        },
        symbol: ['circle', 'square', 'triangle-up', 'cross', 'diamond', 'triangle-right', 'triangle-down', 'triangle-left']
      }
    };
  }

  function parse$8 (spec, config) {
    if (!isObject(spec)) {
      error('Input Vega specification must be an object.');
    }

    config = mergeConfig(defaults(), config, spec.config);
    return parseView(spec, new Scope$1(config)).toRuntime();
  }

  // -- Transforms -----
  extend(transforms, tx, vtx, encode$1, geo, force, tree$1, reg, voronoi, wordcloud, xf); // -- Exports -----

  var vegaImport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    version: version,
    Dataflow: Dataflow,
    EventStream: EventStream,
    Parameters: Parameters,
    Pulse: Pulse,
    MultiPulse: MultiPulse,
    Operator: Operator,
    Transform: Transform$1,
    changeset: changeset,
    ingest: ingest,
    isTuple: isTuple,
    definition: definition,
    transform: transform$1,
    transforms: transforms,
    tupleid: tupleid,
    scale: scale$2,
    scheme: scheme,
    interpolate: interpolate$1,
    interpolateColors: interpolateColors,
    interpolateRange: interpolateRange,
    quantizeInterpolator: quantizeInterpolator,
    projection: projection$1,
    View: View,
    expressionFunction: expressionFunction,
    formatLocale: defaultLocale$1,
    timeFormatLocale: defaultLocale,
    parse: parse$8,
    runtime: parse$7,
    runtimeContext: context$2,
    bandwidthNRD: bandwidthNRD,
    bin: bin,
    bootstrapCI: bootstrapCI,
    dotbin: dotbin,
    quantiles: quantiles,
    quartiles: quartiles,
    get random () { return random; },
    setRandom: setRandom,
    randomLCG: lcg,
    randomInteger: integer,
    randomKDE: randomKDE,
    randomLogNormal: randomLogNormal,
    sampleLogNormal: sampleLogNormal,
    densityLogNormal: densityLogNormal,
    cumulativeLogNormal: cumulativeLogNormal,
    quantileLogNormal: quantileLogNormal,
    randomMixture: randomMixture,
    randomNormal: randomNormal,
    sampleNormal: sampleNormal,
    densityNormal: densityNormal,
    cumulativeNormal: cumulativeNormal,
    quantileNormal: quantileNormal,
    randomUniform: randomUniform,
    sampleUniform: sampleUniform,
    densityUniform: densityUniform,
    cumulativeUniform: cumulativeUniform,
    quantileUniform: quantileUniform,
    regressionLinear: regressionLinear,
    regressionLog: regressionLog,
    regressionExp: regressionExp,
    regressionPow: regressionPow,
    regressionQuad: regressionQuad,
    regressionPoly: regressionPoly,
    regressionLoess: regressionLoess,
    sampleCurve: sampleCurve,
    timeUnits: timeUnits,
    timeFloor: timeFloor,
    utcFloor: utcFloor,
    timeUnitSpecifier: timeUnitSpecifier,
    timeFormat: timeFormat$1,
    utcFormat: utcFormat$1,
    timeInterval: timeInterval,
    timeOffset: timeOffset,
    timeSequence: timeSequence,
    utcInterval: utcInterval,
    utcOffset: utcOffset,
    utcSequence: utcSequence,
    timeBin: timeBin,
    accessor: accessor,
    accessorName: accessorName,
    accessorFields: accessorFields,
    id: id,
    identity: identity,
    zero: zero,
    one: one,
    truthy: truthy,
    falsy: falsy,
    logger: logger,
    None: None,
    Error: Error$1,
    Warn: Warn,
    Info: Info,
    Debug: Debug,
    mergeConfig: mergeConfig,
    writeConfig: writeConfig,
    panLinear: panLinear,
    panLog: panLog,
    panPow: panPow,
    panSymlog: panSymlog,
    zoomLinear: zoomLinear,
    zoomLog: zoomLog,
    zoomPow: zoomPow,
    zoomSymlog: zoomSymlog,
    quarter: quarter,
    utcquarter: utcquarter,
    array: array,
    clampRange: clampRange,
    compare: compare$2,
    constant: constant,
    debounce: debounce,
    error: error,
    extend: extend,
    extent: extent,
    extentIndex: extentIndex,
    fastmap: fastmap,
    field: field,
    flush: flush,
    hasOwnProperty: hasOwnProperty$1,
    inherits: inherits,
    inrange: inrange,
    isArray: isArray,
    isBoolean: isBoolean,
    isDate: isDate,
    isFunction: isFunction,
    isNumber: isNumber,
    isObject: isObject,
    isRegExp: isRegExp,
    isString: isString,
    key: key,
    lerp: lerp,
    lruCache: lruCache,
    merge: merge,
    pad: pad,
    peek: peek,
    repeat: repeat,
    span: span,
    splitAccessPath: splitAccessPath,
    stringValue: $,
    toBoolean: toBoolean,
    toDate: toDate,
    toNumber: toNumber,
    toString: toString,
    toSet: toSet,
    truncate: truncate,
    visitArray: visitArray,
    loader: loader,
    read: read$1,
    inferType: inferType,
    inferTypes: inferTypes,
    typeParsers: typeParsers,
    format: format$2,
    formats: formats,
    responseType: responseType,
    Bounds: Bounds,
    Gradient: Gradient,
    GroupItem: GroupItem,
    ResourceLoader: ResourceLoader,
    Item: Item$1,
    Scenegraph: Scenegraph,
    Handler: Handler,
    Renderer: Renderer,
    CanvasHandler: CanvasHandler,
    CanvasRenderer: CanvasRenderer,
    SVGHandler: SVGHandler,
    SVGRenderer: SVGRenderer,
    SVGStringRenderer: SVGStringRenderer,
    RenderType: RenderType,
    renderModule: renderModule,
    intersect: intersect$1,
    Marks: Marks,
    boundClip: boundClip,
    boundContext: context,
    boundStroke: boundStroke,
    boundItem: boundItem,
    boundMark: boundMark,
    pathCurves: curves,
    pathSymbols: symbols,
    pathRectangle: vg_rect,
    pathTrail: vg_trail,
    pathParse: pathParse,
    pathRender: pathRender,
    point: point,
    domCreate: domCreate,
    domFind: domFind,
    domChild: domChild,
    domClear: domClear,
    openTag: openTag,
    closeTag: closeTag,
    font: font,
    fontFamily: fontFamily,
    fontSize: fontSize,
    lineHeight: lineHeight,
    multiLineOffset: multiLineOffset,
    textMetrics: textMetrics,
    resetSVGClipId: resetSVGClipId,
    sceneEqual: sceneEqual,
    pathEqual: pathEqual,
    sceneToJSON: sceneToJSON,
    sceneFromJSON: sceneFromJSON,
    intersectPath: intersectPath,
    intersectPoint: intersectPoint,
    intersectRule: intersectRule,
    intersectBoxLine: intersectBoxLine,
    sceneZOrder: zorder,
    sceneVisit: visit,
    scenePickVisit: pickVisit
  });

  var name = "vega-lite";
  var author = "Dominik Moritz, Kanit \"Ham\" Wongsuphasawat, Arvind Satyanarayan, Jeffrey Heer";
  var version$1 = "4.10.4";
  var collaborators = [
  	"Kanit Wongsuphasawat (http://kanitw.yellowpigz.com)",
  	"Dominik Moritz (https://www.domoritz.de)",
  	"Arvind Satyanarayan (https://arvindsatya.com)",
  	"Jeffrey Heer (https://jheer.org)"
  ];
  var homepage = "https://vega.github.io/vega-lite/";
  var description = "Vega-Lite is a concise high-level language for interactive visualization.";
  var main = "build/vega-lite.js";
  var unpkg = "build/vega-lite.min.js";
  var jsdelivr = "build/vega-lite.min.js";
  var module = "build/src/index";
  var types = "build/src/index.d.ts";
  var bin$1 = {
  	vl2png: "./bin/vl2png",
  	vl2svg: "./bin/vl2svg",
  	vl2pdf: "./bin/vl2pdf",
  	vl2vg: "./bin/vl2vg"
  };
  var directories = {
  	test: "test"
  };
  var scripts = {
  	changelog: "conventional-changelog -p angular",
  	build: "yarn build:only",
  	"build:only": "yarn tsc:src && rollup -c",
  	postbuild: "terser build/vega-lite.js -cm --source-map content=build/vega-lite.js.map,filename=build/vega-lite.min.js.map -o build/vega-lite.min.js && yarn schema && babel build/vega-lite.js --out-dir build-es5 --config-file ./babel.config.js",
  	"prebuild:examples": "yarn build:only",
  	"build:examples": "yarn data && TZ=America/Los_Angeles scripts/build-examples.sh",
  	"prebuild:examples-full": "yarn build:only",
  	"build:examples-full": "TZ=America/Los_Angeles scripts/build-examples.sh 1",
  	"build:example": "TZ=America/Los_Angeles scripts/build-example.sh",
  	"build:toc": "yarn build:jekyll && scripts/generate-toc",
  	"build:site": "yarn tsc:site && rollup -c site/rollup.config.js",
  	"build:jekyll": "pushd site && bundle exec jekyll build -q && popd",
  	"build:versions": "scripts/update-version.sh",
  	clean: "find build ! -name 'vega-lite-schema.json' -type f -delete && rm -rf site/data/* && rm -f examples/compiled/*.png && find site/examples ! -name 'index.md' ! -name 'data' -type f -delete",
  	"predeploy:site": "yarn presite",
  	"deploy:site": "gh-pages -d site",
  	data: "rsync -r node_modules/vega-datasets/data/* site/data",
  	schema: "mkdir -p build && ts-json-schema-generator -f tsconfig.json -p src/index.ts -t TopLevelSpec --no-type-check --no-ref-encode > build/vega-lite-schema.json && yarn renameschema && cp build/vega-lite-schema.json site/_data/",
  	renameschema: "scripts/rename-schema.sh",
  	presite: "yarn data && yarn schema && yarn build:site && yarn build:versions && scripts/create-example-pages.sh",
  	site: "pushd site && bundle exec jekyll serve -I -l && popd",
  	"tsc:src": "tsc -b src/tsconfig.src.json",
  	"tsc:site": "tsc -b site/tsconfig.site.json",
  	prettierbase: "prettier '**/*.{md,css,yml}'",
  	eslintbase: "eslint --ext .ts .",
  	format: "yarn eslintbase --fix && yarn prettierbase --write",
  	lint: "yarn eslintbase && yarn prettierbase --check",
  	test: "jest test/ && yarn lint && yarn schema && jest examples/ && yarn test:runtime",
  	"test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand test",
  	"test:runtime": "TZ=America/Los_Angeles jest test-runtime/",
  	"test:runtime:generate": "yarn build:only && rm -Rf test-runtime/resources && VL_GENERATE_TESTS=true yarn test:runtime",
  	"watch:build": "yarn build:only && concurrently --kill-others -n Typescript,Rollup 'yarn tsc:src -w' 'rollup -c -w'",
  	"watch:site": "concurrently --kill-others -n Typescript,Rollup 'yarn tsc:site -w' 'rollup -c site/rollup.config.js -w'",
  	"watch:test": "jest --watch"
  };
  var repository = {
  	type: "git",
  	url: "https://github.com/vega/vega-lite.git"
  };
  var license = "BSD-3-Clause";
  var bugs = {
  	url: "https://github.com/vega/vega-lite/issues"
  };
  var devDependencies = {
  	"@babel/cli": "^7.8.4",
  	"@babel/core": "^7.9.0",
  	"@babel/preset-env": "^7.9.5",
  	"@commitlint/cli": "^8.3.5",
  	"@commitlint/config-conventional": "^8.3.4",
  	"@rollup/plugin-commonjs": "11.1.0",
  	"@rollup/plugin-json": "^4.0.2",
  	"@rollup/plugin-node-resolve": "^7.1.3",
  	"@types/chai": "^4.2.11",
  	"@types/d3": "^5.7.2",
  	"@types/jest": "^25.2.1",
  	"@types/jest-environment-puppeteer": "^4.3.1",
  	"@types/mkdirp": "^1.0.0",
  	"@types/puppeteer": "^2.0.1",
  	"@typescript-eslint/eslint-plugin": "^2.27.0",
  	"@typescript-eslint/parser": "^2.27.0",
  	ajv: "^6.12.0",
  	chai: "^4.2.0",
  	cheerio: "^1.0.0-rc.3",
  	codecov: "^3.6.5",
  	concurrently: "^5.1.0",
  	"conventional-changelog-cli": "^2.0.31",
  	d3: "^5.15.1",
  	eslint: "^6.8.0",
  	"eslint-config-prettier": "^6.10.1",
  	"eslint-plugin-prettier": "^3.1.3",
  	"gh-pages": "^2.2.0",
  	"highlight.js": "^9.18.1",
  	"http-server": "^0.12.1",
  	husky: "^4.2.5",
  	jest: "^25.3.0",
  	"jest-puppeteer": "^4.4.0",
  	"lint-staged": "^10.1.3",
  	mkdirp: "^1.0.4",
  	prettier: "^2.0.4",
  	puppeteer: "^2.1.1",
  	rollup: "^2.6.1",
  	"rollup-plugin-sourcemaps": "^0.5.0",
  	"rollup-plugin-terser": "^5.3.0",
  	"svg2png-many": "^0.0.7",
  	terser: "^4.6.11",
  	"ts-jest": "^25.3.1",
  	"ts-json-schema-generator": "^0.65.0",
  	typescript: "~3.8.3",
  	"vega-cli": "^5.10.1",
  	"vega-datasets": "^1.30.2",
  	"vega-embed": "^6.5.2",
  	"vega-tooltip": "^0.22.1",
  	"vega-typings": "0.15.3",
  	"yaml-front-matter": "^4.1.0"
  };
  var dependencies = {
  	"@types/clone": "~0.1.30",
  	"@types/fast-json-stable-stringify": "^2.0.0",
  	"array-flat-polyfill": "^1.0.1",
  	clone: "~2.1.2",
  	"fast-deep-equal": "~3.1.1",
  	"fast-json-stable-stringify": "~2.1.0",
  	"json-stringify-pretty-compact": "~2.0.0",
  	tslib: "~1.11.1",
  	"vega-event-selector": "~2.0.2",
  	"vega-expression": "~2.6.3",
  	"vega-util": "~1.13.1",
  	yargs: "~15.3.1"
  };
  var peerDependencies = {
  	vega: "^5.9.2"
  };
  var husky = {
  	hooks: {
  		"pre-commit": "lint-staged",
  		"commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
  	}
  };
  var jest = {
  	preset: "jest-puppeteer",
  	transform: {
  		"^.+\\.tsx?$": "ts-jest"
  	},
  	testRegex: "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
  	moduleFileExtensions: [
  		"ts",
  		"tsx",
  		"js",
  		"jsx",
  		"json",
  		"node"
  	],
  	testPathIgnorePatterns: [
  		"<rootDir>/node_modules",
  		"<rootDir>/build",
  		"<rootDir>/_site",
  		"<rootDir>/src"
  	],
  	coverageDirectory: "./coverage/",
  	collectCoverage: false
  };
  var pkg = {
  	name: name,
  	author: author,
  	version: version$1,
  	collaborators: collaborators,
  	homepage: homepage,
  	description: description,
  	main: main,
  	unpkg: unpkg,
  	jsdelivr: jsdelivr,
  	module: module,
  	types: types,
  	bin: bin$1,
  	directories: directories,
  	scripts: scripts,
  	repository: repository,
  	license: license,
  	bugs: bugs,
  	devDependencies: devDependencies,
  	dependencies: dependencies,
  	peerDependencies: peerDependencies,
  	husky: husky,
  	"lint-staged": {
  	"*.ts": [
  		"eslint --fix",
  		"git add"
  	],
  	"*.{md,css,yml}": [
  		"prettier --write",
  		"git add"
  	]
  },
  	jest: jest
  };

  Array.prototype.flat || Object.defineProperty(Array.prototype, "flat", {
    configurable: !0,
    value: function r() {
      var t = isNaN(arguments[0]) ? 1 : Number(arguments[0]);
      return t ? Array.prototype.reduce.call(this, function (a, e) {
        return Array.isArray(e) ? a.push.apply(a, r.call(e, t - 1)) : a.push(e), a;
      }, []) : Array.prototype.slice.call(this);
    },
    writable: !0
  }), Array.prototype.flatMap || Object.defineProperty(Array.prototype, "flatMap", {
    configurable: !0,
    value: function value(r) {
      return Array.prototype.map.apply(this, arguments).flat();
    },
    writable: !0
  });

  var clone_1 = createCommonjsModule(function (module) {
    var clone = function () {

      function _instanceof(obj, type) {
        return type != null && obj instanceof type;
      }

      var nativeMap;

      try {
        nativeMap = Map;
      } catch (_) {
        // maybe a reference error because no `Map`. Give it a dummy value that no
        // value will ever be an instanceof.
        nativeMap = function nativeMap() {};
      }

      var nativeSet;

      try {
        nativeSet = Set;
      } catch (_) {
        nativeSet = function nativeSet() {};
      }

      var nativePromise;

      try {
        nativePromise = Promise;
      } catch (_) {
        nativePromise = function nativePromise() {};
      }
      /**
       * Clones (copies) an Object using deep copying.
       *
       * This function supports circular references by default, but if you are certain
       * there are no circular references in your object, you can save some CPU time
       * by calling clone(obj, false).
       *
       * Caution: if `circular` is false and `parent` contains circular references,
       * your program may enter an infinite loop and crash.
       *
       * @param `parent` - the object to be cloned
       * @param `circular` - set to true if the object to be cloned may contain
       *    circular references. (optional - true by default)
       * @param `depth` - set to a number if the object is only to be cloned to
       *    a particular depth. (optional - defaults to Infinity)
       * @param `prototype` - sets the prototype to be used when cloning an object.
       *    (optional - defaults to parent prototype).
       * @param `includeNonEnumerable` - set to true if the non-enumerable properties
       *    should be cloned as well. Non-enumerable properties on the prototype
       *    chain will be ignored. (optional - false by default)
      */


      function clone(parent, circular, depth, prototype, includeNonEnumerable) {
        if (_typeof(circular) === 'object') {
          depth = circular.depth;
          prototype = circular.prototype;
          includeNonEnumerable = circular.includeNonEnumerable;
          circular = circular.circular;
        } // maintain two arrays for circular references, where corresponding parents
        // and children have the same index


        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != 'undefined';
        if (typeof circular == 'undefined') circular = true;
        if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

        function _clone(parent, depth) {
          // cloning null always returns null
          if (parent === null) return null;
          if (depth === 0) return parent;
          var child;
          var proto;

          if (_typeof(parent) != 'object') {
            return parent;
          }

          if (_instanceof(parent, nativeMap)) {
            child = new nativeMap();
          } else if (_instanceof(parent, nativeSet)) {
            child = new nativeSet();
          } else if (_instanceof(parent, nativePromise)) {
            child = new nativePromise(function (resolve, reject) {
              parent.then(function (value) {
                resolve(_clone(value, depth - 1));
              }, function (err) {
                reject(_clone(err, depth - 1));
              });
            });
          } else if (clone.__isArray(parent)) {
            child = [];
          } else if (clone.__isRegExp(parent)) {
            child = new RegExp(parent.source, __getRegExpFlags(parent));
            if (parent.lastIndex) child.lastIndex = parent.lastIndex;
          } else if (clone.__isDate(parent)) {
            child = new Date(parent.getTime());
          } else if (useBuffer && Buffer.isBuffer(parent)) {
            if (Buffer.allocUnsafe) {
              // Node.js >= 4.5.0
              child = Buffer.allocUnsafe(parent.length);
            } else {
              // Older Node.js versions
              child = new Buffer(parent.length);
            }

            parent.copy(child);
            return child;
          } else if (_instanceof(parent, Error)) {
            child = Object.create(parent);
          } else {
            if (typeof prototype == 'undefined') {
              proto = Object.getPrototypeOf(parent);
              child = Object.create(proto);
            } else {
              child = Object.create(prototype);
              proto = prototype;
            }
          }

          if (circular) {
            var index = allParents.indexOf(parent);

            if (index != -1) {
              return allChildren[index];
            }

            allParents.push(parent);
            allChildren.push(child);
          }

          if (_instanceof(parent, nativeMap)) {
            parent.forEach(function (value, key) {
              var keyChild = _clone(key, depth - 1);

              var valueChild = _clone(value, depth - 1);

              child.set(keyChild, valueChild);
            });
          }

          if (_instanceof(parent, nativeSet)) {
            parent.forEach(function (value) {
              var entryChild = _clone(value, depth - 1);

              child.add(entryChild);
            });
          }

          for (var i in parent) {
            var attrs;

            if (proto) {
              attrs = Object.getOwnPropertyDescriptor(proto, i);
            }

            if (attrs && attrs.set == null) {
              continue;
            }

            child[i] = _clone(parent[i], depth - 1);
          }

          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(parent);

            for (var i = 0; i < symbols.length; i++) {
              // Don't need to worry about cloning a symbol because it is a primitive,
              // like a number or string.
              var symbol = symbols[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                continue;
              }

              child[symbol] = _clone(parent[symbol], depth - 1);

              if (!descriptor.enumerable) {
                Object.defineProperty(child, symbol, {
                  enumerable: false
                });
              }
            }
          }

          if (includeNonEnumerable) {
            var allPropertyNames = Object.getOwnPropertyNames(parent);

            for (var i = 0; i < allPropertyNames.length; i++) {
              var propertyName = allPropertyNames[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

              if (descriptor && descriptor.enumerable) {
                continue;
              }

              child[propertyName] = _clone(parent[propertyName], depth - 1);
              Object.defineProperty(child, propertyName, {
                enumerable: false
              });
            }
          }

          return child;
        }

        return _clone(parent, depth);
      }
      /**
       * Simple flat clone using prototype, accepts only objects, usefull for property
       * override on FLAT configuration object (no nested props).
       *
       * USE WITH CAUTION! This may not behave as you wish if you do not know how this
       * works.
       */


      clone.clonePrototype = function clonePrototype(parent) {
        if (parent === null) return null;

        var c = function c() {};

        c.prototype = parent;
        return new c();
      }; // private utility functions


      function __objToStr(o) {
        return Object.prototype.toString.call(o);
      }

      clone.__objToStr = __objToStr;

      function __isDate(o) {
        return _typeof(o) === 'object' && __objToStr(o) === '[object Date]';
      }

      clone.__isDate = __isDate;

      function __isArray(o) {
        return _typeof(o) === 'object' && __objToStr(o) === '[object Array]';
      }

      clone.__isArray = __isArray;

      function __isRegExp(o) {
        return _typeof(o) === 'object' && __objToStr(o) === '[object RegExp]';
      }

      clone.__isRegExp = __isRegExp;

      function __getRegExpFlags(re) {
        var flags = '';
        if (re.global) flags += 'g';
        if (re.ignoreCase) flags += 'i';
        if (re.multiline) flags += 'm';
        return flags;
      }

      clone.__getRegExpFlags = __getRegExpFlags;
      return clone;
    }();

    if ( module.exports) {
      module.exports = clone;
    }
  });

  var fastDeepEqual = function equal(a, b) {
    if (a === b) return true;

    if (a && b && _typeof(a) == 'object' && _typeof(b) == 'object') {
      if (a.constructor !== b.constructor) return false;
      var length, i, keys;

      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length) return false;

        for (i = length; i-- !== 0;) {
          if (!equal(a[i], b[i])) return false;
        }

        return true;
      }

      if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) return false;

      for (i = length; i-- !== 0;) {
        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
      }

      for (i = length; i-- !== 0;) {
        var key = keys[i];
        if (!equal(a[key], b[key])) return false;
      }

      return true;
    } // true if both NaN, false otherwise


    return a !== a && b !== b;
  };

  var fastJsonStableStringify = function fastJsonStableStringify(data, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = {
      cmp: opts
    };
    var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;

    var cmp = opts.cmp && function (f) {
      return function (node) {
        return function (a, b) {
          var aobj = {
            key: a,
            value: node[a]
          };
          var bobj = {
            key: b,
            value: node[b]
          };
          return f(aobj, bobj);
        };
      };
    }(opts.cmp);

    var seen = [];
    return function stringify(node) {
      if (node && node.toJSON && typeof node.toJSON === 'function') {
        node = node.toJSON();
      }

      if (node === undefined) return;
      if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
      if (_typeof(node) !== 'object') return JSON.stringify(node);
      var i, out;

      if (Array.isArray(node)) {
        out = '[';

        for (i = 0; i < node.length; i++) {
          if (i) out += ',';
          out += stringify(node[i]) || 'null';
        }

        return out + ']';
      }

      if (node === null) return 'null';

      if (seen.indexOf(node) !== -1) {
        if (cycles) return JSON.stringify('__cycle__');
        throw new TypeError('Converting circular structure to JSON');
      }

      var seenIndex = seen.push(node) - 1;
      var keys = Object.keys(node).sort(cmp && cmp(node));
      out = '';

      for (i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = stringify(node[key]);
        if (!value) continue;
        if (out) out += ',';
        out += JSON.stringify(key) + ':' + value;
      }

      seen.splice(seenIndex, 1);
      return '{' + out + '}';
    }(data);
  };

  function isLogicalOr(op) {
    return !!op.or;
  }
  function isLogicalAnd(op) {
    return !!op.and;
  }
  function isLogicalNot(op) {
    return !!op.not;
  }
  function forEachLeaf(op, fn) {
    if (isLogicalNot(op)) {
      forEachLeaf(op.not, fn);
    } else if (isLogicalAnd(op)) {
      var _iterator = _createForOfIteratorHelper(op.and),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var subop = _step.value;
          forEachLeaf(subop, fn);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else if (isLogicalOr(op)) {
      var _iterator2 = _createForOfIteratorHelper(op.or),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _subop = _step2.value;
          forEachLeaf(_subop, fn);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else {
      fn(op);
    }
  }
  function normalizeLogicalComposition(op, normalizer) {
    if (isLogicalNot(op)) {
      return {
        not: normalizeLogicalComposition(op.not, normalizer)
      };
    } else if (isLogicalAnd(op)) {
      return {
        and: op.and.map(function (o) {
          return normalizeLogicalComposition(o, normalizer);
        })
      };
    } else if (isLogicalOr(op)) {
      return {
        or: op.or.map(function (o) {
          return normalizeLogicalComposition(o, normalizer);
        })
      };
    } else {
      return normalizer(op);
    }
  }

  var deepEqual = fastDeepEqual;
  var duplicate = clone_1;
  /**
   * Creates an object composed of the picked object properties.
   *
   * var object = {'a': 1, 'b': '2', 'c': 3};
   * pick(object, ['a', 'c']);
   * // → {'a': 1, 'c': 3}
   */

  function pick$2(obj, props) {
    var copy = {};

    var _iterator = _createForOfIteratorHelper(props),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prop = _step.value;

        if (hasOwnProperty$1(obj, prop)) {
          copy[prop] = obj[prop];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return copy;
  }
  /**
   * The opposite of _.pick; this method creates an object composed of the own
   * and inherited enumerable string keyed properties of object that are not omitted.
   */

  function omit(obj, props) {
    var copy = _extends({}, obj);

    var _iterator2 = _createForOfIteratorHelper(props),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var prop = _step2.value;
        delete copy[prop];
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return copy;
  }
  /**
   * Monkey patch Set so that `stringify` produces a string representation of sets.
   */

  Set.prototype['toJSON'] = function () {
    return "Set(".concat(_toConsumableArray(this).map(function (x) {
      return fastJsonStableStringify(x);
    }).join(','), ")");
  };
  /**
   * Converts any object to a string representation that can be consumed by humans.
   */


  var stringify$1 = fastJsonStableStringify;
  /**
   * Converts any object to a string of limited size, or a number.
   */

  function hash(a) {
    if (isNumber(a)) {
      return a;
    }

    var str = isString(a) ? a : fastJsonStableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage

    if (str.length < 250) {
      return str;
    } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/


    var h = 0;

    for (var i = 0; i < str.length; i++) {
      var char = str.charCodeAt(i);
      h = (h << 5) - h + char;
      h = h & h; // Convert to 32bit integer
    }

    return h;
  }
  function isNullOrFalse(x) {
    return x === false || x === null;
  }
  function contains$1(array, item) {
    return array.indexOf(item) > -1;
  }
  /**
   * Returns true if any item returns true.
   */

  function some(arr, f) {
    var i = 0;

    var _iterator3 = _createForOfIteratorHelper(arr.entries()),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = _slicedToArray(_step3.value, 2),
            k = _step3$value[0],
            a = _step3$value[1];

        if (f(a, k, i++)) {
          return true;
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return false;
  }
  /**
   * Returns true if all items return true.
   */

  function every(arr, f) {
    var i = 0;

    var _iterator4 = _createForOfIteratorHelper(arr.entries()),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _step4$value = _slicedToArray(_step4.value, 2),
            k = _step4$value[0],
            a = _step4$value[1];

        if (!f(a, k, i++)) {
          return false;
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    return true;
  }
  /**
   * recursively merges src into dest
   */

  function mergeDeep(dest) {
    for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      src[_key - 1] = arguments[_key];
    }

    for (var _i = 0, _src = src; _i < _src.length; _i++) {
      var s = _src[_i];
      deepMerge_(dest, s !== null && s !== void 0 ? s : {});
    }

    return dest;
  }

  function deepMerge_(dest, src) {
    for (var _i2 = 0, _Object$keys = Object.keys(src); _i2 < _Object$keys.length; _i2++) {
      var property = _Object$keys[_i2];
      writeConfig(dest, property, src[property], true);
    }
  }

  function unique(values, f) {
    var results = [];
    var u = {};
    var v;

    var _iterator5 = _createForOfIteratorHelper(values),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var val = _step5.value;
        v = f(val);

        if (v in u) {
          continue;
        }

        u[v] = 1;
        results.push(val);
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    return results;
  }
  function setEqual(a, b) {
    if (a.size !== b.size) {
      return false;
    }

    var _iterator7 = _createForOfIteratorHelper(a),
        _step7;

    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var e = _step7.value;

        if (!b.has(e)) {
          return false;
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }

    return true;
  }
  function hasIntersection(a, b) {
    var _iterator8 = _createForOfIteratorHelper(a),
        _step8;

    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var key = _step8.value;

        if (b.has(key)) {
          return true;
        }
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }

    return false;
  }
  function prefixGenerator(a) {
    var prefixes = new Set();

    var _iterator9 = _createForOfIteratorHelper(a),
        _step9;

    try {
      var _loop = function _loop() {
        var x = _step9.value;
        var splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`

        var wrappedWithAccessors = splitField.map(function (y, i) {
          return i === 0 ? y : "[".concat(y, "]");
        });
        var computedPrefixes = wrappedWithAccessors.map(function (_, i) {
          return wrappedWithAccessors.slice(0, i + 1).join('');
        });

        var _iterator10 = _createForOfIteratorHelper(computedPrefixes),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var y = _step10.value;
            prefixes.add(y);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      };

      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }

    return prefixes;
  }
  /**
   * Returns true if a and b have an intersection. Also return true if a or b are undefined
   * since this means we don't know what fields a node produces or depends on.
   */

  function fieldIntersection(a, b) {
    if (a === undefined || b === undefined) {
      return true;
    }

    return hasIntersection(prefixGenerator(a), prefixGenerator(b));
  } // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208

  var keys$2 = Object.keys;
  var vals = Object.values;
  function isBoolean$3(b) {
    return b === true || b === false;
  }
  /**
   * Convert a string into a valid variable name
   */

  function varName(s) {
    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _
    var alphanumericS = s.replace(/\W/g, '_'); // Add _ if the string has leading numbers.

    return (s.match(/^\d+/) ? '_' : '') + alphanumericS;
  }
  function logicalExpr(op, cb) {
    if (isLogicalNot(op)) {
      return '!(' + logicalExpr(op.not, cb) + ')';
    } else if (isLogicalAnd(op)) {
      return '(' + op.and.map(function (and) {
        return logicalExpr(and, cb);
      }).join(') && (') + ')';
    } else if (isLogicalOr(op)) {
      return '(' + op.or.map(function (or) {
        return logicalExpr(or, cb);
      }).join(') || (') + ')';
    } else {
      return cb(op);
    }
  }
  /**
   * Delete nested property of an object, and delete the ancestors of the property if they become empty.
   */

  function deleteNestedProperty(obj, orderedProps) {
    if (orderedProps.length === 0) {
      return true;
    }

    var prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion

    if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {
      delete obj[prop];
    }

    return keys$2(obj).length === 0;
  }
  function titlecase(s) {
    return s.charAt(0).toUpperCase() + s.substr(1);
  }

  function escapePathAccess(string) {
    return string.replace(/(\[|\]|\.|'|")/g, '\\$1');
  }
  /**
   * Converts a path to an access path with datum.
   * @param path The field name.
   * @param datum The string to use for `datum`.
   */


  function accessPathWithDatum(path) {
    var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';
    var pieces = splitAccessPath(path);
    var prefixes = [];

    for (var i = 1; i <= pieces.length; i++) {
      var prefix = "[".concat(pieces.slice(0, i).map($).join(']['), "]");
      prefixes.push("".concat(datum).concat(prefix));
    }

    return prefixes.join(' && ');
  }
  /**
   * Return access with datum to the flattened field.
   *
   * @param path The field name.
   * @param datum The string to use for `datum`.
   */

  function flatAccessWithDatum(path) {
    var datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';
    return "".concat(datum, "[").concat($(splitAccessPath(path).join('.')), "]");
  }
  /**
   * Replaces path accesses with access to non-nested field.
   * For example, `foo["bar"].baz` becomes `foo\\.bar\\.baz`.
   */

  function replacePathInField(path) {
    return "".concat(splitAccessPath(path).map(escapePathAccess).join('\\.'));
  }
  /**
   * Replace all ocurrences of a string with another string.
   *
   * @param string the string to replace in
   * @param find the string to replace
   * @param replacement the replacement
   */

  function replaceAll(string, find, replacement) {
    return string.replace(new RegExp(find.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'g'), replacement);
  }
  /**
   * Remove path accesses with access from field.
   * For example, `foo["bar"].baz` becomes `foo.bar.baz`.
   */

  function removePathFromField(path) {
    return "".concat(splitAccessPath(path).join('.'));
  }
  /**
   * Count the depth of the path. Returns 1 for fields that are not nested.
   */

  function accessPathDepth(path) {
    if (!path) {
      return 0;
    }

    return splitAccessPath(path).length;
  }
  /**
   * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.
   */

  function getFirstDefined() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    for (var _i3 = 0, _args = args; _i3 < _args.length; _i3++) {
      var arg = _args[_i3];

      if (arg !== undefined) {
        return arg;
      }
    }

    return undefined;
  } // variable used to generate id

  var idCounter = 42;
  /**
   * Returns a new random id every time it gets called.
   *
   * Has side effect!
   */

  function uniqueId(prefix) {
    var id = ++idCounter;
    return prefix ? String(prefix) + id : id;
  }
  function internalField(name) {
    return isInternalField(name) ? name : "__".concat(name);
  }
  function isInternalField(name) {
    return name.indexOf('__') === 0;
  }
  /**
   * Normalize angle to be within [0,360).
   */

  function normalizeAngle(angle) {
    if (angle === undefined) {
      return undefined;
    }

    return (angle % 360 + 360) % 360;
  }
  /**
   * Returns whether the passed in value is a valid number.
   */

  function isNumeric(value) {
    if (isNumber(value)) {
      return true;
    }

    return !isNaN(value) && !isNaN(parseFloat(value));
  }

  var CONDITIONAL_AXIS_PROP_INDEX = {
    domainColor: {
      part: 'domain',
      vgProp: 'stroke'
    },
    labelAlign: {
      part: 'labels',
      vgProp: 'align'
    },
    labelBaseline: {
      part: 'labels',
      vgProp: 'baseline'
    },
    labelColor: {
      part: 'labels',
      vgProp: 'fill'
    },
    labelFont: {
      part: 'labels',
      vgProp: 'font'
    },
    labelFontSize: {
      part: 'labels',
      vgProp: 'fontSize'
    },
    labelFontStyle: {
      part: 'labels',
      vgProp: 'fontStyle'
    },
    labelFontWeight: {
      part: 'labels',
      vgProp: 'fontWeight'
    },
    labelOpacity: {
      part: 'labels',
      vgProp: 'opacity'
    },
    labelOffset: null,
    labelPadding: null,
    gridColor: {
      part: 'grid',
      vgProp: 'stroke'
    },
    gridDash: {
      part: 'grid',
      vgProp: 'strokeDash'
    },
    gridDashOffset: {
      part: 'grid',
      vgProp: 'strokeDash'
    },
    gridOpacity: {
      part: 'grid',
      vgProp: 'opacity'
    },
    gridWidth: {
      part: 'grid',
      vgProp: 'strokeWidth'
    },
    tickColor: {
      part: 'ticks',
      vgProp: 'stroke'
    },
    tickDash: {
      part: 'ticks',
      vgProp: 'strokeDash'
    },
    tickDashOffset: {
      part: 'ticks',
      vgProp: 'strokeDash'
    },
    tickOpacity: {
      part: 'ticks',
      vgProp: 'opacity'
    },
    tickSize: null,
    tickWidth: {
      part: 'ticks',
      vgProp: 'strokeWidth'
    },
    titleColor: {
      part: 'title',
      vgProp: 'fill'
    },
    title: null // title supports signal, let's use it.

  };
  function isConditionalAxisValue(v) {
    return v && v['condition'];
  }
  var AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];
  /**
   * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.
   */

  var AXIS_PROPERTY_TYPE = {
    grid: 'grid',
    gridColor: 'grid',
    gridDash: 'grid',
    gridDashOffset: 'grid',
    gridOpacity: 'grid',
    gridScale: 'grid',
    gridWidth: 'grid',
    orient: 'main',
    bandPosition: 'both',
    domain: 'main',
    domainColor: 'main',
    domainDash: 'main',
    domainDashOffset: 'main',
    domainOpacity: 'main',
    domainWidth: 'main',
    format: 'main',
    formatType: 'main',
    labelAlign: 'main',
    labelAngle: 'main',
    labelBaseline: 'main',
    labelBound: 'main',
    labelColor: 'main',
    labelFlush: 'main',
    labelFlushOffset: 'main',
    labelFont: 'main',
    labelFontSize: 'main',
    labelFontStyle: 'main',
    labelFontWeight: 'main',
    labelLimit: 'main',
    labelLineHeight: 'main',
    labelOpacity: 'main',
    labelOffset: 'main',
    labelOverlap: 'main',
    labelPadding: 'main',
    labels: 'main',
    labelSeparation: 'main',
    maxExtent: 'main',
    minExtent: 'main',
    offset: 'both',
    position: 'main',
    tickColor: 'main',
    tickDash: 'main',
    tickDashOffset: 'main',
    tickMinStep: 'main',
    tickOffset: 'both',
    tickOpacity: 'main',
    tickRound: 'both',
    ticks: 'main',
    tickSize: 'main',
    tickWidth: 'both',
    title: 'main',
    titleAlign: 'main',
    titleAnchor: 'main',
    titleAngle: 'main',
    titleBaseline: 'main',
    titleColor: 'main',
    titleFont: 'main',
    titleFontSize: 'main',
    titleFontStyle: 'main',
    titleFontWeight: 'main',
    titleLimit: 'main',
    titleLineHeight: 'main',
    titleOpacity: 'main',
    titlePadding: 'main',
    titleX: 'main',
    titleY: 'main',
    encode: 'both',
    scale: 'both',
    tickBand: 'both',
    tickCount: 'both',
    tickExtra: 'both',
    translate: 'both',
    values: 'both',
    zindex: 'both' // this is actually set afterward, so it doesn't matter

  };
  var COMMON_AXIS_PROPERTIES_INDEX = {
    orient: 1,
    bandPosition: 1,
    domain: 1,
    domainColor: 1,
    domainDash: 1,
    domainDashOffset: 1,
    domainOpacity: 1,
    domainWidth: 1,
    format: 1,
    formatType: 1,
    grid: 1,
    gridColor: 1,
    gridDash: 1,
    gridDashOffset: 1,
    gridOpacity: 1,
    gridWidth: 1,
    labelAlign: 1,
    labelAngle: 1,
    labelBaseline: 1,
    labelBound: 1,
    labelColor: 1,
    labelFlush: 1,
    labelFlushOffset: 1,
    labelFont: 1,
    labelFontSize: 1,
    labelFontStyle: 1,
    labelFontWeight: 1,
    labelLimit: 1,
    labelLineHeight: 1,
    labelOffset: 1,
    labelOpacity: 1,
    labelOverlap: 1,
    labelPadding: 1,
    labels: 1,
    labelSeparation: 1,
    maxExtent: 1,
    minExtent: 1,
    offset: 1,
    position: 1,
    tickBand: 1,
    tickColor: 1,
    tickCount: 1,
    tickDash: 1,
    tickDashOffset: 1,
    tickExtra: 1,
    tickMinStep: 1,
    tickOffset: 1,
    tickOpacity: 1,
    tickRound: 1,
    ticks: 1,
    tickSize: 1,
    tickWidth: 1,
    title: 1,
    titleAlign: 1,
    titleAnchor: 1,
    titleAngle: 1,
    titleBaseline: 1,
    titleColor: 1,
    titleFont: 1,
    titleFontSize: 1,
    titleFontStyle: 1,
    titleFontWeight: 1,
    titleLimit: 1,
    titleLineHeight: 1,
    titleOpacity: 1,
    titlePadding: 1,
    titleX: 1,
    titleY: 1,
    values: 1,
    translate: 1,
    zindex: 1
  };

  var AXIS_PROPERTIES_INDEX = _extends(_extends({}, COMMON_AXIS_PROPERTIES_INDEX), {
    style: 1,
    labelExpr: 1,
    encoding: 1
  });

  function isAxisProperty(prop) {
    return !!AXIS_PROPERTIES_INDEX[prop];
  } // Export for dependent projects

  var ARC = 'arc';
  var AREA = 'area';
  var BAR = 'bar';
  var IMAGE = 'image';
  var LINE = 'line';
  var POINT = 'point';
  var RECT = 'rect';
  var RULE = 'rule';
  var TEXT = 'text';
  var TICK = 'tick';
  var TRAIL = 'trail';
  var CIRCLE = 'circle';
  var SQUARE = 'square';
  var GEOSHAPE = 'geoshape'; // Using mapped type to declare index, ensuring we always have all marks when we add more.

  var MARK_INDEX = {
    arc: 1,
    area: 1,
    bar: 1,
    image: 1,
    line: 1,
    point: 1,
    text: 1,
    tick: 1,
    trail: 1,
    rect: 1,
    geoshape: 1,
    rule: 1,
    circle: 1,
    square: 1
  };
  function isPathMark(m) {
    return contains$1(['line', 'area', 'trail'], m);
  }
  function isRectBasedMark(m) {
    return contains$1(['rect', 'bar', 'image', 'arc'
    /* arc is rect/interval in polar coordinate */
    ], m);
  }
  var PRIMITIVE_MARKS = keys$2(MARK_INDEX);
  function isMarkDef(mark) {
    return mark['type'];
  }
  var PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);
  var STROKE_CONFIG = ['stroke', 'strokeWidth', 'strokeDash', 'strokeDashOffset', 'strokeOpacity', 'strokeJoin', 'strokeMiterLimit'];
  var FILL_CONFIG = ['fill', 'fillOpacity'];
  var FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);
  var VL_ONLY_MARK_CONFIG_INDEX = {
    color: 1,
    filled: 1,
    invalid: 1,
    order: 1,
    radius2: 1,
    theta2: 1,
    timeUnitBand: 1,
    timeUnitBandPosition: 1
  };
  var VL_ONLY_MARK_CONFIG_PROPERTIES = keys$2(VL_ONLY_MARK_CONFIG_INDEX);
  var VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
    area: ['line', 'point'],
    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
    rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
    line: ['point'],
    tick: ['bandSize', 'thickness']
  };
  var defaultMarkConfig = {
    color: '#4c78a8',
    invalid: 'filter',
    timeUnitBand: 1
  };
  var BAR_CORNER_RADIUS_INDEX = {
    horizontal: ['cornerRadiusTopRight', 'cornerRadiusBottomRight'],
    vertical: ['cornerRadiusTopLeft', 'cornerRadiusTopRight']
  };
  var DEFAULT_RECT_BAND_SIZE = 5;
  var defaultBarConfig = {
    binSpacing: 1,
    continuousBandSize: DEFAULT_RECT_BAND_SIZE,
    timeUnitBandPosition: 0.5
  };
  var defaultRectConfig = {
    binSpacing: 0,
    continuousBandSize: DEFAULT_RECT_BAND_SIZE,
    timeUnitBandPosition: 0.5
  };
  var defaultTickConfig = {
    thickness: 1
  };
  function getMarkType(m) {
    return isMarkDef(m) ? m.type : m;
  }

  function isUnitSpec(spec) {
    return 'mark' in spec;
  }

  var CompositeMarkNormalizer = /*#__PURE__*/function () {
    function CompositeMarkNormalizer(name, run) {
      _classCallCheck(this, CompositeMarkNormalizer);

      this.name = name;
      this.run = run;
    }

    _createClass(CompositeMarkNormalizer, [{
      key: "hasMatchingType",
      value: function hasMatchingType(spec) {
        if (isUnitSpec(spec)) {
          return getMarkType(spec.mark) === this.name;
        }

        return false;
      }
    }]);

    return CompositeMarkNormalizer;
  }();

  var AGGREGATE_OP_INDEX = {
    argmax: 1,
    argmin: 1,
    average: 1,
    count: 1,
    distinct: 1,
    product: 1,
    max: 1,
    mean: 1,
    median: 1,
    min: 1,
    missing: 1,
    q1: 1,
    q3: 1,
    ci0: 1,
    ci1: 1,
    stderr: 1,
    stdev: 1,
    stdevp: 1,
    sum: 1,
    valid: 1,
    values: 1,
    variance: 1,
    variancep: 1
  };
  var MULTIDOMAIN_SORT_OP_INDEX = {
    count: 1,
    min: 1,
    max: 1
  };
  function isArgminDef(a) {
    return !!a && !!a['argmin'];
  }
  function isArgmaxDef(a) {
    return !!a && !!a['argmax'];
  }
  function isAggregateOp(a) {
    return isString(a) && !!AGGREGATE_OP_INDEX[a];
  }
  var COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
  function isCountingAggregateOp(aggregate) {
    return isString(aggregate) && contains$1(COUNTING_OPS, aggregate);
  }
  function isMinMaxOp(aggregate) {
    return isString(aggregate) && contains$1(['min', 'max'], aggregate);
  }
  /** Additive-based aggregation operations. These can be applied to stack. */

  var SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];
  /**
   * Aggregation operators that always produce values within the range [domainMin, domainMax].
   */

  var SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];
  var SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);

  var ROW = 'row';
  var COLUMN = 'column';
  var FACET = 'facet'; // Position

  var X$1 = 'x';
  var Y$1 = 'y';
  var X2$2 = 'x2';
  var Y2$2 = 'y2'; // Arc-Position

  var RADIUS = 'radius';
  var RADIUS2 = 'radius2';
  var THETA = 'theta';
  var THETA2 = 'theta2'; // Geo Position

  var LATITUDE = 'latitude';
  var LONGITUDE = 'longitude';
  var LATITUDE2 = 'latitude2';
  var LONGITUDE2 = 'longitude2'; // Mark property with scale

  var COLOR = 'color';
  var FILL = 'fill';
  var STROKE = 'stroke';
  var SHAPE = 'shape';
  var SIZE = 'size';
  var ANGLE = 'angle';
  var OPACITY = 'opacity';
  var FILLOPACITY = 'fillOpacity';
  var STROKEOPACITY = 'strokeOpacity';
  var STROKEWIDTH = 'strokeWidth';
  var STROKEDASH = 'strokeDash'; // Non-scale channel

  var TEXT$1 = 'text';
  var ORDER = 'order';
  var DETAIL = 'detail';
  var KEY = 'key';
  var TOOLTIP = 'tooltip';
  var HREF = 'href';
  var URL = 'url';
  var POSITION_CHANNEL_INDEX = {
    x: 1,
    y: 1,
    x2: 1,
    y2: 1
  };
  var POLAR_POSITION_CHANNEL_INDEX = {
    theta: 1,
    theta2: 1,
    radius: 1,
    radius2: 1
  };
  function isPolarPositionChannel(c) {
    return c in POLAR_POSITION_CHANNEL_INDEX;
  }
  function getPositionChannelFromLatLong(channel) {
    switch (channel) {
      case LATITUDE:
        return 'y';

      case LATITUDE2:
        return 'y2';

      case LONGITUDE:
        return 'x';

      case LONGITUDE2:
        return 'x2';
    }
  }
  var GEOPOSITION_CHANNEL_INDEX = {
    longitude: 1,
    longitude2: 1,
    latitude: 1,
    latitude2: 1
  };
  function isGeoPositionChannel(c) {
    return c in GEOPOSITION_CHANNEL_INDEX;
  }
  var GEOPOSITION_CHANNELS = keys$2(GEOPOSITION_CHANNEL_INDEX);

  var UNIT_CHANNEL_INDEX = _extends(_extends(_extends(_extends({}, POSITION_CHANNEL_INDEX), POLAR_POSITION_CHANNEL_INDEX), GEOPOSITION_CHANNEL_INDEX), {
    // color
    color: 1,
    fill: 1,
    stroke: 1,
    // other non-position with scale
    opacity: 1,
    fillOpacity: 1,
    strokeOpacity: 1,
    strokeWidth: 1,
    strokeDash: 1,
    size: 1,
    angle: 1,
    shape: 1,
    // channels without scales
    order: 1,
    text: 1,
    detail: 1,
    key: 1,
    tooltip: 1,
    href: 1,
    url: 1
  });

  function isColorChannel(channel) {
    return channel === 'color' || channel === 'fill' || channel === 'stroke';
  }
  var FACET_CHANNEL_INDEX = {
    row: 1,
    column: 1,
    facet: 1
  };
  var FACET_CHANNELS = keys$2(FACET_CHANNEL_INDEX);

  var CHANNEL_INDEX = _extends(_extends({}, UNIT_CHANNEL_INDEX), FACET_CHANNEL_INDEX);

  var CHANNELS = keys$2(CHANNEL_INDEX);

  var _o = CHANNEL_INDEX.order,
      _d = CHANNEL_INDEX.detail,
      _tt1 = CHANNEL_INDEX.tooltip,
      SINGLE_DEF_CHANNEL_INDEX = __rest(CHANNEL_INDEX, ["order", "detail", "tooltip"]);

  var SINGLE_DEF_UNIT_CHANNEL_INDEX = __rest(SINGLE_DEF_CHANNEL_INDEX, ["row", "column", "facet"]);
  function isSingleDefUnitChannel(str) {
    return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];
  }
  function isChannel(str) {
    return !!CHANNEL_INDEX[str];
  }
  var SECONDARY_RANGE_CHANNEL = ['x2', 'y2', 'latitude2', 'longitude2', 'theta2', 'radius2'];
  function isSecondaryRangeChannel(c) {
    var main = getMainRangeChannel(c);
    return main !== c;
  }
  /**
   * Get the main channel for a range channel. E.g. `x` for `x2`.
   */

  function getMainRangeChannel(channel) {
    switch (channel) {
      case 'x2':
        return 'x';

      case 'y2':
        return 'y';

      case 'latitude2':
        return 'latitude';

      case 'longitude2':
        return 'longitude';

      case 'theta2':
        return 'theta';

      case 'radius2':
        return 'radius';
    }

    return channel;
  }
  function getVgPositionChannel(channel) {
    if (isPolarPositionChannel(channel)) {
      switch (channel) {
        case THETA:
          return 'startAngle';

        case THETA2:
          return 'endAngle';

        case RADIUS:
          return 'outerRadius';

        case RADIUS2:
          return 'innerRadius';
      }
    }

    return channel;
  }
  /**
   * Get the main channel for a range channel. E.g. `x` for `x2`.
   */

  function getSecondaryRangeChannel(channel) {
    switch (channel) {
      case 'x':
        return 'x2';

      case 'y':
        return 'y2';

      case 'latitude':
        return 'latitude2';

      case 'longitude':
        return 'longitude2';

      case 'theta':
        return 'theta2';

      case 'radius':
        return 'radius2';
    }

    return undefined;
  }
  function getSizeChannel(channel) {
    switch (channel) {
      case 'x':
      case 'x2':
        return 'width';

      case 'y':
      case 'y2':
        return 'height';
    }

    return undefined;
  }
  /**
   * Get the main channel for a range channel. E.g. `x` for `x2`.
   */

  function getOffsetChannel(channel) {
    switch (channel) {
      case 'x':
        return 'xOffset';

      case 'y':
        return 'yOffset';

      case 'x2':
        return 'x2Offset';

      case 'y2':
        return 'y2Offset';

      case 'theta':
        return 'thetaOffset';

      case 'radius':
        return 'radiusOffset';

      case 'theta2':
        return 'theta2Offset';

      case 'radius2':
        return 'radius2Offset';
    }

    return undefined;
  } // CHANNELS without COLUMN, ROW

  var _x = UNIT_CHANNEL_INDEX.x,
      _y = UNIT_CHANNEL_INDEX.y,
      _x2 = UNIT_CHANNEL_INDEX.x2,
      _y2 = UNIT_CHANNEL_INDEX.y2,
      _latitude = UNIT_CHANNEL_INDEX.latitude,
      _longitude = UNIT_CHANNEL_INDEX.longitude,
      _latitude2 = UNIT_CHANNEL_INDEX.latitude2,
      _longitude2 = UNIT_CHANNEL_INDEX.longitude2,
      _theta = UNIT_CHANNEL_INDEX.theta,
      _theta2 = UNIT_CHANNEL_INDEX.theta2,
      _radius = UNIT_CHANNEL_INDEX.radius,
      _radius2 = UNIT_CHANNEL_INDEX.radius2,
      NONPOSITION_CHANNEL_INDEX = __rest(UNIT_CHANNEL_INDEX, ["x", "y", "x2", "y2", "latitude", "longitude", "latitude2", "longitude2", "theta", "theta2", "radius", "radius2"]);

  var NONPOSITION_CHANNELS = keys$2(NONPOSITION_CHANNEL_INDEX); // POSITION_SCALE_CHANNELS = X and Y;

  var POSITION_SCALE_CHANNEL_INDEX = {
    x: 1,
    y: 1
  };
  var POSITION_SCALE_CHANNELS = keys$2(POSITION_SCALE_CHANNEL_INDEX);
  function isXorY(channel) {
    return channel in POSITION_CHANNEL_INDEX;
  }
  var POLAR_POSITION_SCALE_CHANNEL_INDEX = {
    theta: 1,
    radius: 1
  };
  function getPositionScaleChannel(sizeType) {
    return sizeType === 'width' ? 'x' : 'y';
  } // NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y

  var NONPOSITION_SCALE_CHANNEL_INDEX = __rest(NONPOSITION_CHANNEL_INDEX, ["text", "tooltip", "href", "url", "detail", "key", "order"]);

  var NONPOSITION_SCALE_CHANNELS = keys$2(NONPOSITION_SCALE_CHANNEL_INDEX);
  function isNonPositionScaleChannel(channel) {
    return !!NONPOSITION_CHANNEL_INDEX[channel];
  }
  /**
   * @returns whether Vega supports legends for a particular channel
   */

  function supportLegend(channel) {
    switch (channel) {
      case COLOR:
      case FILL:
      case STROKE:
      case SIZE:
      case SHAPE:
      case OPACITY:
      case STROKEWIDTH:
      case STROKEDASH:
        return true;

      case FILLOPACITY:
      case STROKEOPACITY:
      case ANGLE:
        return false;
    }
  } // Declare SCALE_CHANNEL_INDEX

  var SCALE_CHANNEL_INDEX = _extends(_extends(_extends({}, POSITION_SCALE_CHANNEL_INDEX), POLAR_POSITION_SCALE_CHANNEL_INDEX), NONPOSITION_SCALE_CHANNEL_INDEX);
  /** List of channels with scales */


  var SCALE_CHANNELS = keys$2(SCALE_CHANNEL_INDEX);
  function isScaleChannel(channel) {
    return !!SCALE_CHANNEL_INDEX[channel];
  }
  /**
   * Return whether a channel supports a particular mark type.
   * @param channel  channel name
   * @param mark the mark type
   * @return whether the mark supports the channel
   */

  function supportMark(channel, mark) {
    return getSupportedMark(channel)[mark];
  }
  var ALL_MARKS = {
    // all marks
    arc: 'always',
    area: 'always',
    bar: 'always',
    circle: 'always',
    geoshape: 'always',
    image: 'always',
    line: 'always',
    rule: 'always',
    point: 'always',
    rect: 'always',
    square: 'always',
    trail: 'always',
    text: 'always',
    tick: 'always'
  };

  var ALL_MARKS_EXCEPT_GEOSHAPE = __rest(ALL_MARKS, ["geoshape"]);
  /**
   * Return a dictionary showing whether a channel supports mark type.
   * @param channel
   * @return A dictionary mapping mark types to 'always', 'binned', or undefined
   */


  function getSupportedMark(channel) {
    switch (channel) {
      case COLOR:
      case FILL:
      case STROKE: // falls through

      case DETAIL:
      case KEY:
      case TOOLTIP:
      case HREF:
      case ORDER: // TODO: revise (order might not support rect, which is not stackable?)

      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case STROKEWIDTH: // falls through

      case FACET:
      case ROW: // falls through

      case COLUMN:
        return ALL_MARKS;

      case X$1:
      case Y$1:
      case LATITUDE:
      case LONGITUDE:
        // all marks except geoshape. geoshape does not use X, Y -- it uses a projection
        return ALL_MARKS_EXCEPT_GEOSHAPE;

      case X2$2:
      case Y2$2:
      case LATITUDE2:
      case LONGITUDE2:
        return {
          area: 'always',
          bar: 'always',
          image: 'always',
          rect: 'always',
          rule: 'always',
          circle: 'binned',
          point: 'binned',
          square: 'binned',
          tick: 'binned',
          line: 'binned',
          trail: 'binned'
        };

      case SIZE:
        return {
          point: 'always',
          tick: 'always',
          rule: 'always',
          circle: 'always',
          square: 'always',
          bar: 'always',
          text: 'always',
          line: 'always',
          trail: 'always'
        };

      case STROKEDASH:
        return {
          line: 'always',
          point: 'always',
          tick: 'always',
          rule: 'always',
          circle: 'always',
          square: 'always',
          bar: 'always',
          geoshape: 'always'
        };

      case SHAPE:
        return {
          point: 'always',
          geoshape: 'always'
        };

      case TEXT$1:
        return {
          text: 'always'
        };

      case ANGLE:
        return {
          point: 'always',
          square: 'always',
          text: 'always'
        };

      case URL:
        return {
          image: 'always'
        };

      case THETA:
        return {
          text: 'always',
          arc: 'always'
        };

      case RADIUS:
        return {
          text: 'always',
          arc: 'always'
        };

      case THETA2:
      case RADIUS2:
        return {
          arc: 'always'
        };
    }
  }

  function rangeType(channel) {
    switch (channel) {
      case X$1:
      case Y$1:
      case THETA:
      case RADIUS:
      case SIZE:
      case ANGLE:
      case STROKEWIDTH:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY: // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]

      case X2$2:
      case Y2$2:
      case THETA2:
      case RADIUS2:
        return undefined;

      case FACET:
      case ROW:
      case COLUMN:
      case SHAPE:
      case STROKEDASH: // TEXT, TOOLTIP, URL, and HREF have no scale but have discrete output [falls through]

      case TEXT$1:
      case TOOLTIP:
      case HREF:
      case URL:
        return 'discrete';
      // Color can be either continuous or discrete, depending on scale type.

      case COLOR:
      case FILL:
      case STROKE:
        return 'flexible';
      // No scale, no range type.

      case LATITUDE:
      case LONGITUDE:
      case LATITUDE2:
      case LONGITUDE2:
      case DETAIL:
      case KEY:
      case ORDER:
        return undefined;
    }
  }

  /**
   * Create a key for the bin configuration. Not for prebinned bin.
   */

  function binToString(bin) {
    if (isBoolean(bin)) {
      bin = normalizeBin(bin, undefined);
    }

    return 'bin' + keys$2(bin).map(function (p) {
      return isSelectionExtent(bin[p]) ? varName("_".concat(p, "_").concat(Object.entries(bin[p]))) : varName("_".concat(p, "_").concat(bin[p]));
    }).join('');
  }
  /**
   * Vega-Lite should bin the data.
   */

  function isBinning(bin) {
    return bin === true || isBinParams(bin) && !bin.binned;
  }
  /**
   * The data is already binned and so Vega-Lite should not bin it again.
   */

  function isBinned(bin) {
    return bin === 'binned' || isBinParams(bin) && bin.binned === true;
  }
  function isBinParams(bin) {
    return isObject(bin);
  }
  function isSelectionExtent(extent) {
    return extent === null || extent === void 0 ? void 0 : extent['selection'];
  }
  function autoMaxBins(channel) {
    switch (channel) {
      case ROW:
      case COLUMN:
      case SIZE:
      case COLOR:
      case FILL:
      case STROKE:
      case STROKEWIDTH:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY: // Facets and Size shouldn't have too many bins
      // We choose 6 like shape to simplify the rule [falls through]

      case SHAPE:
        return 6;
      // Vega's "shape" has 6 distinct values

      case STROKEDASH:
        return 4;
      // We only provide 5 different stroke dash values (but 4 is more effective)

      default:
        return 10;
    }
  }

  /**
   * Collection of all Vega-Lite Error Messages
   */
  function invalidSpec(spec) {
    return "Invalid specification ".concat(JSON.stringify(spec), ". Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".");
  } // FIT

  var FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
  function containerSizeNonSingle(name) {
    var uName = name == 'width' ? 'Width' : 'Height';
    return "".concat(uName, " \"container\" only works for single views and layered views.");
  }
  function containerSizeNotCompatibleWithAutosize(name) {
    var uName = name == 'width' ? 'Width' : 'Height';
    var fitDirection = name == 'width' ? 'x' : 'y';
    return "".concat(uName, " \"container\" only works well with autosize \"fit\" or \"fit-").concat(fitDirection, "\".");
  }
  function droppingFit(channel) {
    return channel ? "Dropping \"fit-".concat(channel, "\" because spec has discrete ").concat(getSizeChannel(channel), ".") : "Dropping \"fit\" because spec has discrete size.";
  } // SELECTION

  function cannotProjectOnChannelWithoutField(channel) {
    return "Cannot project a selection on encoding channel \"".concat(channel, "\", which has no field.");
  }
  function cannotProjectAggregate(channel, aggregate) {
    return "Cannot project a selection on encoding channel \"".concat(channel, "\" as it uses an aggregate function (\"").concat(aggregate, "\").");
  }
  function nearestNotSupportForContinuous(mark) {
    return "The \"nearest\" transform is not supported for ".concat(mark, " marks.");
  }
  function selectionNotSupported(mark) {
    return "Selection not supported for ".concat(mark, " yet.");
  }
  function selectionNotFound(name) {
    return "Cannot find a selection named \"".concat(name, "\".");
  }
  var SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';
  var LEGEND_BINDINGS_PROJECT_LENGTH = 'Legend bindings are only supported for selections over an individual field or encoding channel.';
  function noSameUnitLookup(name) {
    return "Cannot define and lookup the \"".concat(name, "\" selection in the same view. ") + "Try moving the lookup into a second, layered view?";
  } // REPEAT

  function noSuchRepeatedValue(field) {
    return "Unknown repeated value \"".concat(field, "\".");
  }
  function columnsNotSupportByRowCol(type) {
    return "The \"columns\" property cannot be used when \"".concat(type, "\" has nested row/column.");
  } // CONCAT / REPEAT

  var CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).'; // DATA

  function unrecognizedParse(p) {
    return "Unrecognized parse \"".concat(p, "\".");
  }
  function differentParse(field, local, ancestor) {
    return "An ancestor parsed field \"".concat(field, "\" as ").concat(ancestor, " but a child wants to parse the field as ").concat(local, ".");
  } // TRANSFORMS

  function invalidTransformIgnored(transform) {
    return "Ignoring an invalid transform: ".concat(stringify$1(transform), ".");
  }
  var NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.'; // ENCODING & FACET

  function encodingOverridden(channels) {
    return "Layer's shared ".concat(channels.join(','), " channel ").concat(channels.length === 1 ? 'is' : 'are', " overriden.");
  }
  function projectionOverridden(opt) {
    var parentProjection = opt.parentProjection,
        projection = opt.projection;
    return "Layer's shared projection ".concat(stringify$1(parentProjection), " is overridden by a child projection ").concat(stringify$1(projection), ".");
  }
  var REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';
  function primitiveChannelDef(channel, type, value) {
    return "Channel ".concat(channel, " is a ").concat(type, ". Converted to {value: ").concat(stringify$1(value), "}.");
  }
  function invalidFieldType(type) {
    return "Invalid field type \"".concat(type, "\".");
  }
  function invalidFieldTypeForCountAggregate(type, aggregate) {
    return "Invalid field type \"".concat(type, "\" for aggregate: \"").concat(aggregate, "\", using \"quantitative\" instead.");
  }
  function invalidAggregate(aggregate) {
    return "Invalid aggregation operator \"".concat(aggregate, "\".");
  }
  function missingFieldType(channel, newType) {
    return "Missing type for channel \"".concat(channel, "\", using \"").concat(newType, "\" instead.");
  }
  function droppingColor(type, opt) {
    var fill = opt.fill,
        stroke = opt.stroke;
    return "Dropping color ".concat(type, " as the plot also has ").concat(fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke', ".");
  }
  function emptyFieldDef(fieldDef, channel) {
    return "Dropping ".concat(stringify$1(fieldDef), " from channel \"").concat(channel, "\" since it does not contain any data field, datum, value, or signal.");
  }
  function latLongDeprecated(channel, type, newChannel) {
    return "".concat(channel, "-encoding with type ").concat(type, " is deprecated. Replacing with ").concat(newChannel, "-encoding.");
  }
  var LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';
  function incompatibleChannel(channel, markOrFacet, when) {
    return "".concat(channel, " dropped as it is incompatible with \"").concat(markOrFacet, "\"").concat(when ? " when ".concat(when) : '', ".");
  }
  function invalidEncodingChannel(channel) {
    return "".concat(channel, "-encoding is dropped as ").concat(channel, " is not a valid encoding channel.");
  }
  function facetChannelShouldBeDiscrete(channel) {
    return "".concat(channel, " encoding should be discrete (ordinal / nominal / binned).");
  }
  function facetChannelDropped(channels) {
    return "Facet encoding dropped as ".concat(channels.join(' and '), " ").concat(channels.length > 1 ? 'are' : 'is', " also specified.");
  }
  function discreteChannelCannotEncode(channel, type) {
    return "Using discrete channel \"".concat(channel, "\" to encode \"").concat(type, "\" field can be misleading as it does not encode ").concat(type === 'ordinal' ? 'order' : 'magnitude', ".");
  } // Mark

  function lineWithRange(hasX2, hasY2) {
    var channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';
    return "Line mark is for continuous lines and thus cannot be used with ".concat(channels, ". We will use the rule mark (line segments) instead.");
  }
  function orientOverridden(original, actual) {
    return "Specified orient \"".concat(original, "\" overridden with \"").concat(actual, "\".");
  } // SCALE

  var CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'Custom domain scale cannot be unioned with default field-based domain.';
  var RANGE_STEP_DEPRECATED = "Scale's \"rangeStep\" is deprecated and will be removed in Vega-Lite 5.0. Please use \"width\"/\"height\": {\"step\": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.";
  function cannotUseScalePropertyWithNonColor(prop) {
    return "Cannot use the scale property \"".concat(prop, "\" with non-color channel.");
  }
  function unaggregateDomainHasNoEffectForRawField(fieldDef) {
    return "Using unaggregated domain with raw field has no effect (".concat(stringify$1(fieldDef), ").");
  }
  function unaggregateDomainWithNonSharedDomainOp(aggregate) {
    return "Unaggregated domain not applicable for \"".concat(aggregate, "\" since it produces values outside the origin domain of the source data.");
  }
  function unaggregatedDomainWithLogScale(fieldDef) {
    return "Unaggregated domain is currently unsupported for log scale (".concat(stringify$1(fieldDef), ").");
  }
  function cannotApplySizeToNonOrientedMark(mark) {
    return "Cannot apply size to non-oriented mark \"".concat(mark, "\".");
  }
  function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {
    return "Channel \"".concat(channel, "\" does not work with \"").concat(scaleType, "\" scale. We are using \"").concat(defaultScaleType, "\" scale instead.");
  }
  function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {
    return "FieldDef does not work with \"".concat(scaleType, "\" scale. We are using \"").concat(defaultScaleType, "\" scale instead.");
  }
  function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {
    return "".concat(channel, "-scale's \"").concat(propName, "\" is dropped as it does not work with ").concat(scaleType, " scale.");
  }
  function scaleTypeNotWorkWithMark(mark, scaleType) {
    return "Scale type \"".concat(scaleType, "\" does not work with mark \"").concat(mark, "\".");
  }
  function stepDropped(channel) {
    return "The step for \"".concat(channel, "\" is dropped because the ").concat(channel === 'width' ? 'x' : 'y', " is continuous.");
  }
  function mergeConflictingProperty(property, propertyOf, v1, v2) {
    return "Conflicting ".concat(propertyOf.toString(), " property \"").concat(property.toString(), "\" (").concat(stringify$1(v1), " and ").concat(stringify$1(v2), "). Using ").concat(stringify$1(v1), ".");
  }
  function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {
    return "Conflicting ".concat(propertyOf.toString(), " property \"").concat(property.toString(), "\" (").concat(stringify$1(v1), " and ").concat(stringify$1(v2), "). Using the union of the two domains.");
  }
  function independentScaleMeansIndependentGuide(channel) {
    return "Setting the scale to be independent for \"".concat(channel, "\" means we also have to set the guide (axis or legend) to be independent.");
  }
  function domainSortDropped(sort) {
    return "Dropping sort property ".concat(stringify$1(sort), " as unioned domains only support boolean or op \"count\", \"min\", and \"max\".");
  }
  var UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains.';
  var MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.'; // AXIS

  var INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.'; // STACK

  function cannotStackRangedMark(channel) {
    return "Cannot stack \"".concat(channel, "\" if there is already \"").concat(channel, "2\".");
  }
  function cannotStackNonLinearScale(scaleType) {
    return "Cannot stack non-linear scale (".concat(scaleType, ").");
  }
  function stackNonSummativeAggregate(aggregate) {
    return "Stacking is applied even though the aggregate function is non-summative (\"".concat(aggregate, "\").");
  } // TIMEUNIT

  function invalidTimeUnit(unitName, value) {
    return "Invalid ".concat(unitName, ": ").concat(stringify$1(value), ".");
  }
  function dayReplacedWithDate(fullTimeUnit) {
    return "Time unit \"".concat(fullTimeUnit, "\" is not supported. We are replacing it with ").concat(replaceAll(fullTimeUnit, 'day', 'date'), ".");
  }
  function droppedDay(d) {
    return "Dropping day from datetime ".concat(stringify$1(d), " as day cannot be combined with other units.");
  }
  function errorBarCenterAndExtentAreNotNeeded(center, extent) {
    return "".concat(extent ? 'extent ' : '').concat(extent && center ? 'and ' : '').concat(center ? 'center ' : '').concat(extent && center ? 'are ' : 'is ', "not needed when data are aggregated.");
  }
  function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {
    return "".concat(center, " is not usually used with ").concat(extent, " for ").concat(mark, ".");
  }
  function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {
    return "Continuous axis should not have customized aggregation function ".concat(aggregate, "; ").concat(compositeMark, " already agregates the axis.");
  }
  function errorBarCenterIsNotNeeded(extent, mark) {
    return "Center is not needed to be specified in ".concat(mark, " when extent is ").concat(extent, ".");
  }
  function errorBand1DNotSupport(property) {
    return "1D error band does not support ".concat(property, ".");
  } // CHANNEL

  function channelRequiredForBinned(channel) {
    return "Channel ".concat(channel, " is required for \"binned\" bin.");
  }
  function domainRequiredForThresholdScale(channel) {
    return "Domain for ".concat(channel, " is required for threshold scale.");
  }

  var message_ = /*#__PURE__*/Object.freeze({
    __proto__: null,
    invalidSpec: invalidSpec,
    FIT_NON_SINGLE: FIT_NON_SINGLE,
    containerSizeNonSingle: containerSizeNonSingle,
    containerSizeNotCompatibleWithAutosize: containerSizeNotCompatibleWithAutosize,
    droppingFit: droppingFit,
    cannotProjectOnChannelWithoutField: cannotProjectOnChannelWithoutField,
    cannotProjectAggregate: cannotProjectAggregate,
    nearestNotSupportForContinuous: nearestNotSupportForContinuous,
    selectionNotSupported: selectionNotSupported,
    selectionNotFound: selectionNotFound,
    SCALE_BINDINGS_CONTINUOUS: SCALE_BINDINGS_CONTINUOUS,
    LEGEND_BINDINGS_PROJECT_LENGTH: LEGEND_BINDINGS_PROJECT_LENGTH,
    noSameUnitLookup: noSameUnitLookup,
    noSuchRepeatedValue: noSuchRepeatedValue,
    columnsNotSupportByRowCol: columnsNotSupportByRowCol,
    CONCAT_CANNOT_SHARE_AXIS: CONCAT_CANNOT_SHARE_AXIS,
    unrecognizedParse: unrecognizedParse,
    differentParse: differentParse,
    invalidTransformIgnored: invalidTransformIgnored,
    NO_FIELDS_NEEDS_AS: NO_FIELDS_NEEDS_AS,
    encodingOverridden: encodingOverridden,
    projectionOverridden: projectionOverridden,
    REPLACE_ANGLE_WITH_THETA: REPLACE_ANGLE_WITH_THETA,
    primitiveChannelDef: primitiveChannelDef,
    invalidFieldType: invalidFieldType,
    invalidFieldTypeForCountAggregate: invalidFieldTypeForCountAggregate,
    invalidAggregate: invalidAggregate,
    missingFieldType: missingFieldType,
    droppingColor: droppingColor,
    emptyFieldDef: emptyFieldDef,
    latLongDeprecated: latLongDeprecated,
    LINE_WITH_VARYING_SIZE: LINE_WITH_VARYING_SIZE,
    incompatibleChannel: incompatibleChannel,
    invalidEncodingChannel: invalidEncodingChannel,
    facetChannelShouldBeDiscrete: facetChannelShouldBeDiscrete,
    facetChannelDropped: facetChannelDropped,
    discreteChannelCannotEncode: discreteChannelCannotEncode,
    lineWithRange: lineWithRange,
    orientOverridden: orientOverridden,
    CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN: CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN,
    RANGE_STEP_DEPRECATED: RANGE_STEP_DEPRECATED,
    cannotUseScalePropertyWithNonColor: cannotUseScalePropertyWithNonColor,
    unaggregateDomainHasNoEffectForRawField: unaggregateDomainHasNoEffectForRawField,
    unaggregateDomainWithNonSharedDomainOp: unaggregateDomainWithNonSharedDomainOp,
    unaggregatedDomainWithLogScale: unaggregatedDomainWithLogScale,
    cannotApplySizeToNonOrientedMark: cannotApplySizeToNonOrientedMark,
    scaleTypeNotWorkWithChannel: scaleTypeNotWorkWithChannel,
    scaleTypeNotWorkWithFieldDef: scaleTypeNotWorkWithFieldDef,
    scalePropertyNotWorkWithScaleType: scalePropertyNotWorkWithScaleType,
    scaleTypeNotWorkWithMark: scaleTypeNotWorkWithMark,
    stepDropped: stepDropped,
    mergeConflictingProperty: mergeConflictingProperty,
    mergeConflictingDomainProperty: mergeConflictingDomainProperty,
    independentScaleMeansIndependentGuide: independentScaleMeansIndependentGuide,
    domainSortDropped: domainSortDropped,
    UNABLE_TO_MERGE_DOMAINS: UNABLE_TO_MERGE_DOMAINS,
    MORE_THAN_ONE_SORT: MORE_THAN_ONE_SORT,
    INVALID_CHANNEL_FOR_AXIS: INVALID_CHANNEL_FOR_AXIS,
    cannotStackRangedMark: cannotStackRangedMark,
    cannotStackNonLinearScale: cannotStackNonLinearScale,
    stackNonSummativeAggregate: stackNonSummativeAggregate,
    invalidTimeUnit: invalidTimeUnit,
    dayReplacedWithDate: dayReplacedWithDate,
    droppedDay: droppedDay,
    errorBarCenterAndExtentAreNotNeeded: errorBarCenterAndExtentAreNotNeeded,
    errorBarCenterIsUsedWithWrongExtent: errorBarCenterIsUsedWithWrongExtent,
    errorBarContinuousAxisHasCustomizedAggregate: errorBarContinuousAxisHasCustomizedAggregate,
    errorBarCenterIsNotNeeded: errorBarCenterIsNotNeeded,
    errorBand1DNotSupport: errorBand1DNotSupport,
    channelRequiredForBinned: channelRequiredForBinned,
    domainRequiredForThresholdScale: domainRequiredForThresholdScale
  });

  var message = message_;
  /**
   * Main (default) Vega Logger instance for Vega-Lite.
   */

  var main$1 = logger(Warn);
  var current = main$1;
  /**
   * Set the singleton logger to be a custom logger.
   */

  function set$4(newLogger) {
    current = newLogger;
    return current;
  }
  /**
   * Reset the main logger to use the default Vega Logger.
   */

  function reset$1() {
    current = main$1;
    return current;
  }
  function warn$1() {
    var _current;

    (_current = current).warn.apply(_current, arguments);
  }
  function debug$3() {
    var _current3;

    (_current3 = current).debug.apply(_current3, arguments);
  }

  function isDateTime(o) {
    if (o && isObject(o)) {
      var _iterator = _createForOfIteratorHelper(TIMEUNIT_PARTS),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var part = _step.value;

          if (part in o) {
            return true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    return false;
  }
  var MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
  var SHORT_MONTHS = MONTHS.map(function (m) {
    return m.substr(0, 3);
  });
  var DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  var SHORT_DAYS = DAYS.map(function (d) {
    return d.substr(0, 3);
  });

  function normalizeQuarter(q) {
    if (isNumeric(q)) {
      q = +q;
    }

    if (isNumber(q)) {
      if (q > 4) {
        warn$1(message.invalidTimeUnit('quarter', q));
      } // We accept 1-based quarter, so need to readjust to 0-based quarter


      return q - 1;
    } else {
      // Invalid quarter
      throw new Error(message.invalidTimeUnit('quarter', q));
    }
  }

  function normalizeMonth(m) {
    if (isNumeric(m)) {
      m = +m;
    }

    if (isNumber(m)) {
      // We accept 1-based month, so need to readjust to 0-based month
      return m - 1;
    } else {
      var lowerM = m.toLowerCase();
      var monthIndex = MONTHS.indexOf(lowerM);

      if (monthIndex !== -1) {
        return monthIndex; // 0 for january, ...
      }

      var shortM = lowerM.substr(0, 3);
      var shortMonthIndex = SHORT_MONTHS.indexOf(shortM);

      if (shortMonthIndex !== -1) {
        return shortMonthIndex;
      } // Invalid month


      throw new Error(message.invalidTimeUnit('month', m));
    }
  }

  function normalizeDay(d) {
    if (isNumeric(d)) {
      d = +d;
    }

    if (isNumber(d)) {
      // mod so that this can be both 0-based where 0 = sunday
      // and 1-based where 7=sunday
      return d % 7;
    } else {
      var lowerD = d.toLowerCase();
      var dayIndex = DAYS.indexOf(lowerD);

      if (dayIndex !== -1) {
        return dayIndex; // 0 for january, ...
      }

      var shortD = lowerD.substr(0, 3);
      var shortDayIndex = SHORT_DAYS.indexOf(shortD);

      if (shortDayIndex !== -1) {
        return shortDayIndex;
      } // Invalid day


      throw new Error(message.invalidTimeUnit('day', d));
    }
  }
  /**
   * @param d the date.
   * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.
   * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]
   */


  function dateTimeParts(d, normalize) {
    var parts = [];

    if (normalize && d.day !== undefined) {
      if (keys$2(d).length > 1) {
        warn$1(message.droppedDay(d));
        d = duplicate(d);
        delete d.day;
      }
    }

    if (d.year !== undefined) {
      parts.push(d.year);
    } else {
      // Just like Vega's timeunit transform, set default year to 2012, so domain converstion will be compatible with Vega
      // Note: 2012 is a leap year (and so the date February 29 is respected) that begins on a Sunday (and so days of the week will order properly at the beginning of the year).
      parts.push(2012);
    }

    if (d.month !== undefined) {
      var month = normalize ? normalizeMonth(d.month) : d.month;
      parts.push(month);
    } else if (d.quarter !== undefined) {
      var quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;
      parts.push(isNumber(quarter) ? quarter * 3 : quarter + '*3');
    } else {
      parts.push(0); // months start at zero in JS
    }

    if (d.date !== undefined) {
      parts.push(d.date);
    } else if (d.day !== undefined) {
      // HACK: Day only works as a standalone unit
      // This is only correct because we always set year to 2006 for day
      var day = normalize ? normalizeDay(d.day) : d.day;
      parts.push(isNumber(day) ? day + 1 : day + '+1');
    } else {
      parts.push(1); // Date starts at 1 in JS
    } // Note: can't use TimeUnit enum here as importing it will create
    // circular dependency problem!


    for (var _i = 0, _arr = ['hours', 'minutes', 'seconds', 'milliseconds']; _i < _arr.length; _i++) {
      var timeUnit = _arr[_i];
      var unit = d[timeUnit];
      parts.push(typeof unit === 'undefined' ? 0 : unit);
    }

    return parts;
  }
  /**
   * Return Vega expression for a date time.
   *
   * @param d the date time.
   * @returns the Vega expression.
   */


  function dateTimeToExpr(d) {
    var parts = dateTimeParts(d, true);
    var string = parts.join(', ');

    if (d.utc) {
      return "utc(".concat(string, ")");
    } else {
      return "datetime(".concat(string, ")");
    }
  }
  /**
   * Return Vega expression for a date time expression.
   *
   * @param d the internal date time object with expression.
   * @returns the Vega expression.
   */

  function dateTimeExprToExpr(d) {
    var parts = dateTimeParts(d, false);
    var string = parts.join(', ');

    if (d.utc) {
      return "utc(".concat(string, ")");
    } else {
      return "datetime(".concat(string, ")");
    }
  }
  /**
   * @param d the date time.
   * @returns the timestamp.
   */

  function dateTimeToTimestamp(d) {
    var parts = dateTimeParts(d, true);

    if (d.utc) {
      return +new Date(Date.UTC.apply(Date, _toConsumableArray(parts)));
    } else {
      return +_construct(Date, _toConsumableArray(parts));
    }
  }

  var TimeUnit$1;

  (function (TimeUnit) {
    TimeUnit.YEAR = 'year';
    TimeUnit.MONTH = 'month';
    TimeUnit.DAY = 'day';
    TimeUnit.DATE = 'date';
    TimeUnit.HOURS = 'hours';
    TimeUnit.MINUTES = 'minutes';
    TimeUnit.SECONDS = 'seconds';
    TimeUnit.MILLISECONDS = 'milliseconds';
    TimeUnit.YEARMONTH = 'yearmonth';
    TimeUnit.YEARMONTHDATE = 'yearmonthdate';
    TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';
    TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';
    TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds'; // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);

    TimeUnit.MONTHDATE = 'monthdate';
    TimeUnit.MONTHDATEHOURS = 'monthdatehours';
    TimeUnit.HOURSMINUTES = 'hoursminutes';
    TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';
    TimeUnit.MINUTESSECONDS = 'minutesseconds';
    TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';
    TimeUnit.QUARTER = 'quarter';
    TimeUnit.YEARQUARTER = 'yearquarter';
    TimeUnit.QUARTERMONTH = 'quartermonth';
    TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';
    TimeUnit.UTCYEAR = 'utcyear';
    TimeUnit.UTCMONTH = 'utcmonth';
    TimeUnit.UTCDAY = 'utcday';
    TimeUnit.UTCDATE = 'utcdate';
    TimeUnit.UTCHOURS = 'utchours';
    TimeUnit.UTCMINUTES = 'utcminutes';
    TimeUnit.UTCSECONDS = 'utcseconds';
    TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';
    TimeUnit.UTCYEARMONTH = 'utcyearmonth';
    TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';
    TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';
    TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';
    TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds'; // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);

    TimeUnit.UTCMONTHDATE = 'utcmonthdate';
    TimeUnit.UTCMONTHDATEHOURS = 'utcmonthdatehours';
    TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';
    TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';
    TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';
    TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';
    TimeUnit.UTCQUARTER = 'utcquarter';
    TimeUnit.UTCYEARQUARTER = 'utcyearquarter';
    TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';
    TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';
  })(TimeUnit$1 || (TimeUnit$1 = {}));
  /** Time Unit that only corresponds to only one part of Date objects. */


  var LOCAL_SINGLE_TIMEUNIT_INDEX = {
    year: 1,
    quarter: 1,
    month: 1,
    day: 1,
    date: 1,
    hours: 1,
    minutes: 1,
    seconds: 1,
    milliseconds: 1
  };
  var TIMEUNIT_PARTS = keys$2(LOCAL_SINGLE_TIMEUNIT_INDEX);
  function isLocalSingleTimeUnit(timeUnit) {
    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
  }
  var UTC_SINGLE_TIMEUNIT_INDEX = {
    utcyear: 1,
    utcquarter: 1,
    utcmonth: 1,
    utcday: 1,
    utcdate: 1,
    utchours: 1,
    utcminutes: 1,
    utcseconds: 1,
    utcmilliseconds: 1
  };
  var LOCAL_MULTI_TIMEUNIT_INDEX = {
    yearquarter: 1,
    yearquartermonth: 1,
    yearmonth: 1,
    yearmonthdate: 1,
    yearmonthdatehours: 1,
    yearmonthdatehoursminutes: 1,
    yearmonthdatehoursminutesseconds: 1,
    quartermonth: 1,
    monthdate: 1,
    monthdatehours: 1,
    hoursminutes: 1,
    hoursminutesseconds: 1,
    minutesseconds: 1,
    secondsmilliseconds: 1
  };
  var UTC_MULTI_TIMEUNIT_INDEX = {
    utcyearquarter: 1,
    utcyearquartermonth: 1,
    utcyearmonth: 1,
    utcyearmonthdate: 1,
    utcyearmonthdatehours: 1,
    utcyearmonthdatehoursminutes: 1,
    utcyearmonthdatehoursminutesseconds: 1,
    utcquartermonth: 1,
    utcmonthdate: 1,
    utcmonthdatehours: 1,
    utchoursminutes: 1,
    utchoursminutesseconds: 1,
    utcminutesseconds: 1,
    utcsecondsmilliseconds: 1
  };

  var UTC_TIMEUNIT_INDEX = _extends(_extends({}, UTC_SINGLE_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);

  function isUTCTimeUnit(t) {
    return !!UTC_TIMEUNIT_INDEX[t];
  }
  function getLocalTimeUnit(t) {
    return t.substr(3);
  }

  var TIMEUNIT_INDEX = _extends(_extends(_extends(_extends({}, LOCAL_SINGLE_TIMEUNIT_INDEX), UTC_SINGLE_TIMEUNIT_INDEX), LOCAL_MULTI_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);

  var VEGALITE_TIMEFORMAT = {
    'year-month': '%b %Y ',
    'year-month-date': '%b %d, %Y '
  };
  function getTimeUnitParts(timeUnit) {
    return TIMEUNIT_PARTS.reduce(function (parts, part) {
      if (containsTimeUnit(timeUnit, part)) {
        return [].concat(_toConsumableArray(parts), [part]);
      }

      return parts;
    }, []);
  }
  /** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */

  function containsTimeUnit(fullTimeUnit, timeUnit) {
    var index = fullTimeUnit.indexOf(timeUnit);
    return index > -1 && (timeUnit !== TimeUnit$1.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds
    ;
  }
  /**
   * Returns Vega expresssion for a given timeUnit and fieldRef
   */

  function fieldExpr(fullTimeUnit, field) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      end: false
    },
        end = _ref.end;

    var fieldRef = accessPathWithDatum(field);
    var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';

    function func(timeUnit) {
      if (timeUnit === TimeUnit$1.QUARTER) {
        // quarter starting at 0 (0,3,6,9).
        return "(".concat(utc, "quarter(").concat(fieldRef, ")-1)");
      } else {
        return "".concat(utc).concat(timeUnit, "(").concat(fieldRef, ")");
      }
    }

    var lastTimeUnit;
    var d = TIMEUNIT_PARTS.reduce(function (dateExpr, tu) {
      if (containsTimeUnit(fullTimeUnit, tu)) {
        dateExpr[tu] = func(tu);
        lastTimeUnit = tu;
      }

      return dateExpr;
    }, {});

    if (end) {
      d[lastTimeUnit] += '+1';
    }

    return dateTimeExprToExpr(d);
  }
  function getTimeUnitSpecifierExpression(timeUnit) {
    if (!timeUnit) {
      return undefined;
    }

    var timeUnitParts = getTimeUnitParts(timeUnit);
    return "timeUnitSpecifier(".concat(fastJsonStableStringify(timeUnitParts), ", ").concat(fastJsonStableStringify(VEGALITE_TIMEFORMAT), ")");
  }
  /**
   * returns the signal expression used for axis labels for a time unit
   */

  function formatExpression(timeUnit, field, isUTCScale) {
    if (!timeUnit) {
      return undefined;
    }

    var timeUnitSpecifierExpr = getTimeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale
    // For utc time units, the data is already converted as a part of timeUnit transform.
    // Thus, utc time units should use timeFormat to avoid shifting the time twice.

    if (isUTCScale || isUTCTimeUnit(timeUnit)) {
      return "utcFormat(".concat(field, ", ").concat(timeUnitSpecifierExpr, ")");
    } else {
      return "timeFormat(".concat(field, ", ").concat(timeUnitSpecifierExpr, ")");
    }
  }
  function normalizeTimeUnit(timeUnit) {
    if (!timeUnit) {
      return undefined;
    }

    var params;

    if (isString(timeUnit)) {
      params = {
        unit: correctTimeUnit(timeUnit)
      };
    } else if (isObject(timeUnit)) {
      params = _extends(_extends({}, timeUnit), timeUnit.unit ? {
        unit: correctTimeUnit(timeUnit.unit)
      } : {});
    }

    if (isUTCTimeUnit(params.unit)) {
      params.utc = true;
      params.unit = getLocalTimeUnit(params.unit);
    }

    return params;
  }
  function correctTimeUnit(timeUnit) {
    if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {
      warn$1(message.dayReplacedWithDate(timeUnit));
      return replaceAll(timeUnit, 'day', 'date');
    }

    return timeUnit;
  }
  function timeUnitToString(tu) {
    var _a = normalizeTimeUnit(tu),
        utc = _a.utc,
        rest = __rest(_a, ["utc"]);

    if (rest.unit) {
      return (utc ? 'utc' : '') + keys$2(rest).map(function (p) {
        return varName("".concat(p === 'unit' ? '' : "_".concat(p, "_")).concat(rest[p]));
      }).join('');
    } else {
      // when maxbins is specified instead of units
      return (utc ? 'utc' : '') + 'timeunit' + keys$2(rest).map(function (p) {
        return varName("_".concat(p, "_").concat(rest[p]));
      }).join('');
    }
  }

  function isSignalRef(o) {
    return o && !!o['signal'];
  }
  function isVgRangeStep(range) {
    return !!range['step'];
  }
  function isDataRefUnionedDomain(domain) {
    if (!isArray(domain)) {
      return 'fields' in domain && !('data' in domain);
    }

    return false;
  }
  function isFieldRefUnionDomain(domain) {
    if (!isArray(domain)) {
      return 'fields' in domain && 'data' in domain;
    }

    return false;
  }
  function isDataRefDomain(domain) {
    if (!isArray(domain)) {
      return 'field' in domain && 'data' in domain;
    }

    return false;
  }
  var VG_MARK_CONFIG_INDEX = {
    blend: 1,
    opacity: 1,
    fill: 1,
    fillOpacity: 1,
    stroke: 1,
    strokeCap: 1,
    strokeWidth: 1,
    strokeOpacity: 1,
    strokeDash: 1,
    strokeDashOffset: 1,
    strokeJoin: 1,
    strokeOffset: 1,
    strokeMiterLimit: 1,
    startAngle: 1,
    endAngle: 1,
    padAngle: 1,
    innerRadius: 1,
    outerRadius: 1,
    size: 1,
    shape: 1,
    interpolate: 1,
    tension: 1,
    orient: 1,
    align: 1,
    baseline: 1,
    text: 1,
    dir: 1,
    dx: 1,
    dy: 1,
    ellipsis: 1,
    limit: 1,
    radius: 1,
    theta: 1,
    angle: 1,
    font: 1,
    fontSize: 1,
    fontWeight: 1,
    fontStyle: 1,
    lineBreak: 1,
    lineHeight: 1,
    cursor: 1,
    href: 1,
    tooltip: 1,
    cornerRadius: 1,
    cornerRadiusTopLeft: 1,
    cornerRadiusTopRight: 1,
    cornerRadiusBottomLeft: 1,
    cornerRadiusBottomRight: 1,
    aspect: 1,
    width: 1,
    height: 1 // commented below are vg channel that do not have mark config.
    // x: 1,
    // y: 1,
    // x2: 1,
    // y2: 1,
    // xc'|'yc'
    // clip: 1,
    // path: 1,
    // url: 1,

  };
  var VG_MARK_CONFIGS = keys$2(VG_MARK_CONFIG_INDEX); // Vega's cornerRadius channels.

  var VG_CORNERRADIUS_CHANNELS = ['cornerRadius', 'cornerRadiusTopLeft', 'cornerRadiusTopRight', 'cornerRadiusBottomLeft', 'cornerRadiusBottomRight'];

  function isSelectionPredicate(predicate) {
    return predicate === null || predicate === void 0 ? void 0 : predicate['selection'];
  }
  function isFieldEqualPredicate(predicate) {
    return predicate && !!predicate.field && predicate.equal !== undefined;
  }
  function isFieldLTPredicate(predicate) {
    return predicate && !!predicate.field && predicate.lt !== undefined;
  }
  function isFieldLTEPredicate(predicate) {
    return predicate && !!predicate.field && predicate.lte !== undefined;
  }
  function isFieldGTPredicate(predicate) {
    return predicate && !!predicate.field && predicate.gt !== undefined;
  }
  function isFieldGTEPredicate(predicate) {
    return predicate && !!predicate.field && predicate.gte !== undefined;
  }
  function isFieldRangePredicate(predicate) {
    if (predicate && predicate.field) {
      if (isArray(predicate.range) && predicate.range.length === 2) {
        return true;
      } else if (isSignalRef(predicate.range)) {
        return true;
      }
    }

    return false;
  }
  function isFieldOneOfPredicate(predicate) {
    return predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility
    ;
  }
  function isFieldValidPredicate(predicate) {
    return predicate && !!predicate.field && predicate.valid !== undefined;
  }
  function isFieldPredicate(predicate) {
    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);
  }

  function predicateValueExpr(v, timeUnit) {
    return valueExpr(v, {
      timeUnit: timeUnit,
      time: true
    });
  }

  function predicateValuesExpr(vals, timeUnit) {
    return vals.map(function (v) {
      return predicateValueExpr(v, timeUnit);
    });
  } // This method is used by Voyager. Do not change its behavior without changing Voyager.


  function fieldFilterExpression(predicate) {
    var useInRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var _a;

    var field = predicate.field;
    var timeUnit = (_a = normalizeTimeUnit(predicate.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;
    var fieldExpr$1 = timeUnit ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.
    // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
    // TODO: support utc
    'time(' + fieldExpr(timeUnit, field) + ')' : vgField(predicate, {
      expr: 'datum'
    });

    if (isFieldEqualPredicate(predicate)) {
      return fieldExpr$1 + '===' + predicateValueExpr(predicate.equal, timeUnit);
    } else if (isFieldLTPredicate(predicate)) {
      var upper = predicate.lt;
      return "".concat(fieldExpr$1, "<").concat(predicateValueExpr(upper, timeUnit));
    } else if (isFieldGTPredicate(predicate)) {
      var lower = predicate.gt;
      return "".concat(fieldExpr$1, ">").concat(predicateValueExpr(lower, timeUnit));
    } else if (isFieldLTEPredicate(predicate)) {
      var _upper = predicate.lte;
      return "".concat(fieldExpr$1, "<=").concat(predicateValueExpr(_upper, timeUnit));
    } else if (isFieldGTEPredicate(predicate)) {
      var _lower = predicate.gte;
      return "".concat(fieldExpr$1, ">=").concat(predicateValueExpr(_lower, timeUnit));
    } else if (isFieldOneOfPredicate(predicate)) {
      return "indexof([".concat(predicateValuesExpr(predicate.oneOf, timeUnit).join(','), "], ").concat(fieldExpr$1, ") !== -1");
    } else if (isFieldValidPredicate(predicate)) {
      return fieldValidPredicate(fieldExpr$1, predicate.valid);
    } else if (isFieldRangePredicate(predicate)) {
      var range = predicate.range;

      var _lower2 = isSignalRef(range) ? {
        signal: "".concat(range.signal, "[0]")
      } : range[0];

      var _upper2 = isSignalRef(range) ? {
        signal: "".concat(range.signal, "[1]")
      } : range[1];

      if (_lower2 !== null && _upper2 !== null && useInRange) {
        return 'inrange(' + fieldExpr$1 + ', [' + predicateValueExpr(_lower2, timeUnit) + ', ' + predicateValueExpr(_upper2, timeUnit) + '])';
      }

      var exprs = [];

      if (_lower2 !== null) {
        exprs.push("".concat(fieldExpr$1, " >= ").concat(predicateValueExpr(_lower2, timeUnit)));
      }

      if (_upper2 !== null) {
        exprs.push("".concat(fieldExpr$1, " <= ").concat(predicateValueExpr(_upper2, timeUnit)));
      }

      return exprs.length > 0 ? exprs.join(' && ') : 'true';
    }
    /* istanbul ignore next: it should never reach here */


    throw new Error("Invalid field predicate: ".concat(JSON.stringify(predicate)));
  }
  function fieldValidPredicate(fieldExpr) {
    var valid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (valid) {
      return "isValid(".concat(fieldExpr, ") && isFinite(+").concat(fieldExpr, ")");
    } else {
      return "!isValid(".concat(fieldExpr, ") || !isFinite(+").concat(fieldExpr, ")");
    }
  }
  function normalizePredicate(f) {
    var _a;

    if (isFieldPredicate(f) && f.timeUnit) {
      return _extends(_extends({}, f), {
        timeUnit: (_a = normalizeTimeUnit(f.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit
      });
    }

    return f;
  }

  /** Constants and utilities for data type */

  /** Data type based on level of measurement */
  var TYPE_INDEX = {
    quantitative: 1,
    ordinal: 1,
    temporal: 1,
    nominal: 1,
    geojson: 1
  };
  var QUANTITATIVE = 'quantitative';
  var ORDINAL = 'ordinal';
  var TEMPORAL = 'temporal';
  var NOMINAL = 'nominal';
  var GEOJSON = 'geojson';
  /**
   * Get full, lowercase type name for a given type.
   * @param  type
   * @return Full type name.
   */

  function getFullName(type) {
    if (type) {
      type = type.toLowerCase();

      switch (type) {
        case 'q':
        case QUANTITATIVE:
          return 'quantitative';

        case 't':
        case TEMPORAL:
          return 'temporal';

        case 'o':
        case ORDINAL:
          return 'ordinal';

        case 'n':
        case NOMINAL:
          return 'nominal';

        case GEOJSON:
          return 'geojson';
      }
    } // If we get invalid input, return undefined type.


    return undefined;
  }

  var ScaleType;

  (function (ScaleType) {
    // Continuous - Quantitative
    ScaleType.LINEAR = 'linear';
    ScaleType.LOG = 'log';
    ScaleType.POW = 'pow';
    ScaleType.SQRT = 'sqrt';
    ScaleType.SYMLOG = 'symlog';
    ScaleType.IDENTITY = 'identity';
    ScaleType.SEQUENTIAL = 'sequential'; // Continuous - Time

    ScaleType.TIME = 'time';
    ScaleType.UTC = 'utc'; // Discretizing scales

    ScaleType.QUANTILE = 'quantile';
    ScaleType.QUANTIZE = 'quantize';
    ScaleType.THRESHOLD = 'threshold';
    ScaleType.BIN_ORDINAL = 'bin-ordinal'; // Discrete scales

    ScaleType.ORDINAL = 'ordinal';
    ScaleType.POINT = 'point';
    ScaleType.BAND = 'band';
  })(ScaleType || (ScaleType = {}));
  /**
   * Index for scale categories -- only scale of the same categories can be merged together.
   * Current implementation is trying to be conservative and avoid merging scale type that might not work together
   */


  var SCALE_CATEGORY_INDEX = {
    linear: 'numeric',
    log: 'numeric',
    pow: 'numeric',
    sqrt: 'numeric',
    symlog: 'numeric',
    identity: 'numeric',
    sequential: 'numeric',
    time: 'time',
    utc: 'time',
    ordinal: 'ordinal',
    'bin-ordinal': 'bin-ordinal',
    point: 'ordinal-position',
    band: 'ordinal-position',
    quantile: 'discretizing',
    quantize: 'discretizing',
    threshold: 'discretizing'
  };
  var SCALE_TYPES = keys$2(SCALE_CATEGORY_INDEX);
  /**
   * Whether the two given scale types can be merged together.
   */

  function scaleCompatible(scaleType1, scaleType2) {
    var scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
    var scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
    return scaleCategory1 === scaleCategory2 || scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time' || scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time';
  }
  /**
   * Index for scale precedence -- high score = higher priority for merging.
   */

  var SCALE_PRECEDENCE_INDEX = {
    // numeric
    linear: 0,
    log: 1,
    pow: 1,
    sqrt: 1,
    symlog: 1,
    identity: 1,
    sequential: 1,
    // time
    time: 0,
    utc: 0,
    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
    point: 10,
    band: 11,
    // non grouped types
    ordinal: 0,
    'bin-ordinal': 0,
    quantile: 0,
    quantize: 0,
    threshold: 0
  };
  /**
   * Return scale categories -- only scale of the same categories can be merged together.
   */

  function scaleTypePrecedence(scaleType) {
    return SCALE_PRECEDENCE_INDEX[scaleType];
  }
  var CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];
  var CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);
  var QUANTITATIVE_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog'];
  var QUANTITATIVE_SCALES_INDEX = toSet(QUANTITATIVE_SCALES);
  function isQuantitative(type) {
    return type in QUANTITATIVE_SCALES_INDEX;
  }
  var CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];
  var CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);
  var CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['quantile', 'quantize', 'threshold', 'sequential', 'identity']);
  var CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);
  var DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];
  var DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);
  function hasDiscreteDomain(type) {
    return type in DISCRETE_DOMAIN_INDEX;
  }
  function hasContinuousDomain(type) {
    return type in CONTINUOUS_DOMAIN_INDEX;
  }
  function isContinuousToContinuous(type) {
    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;
  }
  function isContinuousToDiscrete(type) {
    return type in CONTINUOUS_TO_DISCRETE_INDEX;
  }
  var defaultScaleConfig = {
    pointPadding: 0.5,
    barBandPaddingInner: 0.1,
    rectBandPaddingInner: 0,
    minBandSize: 2,
    minFontSize: 8,
    maxFontSize: 40,
    minOpacity: 0.3,
    maxOpacity: 0.8,
    // FIXME: revise if these *can* become ratios of width/height step
    minSize: 9,
    minStrokeWidth: 1,
    maxStrokeWidth: 4,
    quantileCount: 4,
    quantizeCount: 4
  };
  function isExtendedScheme(scheme) {
    return !isString(scheme) && !!scheme['name'];
  }
  function isSelectionDomain(domain) {
    return domain === null || domain === void 0 ? void 0 : domain['selection'];
  }
  function isDomainUnionWith(domain) {
    return domain && domain['unionWith'];
  }
  var SCALE_PROPERTY_INDEX = {
    type: 1,
    domain: 1,
    domainMid: 1,
    align: 1,
    range: 1,
    scheme: 1,
    bins: 1,
    // Other properties
    reverse: 1,
    round: 1,
    // quantitative / time
    clamp: 1,
    nice: 1,
    // quantitative
    base: 1,
    exponent: 1,
    constant: 1,
    interpolate: 1,
    zero: 1,
    // band/point
    padding: 1,
    paddingInner: 1,
    paddingOuter: 1
  };

  var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = __rest(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "scheme"]);

  var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys$2(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
  var SCALE_TYPE_INDEX = generateScaleTypeIndex();
  function scaleTypeSupportProperty(scaleType, propName) {
    switch (propName) {
      case 'type':
      case 'domain':
      case 'reverse':
      case 'range':
        return true;

      case 'scheme':
      case 'interpolate':
        return !contains$1(['point', 'band', 'identity'], scaleType);

      case 'bins':
        return !contains$1(['point', 'band', 'identity', 'ordinal'], scaleType);

      case 'round':
        return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';

      case 'padding':
        return isContinuousToContinuous(scaleType) || contains$1(['point', 'band'], scaleType);

      case 'paddingOuter':
      case 'align':
        return contains$1(['point', 'band'], scaleType);

      case 'paddingInner':
        return scaleType === 'band';

      case 'domainMid':
      case 'clamp':
        return isContinuousToContinuous(scaleType);

      case 'nice':
        return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';

      case 'exponent':
        return scaleType === 'pow';

      case 'base':
        return scaleType === 'log';

      case 'constant':
        return scaleType === 'symlog';

      case 'zero':
        return hasContinuousDomain(scaleType) && !contains$1(['log', 'time', 'utc', 'threshold', 'quantile' // quantile depends on distribution so zero does not matter
        ], scaleType);
    }
  }
  /**
   * Returns undefined if the input channel supports the input scale property name
   */

  function channelScalePropertyIncompatability(channel, propName) {
    switch (propName) {
      case 'interpolate':
      case 'scheme':
      case 'domainMid':
        if (!isColorChannel(channel)) {
          return message.cannotUseScalePropertyWithNonColor(channel);
        }

        return undefined;

      case 'align':
      case 'type':
      case 'bins':
      case 'domain':
      case 'range':
      case 'base':
      case 'exponent':
      case 'constant':
      case 'nice':
      case 'padding':
      case 'paddingInner':
      case 'paddingOuter':
      case 'reverse':
      case 'round':
      case 'clamp':
      case 'zero':
        return undefined;
      // GOOD!
    }
  }
  function scaleTypeSupportDataType(specifiedType, fieldDefType) {
    if (contains$1([ORDINAL, NOMINAL], fieldDefType)) {
      return specifiedType === undefined || hasDiscreteDomain(specifiedType);
    } else if (fieldDefType === TEMPORAL) {
      return contains$1([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);
    } else if (fieldDefType === QUANTITATIVE) {
      return contains$1([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.LINEAR, undefined], specifiedType);
    }

    return true;
  }
  function channelSupportScaleType(channel, scaleType) {
    if (!isScaleChannel(channel)) {
      return false;
    }

    switch (channel) {
      case X$1:
      case Y$1:
      case THETA:
      case RADIUS:
        return isContinuousToContinuous(scaleType) || contains$1(['band', 'point'], scaleType);

      case SIZE: // TODO: size and opacity can support ordinal with more modification

      case STROKEWIDTH:
      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
      case ANGLE:
        // Although it generally doesn't make sense to use band with size and opacity,
        // it can also work since we use band: 0.5 to get midpoint.
        return isContinuousToContinuous(scaleType) || isContinuousToDiscrete(scaleType) || contains$1(['band', 'point', 'ordinal'], scaleType);

      case COLOR:
      case FILL:
      case STROKE:
        return scaleType !== 'band';
      // band does not make sense with color

      case STROKEDASH:
        return scaleType === 'ordinal' || isContinuousToDiscrete(scaleType);

      case SHAPE:
        return scaleType === 'ordinal';
      // shape = lookup only
    }
  }

  function generateScaleTypeIndex() {
    var _a;

    var index = {};

    var _iterator = _createForOfIteratorHelper(CHANNELS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;

        var _iterator2 = _createForOfIteratorHelper(keys$2(TYPE_INDEX)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var fieldDefType = _step2.value;

            var _iterator3 = _createForOfIteratorHelper(SCALE_TYPES),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var scaleType = _step3.value;
                var key = generateScaleTypeIndexKey(channel, fieldDefType);

                if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {
                  index[key] = (_a = index[key]) !== null && _a !== void 0 ? _a : [];
                  index[key].push(scaleType);
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return index;
  }

  function generateScaleTypeIndexKey(channel, fieldDefType) {
    return channel + '_' + fieldDefType;
  }

  function midPointRefWithPositionInvalidTest(params) {
    var channel = params.channel,
        channelDef = params.channelDef,
        markDef = params.markDef,
        scale = params.scale,
        config = params.config;
    var ref = midPoint(params); // Wrap to check if the positional value is invalid, if so, plot the point on the min value

    if ( // Only this for field def without counting aggregate (as count wouldn't be null)
    isFieldDef(channelDef) && !isCountingAggregateOp(channelDef.aggregate) && // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)
    scale && isContinuousToContinuous(scale.get('type')) && scale.get('zero') === false) {
      return wrapPositionInvalidTest({
        fieldDef: channelDef,
        channel: channel,
        markDef: markDef,
        ref: ref,
        config: config
      });
    }

    return ref;
  }
  function wrapPositionInvalidTest(_ref) {
    var fieldDef = _ref.fieldDef,
        channel = _ref.channel,
        markDef = _ref.markDef,
        ref = _ref.ref,
        config = _ref.config;

    if (isPathMark(markDef.type)) {
      // path mark already use defined to skip points, no need to do it here.
      return ref;
    }

    var invalid = getMarkPropOrConfig('invalid', markDef, config);

    if (invalid === null) {
      // if there is no invalid filter, don't do the invalid test
      return ref;
    }

    return [fieldInvalidTestValueRef(fieldDef, channel), ref];
  }
  function fieldInvalidTestValueRef(fieldDef, channel) {
    var test = fieldInvalidPredicate(fieldDef, true);
    var mainChannel = getMainRangeChannel(channel); // we can cast here as the output can't be other things.

    var zeroValueRef = mainChannel === 'y' ? {
      field: {
        group: 'height'
      }
    } : // x / angle / radius can all use 0
    {
      value: 0
    };
    return _extends({
      test: test
    }, zeroValueRef);
  }
  function fieldInvalidPredicate(field) {
    var invalid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return fieldValidPredicate(isString(field) ? field : vgField(field, {
      expr: 'datum'
    }), !invalid);
  }
  function datumDefToExpr(datumDef) {
    var datum = datumDef.datum;

    if (isDateTime(datum)) {
      return dateTimeToExpr(datum);
    }

    return "".concat(JSON.stringify(datum));
  }
  function valueRefForFieldOrDatumDef(fieldDef, scaleName, opt, encode) {
    var ref = {};

    if (scaleName) {
      ref.scale = scaleName;
    }

    if (isDatumDef(fieldDef)) {
      var datum = fieldDef.datum;

      if (isDateTime(datum)) {
        ref.signal = dateTimeToExpr(datum);
      } else {
        ref.value = datum;
      }
    } else {
      ref.field = vgField(fieldDef, opt);
    }

    if (encode) {
      var offset = encode.offset,
          band = encode.band;

      if (offset) {
        ref.offset = offset;
      }

      if (band) {
        ref.band = band;
      }
    }

    return ref;
  }
  /**
   * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.
   */

  function interpolatedSignalRef(_ref2) {
    var scaleName = _ref2.scaleName,
        fieldOrDatumDef = _ref2.fieldOrDatumDef,
        fieldOrDatumDef2 = _ref2.fieldOrDatumDef2,
        offset = _ref2.offset,
        startSuffix = _ref2.startSuffix,
        _ref2$band = _ref2.band,
        band = _ref2$band === void 0 ? 0.5 : _ref2$band;
    var expr = 0 < band && band < 1 ? 'datum' : undefined;
    var start = vgField(fieldOrDatumDef, {
      expr: expr,
      suffix: startSuffix
    });
    var end = fieldOrDatumDef2 !== undefined ? vgField(fieldOrDatumDef2, {
      expr: expr
    }) : vgField(fieldOrDatumDef, {
      suffix: 'end',
      expr: expr
    });
    var ref = {};

    if (band === 0 || band === 1) {
      ref.scale = scaleName;
      var val = band === 0 ? start : end;
      ref.field = val;
    } else {
      var datum = "".concat(band, " * ").concat(start, " + ").concat(1 - band, " * ").concat(end);
      ref.signal = "scale(\"".concat(scaleName, "\", ").concat(datum, ")");
    }

    if (offset) {
      ref.offset = offset;
    }

    return ref;
  }
  /**
   * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.
   */

  function midPoint(_ref3) {
    var channel = _ref3.channel,
        channelDef = _ref3.channelDef,
        channel2Def = _ref3.channel2Def,
        markDef = _ref3.markDef,
        config = _ref3.config,
        scaleName = _ref3.scaleName,
        scale = _ref3.scale,
        stack = _ref3.stack,
        offset = _ref3.offset,
        defaultRef = _ref3.defaultRef,
        band = _ref3.band;

    var _a; // TODO: datum support


    if (channelDef) {
      /* istanbul ignore else */
      if (isFieldOrDatumDef(channelDef)) {
        if (isTypedFieldDef(channelDef)) {
          band = band !== null && band !== void 0 ? band : getBand({
            channel: channel,
            fieldDef: channelDef,
            fieldDef2: channel2Def,
            markDef: markDef,
            stack: stack,
            config: config,
            isMidPoint: true
          });
          var bin = channelDef.bin,
              timeUnit = channelDef.timeUnit,
              type = channelDef.type;

          if (isBinning(bin) || band && timeUnit && type === TEMPORAL) {
            // Use middle only for x an y to place marks in the center between start and end of the bin range.
            // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
            if (stack && stack.impute) {
              // For stack, we computed bin_mid so we can impute.
              return valueRefForFieldOrDatumDef(channelDef, scaleName, {
                binSuffix: 'mid'
              }, {
                offset: offset
              });
            }

            if (band) {
              // if band = 0, no need to call interpolation
              // For non-stack, we can just calculate bin mid on the fly using signal.
              return interpolatedSignalRef({
                scaleName: scaleName,
                fieldOrDatumDef: channelDef,
                band: band,
                offset: offset
              });
            }

            return valueRefForFieldOrDatumDef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {
              binSuffix: 'range'
            } : {}, {
              offset: offset
            });
          } else if (isBinned(bin)) {
            if (isFieldDef(channel2Def)) {
              return interpolatedSignalRef({
                scaleName: scaleName,
                fieldOrDatumDef: channelDef,
                fieldOrDatumDef2: channel2Def,
                band: band,
                offset: offset
              });
            } else {
              var channel2 = channel === X$1 ? X2$2 : Y2$2;
              warn$1(message.channelRequiredForBinned(channel2));
            }
          }
        }

        var scaleType = scale === null || scale === void 0 ? void 0 : scale.get('type');
        return valueRefForFieldOrDatumDef(channelDef, scaleName, hasDiscreteDomain(scaleType) ? {
          binSuffix: 'range'
        } : {}, // no need for bin suffix if there is no scale
        {
          offset: offset,
          // For band, to get mid point, need to offset by half of the band
          band: scaleType === 'band' ? (_a = band !== null && band !== void 0 ? band : channelDef.band) !== null && _a !== void 0 ? _a : 0.5 : undefined
        });
      } else if (isValueDef(channelDef)) {
        var value = channelDef.value;
        var offsetMixins = offset ? {
          offset: offset
        } : {};
        return _extends(_extends({}, widthHeightValueOrSignalRef(channel, value)), offsetMixins);
      } else if (isSignalRef(channelDef)) {
        return channelDef;
      } // If channelDef is neither field def or value def, it's a condition-only def.
      // In such case, we will use default ref.

    }

    if (isFunction(defaultRef)) {
      defaultRef = defaultRef();
    }

    if (defaultRef) {
      // for non-position, ref could be undefined.
      return _extends(_extends({}, defaultRef), offset ? {
        offset: offset
      } : {});
    }

    return defaultRef;
  }
  /**
   * Convert special "width" and "height" values in Vega-Lite into Vega value ref.
   */

  function widthHeightValueOrSignalRef(channel, value) {
    if (contains$1(['x', 'x2'], channel) && value === 'width') {
      return {
        field: {
          group: 'width'
        }
      };
    } else if (contains$1(['y', 'y2'], channel) && value === 'height') {
      return {
        field: {
          group: 'height'
        }
      };
    }

    return signalOrValueRef(value);
  }

  var BIN_RANGE_DELIMITER = " \u2013 ";
  var customFormatTypeIndex = new Set();
  function setCustomFormatTypes(formatTypes) {
    customFormatTypeIndex = new Set(formatTypes);
  }
  function isCustomFormatType(formatType) {
    return formatType && formatType !== 'number' && formatType !== 'time' && customFormatTypeIndex.has(formatType);
  }

  function customFormatExpr(_ref) {
    var formatType = _ref.formatType,
        field = _ref.field,
        format = _ref.format;
    return "".concat(formatType, "(").concat(field, ", ").concat(JSON.stringify(format), ")");
  }

  function formatSignalRef(_ref2) {
    var fieldOrDatumDef = _ref2.fieldOrDatumDef,
        format = _ref2.format,
        formatType = _ref2.formatType,
        expr = _ref2.expr,
        normalizeStack = _ref2.normalizeStack,
        config = _ref2.config,
        field = _ref2.field,
        omitNumberFormatAndEmptyTimeFormat = _ref2.omitNumberFormatAndEmptyTimeFormat,
        omitTimeFormatConfig = _ref2.omitTimeFormatConfig,
        isUTCScale = _ref2.isUTCScale;

    var _a, _b;

    if (!field) {
      if (isFieldDef(fieldOrDatumDef)) {
        if (normalizeStack) {
          field = "".concat(vgField(fieldOrDatumDef, {
            expr: expr,
            suffix: 'end'
          }), "-").concat(vgField(fieldOrDatumDef, {
            expr: expr,
            suffix: 'start'
          }));
        } else {
          field = vgField(fieldOrDatumDef, {
            expr: expr
          });
        }
      } else {
        field = datumDefToExpr(fieldOrDatumDef);
      }
    }

    isUTCScale = isUTCScale !== null && isUTCScale !== void 0 ? isUTCScale : isScaleFieldDef(fieldOrDatumDef) && ((_a = fieldOrDatumDef.scale) === null || _a === void 0 ? void 0 : _a.type) === ScaleType.UTC;
    var defaultTimeFormat = omitTimeFormatConfig ? null : config.timeFormat;

    if (isCustomFormatType(formatType)) {
      if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
        var endField = vgField(fieldOrDatumDef, {
          expr: expr,
          binSuffix: 'end'
        });
        return {
          signal: binFormatExpression(field, endField, format, formatType, config)
        };
      }

      return {
        signal: customFormatExpr({
          formatType: formatType,
          format: format,
          field: field
        })
      };
    } else if (formatType) {
      formatType = undefined; // drop unregistered custom formatType
    }

    if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
      var signal = timeFormatExpression(field, isFieldDef(fieldOrDatumDef) ? (_b = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _b === void 0 ? void 0 : _b.unit : undefined, format, defaultTimeFormat, isUTCScale, !omitNumberFormatAndEmptyTimeFormat);
      return signal ? {
        signal: signal
      } : undefined;
    } else if (!omitNumberFormatAndEmptyTimeFormat) {
      format = numberFormat(channelDefType(fieldOrDatumDef), format, config);

      if (isFieldDef(fieldOrDatumDef) && isBinning(fieldOrDatumDef.bin)) {
        var _endField = vgField(fieldOrDatumDef, {
          expr: expr,
          binSuffix: 'end'
        });

        return {
          signal: binFormatExpression(field, _endField, format, formatType, config)
        };
      } else if (format || channelDefType(fieldOrDatumDef) === 'quantitative') {
        return {
          signal: "".concat(formatExpr(field, format))
        };
      } else {
        return {
          signal: "isValid(".concat(field, ") ? ").concat(field, " : \"\"+").concat(field)
        };
      }
    }

    return undefined;
  }
  /**
   * Returns number format for a fieldDef
   */

  function numberFormat(type, specifiedFormat, config) {
    // Specified format in axis/legend has higher precedence than fieldDef.format
    if (isString(specifiedFormat)) {
      return specifiedFormat;
    }

    if (type === QUANTITATIVE) {
      // we only apply the default if the field is quantitative
      return config.numberFormat;
    }

    return undefined;
  }

  function formatExpr(field, format) {
    return "format(".concat(field, ", \"").concat(format || '', "\")");
  }

  function binNumberFormatExpr(field, format, formatType, config) {
    var _a;

    if (isCustomFormatType(formatType)) {
      return customFormatExpr({
        formatType: formatType,
        field: field,
        format: format
      });
    }

    return formatExpr(field, (_a = isString(format) ? format : undefined) !== null && _a !== void 0 ? _a : config.numberFormat);
  }

  function binFormatExpression(startField, endField, format, formatType, config) {
    var start = binNumberFormatExpr(startField, format, formatType, config);
    var end = binNumberFormatExpr(endField, format, formatType, config);
    return "".concat(fieldValidPredicate(startField, false), " ? \"null\" : ").concat(start, " + \"").concat(BIN_RANGE_DELIMITER, "\" + ").concat(end);
  }
  /**
   * Returns the time expression used for axis/legend labels or text mark for a temporal field
   */

  function timeFormatExpression(field, timeUnit, format, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels
  isUTCScale) {
    var alwaysReturn = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    if (!timeUnit || format) {
      // If there is not time unit, or if user explicitly specify format for axis/legend/text.
      format = isString(format) ? format : rawTimeFormat; // only use provided timeFormat if there is no timeUnit.

      if (format || alwaysReturn) {
        return "".concat(isUTCScale ? 'utc' : 'time', "Format(").concat(field, ", '").concat(format, "')");
      } else {
        return undefined;
      }
    } else {
      return formatExpression(timeUnit, field, isUTCScale);
    }
  }

  var DEFAULT_SORT_OP = 'min';
  var SORT_BY_CHANNEL_INDEX = {
    x: 1,
    y: 1,
    color: 1,
    fill: 1,
    stroke: 1,
    strokeWidth: 1,
    size: 1,
    shape: 1,
    fillOpacity: 1,
    strokeOpacity: 1,
    opacity: 1,
    text: 1
  };
  function isSortByChannel(c) {
    return !!SORT_BY_CHANNEL_INDEX[c];
  }
  function isSortByEncoding(sort) {
    return !!sort && !!sort['encoding'];
  }
  function isSortField(sort) {
    return !!sort && (sort['op'] === 'count' || !!sort['field']);
  }
  function isSortArray(sort) {
    return !!sort && isArray(sort);
  }

  function isFacetMapping(f) {
    return 'row' in f || 'column' in f;
  }
  function isFacetFieldDef(channelDef) {
    return !!channelDef && 'header' in channelDef;
  }
  function isFacetSpec(spec) {
    return 'facet' in spec;
  }

  function isConditionalSelection(c) {
    return c['selection'];
  }
  function isRepeatRef(field) {
    return field && !isString(field) && 'repeat' in field;
  }
  function toFieldDefBase(fieldDef) {
    var field = fieldDef.field,
        timeUnit = fieldDef.timeUnit,
        bin = fieldDef.bin,
        aggregate = fieldDef.aggregate;
    return _extends(_extends(_extends(_extends({}, timeUnit ? {
      timeUnit: timeUnit
    } : {}), bin ? {
      bin: bin
    } : {}), aggregate ? {
      aggregate: aggregate
    } : {}), {
      field: field
    });
  }
  function isSortableFieldDef(fieldDef) {
    return isTypedFieldDef(fieldDef) && 'sort' in fieldDef;
  }
  function getBand(_ref) {
    var channel = _ref.channel,
        fieldDef = _ref.fieldDef,
        fieldDef2 = _ref.fieldDef2,
        mark = _ref.markDef,
        stack = _ref.stack,
        config = _ref.config,
        isMidPoint = _ref.isMidPoint;

    if (isFieldOrDatumDef(fieldDef) && fieldDef.band !== undefined) {
      return fieldDef.band;
    }

    if (isFieldDef(fieldDef)) {
      var timeUnit = fieldDef.timeUnit,
          bin = fieldDef.bin;

      if (timeUnit && !fieldDef2) {
        if (isMidPoint) {
          return getMarkConfig('timeUnitBandPosition', mark, config);
        } else {
          return isRectBasedMark(mark.type) ? getMarkConfig('timeUnitBand', mark, config) : 0;
        }
      } else if (isBinning(bin)) {
        return isRectBasedMark(mark.type) && !isMidPoint ? 1 : 0.5;
      }
    }

    if ((stack === null || stack === void 0 ? void 0 : stack.fieldChannel) === channel && isMidPoint) {
      return 0.5;
    }

    return undefined;
  }
  function hasBand(channel, fieldDef, fieldDef2, stack, markDef, config) {
    if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal') {
      return !!getBand({
        channel: channel,
        fieldDef: fieldDef,
        fieldDef2: fieldDef2,
        stack: stack,
        markDef: markDef,
        config: config
      });
    }

    return false;
  }
  function isConditionalDef(channelDef) {
    return !!channelDef && 'condition' in channelDef;
  }
  /**
   * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef
   */

  function hasConditionalFieldDef(channelDef) {
    var condition = channelDef && channelDef['condition'];
    return !!condition && !isArray(condition) && isFieldDef(condition);
  }
  function hasConditionalFieldOrDatumDef(channelDef) {
    var condition = channelDef && channelDef['condition'];
    return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);
  }
  function hasConditionalValueDef(channelDef) {
    var condition = channelDef && channelDef['condition'];
    return !!condition && (isArray(condition) || isValueDef(condition));
  }
  function isFieldDef(channelDef) {
    // TODO: we can't use field in channelDef here as it's somehow failing runtime test
    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');
  }
  function channelDefType(channelDef) {
    return channelDef && channelDef['type'];
  }
  function isDatumDef(channelDef) {
    return !!channelDef && 'datum' in channelDef;
  }
  function isContinuousFieldOrDatumDef(cd) {
    // TODO: make datum support DateTime object
    return isTypedFieldDef(cd) && isContinuous$1(cd) || isNumericDataDef(cd);
  }
  function isNumericDataDef(cd) {
    return isDatumDef(cd) && isNumber(cd.datum);
  }
  function isFieldOrDatumDef(channelDef) {
    return isFieldDef(channelDef) || isDatumDef(channelDef);
  }
  function isTypedFieldDef(channelDef) {
    return !!channelDef && ('field' in channelDef && 'type' in channelDef || channelDef['aggregate'] === 'count');
  }
  function isValueDef(channelDef) {
    return channelDef && 'value' in channelDef && 'value' in channelDef;
  }
  function isScaleFieldDef(channelDef) {
    return !!channelDef && ('scale' in channelDef || 'sort' in channelDef);
  }
  function isPositionFieldOrDatumDef(channelDef) {
    return channelDef && ('axis' in channelDef || 'stack' in channelDef || 'impute' in channelDef);
  }
  function isMarkPropFieldOrDatumDef(channelDef) {
    return !!channelDef && 'legend' in channelDef;
  }
  function isTextFieldDef(channelDef) {
    return !!channelDef && 'format' in channelDef;
  }

  function isOpFieldDef(fieldDef) {
    return 'op' in fieldDef;
  }
  /**
   * Get a Vega field reference from a Vega-Lite field def.
   */


  function vgField(fieldDef) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _a, _b, _c;

    var field = fieldDef.field;
    var prefix = opt.prefix;
    var suffix = opt.suffix;
    var argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped

    if (isCount(fieldDef)) {
      field = internalField('count');
    } else {
      var fn;

      if (!opt.nofn) {
        if (isOpFieldDef(fieldDef)) {
          fn = fieldDef.op;
        } else {
          var bin = fieldDef.bin,
              aggregate = fieldDef.aggregate,
              timeUnit = fieldDef.timeUnit;

          if (isBinning(bin)) {
            fn = binToString(bin);
            suffix = ((_a = opt.binSuffix) !== null && _a !== void 0 ? _a : '') + ((_b = opt.suffix) !== null && _b !== void 0 ? _b : '');
          } else if (aggregate) {
            if (isArgmaxDef(aggregate)) {
              argAccessor = ".".concat(field);
              field = "argmax_".concat(aggregate.argmax);
            } else if (isArgminDef(aggregate)) {
              argAccessor = ".".concat(field);
              field = "argmin_".concat(aggregate.argmin);
            } else {
              fn = String(aggregate);
            }
          } else if (timeUnit) {
            fn = timeUnitToString(timeUnit);
            suffix = (!contains$1(['range', 'mid'], opt.binSuffix) && opt.binSuffix || '') + ((_c = opt.suffix) !== null && _c !== void 0 ? _c : '');
          }
        }
      }

      if (fn) {
        field = field ? "".concat(fn, "_").concat(field) : fn;
      }
    }

    if (suffix) {
      field = "".concat(field, "_").concat(suffix);
    }

    if (prefix) {
      field = "".concat(prefix, "_").concat(field);
    }

    if (opt.forAs) {
      return field;
    } else if (opt.expr) {
      // Expression to access flattened field. No need to escape dots.
      return flatAccessWithDatum(field, opt.expr) + argAccessor;
    } else {
      // We flattened all fields so paths should have become dot.
      return replacePathInField(field) + argAccessor;
    }
  }
  function isDiscrete$1(def) {
    switch (def.type) {
      case 'nominal':
      case 'ordinal':
      case 'geojson':
        return true;

      case 'quantitative':
        return isFieldDef(def) && !!def.bin;

      case 'temporal':
        return false;
    }

    throw new Error(message.invalidFieldType(def.type));
  }
  function isContinuous$1(fieldDef) {
    return !isDiscrete$1(fieldDef);
  }
  function isCount(fieldDef) {
    return fieldDef.aggregate === 'count';
  }
  function verbalTitleFormatter(fieldDef, config) {
    var _a;

    var field = fieldDef.field,
        bin = fieldDef.bin,
        timeUnit = fieldDef.timeUnit,
        aggregate = fieldDef.aggregate;

    if (aggregate === 'count') {
      return config.countTitle;
    } else if (isBinning(bin)) {
      return "".concat(field, " (binned)");
    } else if (timeUnit) {
      var unit = (_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;

      if (unit) {
        return "".concat(field, " (").concat(getTimeUnitParts(unit).join('-'), ")");
      }
    } else if (aggregate) {
      if (isArgmaxDef(aggregate)) {
        return "".concat(field, " for max ").concat(aggregate.argmax);
      } else if (isArgminDef(aggregate)) {
        return "".concat(field, " for min ").concat(aggregate.argmin);
      } else {
        return "".concat(titlecase(aggregate), " of ").concat(field);
      }
    }

    return field;
  }
  function functionalTitleFormatter(fieldDef) {
    var aggregate = fieldDef.aggregate,
        bin = fieldDef.bin,
        timeUnit = fieldDef.timeUnit,
        field = fieldDef.field;

    if (isArgmaxDef(aggregate)) {
      return "".concat(field, " for argmax(").concat(aggregate.argmax, ")");
    } else if (isArgminDef(aggregate)) {
      return "".concat(field, " for argmin(").concat(aggregate.argmin, ")");
    }

    var timeUnitParams = normalizeTimeUnit(timeUnit);
    var fn = aggregate || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.unit) || (timeUnitParams === null || timeUnitParams === void 0 ? void 0 : timeUnitParams.maxbins) && 'timeunit' || isBinning(bin) && 'bin';

    if (fn) {
      return fn.toUpperCase() + '(' + field + ')';
    } else {
      return field;
    }
  }
  var defaultTitleFormatter = function defaultTitleFormatter(fieldDef, config) {
    switch (config.fieldTitle) {
      case 'plain':
        return fieldDef.field;

      case 'functional':
        return functionalTitleFormatter(fieldDef);

      default:
        return verbalTitleFormatter(fieldDef, config);
    }
  };
  var titleFormatter = defaultTitleFormatter;
  function setTitleFormatter(formatter) {
    titleFormatter = formatter;
  }
  function resetTitleFormatter() {
    setTitleFormatter(defaultTitleFormatter);
  }
  function title(fieldOrDatumDef, config, _ref2) {
    var allowDisabling = _ref2.allowDisabling,
        _ref2$includeDefault = _ref2.includeDefault,
        includeDefault = _ref2$includeDefault === void 0 ? true : _ref2$includeDefault;

    var _a, _b;

    var guide = (_a = getGuide(fieldOrDatumDef)) !== null && _a !== void 0 ? _a : {};
    var guideTitle = guide.title;

    if (!isFieldDef(fieldOrDatumDef)) {
      return guideTitle;
    }

    var fieldDef = fieldOrDatumDef;
    var def = includeDefault ? defaultTitle(fieldDef, config) : undefined;

    if (allowDisabling) {
      return getFirstDefined(guideTitle, fieldDef.title, def);
    } else {
      return (_b = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title) !== null && _b !== void 0 ? _b : def;
    }
  }
  function getGuide(fieldDef) {
    if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {
      return fieldDef.axis;
    } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {
      return fieldDef.legend;
    } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {
      return fieldDef.header;
    }

    return undefined;
  }
  function defaultTitle(fieldDef, config) {
    return titleFormatter(fieldDef, config);
  }
  function getFormatMixins(fieldDef) {
    var _a;

    if (isTextFieldDef(fieldDef)) {
      var format = fieldDef.format,
          formatType = fieldDef.formatType;
      return {
        format: format,
        formatType: formatType
      };
    } else {
      var guide = (_a = getGuide(fieldDef)) !== null && _a !== void 0 ? _a : {};
      var _format = guide.format,
          _formatType = guide.formatType;
      return {
        format: _format,
        formatType: _formatType
      };
    }
  }
  function defaultType(fieldDef, channel) {
    if (fieldDef.timeUnit) {
      return 'temporal';
    }

    if (isBinning(fieldDef.bin)) {
      return 'quantitative';
    }

    switch (rangeType(channel)) {
      case 'continuous':
        return 'quantitative';

      case 'discrete':
        return 'nominal';

      case 'flexible':
        // color
        return 'nominal';

      default:
        return 'quantitative';
    }
  }
  /**
   * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.
   * @param channelDef
   */

  function getFieldDef(channelDef) {
    if (isFieldDef(channelDef)) {
      return channelDef;
    } else if (hasConditionalFieldDef(channelDef)) {
      return channelDef.condition;
    }

    return undefined;
  }
  function getFieldOrDatumDef(channelDef) {
    if (isFieldOrDatumDef(channelDef)) {
      return channelDef;
    } else if (hasConditionalFieldOrDatumDef(channelDef)) {
      return channelDef.condition;
    }

    return undefined;
  }
  /**
   * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
   */

  function initChannelDef(channelDef, channel) {
    if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {
      var primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';
      warn$1(message.primitiveChannelDef(channel, primitiveType, channelDef));
      return {
        value: channelDef
      };
    } // If a fieldDef contains a field, we need type.


    if (isFieldOrDatumDef(channelDef)) {
      return initFieldOrDatumDef(channelDef, channel);
    } else if (hasConditionalFieldOrDatumDef(channelDef)) {
      return _extends(_extends({}, channelDef), {
        // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
        condition: initFieldOrDatumDef(channelDef.condition, channel)
      });
    }

    return channelDef;
  }
  function initFieldOrDatumDef(fd, channel) {
    if (isFieldDef(fd)) {
      return initFieldDef(fd, channel);
    }

    return initDatumDef(fd);
  }

  function initDatumDef(datumDef) {
    var type = datumDef['type'];

    if (type) {
      return datumDef;
    }

    var datum = datumDef.datum;
    type = isNumber(datum) ? 'quantitative' : isString(datum) ? 'nominal' : isDateTime(datum) ? 'temporal' : undefined;
    return _extends(_extends({}, datumDef), {
      type: type
    });
  }

  function initFieldDef(fd, channel) {
    var aggregate = fd.aggregate,
        timeUnit = fd.timeUnit,
        bin = fd.bin,
        field = fd.field;

    var fieldDef = _extends({}, fd); // Drop invalid aggregate


    if (aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {
      warn$1(message.invalidAggregate(aggregate));
      delete fieldDef.aggregate;
    } // Normalize Time Unit


    if (timeUnit) {
      fieldDef.timeUnit = normalizeTimeUnit(timeUnit);
    }

    if (field) {
      fieldDef.field = "".concat(field);
    } // Normalize bin


    if (isBinning(bin)) {
      fieldDef.bin = normalizeBin(bin, channel);
    }

    if (isBinned(bin) && !contains$1(POSITION_SCALE_CHANNELS, channel)) {
      warn$1("Channel ".concat(channel, " should not be used with \"binned\" bin."));
    } // Normalize Type


    if (isTypedFieldDef(fieldDef)) {
      var type = fieldDef.type;
      var fullType = getFullName(type);

      if (type !== fullType) {
        // convert short type to full type
        fieldDef.type = fullType;
      }

      if (type !== 'quantitative') {
        if (isCountingAggregateOp(aggregate)) {
          warn$1(message.invalidFieldTypeForCountAggregate(type, aggregate));
          fieldDef.type = 'quantitative';
        }
      }
    } else if (!isSecondaryRangeChannel(channel)) {
      // If type is empty / invalid, then augment with default type
      var newType = defaultType(fieldDef, channel);
      warn$1(message.missingFieldType(channel, newType));
      fieldDef['type'] = newType;
    }

    if (isTypedFieldDef(fieldDef)) {
      var _channelCompatibility = channelCompatibility(fieldDef, channel),
          compatible = _channelCompatibility.compatible,
          warning = _channelCompatibility.warning;

      if (!compatible) {
        warn$1(warning);
      }
    }

    if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {
      var sort = fieldDef.sort;

      if (isSortByChannel(sort)) {
        return _extends(_extends({}, fieldDef), {
          sort: {
            encoding: sort
          }
        });
      }

      var sub = sort.substr(1);

      if (sort.charAt(0) === '-' && isSortByChannel(sub)) {
        return _extends(_extends({}, fieldDef), {
          sort: {
            encoding: sub,
            order: 'descending'
          }
        });
      }
    }

    if (isFacetFieldDef(fieldDef)) {
      var header = fieldDef.header;

      var orient = header.orient,
          rest = __rest(header, ["orient"]);

      if (orient) {
        return _extends(_extends({}, fieldDef), {
          header: _extends(_extends({}, rest), {
            labelOrient: header.labelOrient || orient,
            titleOrient: header.titleOrient || orient
          })
        });
      }
    }

    return fieldDef;
  }
  function normalizeBin(bin, channel) {
    if (isBoolean(bin)) {
      return {
        maxbins: autoMaxBins(channel)
      };
    } else if (bin === 'binned') {
      return {
        binned: true
      };
    } else if (!bin.maxbins && !bin.step) {
      return _extends(_extends({}, bin), {
        maxbins: autoMaxBins(channel)
      });
    } else {
      return bin;
    }
  }
  var COMPATIBLE = {
    compatible: true
  };
  function channelCompatibility(fieldDef, channel) {
    var type = fieldDef.type;

    if (type === 'geojson' && channel !== 'shape') {
      return {
        compatible: false,
        warning: "Channel ".concat(channel, " should not be used with a geojson data.")
      };
    }

    switch (channel) {
      case 'row':
      case 'column':
      case 'facet':
        if (isContinuous$1(fieldDef)) {
          return {
            compatible: false,
            warning: message.facetChannelShouldBeDiscrete(channel)
          };
        }

        return COMPATIBLE;

      case 'x':
      case 'y':
      case 'color':
      case 'fill':
      case 'stroke':
      case 'text':
      case 'detail':
      case 'key':
      case 'tooltip':
      case 'href':
      case 'url':
      case 'angle':
      case 'theta':
      case 'radius':
        return COMPATIBLE;

      case 'longitude':
      case 'longitude2':
      case 'latitude':
      case 'latitude2':
        if (type !== QUANTITATIVE) {
          return {
            compatible: false,
            warning: "Channel ".concat(channel, " should be used with a quantitative field only, not ").concat(fieldDef.type, " field.")
          };
        }

        return COMPATIBLE;

      case 'opacity':
      case 'fillOpacity':
      case 'strokeOpacity':
      case 'strokeWidth':
      case 'size':
      case 'theta2':
      case 'radius2':
      case 'x2':
      case 'y2':
        if (type === 'nominal' && !fieldDef['sort']) {
          return {
            compatible: false,
            warning: "Channel ".concat(channel, " should not be used with an unsorted discrete field.")
          };
        }

        return COMPATIBLE;

      case 'strokeDash':
        if (!contains$1(['ordinal', 'nominal'], fieldDef.type)) {
          return {
            compatible: false,
            warning: 'StrokeDash channel should be used with only discrete data.'
          };
        }

        return COMPATIBLE;

      case 'shape':
        if (!contains$1(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {
          return {
            compatible: false,
            warning: 'Shape channel should be used with only either discrete or geojson data.'
          };
        }

        return COMPATIBLE;

      case 'order':
        if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {
          return {
            compatible: false,
            warning: "Channel order is inappropriate for nominal field, which has no inherent order."
          };
        }

        return COMPATIBLE;
    }
  }
  /**
   * Check if the field def uses a time format or does not use any format but is temporal
   * (this does not cover field defs that are temporal but use a number format).
   */

  function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {
    var guide = getGuide(fieldOrDatumDef);
    var formatType = guide && guide.formatType || isTextFieldDef(fieldOrDatumDef) && fieldOrDatumDef.formatType;
    return formatType === 'time' || !formatType && isTimeFieldDef(fieldOrDatumDef);
  }
  function isFieldDefWithCustomTimeFormat(fieldOrDatumDef) {
    var guide = getGuide(fieldOrDatumDef);
    var formatType = guide && guide.formatType || isTextFieldDef(fieldOrDatumDef) && fieldOrDatumDef.formatType;
    return formatType && isCustomFormatType(formatType);
  }
  /**
   * Check if field def has type `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.
   */

  function isTimeFieldDef(def) {
    return def && (def['type'] === 'temporal' || isFieldDef(def) && !!def.timeUnit);
  }
  /**
   * Getting a value associated with a fielddef.
   * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)
   */

  function valueExpr(v, _ref3) {
    var timeUnit = _ref3.timeUnit,
        type = _ref3.type,
        time = _ref3.time,
        undefinedIfExprNotRequired = _ref3.undefinedIfExprNotRequired;

    var _a;

    var unit = timeUnit && ((_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit);
    var expr;

    if (isSignalRef(v)) {
      var s = v.signal;

      if (time && !unit && type !== 'temporal') {
        // We don't know if this is a date or not, so we need to check
        return time ? "isDate(".concat(s, ") ? time(").concat(s, ") : ").concat(s) : s;
      } else {
        // TODO: support isLocalSingleTimeUnit(unit) -- we can't do that until DateTime object supports signal
        expr = s;
      }
    } else if (isDateTime(v)) {
      expr = dateTimeToExpr(v);
    } else if (isString(v) || isNumber(v)) {
      if (unit || type === 'temporal') {
        expr = "datetime(".concat(JSON.stringify(v), ")");

        if (isLocalSingleTimeUnit(unit)) {
          // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit
          if (isNumber(v) && v < 10000 || isString(v) && isNaN(Date.parse(v))) {
            expr = dateTimeToExpr(_defineProperty({}, unit, v));
          }
        }
      }
    }

    if (expr) {
      return time ? "time(".concat(expr, ")") : expr;
    } // number or boolean or normal string


    return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);
  }
  /**
   * Standardize value array -- convert each value to Vega expression if applicable
   */

  function valueArray(fieldOrDatumDef, values) {
    var type = fieldOrDatumDef.type;
    return values.map(function (v) {
      var expr = valueExpr(v, {
        timeUnit: isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.timeUnit : undefined,
        type: type,
        undefinedIfExprNotRequired: true
      }); // return signal for the expression if we need an expression

      if (expr !== undefined) {
        return {
          signal: expr
        };
      } // otherwise just return the original value


      return v;
    });
  }
  /**
   * Checks whether a fieldDef for a particular channel requires a computed bin range.
   */

  function binRequiresRange(fieldDef, channel) {
    if (!isBinning(fieldDef.bin)) {
      console.warn('Only call this method for binned field defs.');
      return false;
    } // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.
    // We could check whether the axis or legend exists (not disabled) but that seems overkill.


    return isScaleChannel(channel) && contains$1(['ordinal', 'nominal'], fieldDef.type);
  }

  function extractTitleConfig(titleConfig) {
    var anchor = titleConfig.anchor,
        frame = titleConfig.frame,
        offset = titleConfig.offset,
        orient = titleConfig.orient,
        color = titleConfig.color,
        subtitleColor = titleConfig.subtitleColor,
        subtitleFont = titleConfig.subtitleFont,
        subtitleFontSize = titleConfig.subtitleFontSize,
        subtitleFontStyle = titleConfig.subtitleFontStyle,
        subtitleFontWeight = titleConfig.subtitleFontWeight,
        subtitleLineHeight = titleConfig.subtitleLineHeight,
        subtitlePadding = titleConfig.subtitlePadding,
        titleMarkConfig = __rest(titleConfig, ["anchor", "frame", "offset", "orient", "color", "subtitleColor", "subtitleFont", "subtitleFontSize", "subtitleFontStyle", "subtitleFontWeight", "subtitleLineHeight", "subtitlePadding"]);

    var mark = _extends(_extends({}, titleMarkConfig), color ? {
      fill: color
    } : {});

    var nonMark = _extends(_extends(_extends(_extends({}, anchor ? {
      anchor: anchor
    } : {}), frame ? {
      frame: frame
    } : {}), offset ? {
      offset: offset
    } : {}), orient ? {
      orient: orient
    } : {});

    var subtitle = _extends(_extends(_extends(_extends(_extends(_extends(_extends({}, subtitleColor ? {
      subtitleColor: subtitleColor
    } : {}), subtitleFont ? {
      subtitleFont: subtitleFont
    } : {}), subtitleFontSize ? {
      subtitleFontSize: subtitleFontSize
    } : {}), subtitleFontStyle ? {
      subtitleFontStyle: subtitleFontStyle
    } : {}), subtitleFontWeight ? {
      subtitleFontWeight: subtitleFontWeight
    } : {}), subtitleLineHeight ? {
      subtitleLineHeight: subtitleLineHeight
    } : {}), subtitlePadding ? {
      subtitlePadding: subtitlePadding
    } : {});

    return {
      mark: mark,
      nonMark: nonMark,
      subtitle: subtitle
    };
  }
  function isText(v) {
    return isString(v) || isArray(v) && isString(v[0]);
  }

  function signalOrValueRef(value) {
    if (isSignalRef(value)) {
      return value;
    }

    return value !== undefined ? {
      value: value
    } : undefined;
  }
  function applyMarkConfig(e, model, propsList) {
    var _iterator = _createForOfIteratorHelper(propsList),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var property = _step.value;
        var value = getMarkConfig(property, model.markDef, model.config);

        if (value !== undefined) {
          e[property] = {
            value: value
          };
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return e;
  }
  function getStyles(mark) {
    var _a;

    return [].concat(mark.type, (_a = mark.style) !== null && _a !== void 0 ? _a : []);
  }
  function getMarkPropOrConfig(channel, mark, config) {
    var opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var vgChannel = opt.vgChannel,
        ignoreVgConfig = opt.ignoreVgConfig;

    if (vgChannel && mark[vgChannel] !== undefined) {
      return mark[vgChannel];
    } else if (mark[channel] !== undefined) {
      return mark[channel];
    } else if (ignoreVgConfig && (!vgChannel || vgChannel === channel)) {
      return undefined;
    }

    return getMarkConfig(channel, mark, config, opt);
  }
  /**
   * Return property value from style or mark specific config property if exists.
   * Otherwise, return general mark specific config.
   */

  function getMarkConfig(channel, mark, config) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        vgChannel = _ref.vgChannel;

    return getFirstDefined( // style config has highest precedence
    vgChannel ? getMarkStyleConfig(channel, mark, config.style) : undefined, getMarkStyleConfig(channel, mark, config.style), // then mark-specific config
    vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], // Need to cast because MarkDef doesn't perfectly match with AnyMarkConfig, but if the type isn't available, we'll get nothing here, which is fine
    // If there is vgChannel, skip vl channel.
    // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.
    vgChannel ? config.mark[vgChannel] : config.mark[channel] // Need to cast for the same reason as above
    );
  }
  function getMarkStyleConfig(prop, mark, styleConfigIndex) {
    return getStyleConfig(prop, getStyles(mark), styleConfigIndex);
  }
  function getStyleConfig(p, styles, styleConfigIndex) {
    styles = array(styles);
    var value;

    var _iterator2 = _createForOfIteratorHelper(styles),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var style = _step2.value;
        var styleConfig = styleConfigIndex[style];

        if (styleConfig && styleConfig[p] !== undefined) {
          value = styleConfig[p];
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return value;
  }
  /**
   * Return Vega sort parameters (tuple of field and order).
   */

  function sortParams(orderDef, fieldRefOption) {
    return array(orderDef).reduce(function (s, orderChannelDef) {
      var _a;

      s.field.push(vgField(orderChannelDef, fieldRefOption));
      s.order.push((_a = orderChannelDef.sort) !== null && _a !== void 0 ? _a : 'ascending');
      return s;
    }, {
      field: [],
      order: []
    });
  }
  function mergeTitleFieldDefs(f1, f2) {
    var merged = _toConsumableArray(f1);

    f2.forEach(function (fdToMerge) {
      var _iterator3 = _createForOfIteratorHelper(merged),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var fieldDef1 = _step3.value;

          // If already exists, no need to append to merged array
          if (deepEqual(fieldDef1, fdToMerge)) {
            return;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      merged.push(fdToMerge);
    });
    return merged;
  }
  function mergeTitle(title1, title2) {
    if (deepEqual(title1, title2) || !title2) {
      // if titles are the same or title2 is falsy
      return title1;
    } else if (!title1) {
      // if title1 is falsy
      return title2;
    } else {
      return [].concat(_toConsumableArray(array(title1)), _toConsumableArray(array(title2))).join(', ');
    }
  }
  function mergeTitleComponent(v1, v2) {
    var v1Val = v1.value;
    var v2Val = v2.value;

    if (v1Val == null || v2Val === null) {
      return {
        explicit: v1.explicit,
        value: null
      };
    } else if ((isText(v1Val) || isSignalRef(v1Val)) && (isText(v2Val) || isSignalRef(v2Val))) {
      return {
        explicit: v1.explicit,
        value: mergeTitle(v1Val, v2Val)
      };
    } else if (isText(v1Val) || isSignalRef(v1Val)) {
      return {
        explicit: v1.explicit,
        value: v1Val
      };
    } else if (isText(v2Val) || isSignalRef(v2Val)) {
      return {
        explicit: v1.explicit,
        value: v2Val
      };
    } else if (!isText(v1Val) && !isSignalRef(v1Val) && !isText(v2Val) && !isSignalRef(v2Val)) {
      return {
        explicit: v1.explicit,
        value: mergeTitleFieldDefs(v1Val, v2Val)
      };
    }
    /* istanbul ignore next: Condition should not happen -- only for warning in development. */


    throw new Error('It should never reach here');
  }

  function channelHasField(encoding, channel) {
    var channelDef = encoding && encoding[channel];

    if (channelDef) {
      if (isArray(channelDef)) {
        return some(channelDef, function (fieldDef) {
          return !!fieldDef.field;
        });
      } else {
        return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);
      }
    }

    return false;
  }
  function isAggregate(encoding) {
    return some(CHANNELS, function (channel) {
      if (channelHasField(encoding, channel)) {
        var channelDef = encoding[channel];

        if (isArray(channelDef)) {
          return some(channelDef, function (fieldDef) {
            return !!fieldDef.aggregate;
          });
        } else {
          var fieldDef = getFieldDef(channelDef);
          return fieldDef && !!fieldDef.aggregate;
        }
      }

      return false;
    });
  }
  function extractTransformsFromEncoding(oldEncoding, config) {
    var groupby = [];
    var bins = [];
    var timeUnits = [];
    var aggregate = [];
    var encoding = {};
    forEach$1(oldEncoding, function (channelDef, channel) {
      // Extract potential embedded transformations along with remaining properties
      if (isFieldDef(channelDef)) {
        var field = channelDef.field,
            aggOp = channelDef.aggregate,
            bin = channelDef.bin,
            timeUnit = channelDef.timeUnit,
            remaining = __rest(channelDef, ["field", "aggregate", "bin", "timeUnit"]);

        if (aggOp || timeUnit || bin) {
          var guide = getGuide(channelDef);
          var isTitleDefined = guide && guide.title;
          var newField = vgField(channelDef, {
            forAs: true
          });

          var newFieldDef = _extends(_extends(_extends({}, isTitleDefined ? [] : {
            title: title(channelDef, config, {
              allowDisabling: true
            })
          }), remaining), {
            // Always overwrite field
            field: newField
          });

          if (aggOp) {
            var op;

            if (isArgmaxDef(aggOp)) {
              op = 'argmax';
              newField = vgField({
                op: 'argmax',
                field: aggOp.argmax
              }, {
                forAs: true
              });
              newFieldDef.field = "".concat(newField, ".").concat(field);
            } else if (isArgminDef(aggOp)) {
              op = 'argmin';
              newField = vgField({
                op: 'argmin',
                field: aggOp.argmin
              }, {
                forAs: true
              });
              newFieldDef.field = "".concat(newField, ".").concat(field);
            } else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {
              op = aggOp;
            }

            if (op) {
              var aggregateEntry = {
                op: op,
                as: newField
              };

              if (field) {
                aggregateEntry.field = field;
              }

              aggregate.push(aggregateEntry);
            }
          } else {
            groupby.push(newField);

            if (isTypedFieldDef(channelDef) && isBinning(bin)) {
              bins.push({
                bin: bin,
                field: field,
                as: newField
              }); // Add additional groupbys for range and end of bins

              groupby.push(vgField(channelDef, {
                binSuffix: 'end'
              }));

              if (binRequiresRange(channelDef, channel)) {
                groupby.push(vgField(channelDef, {
                  binSuffix: 'range'
                }));
              } // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively


              if (isXorY(channel)) {
                var secondaryChannel = {
                  field: newField + '_end'
                };
                encoding[channel + '2'] = secondaryChannel;
              }

              newFieldDef.bin = 'binned';

              if (!isSecondaryRangeChannel(channel)) {
                newFieldDef['type'] = 'quantitative';
              }
            } else if (timeUnit) {
              timeUnits.push({
                timeUnit: timeUnit,
                field: field,
                as: newField
              }); // define the format type for later compilation

              var formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';

              if (formatType) {
                if (channel === 'text' || channel === 'tooltip') {
                  newFieldDef['formatType'] = formatType;
                } else if (isNonPositionScaleChannel(channel)) {
                  newFieldDef['legend'] = _extends({
                    formatType: formatType
                  }, newFieldDef['legend']);
                } else if (isXorY(channel)) {
                  newFieldDef['axis'] = _extends({
                    formatType: formatType
                  }, newFieldDef['axis']);
                }
              }
            }
          } // now the field should refer to post-transformed field instead


          encoding[channel] = newFieldDef;
        } else {
          groupby.push(field);
          encoding[channel] = oldEncoding[channel];
        }
      } else {
        // For value def / signal ref / datum def, just copy
        encoding[channel] = oldEncoding[channel];
      }
    });
    return {
      bins: bins,
      timeUnits: timeUnits,
      aggregate: aggregate,
      groupby: groupby,
      encoding: encoding
    };
  }
  function markChannelCompatible(encoding, channel, mark) {
    var markSupported = supportMark(channel, mark);

    if (!markSupported) {
      return false;
    } else if (markSupported === 'binned') {
      var primaryFieldDef = encoding[channel === 'x2' ? 'x' : 'y']; // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef
      // has "binned" data and thus need x2/y2 to specify the bin-end field.

      if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {
        return true;
      } else {
        return false;
      }
    }

    return true;
  }
  function initEncoding(encoding, markDef) {
    var mark = markDef.type;
    return keys$2(encoding).reduce(function (normalizedEncoding, channel) {
      if (!isChannel(channel)) {
        // Drop invalid channel
        warn$1(message.invalidEncodingChannel(channel));
        return normalizedEncoding;
      }

      var channelDef = encoding[channel];

      if (channel === 'angle' && mark === 'arc' && !encoding.theta) {
        warn$1(message.REPLACE_ANGLE_WITH_THETA);
        channel = THETA;
      }

      if (!markChannelCompatible(encoding, channel, mark)) {
        // Drop unsupported channel
        warn$1(message.incompatibleChannel(channel, mark));
        return normalizedEncoding;
      } // Drop line's size if the field is aggregated.


      if (channel === 'size' && mark === 'line') {
        var fieldDef = getFieldDef(encoding[channel]);

        if (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.aggregate) {
          warn$1(message.LINE_WITH_VARYING_SIZE);
          return normalizedEncoding;
        }
      } // Drop color if either fill or stroke is specified


      if (channel === 'color' && (markDef.filled ? 'fill' in encoding : 'stroke' in encoding)) {
        warn$1(message.droppingColor('encoding', {
          fill: 'fill' in encoding,
          stroke: 'stroke' in encoding
        }));
        return normalizedEncoding;
      }

      if (channel === 'detail' || channel === 'order' && !isArray(channelDef) && !isValueDef(channelDef) || channel === 'tooltip' && isArray(channelDef)) {
        if (channelDef) {
          // Array of fieldDefs for detail channel (or production rule)
          normalizedEncoding[channel] = array(channelDef).reduce(function (defs, fieldDef) {
            if (!isFieldDef(fieldDef)) {
              warn$1(message.emptyFieldDef(fieldDef, channel));
            } else {
              defs.push(initFieldDef(fieldDef, channel));
            }

            return defs;
          }, []);
        }
      } else {
        if (channel === 'tooltip' && channelDef === null) {
          // Preserve null so we can use it to disable tooltip
          normalizedEncoding[channel] = null;
        } else if (!isFieldDef(channelDef) && !isDatumDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef) && !isSignalRef(channelDef)) {
          warn$1(message.emptyFieldDef(channelDef, channel));
          return normalizedEncoding;
        }

        normalizedEncoding[channel] = initChannelDef(channelDef, channel);
      }

      return normalizedEncoding;
    }, {});
  }
  function fieldDefs(encoding) {
    var arr = [];

    var _iterator = _createForOfIteratorHelper(keys$2(encoding)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;

        if (channelHasField(encoding, channel)) {
          var channelDef = encoding[channel];
          var channelDefArray = array(channelDef);

          var _iterator2 = _createForOfIteratorHelper(channelDefArray),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var def = _step2.value;

              if (isFieldDef(def)) {
                arr.push(def);
              } else if (hasConditionalFieldDef(def)) {
                arr.push(def.condition);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return arr;
  }
  function forEach$1(mapping, f, thisArg) {
    if (!mapping) {
      return;
    }

    var _iterator3 = _createForOfIteratorHelper(keys$2(mapping)),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var channel = _step3.value;
        var el = mapping[channel];

        if (isArray(el)) {
          var _iterator4 = _createForOfIteratorHelper(el),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var channelDef = _step4.value;
              f.call(thisArg, channelDef, channel);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        } else {
          f.call(thisArg, el, channel);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
  function reduce(mapping, f, init, thisArg) {
    if (!mapping) {
      return init;
    }

    return keys$2(mapping).reduce(function (r, channel) {
      var map = mapping[channel];

      if (isArray(map)) {
        return map.reduce(function (r1, channelDef) {
          return f.call(thisArg, r1, channelDef, channel);
        }, r);
      } else {
        return f.call(thisArg, r, map, channel);
      }
    }, init);
  }
  /**
   * Returns list of path grouping fields for the given encoding
   */

  function pathGroupingFields(mark, encoding) {
    return keys$2(encoding).reduce(function (details, channel) {
      switch (channel) {
        // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group
        case 'x':
        case 'y':
        case 'href':
        case 'url':
        case 'x2':
        case 'y2':
        case 'theta':
        case 'theta2':
        case 'radius':
        case 'radius2': // falls through

        case 'latitude':
        case 'longitude':
        case 'latitude2':
        case 'longitude2': // TODO: case 'cursor':
        // text, shape, shouldn't be a part of line/trail/area [falls through]

        case 'text':
        case 'shape':
        case 'angle': // falls through
        // tooltip fields should not be added to group by [falls through]

        case 'tooltip':
          return details;

        case 'order':
          // order should not group line / trail
          if (mark === 'line' || mark === 'trail') {
            return details;
          }

        // but order should group area for stacking (falls through)

        case 'detail':
        case 'key':
          {
            var channelDef = encoding[channel];

            if (isArray(channelDef) || isFieldDef(channelDef)) {
              var _iterator5 = _createForOfIteratorHelper(array(channelDef)),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var fieldDef = _step5.value;

                  if (!fieldDef.aggregate) {
                    details.push(vgField(fieldDef, {}));
                  }
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            }

            return details;
          }

        case 'size':
          if (mark === 'trail') {
            // For trail, size should not group trail lines.
            return details;
          }

        // For line, size should group lines.
        // falls through

        case 'color':
        case 'fill':
        case 'stroke':
        case 'opacity':
        case 'fillOpacity':
        case 'strokeOpacity':
        case 'strokeDash':
        case 'strokeWidth':
          {
            // TODO strokeDashOffset:
            // falls through
            var _fieldDef = getFieldDef(encoding[channel]);

            if (_fieldDef && !_fieldDef.aggregate) {
              details.push(vgField(_fieldDef, {}));
            }

            return details;
          }
      }
    }, []);
  }

  function filterTooltipWithAggregatedField(oldEncoding) {
    var tooltip = oldEncoding.tooltip,
        filteredEncoding = __rest(oldEncoding, ["tooltip"]);

    if (!tooltip) {
      return {
        filteredEncoding: oldEncoding
      };
    }

    var customTooltipWithAggregatedField;
    var customTooltipWithoutAggregatedField;

    if (isArray(tooltip)) {
      var _iterator = _createForOfIteratorHelper(tooltip),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var t = _step.value;

          if (t.aggregate) {
            if (!customTooltipWithAggregatedField) {
              customTooltipWithAggregatedField = [];
            }

            customTooltipWithAggregatedField.push(t);
          } else {
            if (!customTooltipWithoutAggregatedField) {
              customTooltipWithoutAggregatedField = [];
            }

            customTooltipWithoutAggregatedField.push(t);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (customTooltipWithAggregatedField) {
        filteredEncoding.tooltip = customTooltipWithAggregatedField;
      }
    } else {
      if (tooltip['aggregate']) {
        filteredEncoding.tooltip = tooltip;
      } else {
        customTooltipWithoutAggregatedField = tooltip;
      }
    }

    if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {
      customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];
    }

    return {
      customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField,
      filteredEncoding: filteredEncoding
    };
  }
  function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis) {
    var withFieldName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    if ('tooltip' in encodingWithoutContinuousAxis) {
      return {
        tooltip: encodingWithoutContinuousAxis.tooltip
      };
    }

    var fiveSummaryTooltip = tooltipSummary.map(function (_ref) {
      var fieldPrefix = _ref.fieldPrefix,
          titlePrefix = _ref.titlePrefix;
      var mainTitle = withFieldName ? " of ".concat(continuousAxisChannelDef.field) : '';
      return {
        field: fieldPrefix + continuousAxisChannelDef.field,
        type: continuousAxisChannelDef.type,
        title: isSignalRef(titlePrefix) ? {
          signal: titlePrefix + "\"".concat(escape(mainTitle), "\"")
        } : titlePrefix + mainTitle
      };
    });
    return {
      tooltip: [].concat(_toConsumableArray(fiveSummaryTooltip), _toConsumableArray(fieldDefs(encodingWithoutContinuousAxis)))
    };
  }
  function getTitle(continuousAxisChannelDef) {
    var axis = continuousAxisChannelDef.axis,
        title = continuousAxisChannelDef.title,
        field = continuousAxisChannelDef.field;
    return axis && axis.title !== undefined ? undefined : getFirstDefined(title, field);
  }
  function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
    var scale = continuousAxisChannelDef.scale,
        axis = continuousAxisChannelDef.axis;
    return function (_ref2) {
      var partName = _ref2.partName,
          mark = _ref2.mark,
          positionPrefix = _ref2.positionPrefix,
          _ref2$endPositionPref = _ref2.endPositionPrefix,
          endPositionPrefix = _ref2$endPositionPref === void 0 ? undefined : _ref2$endPositionPref,
          _ref2$extraEncoding = _ref2.extraEncoding,
          extraEncoding = _ref2$extraEncoding === void 0 ? {} : _ref2$extraEncoding;
      var title = getTitle(continuousAxisChannelDef);
      return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {
        mark: mark,
        encoding: _extends(_extends(_extends(_defineProperty({}, continuousAxis, _extends(_extends(_extends({
          field: positionPrefix + '_' + continuousAxisChannelDef.field,
          type: continuousAxisChannelDef.type
        }, title !== undefined ? {
          title: title
        } : {}), scale !== undefined ? {
          scale: scale
        } : {}), axis !== undefined ? {
          axis: axis
        } : {})), isString(endPositionPrefix) ? _defineProperty({}, continuousAxis + '2', {
          field: endPositionPrefix + '_' + continuousAxisChannelDef.field
        }) : {}), sharedEncoding), extraEncoding)
      });
    };
  }
  function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {
    var clip = markDef.clip,
        color = markDef.color,
        opacity = markDef.opacity;
    var mark = markDef.type;

    if (markDef[part] || markDef[part] === undefined && compositeMarkConfig[part]) {
      return [_extends(_extends({}, partBaseSpec), {
        mark: _extends(_extends(_extends(_extends(_extends(_extends(_extends({}, compositeMarkConfig[part]), clip ? {
          clip: clip
        } : {}), color ? {
          color: color
        } : {}), opacity ? {
          opacity: opacity
        } : {}), isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : {
          type: partBaseSpec.mark
        }), {
          style: "".concat(mark, "-").concat(part)
        }), isBoolean(markDef[part]) ? {} : markDef[part])
      })];
    }

    return [];
  }
  function compositeMarkContinuousAxis(spec, orient, compositeMark) {
    var encoding = spec.encoding;
    var continuousAxis = orient === 'vertical' ? 'y' : 'x';
    var continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.

    var continuousAxisChannelDef2 = encoding[continuousAxis + '2'];
    var continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];
    var continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];
    return {
      continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
      continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
      continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
      continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
      continuousAxis: continuousAxis
    };
  }

  function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {
      var aggregate = continuousAxisChannelDef.aggregate,
          continuousAxisWithoutAggregate = __rest(continuousAxisChannelDef, ["aggregate"]);

      if (aggregate !== compositeMark) {
        warn$1(message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
      }

      return continuousAxisWithoutAggregate;
    } else {
      return continuousAxisChannelDef;
    }
  }

  function compositeMarkOrient(spec, compositeMark) {
    var mark = spec.mark,
        encoding = spec.encoding;
    var x = encoding.x,
        y = encoding.y;

    if (isContinuousFieldOrDatumDef(x)) {
      // x is continuous
      if (isContinuousFieldOrDatumDef(y)) {
        // both x and y are continuous
        var xAggregate = isFieldDef(x) && x.aggregate;
        var yAggregate = isFieldDef(y) && y.aggregate;

        if (!xAggregate && yAggregate === compositeMark) {
          return 'vertical';
        } else if (!yAggregate && xAggregate === compositeMark) {
          return 'horizontal';
        } else if (xAggregate === compositeMark && yAggregate === compositeMark) {
          throw new Error('Both x and y cannot have aggregate');
        } else {
          if (isMarkDef(mark) && mark.orient) {
            return mark.orient;
          } // default orientation = vertical


          return 'vertical';
        }
      } // x is continuous but y is not


      return 'horizontal';
    } else if (isContinuousFieldOrDatumDef(y)) {
      // y is continuous but x is not
      return 'vertical';
    } else {
      // Neither x nor y is continuous.
      throw new Error('Need a valid continuous axis for ' + compositeMark + 's');
    }
  }

  var BOXPLOT = 'boxplot';
  var BOXPLOT_PART_INDEX = {
    box: 1,
    median: 1,
    outliers: 1,
    rule: 1,
    ticks: 1
  };
  var BOXPLOT_PARTS = keys$2(BOXPLOT_PART_INDEX);
  var boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);
  function getBoxPlotType(extent) {
    if (isNumber(extent)) {
      return 'tukey';
    } // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.


    return extent;
  }
  function normalizeBoxPlot(spec, _ref) {
    var config = _ref.config;

    var _a, _b; // TODO: use selection


    var mark = spec.mark,
        _encoding = spec.encoding,
        selection = spec.selection,
        _p = spec.projection,
        outerSpec = __rest(spec, ["mark", "encoding", "selection", "projection"]);

    var markDef = isMarkDef(mark) ? mark : {
      type: mark
    }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support

    if (selection) {
      warn$1(message.selectionNotSupported('boxplot'));
    }

    var extent = (_a = markDef.extent) !== null && _a !== void 0 ? _a : config.boxplot.extent;
    var sizeValue = getMarkPropOrConfig('size', markDef, // TODO: https://github.com/vega/vega-lite/issues/6245
    config);
    var boxPlotType = getBoxPlotType(extent);

    var _boxParams = boxParams(spec, extent, config),
        transform = _boxParams.transform,
        continuousAxisChannelDef = _boxParams.continuousAxisChannelDef,
        continuousAxis = _boxParams.continuousAxis,
        groupby = _boxParams.groupby,
        aggregate = _boxParams.aggregate,
        encodingWithoutContinuousAxis = _boxParams.encodingWithoutContinuousAxis,
        ticksOrient = _boxParams.ticksOrient,
        boxOrient = _boxParams.boxOrient,
        customTooltipWithoutAggregatedField = _boxParams.customTooltipWithoutAggregatedField;

    var size = encodingWithoutContinuousAxis.size,
        encodingWithoutSizeColorAndContinuousAxis = __rest(encodingWithoutContinuousAxis, ["color", "size"]);

    var makeBoxPlotPart = function makeBoxPlotPart(sharedEncoding) {
      return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
    };

    var makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
    var makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
    var makeBoxPlotMidTick = makeBoxPlotPart(_extends(_extends({}, encodingWithoutSizeColorAndContinuousAxis), size ? {
      size: size
    } : {}));
    var fiveSummaryTooltipEncoding = getCompositeMarkTooltip([{
      fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_',
      titlePrefix: 'Max'
    }, {
      fieldPrefix: 'upper_box_',
      titlePrefix: 'Q3'
    }, {
      fieldPrefix: 'mid_box_',
      titlePrefix: 'Median'
    }, {
      fieldPrefix: 'lower_box_',
      titlePrefix: 'Q1'
    }, {
      fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_',
      titlePrefix: 'Min'
    }], continuousAxisChannelDef, encodingWithoutContinuousAxis); // ## Whisker Layers

    var endTick = {
      type: 'tick',
      color: 'black',
      opacity: 1,
      orient: ticksOrient,
      invalid: null
    };
    var whiskerTooltipEncoding = boxPlotType === 'min-max' ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker
    : // for tukey / k-IQR, just show upper/lower-whisker
    getCompositeMarkTooltip([{
      fieldPrefix: 'upper_whisker_',
      titlePrefix: 'Upper Whisker'
    }, {
      fieldPrefix: 'lower_whisker_',
      titlePrefix: 'Lower Whisker'
    }], continuousAxisChannelDef, encodingWithoutContinuousAxis);
    var whiskerLayers = [].concat(_toConsumableArray(makeBoxPlotExtent({
      partName: 'rule',
      mark: {
        type: 'rule',
        invalid: null
      },
      positionPrefix: 'lower_whisker',
      endPositionPrefix: 'lower_box',
      extraEncoding: whiskerTooltipEncoding
    })), _toConsumableArray(makeBoxPlotExtent({
      partName: 'rule',
      mark: {
        type: 'rule',
        invalid: null
      },
      positionPrefix: 'upper_box',
      endPositionPrefix: 'upper_whisker',
      extraEncoding: whiskerTooltipEncoding
    })), _toConsumableArray(makeBoxPlotExtent({
      partName: 'ticks',
      mark: endTick,
      positionPrefix: 'lower_whisker',
      extraEncoding: whiskerTooltipEncoding
    })), _toConsumableArray(makeBoxPlotExtent({
      partName: 'ticks',
      mark: endTick,
      positionPrefix: 'upper_whisker',
      extraEncoding: whiskerTooltipEncoding
    }))); // ## Box Layers
    // TODO: support hiding certain mark parts

    var boxLayers = [].concat(_toConsumableArray(boxPlotType !== 'tukey' ? whiskerLayers : []), _toConsumableArray(makeBoxPlotBox({
      partName: 'box',
      mark: _extends(_extends({
        type: 'bar'
      }, sizeValue ? {
        size: sizeValue
      } : {}), {
        orient: boxOrient,
        invalid: null
      }),
      positionPrefix: 'lower_box',
      endPositionPrefix: 'upper_box',
      extraEncoding: fiveSummaryTooltipEncoding
    })), _toConsumableArray(makeBoxPlotMidTick({
      partName: 'median',
      mark: _extends(_extends(_extends({
        type: 'tick',
        invalid: null
      }, isObject(config.boxplot.median) && config.boxplot.median.color ? {
        color: config.boxplot.median.color
      } : {}), sizeValue ? {
        size: sizeValue
      } : {}), {
        orient: ticksOrient
      }),
      positionPrefix: 'mid_box',
      extraEncoding: fiveSummaryTooltipEncoding
    }))); // ## Filtered Layers

    var filteredLayersMixins;

    if (boxPlotType !== 'min-max') {
      var lowerBoxExpr = "datum[\"lower_box_".concat(continuousAxisChannelDef.field, "\"]");
      var upperBoxExpr = "datum[\"upper_box_".concat(continuousAxisChannelDef.field, "\"]");
      var iqrExpr = "(".concat(upperBoxExpr, " - ").concat(lowerBoxExpr, ")");
      var lowerWhiskerExpr = "".concat(lowerBoxExpr, " - ").concat(extent, " * ").concat(iqrExpr);
      var upperWhiskerExpr = "".concat(upperBoxExpr, " + ").concat(extent, " * ").concat(iqrExpr);
      var fieldExpr = "datum[\"".concat(continuousAxisChannelDef.field, "\"]");
      var joinaggregateTransform = {
        joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),
        groupby: groupby
      };
      var filteredWhiskerSpec = undefined;

      if (boxPlotType === 'tukey') {
        filteredWhiskerSpec = {
          transform: [{
            filter: "(".concat(lowerWhiskerExpr, " <= ").concat(fieldExpr, ") && (").concat(fieldExpr, " <= ").concat(upperWhiskerExpr, ")")
          }, {
            aggregate: [{
              op: 'min',
              field: continuousAxisChannelDef.field,
              as: 'lower_whisker_' + continuousAxisChannelDef.field
            }, {
              op: 'max',
              field: continuousAxisChannelDef.field,
              as: 'upper_whisker_' + continuousAxisChannelDef.field
            }, // preserve lower_box / upper_box
            {
              op: 'min',
              field: 'lower_box_' + continuousAxisChannelDef.field,
              as: 'lower_box_' + continuousAxisChannelDef.field
            }, {
              op: 'max',
              field: 'upper_box_' + continuousAxisChannelDef.field,
              as: 'upper_box_' + continuousAxisChannelDef.field
            }].concat(_toConsumableArray(aggregate)),
            groupby: groupby
          }],
          layer: whiskerLayers
        };
      }

      var encodingWithoutSizeColorContinuousAxisAndTooltip = __rest(encodingWithoutSizeColorAndContinuousAxis, ["tooltip"]);

      var scale = continuousAxisChannelDef.scale,
          axis = continuousAxisChannelDef.axis;
      var title = getTitle(continuousAxisChannelDef);
      var outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {
        transform: [{
          filter: "(".concat(fieldExpr, " < ").concat(lowerWhiskerExpr, ") || (").concat(fieldExpr, " > ").concat(upperWhiskerExpr, ")")
        }],
        mark: 'point',
        encoding: _extends(_extends(_defineProperty({}, continuousAxis, _extends(_extends(_extends({
          field: continuousAxisChannelDef.field,
          type: continuousAxisChannelDef.type
        }, title !== undefined ? {
          title: title
        } : {}), scale !== undefined ? {
          scale: scale
        } : {}), axis !== undefined ? {
          axis: axis
        } : {})), encodingWithoutSizeColorContinuousAxisAndTooltip), customTooltipWithoutAggregatedField ? {
          tooltip: customTooltipWithoutAggregatedField
        } : {})
      })[0];

      if (outlierLayersMixins && filteredWhiskerSpec) {
        filteredLayersMixins = {
          transform: [joinaggregateTransform],
          layer: [outlierLayersMixins, filteredWhiskerSpec]
        };
      } else if (outlierLayersMixins) {
        filteredLayersMixins = outlierLayersMixins;
        filteredLayersMixins.transform.unshift(joinaggregateTransform);
      } else if (filteredWhiskerSpec) {
        filteredLayersMixins = filteredWhiskerSpec;
        filteredLayersMixins.transform.unshift(joinaggregateTransform);
      }
    }

    if (filteredLayersMixins) {
      // tukey box plot with outliers included
      return _extends(_extends({}, outerSpec), {
        layer: [filteredLayersMixins, {
          // boxplot
          transform: transform,
          layer: boxLayers
        }]
      });
    }

    return _extends(_extends({}, outerSpec), {
      transform: ((_b = outerSpec.transform) !== null && _b !== void 0 ? _b : []).concat(transform),
      layer: boxLayers
    });
  }

  function boxParamsQuartiles(continousAxisField) {
    return [{
      op: 'q1',
      field: continousAxisField,
      as: 'lower_box_' + continousAxisField
    }, {
      op: 'q3',
      field: continousAxisField,
      as: 'upper_box_' + continousAxisField
    }];
  }

  function boxParams(spec, extent, config) {
    var orient = compositeMarkOrient(spec, BOXPLOT);

    var _compositeMarkContinu = compositeMarkContinuousAxis(spec, orient, BOXPLOT),
        continuousAxisChannelDef = _compositeMarkContinu.continuousAxisChannelDef,
        continuousAxis = _compositeMarkContinu.continuousAxis;

    var continuousFieldName = continuousAxisChannelDef.field;
    var boxPlotType = getBoxPlotType(extent);
    var boxplotSpecificAggregate = [].concat(_toConsumableArray(boxParamsQuartiles(continuousFieldName)), [{
      op: 'median',
      field: continuousFieldName,
      as: 'mid_box_' + continuousFieldName
    }, {
      op: 'min',
      field: continuousFieldName,
      as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName
    }, {
      op: 'max',
      field: continuousFieldName,
      as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName
    }]);
    var postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey' ? [] : [// This is for the  original k-IQR, which we do not expose
    {
      calculate: "datum[\"upper_box_".concat(continuousFieldName, "\"] - datum[\"lower_box_").concat(continuousFieldName, "\"]"),
      as: 'iqr_' + continuousFieldName
    }, {
      calculate: "min(datum[\"upper_box_".concat(continuousFieldName, "\"] + datum[\"iqr_").concat(continuousFieldName, "\"] * ").concat(extent, ", datum[\"max_").concat(continuousFieldName, "\"])"),
      as: 'upper_whisker_' + continuousFieldName
    }, {
      calculate: "max(datum[\"lower_box_".concat(continuousFieldName, "\"] - datum[\"iqr_").concat(continuousFieldName, "\"] * ").concat(extent, ", datum[\"min_").concat(continuousFieldName, "\"])"),
      as: 'lower_whisker_' + continuousFieldName
    }];

    var _a = spec.encoding,
        _b = continuousAxis,
        oldContinuousAxisChannelDef = _a[_b],
        oldEncodingWithoutContinuousAxis = __rest(_a, [_typeof(_b) === "symbol" ? _b : _b + ""]);

    var _filterTooltipWithAgg = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis),
        customTooltipWithoutAggregatedField = _filterTooltipWithAgg.customTooltipWithoutAggregatedField,
        filteredEncoding = _filterTooltipWithAgg.filteredEncoding;

    var _extractTransformsFro = extractTransformsFromEncoding(filteredEncoding, config),
        bins = _extractTransformsFro.bins,
        timeUnits = _extractTransformsFro.timeUnits,
        aggregate = _extractTransformsFro.aggregate,
        groupby = _extractTransformsFro.groupby,
        encodingWithoutContinuousAxis = _extractTransformsFro.encoding;

    var ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';
    var boxOrient = orient;
    var transform = [].concat(_toConsumableArray(bins), _toConsumableArray(timeUnits), [{
      aggregate: [].concat(_toConsumableArray(aggregate), _toConsumableArray(boxplotSpecificAggregate)),
      groupby: groupby
    }], postAggregateCalculates);
    return {
      transform: transform,
      groupby: groupby,
      aggregate: aggregate,
      continuousAxisChannelDef: continuousAxisChannelDef,
      continuousAxis: continuousAxis,
      encodingWithoutContinuousAxis: encodingWithoutContinuousAxis,
      ticksOrient: ticksOrient,
      boxOrient: boxOrient,
      customTooltipWithoutAggregatedField: customTooltipWithoutAggregatedField
    };
  }

  var ERRORBAR = 'errorbar';
  var ERRORBAR_PART_INDEX = {
    ticks: 1,
    rule: 1
  };
  var ERRORBAR_PARTS = keys$2(ERRORBAR_PART_INDEX);
  var errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);
  function normalizeErrorBar(spec, _ref) {
    var config = _ref.config;

    var _errorBarParams = errorBarParams(spec, ERRORBAR, config),
        transform = _errorBarParams.transform,
        continuousAxisChannelDef = _errorBarParams.continuousAxisChannelDef,
        continuousAxis = _errorBarParams.continuousAxis,
        encodingWithoutContinuousAxis = _errorBarParams.encodingWithoutContinuousAxis,
        ticksOrient = _errorBarParams.ticksOrient,
        markDef = _errorBarParams.markDef,
        outerSpec = _errorBarParams.outerSpec,
        tooltipEncoding = _errorBarParams.tooltipEncoding;

    var makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
    var tick = {
      type: 'tick',
      orient: ticksOrient
    };
    var layer = [].concat(_toConsumableArray(makeErrorBarPart({
      partName: 'ticks',
      mark: tick,
      positionPrefix: 'lower',
      extraEncoding: tooltipEncoding
    })), _toConsumableArray(makeErrorBarPart({
      partName: 'ticks',
      mark: tick,
      positionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    })), _toConsumableArray(makeErrorBarPart({
      partName: 'rule',
      mark: 'rule',
      positionPrefix: 'lower',
      endPositionPrefix: 'upper',
      extraEncoding: tooltipEncoding
    })));
    return _extends(_extends(_extends({}, outerSpec), {
      transform: transform
    }), layer.length > 1 ? {
      layer: layer
    } : _extends({}, layer[0]));
  }

  function errorBarOrientAndInputType(spec, compositeMark) {
    var encoding = spec.encoding;

    if (errorBarIsInputTypeRaw(encoding)) {
      return {
        orient: compositeMarkOrient(spec, compositeMark),
        inputType: 'raw'
      };
    }

    var isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);
    var isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);
    var x = encoding.x;
    var y = encoding.y;

    if (isTypeAggregatedUpperLower) {
      // type is aggregated-upper-lower
      if (isTypeAggregatedError) {
        throw new Error("".concat(compositeMark, " cannot be both type aggregated-upper-lower and aggregated-error"));
      }

      var x2 = encoding.x2;
      var y2 = encoding.y2;

      if (isFieldOrDatumDef(x2) && isFieldOrDatumDef(y2)) {
        // having both x, x2 and y, y2
        throw new Error("".concat(compositeMark, " cannot have both x2 and y2"));
      } else if (isFieldOrDatumDef(x2)) {
        if (isContinuousFieldOrDatumDef(x)) {
          // having x, x2 quantitative and field y, y2 are not specified
          return {
            orient: 'horizontal',
            inputType: 'aggregated-upper-lower'
          };
        } else {
          // having x, x2 that are not both quantitative
          throw new Error("Both x and x2 have to be quantitative in ".concat(compositeMark));
        }
      } else if (isFieldOrDatumDef(y2)) {
        // y2 is a FieldDef
        if (isContinuousFieldOrDatumDef(y)) {
          // having y, y2 quantitative and field x, x2 are not specified
          return {
            orient: 'vertical',
            inputType: 'aggregated-upper-lower'
          };
        } else {
          // having y, y2 that are not both quantitative
          throw new Error("Both y and y2 have to be quantitative in ".concat(compositeMark));
        }
      }

      throw new Error('No ranged axis');
    } else {
      // type is aggregated-error
      var xError = encoding.xError;
      var xError2 = encoding.xError2;
      var yError = encoding.yError;
      var yError2 = encoding.yError2;

      if (isFieldOrDatumDef(xError2) && !isFieldOrDatumDef(xError)) {
        // having xError2 without xError
        throw new Error("".concat(compositeMark, " cannot have xError2 without xError"));
      }

      if (isFieldOrDatumDef(yError2) && !isFieldOrDatumDef(yError)) {
        // having yError2 without yError
        throw new Error("".concat(compositeMark, " cannot have yError2 without yError"));
      }

      if (isFieldOrDatumDef(xError) && isFieldOrDatumDef(yError)) {
        // having both xError and yError
        throw new Error("".concat(compositeMark, " cannot have both xError and yError with both are quantiative"));
      } else if (isFieldOrDatumDef(xError)) {
        if (isContinuousFieldOrDatumDef(x)) {
          // having x and xError that are all quantitative
          return {
            orient: 'horizontal',
            inputType: 'aggregated-error'
          };
        } else {
          // having x, xError, and xError2 that are not all quantitative
          throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');
        }
      } else if (isFieldOrDatumDef(yError)) {
        if (isContinuousFieldOrDatumDef(y)) {
          // having y and yError that are all quantitative
          return {
            orient: 'vertical',
            inputType: 'aggregated-error'
          };
        } else {
          // having y, yError, and yError2 that are not all quantitative
          throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');
        }
      }

      throw new Error('No ranged axis');
    }
  }

  function errorBarIsInputTypeRaw(encoding) {
    return (isFieldOrDatumDef(encoding.x) || isFieldOrDatumDef(encoding.y)) && !isFieldOrDatumDef(encoding.x2) && !isFieldOrDatumDef(encoding.y2) && !isFieldOrDatumDef(encoding.xError) && !isFieldOrDatumDef(encoding.xError2) && !isFieldOrDatumDef(encoding.yError) && !isFieldOrDatumDef(encoding.yError2);
  }

  function errorBarIsInputTypeAggregatedUpperLower(encoding) {
    return isFieldOrDatumDef(encoding.x2) || isFieldOrDatumDef(encoding.y2);
  }

  function errorBarIsInputTypeAggregatedError(encoding) {
    return isFieldOrDatumDef(encoding.xError) || isFieldOrDatumDef(encoding.xError2) || isFieldOrDatumDef(encoding.yError) || isFieldOrDatumDef(encoding.yError2);
  }

  function errorBarParams(spec, compositeMark, config) {
    var _a; // TODO: use selection


    var mark = spec.mark,
        encoding = spec.encoding,
        selection = spec.selection,
        _p = spec.projection,
        outerSpec = __rest(spec, ["mark", "encoding", "selection", "projection"]);

    var markDef = isMarkDef(mark) ? mark : {
      type: mark
    }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support

    if (selection) {
      warn$1(message.selectionNotSupported(compositeMark));
    }

    var _errorBarOrientAndInp = errorBarOrientAndInputType(spec, compositeMark),
        orient = _errorBarOrientAndInp.orient,
        inputType = _errorBarOrientAndInp.inputType;

    var _compositeMarkContinu = compositeMarkContinuousAxis(spec, orient, compositeMark),
        continuousAxisChannelDef = _compositeMarkContinu.continuousAxisChannelDef,
        continuousAxisChannelDef2 = _compositeMarkContinu.continuousAxisChannelDef2,
        continuousAxisChannelDefError = _compositeMarkContinu.continuousAxisChannelDefError,
        continuousAxisChannelDefError2 = _compositeMarkContinu.continuousAxisChannelDefError2,
        continuousAxis = _compositeMarkContinu.continuousAxis;

    var _errorBarAggregationA = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config),
        errorBarSpecificAggregate = _errorBarAggregationA.errorBarSpecificAggregate,
        postAggregateCalculates = _errorBarAggregationA.postAggregateCalculates,
        tooltipSummary = _errorBarAggregationA.tooltipSummary,
        tooltipTitleWithFieldName = _errorBarAggregationA.tooltipTitleWithFieldName;

    var _b = encoding,
        _c = continuousAxis,
        oldContinuousAxisChannelDef = _b[_c],
        _d = continuousAxis === 'x' ? 'x2' : 'y2',
        oldContinuousAxisChannelDef2 = _b[_d],
        _e = continuousAxis === 'x' ? 'xError' : 'yError',
        oldContinuousAxisChannelDefError = _b[_e],
        _f = continuousAxis === 'x' ? 'xError2' : 'yError2',
        oldContinuousAxisChannelDefError2 = _b[_f],
        oldEncodingWithoutContinuousAxis = __rest(_b, [_typeof(_c) === "symbol" ? _c : _c + "", _typeof(_d) === "symbol" ? _d : _d + "", _typeof(_e) === "symbol" ? _e : _e + "", _typeof(_f) === "symbol" ? _f : _f + ""]);

    var _extractTransformsFro = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config),
        bins = _extractTransformsFro.bins,
        timeUnits = _extractTransformsFro.timeUnits,
        oldAggregate = _extractTransformsFro.aggregate,
        oldGroupBy = _extractTransformsFro.groupby,
        encodingWithoutContinuousAxis = _extractTransformsFro.encoding;

    var aggregate = [].concat(_toConsumableArray(oldAggregate), _toConsumableArray(errorBarSpecificAggregate));
    var groupby = inputType !== 'raw' ? [] : oldGroupBy;
    var tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
    return {
      transform: [].concat(_toConsumableArray((_a = outerSpec.transform) !== null && _a !== void 0 ? _a : []), _toConsumableArray(bins), _toConsumableArray(timeUnits), _toConsumableArray(aggregate.length === 0 ? [] : [{
        aggregate: aggregate,
        groupby: groupby
      }]), _toConsumableArray(postAggregateCalculates)),
      groupby: groupby,
      continuousAxisChannelDef: continuousAxisChannelDef,
      continuousAxis: continuousAxis,
      encodingWithoutContinuousAxis: encodingWithoutContinuousAxis,
      ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',
      markDef: markDef,
      outerSpec: outerSpec,
      tooltipEncoding: tooltipEncoding
    };
  }

  function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
    var errorBarSpecificAggregate = [];
    var postAggregateCalculates = [];
    var continuousFieldName = continuousAxisChannelDef.field;
    var tooltipSummary;
    var tooltipTitleWithFieldName = false;

    if (inputType === 'raw') {
      var center = markDef.center ? markDef.center : markDef.extent ? markDef.extent === 'iqr' ? 'median' : 'mean' : config.errorbar.center;
      var extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';

      if (center === 'median' !== (extent === 'iqr')) {
        warn$1(message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));
      }

      if (extent === 'stderr' || extent === 'stdev') {
        errorBarSpecificAggregate = [{
          op: extent,
          field: continuousFieldName,
          as: 'extent_' + continuousFieldName
        }, {
          op: center,
          field: continuousFieldName,
          as: 'center_' + continuousFieldName
        }];
        postAggregateCalculates = [{
          calculate: "datum[\"center_".concat(continuousFieldName, "\"] + datum[\"extent_").concat(continuousFieldName, "\"]"),
          as: 'upper_' + continuousFieldName
        }, {
          calculate: "datum[\"center_".concat(continuousFieldName, "\"] - datum[\"extent_").concat(continuousFieldName, "\"]"),
          as: 'lower_' + continuousFieldName
        }];
        tooltipSummary = [{
          fieldPrefix: 'center_',
          titlePrefix: titlecase(center)
        }, {
          fieldPrefix: 'upper_',
          titlePrefix: getTitlePrefix(center, extent, '+')
        }, {
          fieldPrefix: 'lower_',
          titlePrefix: getTitlePrefix(center, extent, '-')
        }];
        tooltipTitleWithFieldName = true;
      } else {
        if (markDef.center && markDef.extent) {
          warn$1(message.errorBarCenterIsNotNeeded(markDef.extent, compositeMark));
        }

        var centerOp;
        var lowerExtentOp;
        var upperExtentOp;

        if (extent === 'ci') {
          centerOp = 'mean';
          lowerExtentOp = 'ci0';
          upperExtentOp = 'ci1';
        } else {
          centerOp = 'median';
          lowerExtentOp = 'q1';
          upperExtentOp = 'q3';
        }

        errorBarSpecificAggregate = [{
          op: lowerExtentOp,
          field: continuousFieldName,
          as: 'lower_' + continuousFieldName
        }, {
          op: upperExtentOp,
          field: continuousFieldName,
          as: 'upper_' + continuousFieldName
        }, {
          op: centerOp,
          field: continuousFieldName,
          as: 'center_' + continuousFieldName
        }];
        tooltipSummary = [{
          fieldPrefix: 'upper_',
          titlePrefix: title({
            field: continuousFieldName,
            aggregate: upperExtentOp,
            type: 'quantitative'
          }, config, {
            allowDisabling: false
          })
        }, {
          fieldPrefix: 'lower_',
          titlePrefix: title({
            field: continuousFieldName,
            aggregate: lowerExtentOp,
            type: 'quantitative'
          }, config, {
            allowDisabling: false
          })
        }, {
          fieldPrefix: 'center_',
          titlePrefix: title({
            field: continuousFieldName,
            aggregate: centerOp,
            type: 'quantitative'
          }, config, {
            allowDisabling: false
          })
        }];
      }
    } else {
      if (markDef.center || markDef.extent) {
        warn$1(message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
      }

      if (inputType === 'aggregated-upper-lower') {
        tooltipSummary = [];
        postAggregateCalculates = [{
          calculate: "datum[\"".concat(continuousAxisChannelDef2.field, "\"]"),
          as: 'upper_' + continuousFieldName
        }, {
          calculate: "datum[\"".concat(continuousFieldName, "\"]"),
          as: 'lower_' + continuousFieldName
        }];
      } else if (inputType === 'aggregated-error') {
        tooltipSummary = [{
          fieldPrefix: '',
          titlePrefix: continuousFieldName
        }];
        postAggregateCalculates = [{
          calculate: "datum[\"".concat(continuousFieldName, "\"] + datum[\"").concat(continuousAxisChannelDefError.field, "\"]"),
          as: 'upper_' + continuousFieldName
        }];

        if (continuousAxisChannelDefError2) {
          postAggregateCalculates.push({
            calculate: "datum[\"".concat(continuousFieldName, "\"] + datum[\"").concat(continuousAxisChannelDefError2.field, "\"]"),
            as: 'lower_' + continuousFieldName
          });
        } else {
          postAggregateCalculates.push({
            calculate: "datum[\"".concat(continuousFieldName, "\"] - datum[\"").concat(continuousAxisChannelDefError.field, "\"]"),
            as: 'lower_' + continuousFieldName
          });
        }
      }

      var _iterator = _createForOfIteratorHelper(postAggregateCalculates),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var postAggregateCalculate = _step.value;
          tooltipSummary.push({
            fieldPrefix: postAggregateCalculate.as.substring(0, 6),
            titlePrefix: replaceAll(replaceAll(postAggregateCalculate.calculate, 'datum["', ''), '"]', '')
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    return {
      postAggregateCalculates: postAggregateCalculates,
      errorBarSpecificAggregate: errorBarSpecificAggregate,
      tooltipSummary: tooltipSummary,
      tooltipTitleWithFieldName: tooltipTitleWithFieldName
    };
  }

  function getTitlePrefix(center, extent, operation) {
    return titlecase(center) + ' ' + operation + ' ' + extent;
  }

  var ERRORBAND = 'errorband';
  var ERRORBAND_PART_INDEX = {
    band: 1,
    borders: 1
  };
  var ERRORBAND_PARTS = keys$2(ERRORBAND_PART_INDEX);
  var errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);
  function normalizeErrorBand(spec, _ref) {
    var config = _ref.config;

    var _errorBarParams = errorBarParams(spec, ERRORBAND, config),
        transform = _errorBarParams.transform,
        continuousAxisChannelDef = _errorBarParams.continuousAxisChannelDef,
        continuousAxis = _errorBarParams.continuousAxis,
        encodingWithoutContinuousAxis = _errorBarParams.encodingWithoutContinuousAxis,
        markDef = _errorBarParams.markDef,
        outerSpec = _errorBarParams.outerSpec,
        tooltipEncoding = _errorBarParams.tooltipEncoding;

    var errorBandDef = markDef;
    var makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
    var is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;
    var bandMark = {
      type: is2D ? 'area' : 'rect'
    };
    var bordersMark = {
      type: is2D ? 'line' : 'rule'
    };

    var interpolate = _extends(_extends({}, errorBandDef.interpolate ? {
      interpolate: errorBandDef.interpolate
    } : {}), errorBandDef.tension && errorBandDef.interpolate ? {
      tension: errorBandDef.tension
    } : {});

    if (is2D) {
      bandMark = _extends(_extends({}, bandMark), interpolate);
      bordersMark = _extends(_extends({}, bordersMark), interpolate);
    } else if (errorBandDef.interpolate) {
      warn$1(message.errorBand1DNotSupport('interpolate'));
    } else if (errorBandDef.tension) {
      warn$1(message.errorBand1DNotSupport('tension'));
    }

    return _extends(_extends({}, outerSpec), {
      transform: transform,
      layer: [].concat(_toConsumableArray(makeErrorBandPart({
        partName: 'band',
        mark: bandMark,
        positionPrefix: 'lower',
        endPositionPrefix: 'upper',
        extraEncoding: tooltipEncoding
      })), _toConsumableArray(makeErrorBandPart({
        partName: 'borders',
        mark: bordersMark,
        positionPrefix: 'lower',
        extraEncoding: tooltipEncoding
      })), _toConsumableArray(makeErrorBandPart({
        partName: 'borders',
        mark: bordersMark,
        positionPrefix: 'upper',
        extraEncoding: tooltipEncoding
      })))
    });
  }

  /**
   * Registry index for all composite mark's normalizer
   */

  var compositeMarkRegistry = {};
  function add$3(mark, run, parts) {
    var normalizer = new CompositeMarkNormalizer(mark, run);
    compositeMarkRegistry[mark] = {
      normalizer: normalizer,
      parts: parts
    };
  }
  function getAllCompositeMarks() {
    return keys$2(compositeMarkRegistry);
  }
  add$3(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);
  add$3(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);
  add$3(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);

  var VL_ONLY_LEGEND_CONFIG = ['gradientHorizontalMaxLength', 'gradientHorizontalMinLength', 'gradientVerticalMaxLength', 'gradientVerticalMinLength', 'unselectedOpacity'];

  var LEGEND_SCALE_CHANNELS_INDEX = {
    size: 1,
    shape: 1,
    fill: 1,
    stroke: 1,
    strokeDash: 1,
    strokeWidth: 1,
    opacity: 1
  };
  var LEGEND_SCALE_CHANNELS = keys$2(LEGEND_SCALE_CHANNELS_INDEX);
  var SIGNAL_LEGEND_PROP_INDEX = {
    fillColor: {
      part: 'legend',
      vgProp: 'fill'
    },
    gradientStrokeColor: {
      part: 'gradient',
      vgProp: 'stroke'
    },
    labelColor: {
      part: 'labels',
      vgProp: 'fill'
    },
    strokeColor: {
      part: 'legend',
      vgProp: 'stroke'
    },
    symbolFillColor: {
      part: 'symbols',
      vgProp: 'fill'
    },
    symbolStrokeColor: {
      part: 'symbols',
      vgProp: 'stroke'
    },
    titleColor: {
      part: 'title',
      vgProp: 'fill'
    }
  };
  var defaultLegendConfig = {
    gradientHorizontalMaxLength: 200,
    gradientHorizontalMinLength: 100,
    gradientVerticalMaxLength: 200,
    gradientVerticalMinLength: 64,
    unselectedOpacity: 0.35
  };
  var COMMON_LEGEND_PROPERTY_INDEX = {
    clipHeight: 1,
    columnPadding: 1,
    columns: 1,
    cornerRadius: 1,
    direction: 1,
    fillColor: 1,
    format: 1,
    formatType: 1,
    gradientLength: 1,
    gradientOpacity: 1,
    gradientStrokeColor: 1,
    gradientStrokeWidth: 1,
    gradientThickness: 1,
    gridAlign: 1,
    labelAlign: 1,
    labelBaseline: 1,
    labelColor: 1,
    labelFont: 1,
    labelFontSize: 1,
    labelFontStyle: 1,
    labelFontWeight: 1,
    labelLimit: 1,
    labelOffset: 1,
    labelOpacity: 1,
    labelOverlap: 1,
    labelPadding: 1,
    labelSeparation: 1,
    legendX: 1,
    legendY: 1,
    offset: 1,
    orient: 1,
    padding: 1,
    rowPadding: 1,
    strokeColor: 1,
    symbolDash: 1,
    symbolDashOffset: 1,
    symbolFillColor: 1,
    symbolLimit: 1,
    symbolOffset: 1,
    symbolOpacity: 1,
    symbolSize: 1,
    symbolStrokeColor: 1,
    symbolStrokeWidth: 1,
    symbolType: 1,
    tickCount: 1,
    tickMinStep: 1,
    title: 1,
    titleAlign: 1,
    titleAnchor: 1,
    titleBaseline: 1,
    titleColor: 1,
    titleFont: 1,
    titleFontSize: 1,
    titleFontStyle: 1,
    titleFontWeight: 1,
    titleLimit: 1,
    titleLineHeight: 1,
    titleOpacity: 1,
    titleOrient: 1,
    titlePadding: 1,
    type: 1,
    values: 1,
    zindex: 1
  };

  var SELECTION_ID = '_vgsid_';
  var defaultConfig = {
    single: {
      on: 'click',
      fields: [SELECTION_ID],
      resolve: 'global',
      empty: 'all',
      clear: 'dblclick'
    },
    multi: {
      on: 'click',
      fields: [SELECTION_ID],
      toggle: 'event.shiftKey',
      resolve: 'global',
      empty: 'all',
      clear: 'dblclick'
    },
    interval: {
      on: '[mousedown, window:mouseup] > window:mousemove!',
      encodings: ['x', 'y'],
      translate: '[mousedown, window:mouseup] > window:mousemove!',
      zoom: 'wheel!',
      mark: {
        fill: '#333',
        fillOpacity: 0.125,
        stroke: 'white'
      },
      resolve: 'global',
      clear: 'dblclick'
    }
  };
  function isLegendBinding(bind) {
    return !!bind && (bind === 'legend' || !!bind.legend);
  }
  function isLegendStreamBinding(bind) {
    return isLegendBinding(bind) && isObject(bind);
  }

  function isAnyConcatSpec(spec) {
    return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);
  }
  function isConcatSpec(spec) {
    return 'concat' in spec;
  }
  function isVConcatSpec(spec) {
    return 'vconcat' in spec;
  }
  function isHConcatSpec(spec) {
    return 'hconcat' in spec;
  }

  function isStep(size) {
    return isObject(size) && size['step'] !== undefined;
  }
  function isFrameMixins(o) {
    return o['view'] || o['width'] || o['height'];
  }
  var DEFAULT_SPACING = 20;
  var COMPOSITION_LAYOUT_INDEX = {
    align: 1,
    bounds: 1,
    center: 1,
    columns: 1,
    spacing: 1
  };
  var COMPOSITION_LAYOUT_PROPERTIES = keys$2(COMPOSITION_LAYOUT_INDEX);
  function extractCompositionLayout(spec, specType, config) {
    var _a, _b;

    var compositionConfig = config[specType];
    var layout = {}; // Apply config first

    var spacingConfig = compositionConfig.spacing,
        columns = compositionConfig.columns;

    if (spacingConfig !== undefined) {
      layout.spacing = spacingConfig;
    }

    if (columns !== undefined) {
      if (isFacetSpec(spec) && !isFacetMapping(spec.facet) || isConcatSpec(spec)) {
        layout.columns = columns;
      }
    }

    if (isVConcatSpec(spec)) {
      layout.columns = 1;
    } // Then copy properties from the spec


    var _iterator = _createForOfIteratorHelper(COMPOSITION_LAYOUT_PROPERTIES),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prop = _step.value;

        if (spec[prop] !== undefined) {
          if (prop === 'spacing') {
            var spacing = spec[prop];
            layout[prop] = isNumber(spacing) ? spacing : {
              row: (_a = spacing.row) !== null && _a !== void 0 ? _a : spacingConfig,
              column: (_b = spacing.column) !== null && _b !== void 0 ? _b : spacingConfig
            };
          } else {
            layout[prop] = spec[prop];
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return layout;
  }

  function getViewConfigContinuousSize(viewConfig, channel) {
    var _a;

    return (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight']; // get width/height for backwards compatibility
  }
  function getViewConfigDiscreteStep(viewConfig, channel) {
    var size = getViewConfigDiscreteSize(viewConfig, channel);
    return isStep(size) ? size.step : DEFAULT_STEP;
  }
  function getViewConfigDiscreteSize(viewConfig, channel) {
    var _a;

    var size = (_a = viewConfig[channel]) !== null && _a !== void 0 ? _a : viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight']; // get width/height for backwards compatibility

    return getFirstDefined(size, {
      step: viewConfig.step
    });
  }
  var DEFAULT_STEP = 20;
  var defaultViewConfig = {
    continuousWidth: 200,
    continuousHeight: 200,
    step: DEFAULT_STEP
  };
  var defaultConfig$1 = {
    background: 'white',
    padding: 5,
    timeFormat: '%b %d, %Y',
    countTitle: 'Count of Records',
    view: defaultViewConfig,
    mark: defaultMarkConfig,
    arc: {},
    area: {},
    bar: defaultBarConfig,
    circle: {},
    geoshape: {},
    image: {},
    line: {},
    point: {},
    rect: defaultRectConfig,
    rule: {
      color: 'black'
    },
    square: {},
    text: {
      color: 'black'
    },
    tick: defaultTickConfig,
    trail: {},
    boxplot: {
      size: 14,
      extent: 1.5,
      box: {},
      median: {
        color: 'white'
      },
      outliers: {},
      rule: {},
      ticks: null
    },
    errorbar: {
      center: 'mean',
      rule: true,
      ticks: false
    },
    errorband: {
      band: {
        opacity: 0.3
      },
      borders: false
    },
    scale: defaultScaleConfig,
    projection: {},
    legend: defaultLegendConfig,
    header: {
      titlePadding: 10,
      labelPadding: 10
    },
    headerColumn: {},
    headerRow: {},
    headerFacet: {},
    selection: defaultConfig,
    style: {},
    title: {},
    facet: {
      spacing: DEFAULT_SPACING
    },
    concat: {
      spacing: DEFAULT_SPACING
    }
  }; // Tableau10 color palette, copied from `vegaScale.scheme('tableau10')`

  var tab10 = ['#4c78a8', '#f58518', '#e45756', '#72b7b2', '#54a24b', '#eeca3b', '#b279a2', '#ff9da6', '#9d755d', '#bab0ac'];
  var DEFAULT_FONT_SIZE = {
    text: 11,
    guideLabel: 10,
    guideTitle: 11,
    groupTitle: 13,
    groupSubtitle: 12
  };
  var DEFAULT_COLOR = {
    blue: tab10[0],
    orange: tab10[1],
    red: tab10[2],
    teal: tab10[3],
    green: tab10[4],
    yellow: tab10[5],
    purple: tab10[6],
    pink: tab10[7],
    brown: tab10[8],
    gray0: '#000',
    gray1: '#111',
    gray2: '#222',
    gray3: '#333',
    gray4: '#444',
    gray5: '#555',
    gray6: '#666',
    gray7: '#777',
    gray8: '#888',
    gray9: '#999',
    gray10: '#aaa',
    gray11: '#bbb',
    gray12: '#ccc',
    gray13: '#ddd',
    gray14: '#eee',
    gray15: '#fff'
  };
  function colorSignalConfig() {
    var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      signals: [{
        name: 'color',
        value: isObject(color) ? _extends(_extends({}, DEFAULT_COLOR), color) : DEFAULT_COLOR
      }],
      mark: {
        color: {
          signal: 'color.blue'
        }
      },
      rule: {
        color: {
          signal: 'color.gray0'
        }
      },
      text: {
        color: {
          signal: 'color.gray0'
        }
      },
      style: {
        'guide-label': {
          fill: {
            signal: 'color.gray0'
          }
        },
        'guide-title': {
          fill: {
            signal: 'color.gray0'
          }
        },
        'group-title': {
          fill: {
            signal: 'color.gray0'
          }
        },
        'group-subtitle': {
          fill: {
            signal: 'color.gray0'
          }
        },
        cell: {
          stroke: {
            signal: 'color.gray8'
          }
        }
      },
      axis: {
        domainColor: {
          signal: 'color.gray13'
        },
        gridColor: {
          signal: 'color.gray8'
        },
        tickColor: {
          signal: 'color.gray13'
        }
      },
      range: {
        category: [{
          signal: 'color.blue'
        }, {
          signal: 'color.orange'
        }, {
          signal: 'color.red'
        }, {
          signal: 'color.teal'
        }, {
          signal: 'color.green'
        }, {
          signal: 'color.yellow'
        }, {
          signal: 'color.purple'
        }, {
          signal: 'color.pink'
        }, {
          signal: 'color.brown'
        }, {
          signal: 'color.grey8'
        }]
      }
    };
  }
  function fontSizeSignalConfig(fontSize) {
    return {
      signals: [{
        name: 'fontSize',
        value: isObject(fontSize) ? _extends(_extends({}, DEFAULT_FONT_SIZE), fontSize) : DEFAULT_FONT_SIZE
      }],
      text: {
        fontSize: {
          signal: 'fontSize.text'
        }
      },
      style: {
        'guide-label': {
          fontSize: {
            signal: 'fontSize.guideLabel'
          }
        },
        'guide-title': {
          fontSize: {
            signal: 'fontSize.guideTitle'
          }
        },
        'group-title': {
          fontSize: {
            signal: 'fontSize.groupTitle'
          }
        },
        'group-subtitle': {
          fontSize: {
            signal: 'fontSize.groupSubtitle'
          }
        }
      }
    };
  }
  function fontConfig(font) {
    return {
      text: {
        font: font
      },
      style: {
        'guide-label': {
          font: font
        },
        'guide-title': {
          font: font
        },
        'group-title': {
          font: font
        },
        'group-subtitle': {
          font: font
        }
      }
    };
  }
  function initConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var color = config.color,
        font = config.font,
        fontSize = config.fontSize,
        restConfig = __rest(config, ["color", "font", "fontSize"]);

    return mergeConfig({}, defaultConfig$1, font ? fontConfig(font) : {}, color ? colorSignalConfig(color) : {}, fontSize ? fontSizeSignalConfig(fontSize) : {}, restConfig || {});
  }
  var MARK_STYLES = ['view'].concat(_toConsumableArray(PRIMITIVE_MARKS));
  var VL_ONLY_CONFIG_PROPERTIES = ['color', 'fontSize', 'background', 'padding', 'facet', 'concat', 'numberFormat', 'timeFormat', 'countTitle', 'header', 'axisQuantitative', 'axisTemporal', 'axisDiscrete', 'axisPoint', 'axisXBand', 'axisXPoint', 'axisXDiscrete', 'axisXQuantitative', 'axisXTemporal', 'axisYBand', 'axisYPoint', 'axisYDiscrete', 'axisYQuantitative', 'axisYTemporal', 'scale', 'selection', 'overlay' // FIXME: Redesign and unhide this
  ];

  var VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = _extends({
    view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step']
  }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);

  function stripAndRedirectConfig(config) {
    config = duplicate(config);

    var _iterator = _createForOfIteratorHelper(VL_ONLY_CONFIG_PROPERTIES),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _prop4 = _step.value;
        delete config[_prop4];
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (config.axis) {
      // delete condition axis config
      for (var prop in config.axis) {
        if (isConditionalAxisValue(config.axis[prop])) {
          delete config.axis[prop];
        }
      }
    }

    if (config.legend) {
      var _iterator2 = _createForOfIteratorHelper(VL_ONLY_LEGEND_CONFIG),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _prop = _step2.value;
          delete config.legend[_prop];
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } // Remove Vega-Lite only generic mark config


    if (config.mark) {
      var _iterator3 = _createForOfIteratorHelper(VL_ONLY_MARK_CONFIG_PROPERTIES),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _prop2 = _step3.value;
          delete config.mark[_prop2];
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }

    var _iterator4 = _createForOfIteratorHelper(MARK_STYLES),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var markType = _step4.value;

        // Remove Vega-Lite-only mark config
        var _iterator6 = _createForOfIteratorHelper(VL_ONLY_MARK_CONFIG_PROPERTIES),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _prop6 = _step6.value;
            delete config[markType][_prop6];
          } // Remove Vega-Lite only mark-specific config

        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        var vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];

        if (vlOnlyMarkSpecificConfigs) {
          var _iterator7 = _createForOfIteratorHelper(vlOnlyMarkSpecificConfigs),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _prop5 = _step7.value;
              delete config[markType][_prop5];
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        } // Redirect mark config to config.style so that mark config only affect its own mark type
        // without affecting other marks that share the same underlying Vega marks.
        // For example, config.rect should not affect bar marks.


        redirectConfigToStyleConfig(config, markType);
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    var _iterator5 = _createForOfIteratorHelper(getAllCompositeMarks()),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var m = _step5.value;
        // Clean up the composite mark config as we don't need them in the output specs anymore
        delete config[m];
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    redirectTitleConfig(config); // Remove empty config objects.

    for (var _prop3 in config) {
      if (isObject(config[_prop3]) && keys$2(config[_prop3]).length === 0) {
        delete config[_prop3];
      }
    }

    return keys$2(config).length > 0 ? config : undefined;
  }
  /**
   *
   * Redirect config.title -- so that title config do not affect header labels,
   * which also uses `title` directive to implement.
   *
   * For subtitle configs in config.title, keep them in config.title as header titles never have subtitles.
   */

  function redirectTitleConfig(config) {
    var _extractTitleConfig = extractTitleConfig(config.title),
        m = _extractTitleConfig.mark,
        subtitle = _extractTitleConfig.subtitle;

    var style = _extends(_extends({}, config.style['group-title']), m); // set config.style if it is not an empty object


    if (keys$2(style).length > 0) {
      config.style['group-title'] = style;
    } //


    if (keys$2(subtitle).length > 0) {
      config.title = subtitle;
    } else {
      delete config.title;
    }
  }

  function redirectConfigToStyleConfig(config, prop, // string = composite mark
  toProp, compositeMarkPart) {
    var propConfig = compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];

    if (prop === 'view') {
      toProp = 'cell'; // View's default style is "cell"
    }

    var style = _extends(_extends({}, propConfig), config.style[toProp !== null && toProp !== void 0 ? toProp : prop]); // set config.style if it is not an empty object


    if (keys$2(style).length > 0) {
      config.style[toProp !== null && toProp !== void 0 ? toProp : prop] = style;
    }

    if (!compositeMarkPart) {
      // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.
      delete config[prop];
    }
  }

  function isLayerSpec(spec) {
    return 'layer' in spec;
  }

  function isRepeatSpec(spec) {
    return 'repeat' in spec;
  }
  function isLayerRepeatSpec(spec) {
    return !isArray(spec.repeat) && spec.repeat['layer'];
  }

  var SpecMapper = /*#__PURE__*/function () {
    function SpecMapper() {
      _classCallCheck(this, SpecMapper);
    }

    _createClass(SpecMapper, [{
      key: "map",
      value: function map(spec, params) {
        if (isFacetSpec(spec)) {
          return this.mapFacet(spec, params);
        } else if (isRepeatSpec(spec)) {
          return this.mapRepeat(spec, params);
        } else if (isHConcatSpec(spec)) {
          return this.mapHConcat(spec, params);
        } else if (isVConcatSpec(spec)) {
          return this.mapVConcat(spec, params);
        } else if (isConcatSpec(spec)) {
          return this.mapConcat(spec, params);
        } else {
          return this.mapLayerOrUnit(spec, params);
        }
      }
    }, {
      key: "mapLayerOrUnit",
      value: function mapLayerOrUnit(spec, params) {
        if (isLayerSpec(spec)) {
          return this.mapLayer(spec, params);
        } else if (isUnitSpec(spec)) {
          return this.mapUnit(spec, params);
        }

        throw new Error(message.invalidSpec(spec));
      }
    }, {
      key: "mapLayer",
      value: function mapLayer(spec, params) {
        var _this = this;

        return _extends(_extends({}, spec), {
          layer: spec.layer.map(function (subspec) {
            return _this.mapLayerOrUnit(subspec, params);
          })
        });
      }
    }, {
      key: "mapHConcat",
      value: function mapHConcat(spec, params) {
        var _this2 = this;

        return _extends(_extends({}, spec), {
          hconcat: spec.hconcat.map(function (subspec) {
            return _this2.map(subspec, params);
          })
        });
      }
    }, {
      key: "mapVConcat",
      value: function mapVConcat(spec, params) {
        var _this3 = this;

        return _extends(_extends({}, spec), {
          vconcat: spec.vconcat.map(function (subspec) {
            return _this3.map(subspec, params);
          })
        });
      }
    }, {
      key: "mapConcat",
      value: function mapConcat(spec, params) {
        var _this4 = this;

        var concat = spec.concat,
            rest = __rest(spec, ["concat"]);

        return _extends(_extends({}, rest), {
          concat: concat.map(function (subspec) {
            return _this4.map(subspec, params);
          })
        });
      }
    }, {
      key: "mapFacet",
      value: function mapFacet(spec, params) {
        return _extends(_extends({}, spec), {
          // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
          spec: this.map(spec.spec, params)
        });
      }
    }, {
      key: "mapRepeat",
      value: function mapRepeat(spec, params) {
        return _extends(_extends({}, spec), {
          // as any is required here since TS cannot infer that the output type satisfies the input type
          spec: this.map(spec.spec, params)
        });
      }
    }]);

    return SpecMapper;
  }();

  var STACK_OFFSET_INDEX = {
    zero: 1,
    center: 1,
    normalize: 1
  };
  function isStackOffset(s) {
    return !!STACK_OFFSET_INDEX[s];
  }
  var STACKABLE_MARKS = [ARC, BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK];
  var STACK_BY_DEFAULT_MARKS = [BAR, AREA, ARC];

  function potentialStackedChannel(encoding, mark, x) {
    var _a, _b;

    var y = x === 'x' ? 'y' : 'radius';
    var xDef = encoding[x];
    var yDef = encoding[y];

    if (isFieldDef(xDef) && isFieldDef(yDef)) {
      if (channelDefType(xDef) === 'quantitative' && channelDefType(yDef) === 'quantitative') {
        if (xDef.stack) {
          return x;
        } else if (yDef.stack) {
          return y;
        }

        var xAggregate = isFieldDef(xDef) && !!xDef.aggregate;
        var yAggregate = isFieldDef(yDef) && !!yDef.aggregate; // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y

        if (xAggregate !== yAggregate) {
          return xAggregate ? x : y;
        } else {
          var xScale = (_a = xDef.scale) === null || _a === void 0 ? void 0 : _a.type;
          var yScale = (_b = yDef.scale) === null || _b === void 0 ? void 0 : _b.type;

          if (xScale && xScale !== 'linear') {
            return y;
          } else if (yScale && yScale !== 'linear') {
            return x;
          }
        }
      } else if (channelDefType(xDef) === 'quantitative') {
        return x;
      } else if (channelDefType(yDef) === 'quantitative') {
        return y;
      }
    } else if (channelDefType(xDef) === 'quantitative') {
      return x;
    } else if (channelDefType(yDef) === 'quantitative') {
      return y;
    }

    return undefined;
  }

  function getDimensionChannel(channel) {
    switch (channel) {
      case 'x':
        return 'y';

      case 'y':
        return 'x';

      case 'theta':
        return 'radius';

      case 'radius':
        return 'theta';
    }
  } // Note: CompassQL uses this method and only pass in required properties of each argument object.
  // If required properties change, make sure to update CompassQL.


  function stack(m, encoding) {
    var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var mark = isMarkDef(m) ? m.type : m; // Should have stackable mark

    if (!contains$1(STACKABLE_MARKS, mark)) {
      return null;
    } // Run potential stacked twice, one for Cartesian and another for Polar,
    // so text marks can be stacked in any of the coordinates.
    // Note: The logic here is not perfectly correct.  If we want to support stacked dot plots where each dot is a pie chart with label, we have to change the stack logic here to separate Cartesian stacking for polar stacking.
    // However, since we probably never want to do that, let's just note the limitation here.


    var fieldChannel = potentialStackedChannel(encoding, mark, 'x') || potentialStackedChannel(encoding, mark, 'theta');

    if (!fieldChannel) {
      return null;
    }

    var stackedFieldDef = encoding[fieldChannel];
    var stackedField = isFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;
    var dimensionChannel = getDimensionChannel(fieldChannel);
    var dimensionDef = encoding[dimensionChannel];
    var dimensionField = isFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined; // avoid grouping by the stacked field

    if (dimensionField === stackedField) {
      dimensionField = undefined;
      dimensionDef = undefined;
      dimensionChannel = undefined;
    } // Should have grouping level of detail that is different from the dimension field


    var stackBy = NONPOSITION_CHANNELS.reduce(function (sc, channel) {
      // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)
      if (channel !== 'tooltip' && channelHasField(encoding, channel)) {
        var channelDef = encoding[channel];

        var _iterator = _createForOfIteratorHelper(array(channelDef)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var cDef = _step.value;
            var fieldDef = getFieldDef(cDef);

            if (fieldDef.aggregate) {
              continue;
            } // Check whether the channel's field is identical to x/y's field or if the channel is a repeat


            var f = vgField(fieldDef, {});

            if ( // if fielddef is a repeat, just include it in the stack by
            !f || // otherwise, the field must be different from x and y fields.
            f !== dimensionField) {
              sc.push({
                channel: channel,
                fieldDef: fieldDef
              });
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return sc;
    }, []); // Automatically determine offset

    var offset;

    if (stackedFieldDef.stack !== undefined) {
      if (isBoolean(stackedFieldDef.stack)) {
        offset = stackedFieldDef.stack ? 'zero' : null;
      } else {
        offset = stackedFieldDef.stack;
      }
    } else if (stackBy.length > 0 && contains$1(STACK_BY_DEFAULT_MARKS, mark)) {
      // Bar and Area with sum ops are automatically stacked by default
      offset = 'zero';
    }

    if (!offset || !isStackOffset(offset)) {
      return null;
    }

    if (isAggregate(encoding) && stackBy.length === 0) {
      return null;
    } // warn when stacking non-linear


    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {
      if (opt.disallowNonLinearStack) {
        return null;
      } else {
        warn$1(message.cannotStackNonLinearScale(stackedFieldDef.scale.type));
      }
    } // Check if it is a ranged mark


    if (isFieldOrDatumDef(encoding[getSecondaryRangeChannel(fieldChannel)])) {
      if (stackedFieldDef.stack !== undefined) {
        warn$1(message.cannotStackRangedMark(fieldChannel));
      }

      return null;
    } // Warn if stacking non-summative aggregate


    if (isFieldDef(stackedFieldDef) && stackedFieldDef.aggregate && !contains$1(SUM_OPS, stackedFieldDef.aggregate)) {
      warn$1(message.stackNonSummativeAggregate(stackedFieldDef.aggregate));
    }

    return {
      groupbyChannel: dimensionDef ? dimensionChannel : undefined,
      groupbyField: dimensionField,
      fieldChannel: fieldChannel,
      impute: stackedFieldDef.impute === null ? false : isPathMark(mark),
      stackBy: stackBy,
      offset: offset
    };
  }

  function dropLineAndPoint(markDef) {
    var _point = markDef.point,
        _line = markDef.line,
        mark = __rest(markDef, ["point", "line"]);

    return keys$2(mark).length > 1 ? mark : mark.type;
  }

  function dropLineAndPointFromConfig(config) {
    for (var _i = 0, _arr = ['line', 'area', 'rule', 'trail']; _i < _arr.length; _i++) {
      var mark = _arr[_i];

      if (config[mark]) {
        config = _extends(_extends({}, config), _defineProperty({}, mark, omit(config[mark], ['point', 'line'])));
      }
    }

    return config;
  }

  function getPointOverlay(markDef) {
    var markConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var encoding = arguments.length > 2 ? arguments[2] : undefined;

    if (markDef.point === 'transparent') {
      return {
        opacity: 0
      };
    } else if (markDef.point) {
      // truthy : true or object
      return isObject(markDef.point) ? markDef.point : {};
    } else if (markDef.point !== undefined) {
      // false or null
      return null;
    } else {
      // undefined (not disabled)
      if (markConfig.point || encoding.shape) {
        // enable point overlay if config[mark].point is truthy or if encoding.shape is provided
        return isObject(markConfig.point) ? markConfig.point : {};
      } // markDef.point is defined as falsy


      return undefined;
    }
  }

  function getLineOverlay(markDef) {
    var markConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (markDef.line) {
      // true or object
      return markDef.line === true ? {} : markDef.line;
    } else if (markDef.line !== undefined) {
      // false or null
      return null;
    } else {
      // undefined (not disabled)
      if (markConfig.line) {
        // enable line overlay if config[mark].line is truthy
        return markConfig.line === true ? {} : markConfig.line;
      } // markDef.point is defined as falsy


      return undefined;
    }
  }

  var PathOverlayNormalizer = /*#__PURE__*/function () {
    function PathOverlayNormalizer() {
      _classCallCheck(this, PathOverlayNormalizer);

      this.name = 'path-overlay';
    }

    _createClass(PathOverlayNormalizer, [{
      key: "hasMatchingType",
      value: function hasMatchingType(spec, config) {
        if (isUnitSpec(spec)) {
          var mark = spec.mark,
              encoding = spec.encoding;
          var markDef = isMarkDef(mark) ? mark : {
            type: mark
          };

          switch (markDef.type) {
            case 'line':
            case 'rule':
            case 'trail':
              return !!getPointOverlay(markDef, config[markDef.type], encoding);

            case 'area':
              return (// false / null are also included as we want to remove the properties
                !!getPointOverlay(markDef, config[markDef.type], encoding) || !!getLineOverlay(markDef, config[markDef.type])
              );
          }
        }

        return false;
      }
    }, {
      key: "run",
      value: function run(spec, params, normalize) {
        var config = params.config;

        var selection = spec.selection,
            projection = spec.projection,
            encoding = spec.encoding,
            mark = spec.mark,
            outerSpec = __rest(spec, ["selection", "projection", "encoding", "mark"]);

        var markDef = isMarkDef(mark) ? mark : {
          type: mark
        };
        var pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);
        var lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);
        var layer = [_extends(_extends({}, selection ? {
          selection: selection
        } : {}), {
          mark: dropLineAndPoint(_extends(_extends({}, markDef.type === 'area' && markDef.opacity === undefined && markDef.fillOpacity === undefined ? {
            opacity: 0.7
          } : {}), markDef)),
          // drop shape from encoding as this might be used to trigger point overlay
          encoding: omit(encoding, ['shape'])
        })]; // FIXME: determine rules for applying selections.
        // Need to copy stack config to overlayed layer

        var stackProps = stack(markDef, encoding);
        var overlayEncoding = encoding;

        if (stackProps) {
          var stackFieldChannel = stackProps.fieldChannel,
              offset = stackProps.offset;
          overlayEncoding = _extends(_extends({}, encoding), _defineProperty({}, stackFieldChannel, _extends(_extends({}, encoding[stackFieldChannel]), offset ? {
            stack: offset
          } : {})));
        }

        if (lineOverlay) {
          layer.push(_extends(_extends({}, projection ? {
            projection: projection
          } : {}), {
            mark: _extends(_extends({
              type: 'line'
            }, pick$2(markDef, ['clip', 'interpolate', 'tension', 'tooltip'])), lineOverlay),
            encoding: overlayEncoding
          }));
        }

        if (pointOverlay) {
          layer.push(_extends(_extends({}, projection ? {
            projection: projection
          } : {}), {
            mark: _extends(_extends({
              type: 'point',
              opacity: 1,
              filled: true
            }, pick$2(markDef, ['clip', 'tooltip'])), pointOverlay),
            encoding: overlayEncoding
          }));
        }

        return normalize(_extends(_extends({}, outerSpec), {
          layer: layer
        }), _extends(_extends({}, params), {
          config: dropLineAndPointFromConfig(config)
        }));
      }
    }]);

    return PathOverlayNormalizer;
  }();

  var RangeStepNormalizer = /*#__PURE__*/function () {
    function RangeStepNormalizer() {
      _classCallCheck(this, RangeStepNormalizer);

      this.name = 'RangeStep';
    }

    _createClass(RangeStepNormalizer, [{
      key: "hasMatchingType",
      value: function hasMatchingType(spec) {
        var _a;

        if (isUnitSpec(spec) && spec.encoding) {
          var _iterator = _createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var channel = _step.value;
              var def = spec.encoding[channel];

              if (def && isFieldOrDatumDef(def)) {
                if ((_a = def === null || def === void 0 ? void 0 : def.scale) === null || _a === void 0 ? void 0 : _a['rangeStep']) {
                  return true;
                }
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        return false;
      }
    }, {
      key: "run",
      value: function run(spec) {
        var _a;

        var sizeMixins = {};

        var encoding = _extends({}, spec.encoding);

        var _iterator2 = _createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var channel = _step2.value;
            var sizeType = getSizeChannel(channel);
            var def = encoding[channel];

            if (def && isFieldOrDatumDef(def)) {
              if ((_a = def === null || def === void 0 ? void 0 : def.scale) === null || _a === void 0 ? void 0 : _a['rangeStep']) {
                var scale = def.scale,
                    defWithoutScale = __rest(def, ["scale"]);

                var _b = scale,
                    rangeStep = _b.rangeStep,
                    scaleWithoutRangeStep = __rest(_b, ["rangeStep"]);

                sizeMixins[sizeType] = {
                  step: scale['rangeStep']
                };
                warn$1(message.RANGE_STEP_DEPRECATED);
                encoding = _extends(_extends({}, encoding), _defineProperty({}, channel, _extends(_extends({}, defWithoutScale), keys$2(scaleWithoutRangeStep).length > 0 ? {
                  scale: scaleWithoutRangeStep
                } : {})));
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return _extends(_extends(_extends({}, sizeMixins), spec), {
          encoding: encoding
        });
      }
    }]);

    return RangeStepNormalizer;
  }();

  function replaceRepeaterInFacet(facet, repeater) {
    if (!repeater) {
      return facet;
    }

    if (isFacetMapping(facet)) {
      return replaceRepeaterInMapping(facet, repeater);
    }

    return replaceRepeaterInFieldDef(facet, repeater);
  }
  function replaceRepeaterInEncoding(encoding, repeater) {
    if (!repeater) {
      return encoding;
    }

    return replaceRepeaterInMapping(encoding, repeater);
  }
  /**
   * Replaces repeated value and returns if the repeated value is valid.
   */

  function replaceRepeatInProp(prop, o, repeater) {
    var val = o[prop];

    if (isRepeatRef(val)) {
      if (val.repeat in repeater) {
        return _extends(_extends({}, o), _defineProperty({}, prop, repeater[val.repeat]));
      } else {
        warn$1(message.noSuchRepeatedValue(val.repeat));
        return undefined;
      }
    }

    return o;
  }
  /**
   * Replace repeater values in a field def with the concrete field name.
   */


  function replaceRepeaterInFieldDef(fieldDef, repeater) {
    fieldDef = replaceRepeatInProp('field', fieldDef, repeater);

    if (fieldDef === undefined) {
      // the field def should be ignored
      return undefined;
    } else if (fieldDef === null) {
      return null;
    }

    if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {
      var sort = replaceRepeatInProp('field', fieldDef.sort, repeater);
      fieldDef = _extends(_extends({}, fieldDef), sort ? {
        sort: sort
      } : {});
    }

    return fieldDef;
  }

  function replaceRepeaterInFieldOrDatumDef(def, repeater) {
    if (isFieldDef(def)) {
      return replaceRepeaterInFieldDef(def, repeater);
    } else {
      var datumDef = replaceRepeatInProp('datum', def, repeater);

      if (datumDef !== def && !datumDef.type) {
        datumDef.type = 'nominal';
      }

      return datumDef;
    }
  }

  function replaceRepeaterInChannelDef(channelDef, repeater) {
    if (isFieldOrDatumDef(channelDef)) {
      var fd = replaceRepeaterInFieldOrDatumDef(channelDef, repeater);

      if (fd) {
        return fd;
      } else if (isConditionalDef(channelDef)) {
        return {
          condition: channelDef.condition
        };
      }
    } else {
      if (hasConditionalFieldOrDatumDef(channelDef)) {
        var _fd = replaceRepeaterInFieldOrDatumDef(channelDef.condition, repeater);

        if (_fd) {
          return _extends(_extends({}, channelDef), {
            condition: _fd
          });
        } else {
          var condition = channelDef.condition,
              channelDefWithoutCondition = __rest(channelDef, ["condition"]);

          return channelDefWithoutCondition;
        }
      }

      return channelDef;
    }

    return undefined;
  }

  function replaceRepeaterInMapping(mapping, repeater) {
    var out = {};

    for (var channel in mapping) {
      if (hasOwnProperty$1(mapping, channel)) {
        var channelDef = mapping[channel];

        if (isArray(channelDef)) {
          // array cannot have condition
          out[channel] = channelDef // somehow we need to cast it here
          .map(function (cd) {
            return replaceRepeaterInChannelDef(cd, repeater);
          }).filter(function (cd) {
            return cd;
          });
        } else {
          var cd = replaceRepeaterInChannelDef(channelDef, repeater);

          if (cd !== undefined) {
            out[channel] = cd;
          }
        }
      }
    }

    return out;
  }

  var RuleForRangedLineNormalizer = /*#__PURE__*/function () {
    function RuleForRangedLineNormalizer() {
      _classCallCheck(this, RuleForRangedLineNormalizer);

      this.name = 'RuleForRangedLine';
    }

    _createClass(RuleForRangedLineNormalizer, [{
      key: "hasMatchingType",
      value: function hasMatchingType(spec) {
        if (isUnitSpec(spec)) {
          var encoding = spec.encoding,
              mark = spec.mark;

          if (mark === 'line') {
            var _iterator = _createForOfIteratorHelper(SECONDARY_RANGE_CHANNEL),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var channel = _step.value;
                var mainChannel = getMainRangeChannel(channel);
                var mainChannelDef = encoding[mainChannel];

                if (encoding[channel]) {
                  if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {
                    return true;
                  }
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }

        return false;
      }
    }, {
      key: "run",
      value: function run(spec, params, normalize) {
        var encoding = spec.encoding;
        warn$1(message.lineWithRange(!!encoding.x2, !!encoding.y2));
        return normalize(_extends(_extends({}, spec), {
          mark: 'rule'
        }), params);
      }
    }]);

    return RuleForRangedLineNormalizer;
  }();

  var CoreNormalizer = /*#__PURE__*/function (_SpecMapper) {
    _inherits(CoreNormalizer, _SpecMapper);

    var _super = _createSuper(CoreNormalizer);

    function CoreNormalizer() {
      var _this;

      _classCallCheck(this, CoreNormalizer);

      _this = _super.apply(this, arguments);
      _this.nonFacetUnitNormalizers = [boxPlotNormalizer, errorBarNormalizer, errorBandNormalizer, new PathOverlayNormalizer(), new RuleForRangedLineNormalizer(), new RangeStepNormalizer()];
      return _this;
    }

    _createClass(CoreNormalizer, [{
      key: "map",
      value: function map(spec, params) {
        // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.
        if (isUnitSpec(spec)) {
          var hasRow = channelHasField(spec.encoding, ROW);
          var hasColumn = channelHasField(spec.encoding, COLUMN);
          var hasFacet = channelHasField(spec.encoding, FACET);

          if (hasRow || hasColumn || hasFacet) {
            return this.mapFacetedUnit(spec, params);
          }
        }

        return _get(_getPrototypeOf(CoreNormalizer.prototype), "map", this).call(this, spec, params);
      } // This is for normalizing non-facet unit

    }, {
      key: "mapUnit",
      value: function mapUnit(spec, params) {
        var parentEncoding = params.parentEncoding,
            parentProjection = params.parentProjection;

        var specWithReplacedEncoding = _extends(_extends({}, spec), {
          encoding: replaceRepeaterInEncoding(spec.encoding, params.repeater)
        });

        if (parentEncoding || parentProjection) {
          return this.mapUnitWithParentEncodingOrProjection(specWithReplacedEncoding, params);
        }

        var normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);

        var _iterator = _createForOfIteratorHelper(this.nonFacetUnitNormalizers),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var unitNormalizer = _step.value;

            if (unitNormalizer.hasMatchingType(specWithReplacedEncoding, params.config)) {
              return unitNormalizer.run(specWithReplacedEncoding, params, normalizeLayerOrUnit);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return specWithReplacedEncoding;
      }
    }, {
      key: "mapRepeat",
      value: function mapRepeat(spec, params) {
        if (isLayerRepeatSpec(spec)) {
          return this.mapLayerRepeat(spec, params);
        } else {
          return this.mapNonLayerRepeat(spec, params);
        }
      }
    }, {
      key: "mapLayerRepeat",
      value: function mapLayerRepeat(spec, params) {
        var _this2 = this;

        var repeat = spec.repeat,
            childSpec = spec.spec,
            rest = __rest(spec, ["repeat", "spec"]);

        var row = repeat.row,
            column = repeat.column,
            layer = repeat.layer;
        var _params$repeater = params.repeater,
            repeater = _params$repeater === void 0 ? {} : _params$repeater,
            _params$repeaterPrefi = params.repeaterPrefix,
            repeaterPrefix = _params$repeaterPrefi === void 0 ? '' : _params$repeaterPrefi;

        if (row || column) {
          return this.mapRepeat(_extends(_extends({}, spec), {
            repeat: _extends(_extends({}, row ? {
              row: row
            } : {}), column ? {
              column: column
            } : {}),
            spec: {
              repeat: {
                layer: layer
              },
              spec: childSpec
            }
          }), params);
        } else {
          return _extends(_extends({}, rest), {
            layer: layer.map(function (layerValue) {
              var childRepeater = _extends(_extends({}, repeater), {
                layer: layerValue
              });

              var childName = (childSpec.name || '') + repeaterPrefix + "child__layer_".concat(varName(layerValue));

              var child = _this2.mapLayerOrUnit(childSpec, _extends(_extends({}, params), {
                repeater: childRepeater,
                repeaterPrefix: childName
              }));

              child.name = childName;
              return child;
            })
          });
        }
      }
    }, {
      key: "mapNonLayerRepeat",
      value: function mapNonLayerRepeat(spec, params) {
        var _a;

        var _spec = spec,
            repeat = _spec.repeat,
            childSpec = _spec.spec,
            data = _spec.data,
            remainingProperties = __rest(spec, ["repeat", "spec", "data"]);

        if (!isArray(repeat) && spec.columns) {
          // is repeat with row/column
          spec = omit(spec, ['columns']);
          warn$1(message.columnsNotSupportByRowCol('repeat'));
        }

        var concat = [];
        var _params$repeater2 = params.repeater,
            repeater = _params$repeater2 === void 0 ? {} : _params$repeater2,
            _params$repeaterPrefi2 = params.repeaterPrefix,
            repeaterPrefix = _params$repeaterPrefi2 === void 0 ? '' : _params$repeaterPrefi2;
        var row = !isArray(repeat) && repeat.row || [repeater ? repeater.row : null];
        var column = !isArray(repeat) && repeat.column || [repeater ? repeater.column : null];
        var repeatValues = isArray(repeat) && repeat || [repeater ? repeater.repeat : null]; // cross product

        var _iterator2 = _createForOfIteratorHelper(repeatValues),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var repeatValue = _step2.value;

            var _iterator3 = _createForOfIteratorHelper(row),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var rowValue = _step3.value;

                var _iterator4 = _createForOfIteratorHelper(column),
                    _step4;

                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    var columnValue = _step4.value;
                    var childRepeater = {
                      repeat: repeatValue,
                      row: rowValue,
                      column: columnValue,
                      layer: repeater.layer
                    };
                    var childName = (childSpec.name || '') + repeaterPrefix + 'child__' + (isArray(repeat) ? "".concat(varName(repeatValue)) : (repeat.row ? "row_".concat(varName(rowValue)) : '') + (repeat.column ? "column_".concat(varName(columnValue)) : ''));
                    var child = this.map(childSpec, _extends(_extends({}, params), {
                      repeater: childRepeater,
                      repeaterPrefix: childName
                    }));
                    child.name = childName; // we move data up

                    concat.push(omit(child, ['data']));
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var columns = isArray(repeat) ? spec.columns : repeat.column ? repeat.column.length : 1;
        return _extends(_extends({
          data: (_a = childSpec.data) !== null && _a !== void 0 ? _a : data,
          align: 'all'
        }, remainingProperties), {
          columns: columns,
          concat: concat
        });
      }
    }, {
      key: "mapFacet",
      value: function mapFacet(spec, params) {
        var _spec2 = spec,
            facet = _spec2.facet;

        if (isFacetMapping(facet) && spec.columns) {
          // is facet with row/column
          spec = omit(spec, ['columns']);
          warn$1(message.columnsNotSupportByRowCol('facet'));
        }

        return _get(_getPrototypeOf(CoreNormalizer.prototype), "mapFacet", this).call(this, spec, params);
      }
    }, {
      key: "mapUnitWithParentEncodingOrProjection",
      value: function mapUnitWithParentEncodingOrProjection(spec, params) {
        var encoding = spec.encoding,
            projection = spec.projection;
        var parentEncoding = params.parentEncoding,
            parentProjection = params.parentProjection,
            config = params.config;
        var mergedProjection = mergeProjection({
          parentProjection: parentProjection,
          projection: projection
        });
        var mergedEncoding = mergeEncoding({
          parentEncoding: parentEncoding,
          encoding: replaceRepeaterInEncoding(encoding, params.repeater)
        });
        return this.mapUnit(_extends(_extends(_extends({}, spec), mergedProjection ? {
          projection: mergedProjection
        } : {}), mergedEncoding ? {
          encoding: mergedEncoding
        } : {}), {
          config: config
        });
      }
    }, {
      key: "mapFacetedUnit",
      value: function mapFacetedUnit(spec, params) {
        // New encoding in the inside spec should not contain row / column
        // as row/column should be moved to facet
        var _a = spec.encoding,
            row = _a.row,
            column = _a.column,
            facet = _a.facet,
            encoding = __rest(_a, ["row", "column", "facet"]); // Mark and encoding should be moved into the inner spec


        var mark = spec.mark,
            width = spec.width,
            projection = spec.projection,
            height = spec.height,
            view = spec.view,
            selection = spec.selection,
            _ = spec.encoding,
            outerSpec = __rest(spec, ["mark", "width", "projection", "height", "view", "selection", "encoding"]);

        var _this$getFacetMapping = this.getFacetMappingAndLayout({
          row: row,
          column: column,
          facet: facet
        }, params),
            facetMapping = _this$getFacetMapping.facetMapping,
            layout = _this$getFacetMapping.layout;

        var newEncoding = replaceRepeaterInEncoding(encoding, params.repeater);
        return this.mapFacet(_extends(_extends(_extends({}, outerSpec), layout), {
          // row / column has higher precedence than facet
          facet: facetMapping,
          spec: _extends(_extends(_extends(_extends(_extends(_extends({}, width ? {
            width: width
          } : {}), height ? {
            height: height
          } : {}), view ? {
            view: view
          } : {}), projection ? {
            projection: projection
          } : {}), {
            mark: mark,
            encoding: newEncoding
          }), selection ? {
            selection: selection
          } : {})
        }), params);
      }
    }, {
      key: "getFacetMappingAndLayout",
      value: function getFacetMappingAndLayout(facets, params) {
        var _a;

        var row = facets.row,
            column = facets.column,
            facet = facets.facet;

        if (row || column) {
          if (facet) {
            warn$1(message.facetChannelDropped([].concat(_toConsumableArray(row ? [ROW] : []), _toConsumableArray(column ? [COLUMN] : []))));
          }

          var facetMapping = {};
          var layout = {};

          for (var _i = 0, _arr = [ROW, COLUMN]; _i < _arr.length; _i++) {
            var channel = _arr[_i];
            var def = facets[channel];

            if (def) {
              var align = def.align,
                  center = def.center,
                  spacing = def.spacing,
                  columns = def.columns,
                  defWithoutLayout = __rest(def, ["align", "center", "spacing", "columns"]);

              facetMapping[channel] = defWithoutLayout;

              for (var _i2 = 0, _arr2 = ['align', 'center', 'spacing']; _i2 < _arr2.length; _i2++) {
                var prop = _arr2[_i2];

                if (def[prop] !== undefined) {
                  layout[prop] = (_a = layout[prop]) !== null && _a !== void 0 ? _a : {};
                  layout[prop][channel] = def[prop];
                }
              }
            }
          }

          return {
            facetMapping: facetMapping,
            layout: layout
          };
        } else {
          var _align = facet.align,
              _center = facet.center,
              _spacing = facet.spacing,
              _columns = facet.columns,
              _facetMapping = __rest(facet, ["align", "center", "spacing", "columns"]);

          return {
            facetMapping: replaceRepeaterInFacet(_facetMapping, params.repeater),
            layout: _extends(_extends(_extends(_extends({}, _align ? {
              align: _align
            } : {}), _center ? {
              center: _center
            } : {}), _spacing ? {
              spacing: _spacing
            } : {}), _columns ? {
              columns: _columns
            } : {})
          };
        }
      }
    }, {
      key: "mapLayer",
      value: function mapLayer(spec, _a) {
        // Special handling for extended layer spec
        var parentEncoding = _a.parentEncoding,
            parentProjection = _a.parentProjection,
            otherParams = __rest(_a, ["parentEncoding", "parentProjection"]);

        var encoding = spec.encoding,
            projection = spec.projection,
            rest = __rest(spec, ["encoding", "projection"]);

        var params = _extends(_extends({}, otherParams), {
          parentEncoding: mergeEncoding({
            parentEncoding: parentEncoding,
            encoding: encoding
          }),
          parentProjection: mergeProjection({
            parentProjection: parentProjection,
            projection: projection
          })
        });

        return _get(_getPrototypeOf(CoreNormalizer.prototype), "mapLayer", this).call(this, rest, params);
      }
    }]);

    return CoreNormalizer;
  }(SpecMapper);

  function mergeEncoding(opt) {
    var parentEncoding = opt.parentEncoding,
        encoding = opt.encoding;

    if (parentEncoding && encoding) {
      var overriden = keys$2(parentEncoding).reduce(function (o, key) {
        if (encoding[key]) {
          o.push(key);
        }

        return o;
      }, []);

      if (overriden.length > 0) {
        warn$1(message.encodingOverridden(overriden));
      }
    }

    var merged = _extends(_extends({}, parentEncoding !== null && parentEncoding !== void 0 ? parentEncoding : {}), encoding !== null && encoding !== void 0 ? encoding : {});

    return keys$2(merged).length > 0 ? merged : undefined;
  }

  function mergeProjection(opt) {
    var parentProjection = opt.parentProjection,
        projection = opt.projection;

    if (parentProjection && projection) {
      warn$1(message.projectionOverridden({
        parentProjection: parentProjection,
        projection: projection
      }));
    }

    return projection !== null && projection !== void 0 ? projection : parentProjection;
  }

  function normalize$1(spec, config) {
    if (config === undefined) {
      config = initConfig(spec.config);
    }

    var normalizedSpec = normalizeGenericSpec(spec, config);
    var width = spec.width,
        height = spec.height;
    var autosize = normalizeAutoSize(normalizedSpec, {
      width: width,
      height: height,
      autosize: spec.autosize
    }, config);
    return _extends(_extends({}, normalizedSpec), autosize ? {
      autosize: autosize
    } : {});
  }
  var normalizer = new CoreNormalizer();
  /**
   * Decompose extended unit specs into composition of pure unit specs.
   */

  function normalizeGenericSpec(spec) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return normalizer.map(spec, {
      config: config
    });
  }

  function _normalizeAutoSize(autosize) {
    return isString(autosize) ? {
      type: autosize
    } : autosize !== null && autosize !== void 0 ? autosize : {};
  }
  /**
   * Normalize autosize and deal with width or height == "container".
   */


  function normalizeAutoSize(spec, sizeInfo, config) {
    var width = sizeInfo.width,
        height = sizeInfo.height;
    var isFitCompatible = isUnitSpec(spec) || isLayerSpec(spec);
    var autosizeDefault = {};

    if (!isFitCompatible) {
      // If spec is not compatible with autosize == "fit", discard width/height == container
      if (width == 'container') {
        warn$1(message.containerSizeNonSingle('width'));
        width = undefined;
      }

      if (height == 'container') {
        warn$1(message.containerSizeNonSingle('height'));
        height = undefined;
      }
    } else {
      // Default autosize parameters to fit when width/height is "container"
      if (width == 'container' && height == 'container') {
        autosizeDefault.type = 'fit';
        autosizeDefault.contains = 'padding';
      } else if (width == 'container') {
        autosizeDefault.type = 'fit-x';
        autosizeDefault.contains = 'padding';
      } else if (height == 'container') {
        autosizeDefault.type = 'fit-y';
        autosizeDefault.contains = 'padding';
      }
    }

    var autosize = _extends(_extends(_extends({
      type: 'pad'
    }, autosizeDefault), config ? _normalizeAutoSize(config.autosize) : {}), _normalizeAutoSize(spec.autosize));

    if (autosize.type === 'fit' && !isFitCompatible) {
      warn$1(message.FIT_NON_SINGLE);
      autosize.type = 'pad';
    }

    if (width == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-x')) {
      warn$1(message.containerSizeNotCompatibleWithAutosize('width'));
    }

    if (height == 'container' && !(autosize.type == 'fit' || autosize.type == 'fit-y')) {
      warn$1(message.containerSizeNotCompatibleWithAutosize('height'));
    } // Delete autosize property if it's Vega's default


    if (deepEqual(autosize, {
      type: 'pad'
    })) {
      return undefined;
    }

    return autosize;
  }

  function isFitType(autoSizeType) {
    return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';
  }
  function getFitType(sizeType) {
    return sizeType ? "fit-".concat(getPositionScaleChannel(sizeType)) : 'fit';
  }
  var TOP_LEVEL_PROPERTIES = ['background', 'padding' // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
  ];
  function extractTopLevelProperties(t) {
    return TOP_LEVEL_PROPERTIES.reduce(function (o, p) {
      if (t && t[p] !== undefined) {
        o[p] = t[p];
      }

      return o;
    }, {});
  }

  function isUrlData(data) {
    return 'url' in data;
  }
  function isInlineData(data) {
    return 'values' in data;
  }
  function isNamedData(data) {
    return 'name' in data && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);
  }
  function isGenerator(data) {
    return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));
  }
  function isSequenceGenerator(data) {
    return 'sequence' in data;
  }
  function isSphereGenerator(data) {
    return 'sphere' in data;
  }
  function isGraticuleGenerator(data) {
    return 'graticule' in data;
  }
  var MAIN = 'main';
  var RAW = 'raw';

  function isFilter(t) {
    return 'filter' in t;
  }
  function isImputeSequence(t) {
    return (t === null || t === void 0 ? void 0 : t['stop']) !== undefined;
  }
  function isLookup(t) {
    return 'lookup' in t;
  }
  function isLookupData(from) {
    return 'data' in from;
  }
  function isLookupSelection(from) {
    return 'selection' in from;
  }
  function isPivot(t) {
    return 'pivot' in t;
  }
  function isDensity(t) {
    return 'density' in t;
  }
  function isQuantile$1(t) {
    return 'quantile' in t;
  }
  function isRegression(t) {
    return 'regression' in t;
  }
  function isLoess(t) {
    return 'loess' in t;
  }
  function isSample(t) {
    return 'sample' in t;
  }
  function isWindow(t) {
    return 'window' in t;
  }
  function isJoinAggregate(t) {
    return 'joinaggregate' in t;
  }
  function isFlatten(t) {
    return 'flatten' in t;
  }
  function isCalculate(t) {
    return 'calculate' in t;
  }
  function isBin(t) {
    return 'bin' in t;
  }
  function isImpute(t) {
    return 'impute' in t;
  }
  function isTimeUnit(t) {
    return 'timeUnit' in t;
  }
  function isAggregate$1(t) {
    return 'aggregate' in t;
  }
  function isStack(t) {
    return 'stack' in t;
  }
  function isFold(t) {
    return 'fold' in t;
  }
  function normalizeTransform(transform) {
    return transform.map(function (t) {
      if (isFilter(t)) {
        return {
          filter: normalizeLogicalComposition(t.filter, normalizePredicate)
        };
      }

      return t;
    });
  }

  /**
   * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition.
   * or a simple mixin if channel def has no condition.
   */

  function wrapCondition(model, channelDef, vgChannel, refFn) {
    var condition = isConditionalDef(channelDef) && channelDef.condition;
    var valueRef = refFn(channelDef);

    if (condition) {
      var conditions = array(condition);
      var vgConditions = conditions.map(function (c) {
        var conditionValueRef = refFn(c);
        var test = isConditionalSelection(c) ? parseSelectionPredicate(model, c.selection) // FIXME: remove casting once TS is no longer dumb about it
        : expression$2(model, c.test); // FIXME: remove casting once TS is no longer dumb about it

        return _extends({
          test: test
        }, conditionValueRef);
      });
      return _defineProperty({}, vgChannel, [].concat(_toConsumableArray(vgConditions), _toConsumableArray(valueRef !== undefined ? [valueRef] : [])));
    } else {
      return valueRef !== undefined ? _defineProperty({}, vgChannel, valueRef) : {};
    }
  }

  /**
   * Return encode for non-positional channels with scales. (Text doesn't have scale.)
   */

  function nonPosition(channel, model) {
    var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var markDef = model.markDef,
        encoding = model.encoding,
        config = model.config;
    var vgChannel = opt.vgChannel;
    var defaultRef = opt.defaultRef,
        defaultValue = opt.defaultValue;

    if (defaultRef === undefined) {
      // prettier-ignore
      defaultValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : getMarkPropOrConfig(channel, markDef, config, {
        vgChannel: vgChannel,
        ignoreVgConfig: true
      });

      if (defaultValue !== undefined) {
        defaultRef = signalOrValueRef(defaultValue);
      }
    }

    var channelDef = encoding[channel];
    return wrapCondition(model, channelDef, vgChannel !== null && vgChannel !== void 0 ? vgChannel : channel, function (cDef) {
      return midPoint({
        channel: channel,
        channelDef: cDef,
        markDef: markDef,
        config: config,
        scaleName: model.scaleName(channel),
        scale: model.getScaleComponent(channel),
        stack: null,
        defaultRef: defaultRef
      });
    });
  }

  function color$3(model) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      filled: undefined
    };

    var _a, _b, _c, _d;

    var markDef = model.markDef,
        encoding = model.encoding,
        config = model.config;
    var markType = markDef.type; // Allow filled to be overridden (for trail's "filled")

    var filled = (_a = opt.filled) !== null && _a !== void 0 ? _a : getMarkPropOrConfig('filled', markDef, config);
    var transparentIfNeeded = contains$1(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;
    var defaultFill = (_c = (_b = getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {
      vgChannel: 'fill'
    })) !== null && _b !== void 0 ? _b : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
    config.mark[filled === true && 'color']) !== null && _c !== void 0 ? _c : // If there is no fill, always fill symbols, bar, geoshape
    // with transparent fills https://github.com/vega/vega-lite/issues/1316
    transparentIfNeeded;
    var defaultStroke = (_d = getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {
      vgChannel: 'stroke'
    })) !== null && _d !== void 0 ? _d : // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified
    config.mark[filled === false && 'color'];
    var colorVgChannel = filled ? 'fill' : 'stroke';

    var fillStrokeMarkDefAndConfig = _extends(_extends({}, defaultFill ? {
      fill: signalOrValueRef(defaultFill)
    } : {}), defaultStroke ? {
      stroke: signalOrValueRef(defaultStroke)
    } : {});

    if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {
      warn$1(message.droppingColor('property', {
        fill: 'fill' in markDef,
        stroke: 'stroke' in markDef
      }));
    }

    return _extends(_extends(_extends(_extends({}, fillStrokeMarkDefAndConfig), nonPosition('color', model, {
      vgChannel: colorVgChannel,
      defaultValue: filled ? defaultFill : defaultStroke
    })), nonPosition('fill', model, {
      // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding
      defaultValue: encoding.fill ? defaultFill : undefined
    })), nonPosition('stroke', model, {
      // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding
      defaultValue: encoding.stroke ? defaultStroke : undefined
    }));
  }

  function text$1(model) {
    var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';
    var channelDef = model.encoding[channel];
    return wrapCondition(model, channelDef, channel, function (cDef) {
      return textRef(cDef, model.config);
    });
  }
  function textRef(channelDef, config) {
    var expr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'datum';

    // text
    if (channelDef) {
      if (isValueDef(channelDef)) {
        return {
          value: channelDef.value
        };
      }

      if (isTypedFieldDef(channelDef)) {
        var _getFormatMixins = getFormatMixins(channelDef),
            format = _getFormatMixins.format,
            formatType = _getFormatMixins.formatType;

        return formatSignalRef({
          fieldOrDatumDef: channelDef,
          format: format,
          formatType: formatType,
          expr: expr,
          config: config
        });
      }

      if (isSignalRef(channelDef)) {
        return channelDef;
      }
    }

    return undefined;
  }

  function tooltip(model) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var encoding = model.encoding,
        markDef = model.markDef,
        config = model.config;
    var channelDef = encoding.tooltip;

    if (isArray(channelDef)) {
      return {
        tooltip: tooltipRefForEncoding({
          tooltip: channelDef
        }, model.stack, config, opt)
      };
    } else {
      return wrapCondition(model, channelDef, 'tooltip', function (cDef) {
        // use valueRef based on channelDef first
        var tooltipRefFromChannelDef = textRef(cDef, model.config, opt.reactiveGeom ? 'datum.datum' : 'datum');

        if (tooltipRefFromChannelDef) {
          return tooltipRefFromChannelDef;
        }

        if (cDef === null) {
          // Allow using encoding.tooltip = null to disable tooltip
          return undefined;
        }

        var markTooltip = getMarkPropOrConfig('tooltip', markDef, config);

        if (markTooltip === true) {
          markTooltip = {
            content: 'encoding'
          };
        }

        if (isString(markTooltip)) {
          return {
            value: markTooltip
          };
        } else if (isObject(markTooltip)) {
          // `tooltip` is `{fields: 'encodings' | 'fields'}`
          if (markTooltip.content === 'encoding') {
            return tooltipRefForEncoding(encoding, model.stack, config, opt);
          } else {
            return {
              signal: 'datum'
            };
          }
        }

        return undefined;
      });
    }
  }
  function tooltipRefForEncoding(encoding, stack, config) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        reactiveGeom = _ref.reactiveGeom;

    var keyValues = [];
    var usedKey = {};
    var toSkip = {};
    var expr = reactiveGeom ? 'datum.datum' : 'datum';
    var tooltipTuples = [];

    function add(fDef, channel) {
      var mainChannel = getMainRangeChannel(channel);
      var fieldDef = isTypedFieldDef(fDef) ? fDef : _extends(_extends({}, fDef), {
        type: encoding[mainChannel].type // for secondary field def, copy type from main channel

      });
      var key = array(title(fieldDef, config, {
        allowDisabling: false
      })).join(', ');
      var value = textRef(fieldDef, config, expr).signal;

      if (isXorY(channel)) {
        var channel2 = channel === 'x' ? 'x2' : 'y2';
        var fieldDef2 = getFieldDef(encoding[channel2]);

        if (isBinned(fieldDef.bin) && fieldDef2) {
          var startField = vgField(fieldDef, {
            expr: expr
          });
          var endField = vgField(fieldDef2, {
            expr: expr
          });

          var _getFormatMixins = getFormatMixins(fieldDef),
              format = _getFormatMixins.format,
              formatType = _getFormatMixins.formatType;

          value = binFormatExpression(startField, endField, format, formatType, config);
          toSkip[channel2] = true;
        } else if (stack && stack.fieldChannel === channel && stack.offset === 'normalize') {
          var _getFormatMixins2 = getFormatMixins(fieldDef),
              _format = _getFormatMixins2.format,
              _formatType = _getFormatMixins2.formatType;

          value = formatSignalRef({
            fieldOrDatumDef: fieldDef,
            format: _format,
            formatType: _formatType,
            expr: expr,
            config: config,
            normalizeStack: true
          }).signal;
        }
      }

      tooltipTuples.push({
        channel: channel,
        key: key,
        value: value
      });
    }

    forEach$1(encoding, function (channelDef, channel) {
      if (isFieldDef(channelDef)) {
        add(channelDef, channel);
      } else if (hasConditionalFieldDef(channelDef)) {
        add(channelDef.condition, channel);
      }
    });

    for (var _i = 0, _tooltipTuples = tooltipTuples; _i < _tooltipTuples.length; _i++) {
      var _tooltipTuples$_i = _tooltipTuples[_i],
          channel = _tooltipTuples$_i.channel,
          key = _tooltipTuples$_i.key,
          value = _tooltipTuples$_i.value;

      if (!toSkip[channel] && !usedKey[key]) {
        keyValues.push("".concat($(key), ": ").concat(value));
        usedKey[key] = true;
      }
    }

    return keyValues.length > 0 ? {
      signal: "{".concat(keyValues.join(', '), "}")
    } : undefined;
  }

  /**
   * Utility files for producing Vega ValueRef for marks
   */
  function getOffset(channel, markDef) {
    var offsetChannel = getOffsetChannel(channel); // TODO: in the future read from encoding channel too

    var markDefOffsetValue = markDef[offsetChannel];

    if (markDefOffsetValue) {
      return markDefOffsetValue;
    }

    return undefined;
  }

  /**
   * Return encode for point (non-band) position channels.
   */

  function pointPosition(channel, model, _ref) {
    var defaultPos = _ref.defaultPos,
        vgChannel = _ref.vgChannel,
        isMidPoint = _ref.isMidPoint;
    var encoding = model.encoding,
        markDef = model.markDef,
        config = model.config,
        stack = model.stack;
    var channelDef = encoding[channel];
    var channel2Def = encoding[getSecondaryRangeChannel(channel)];
    var scaleName = model.scaleName(channel);
    var scale = model.getScaleComponent(channel);
    var offset = getOffset(channel, markDef); // Get default position or position from mark def

    var defaultRef = pointPositionDefaultRef({
      model: model,
      defaultPos: defaultPos,
      channel: channel,
      scaleName: scaleName,
      scale: scale
    });
    var valueRef = !channelDef && isXorY(channel) && (encoding.latitude || encoding.longitude) ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.
    {
      field: model.getName(channel)
    } : positionRef({
      channel: channel,
      channelDef: channelDef,
      channel2Def: channel2Def,
      markDef: markDef,
      config: config,
      isMidPoint: isMidPoint,
      scaleName: scaleName,
      scale: scale,
      stack: stack,
      offset: offset,
      defaultRef: defaultRef
    });
    return valueRef ? _defineProperty({}, vgChannel || channel, valueRef) : undefined;
  } // TODO: we need to find a way to refactor these so that scaleName is a part of scale
  // but that's complicated. For now, this is a huge step moving forward.

  /**
   * @return Vega ValueRef for normal x- or y-position without projection
   */

  function positionRef(params) {
    var channel = params.channel,
        channelDef = params.channelDef,
        isMidPoint = params.isMidPoint,
        scaleName = params.scaleName,
        stack = params.stack,
        offset = params.offset,
        markDef = params.markDef,
        config = params.config; // This isn't a part of midPoint because we use midPoint for non-position too

    if (isFieldOrDatumDef(channelDef) && stack && channel === stack.fieldChannel) {
      if (isFieldDef(channelDef)) {
        var band = getBand({
          channel: channel,
          fieldDef: channelDef,
          isMidPoint: isMidPoint,
          markDef: markDef,
          stack: stack,
          config: config
        });

        if (band !== undefined) {
          return interpolatedSignalRef({
            scaleName: scaleName,
            fieldOrDatumDef: channelDef,
            startSuffix: 'start',
            band: band,
            offset: offset
          });
        }
      } // x or y use stack_end so that stacked line's point mark use stack_end too.


      return valueRefForFieldOrDatumDef(channelDef, scaleName, {
        suffix: 'end'
      }, {
        offset: offset
      });
    }

    return midPointRefWithPositionInvalidTest(params);
  }
  function pointPositionDefaultRef(_ref3) {
    var model = _ref3.model,
        defaultPos = _ref3.defaultPos,
        channel = _ref3.channel,
        scaleName = _ref3.scaleName,
        scale = _ref3.scale;
    var markDef = model.markDef,
        config = model.config;
    return function () {
      var mainChannel = getMainRangeChannel(channel);
      var vgChannel = getVgPositionChannel(channel);
      var definedValueOrConfig = getMarkPropOrConfig(channel, markDef, config, {
        vgChannel: vgChannel
      });

      if (definedValueOrConfig !== undefined) {
        return widthHeightValueOrSignalRef(channel, definedValueOrConfig);
      }

      switch (defaultPos) {
        case 'zeroOrMin':
        case 'zeroOrMax':
          if (scaleName) {
            var scaleType = scale.get('type');

            if (contains$1([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) ; else {
              if (scale.domainDefinitelyIncludesZero()) {
                return {
                  scale: scaleName,
                  value: 0
                };
              }
            }
          }

          if (defaultPos === 'zeroOrMin') {
            return mainChannel === 'y' ? {
              field: {
                group: 'height'
              }
            } : {
              value: 0
            };
          } else {
            // zeroOrMax
            switch (mainChannel) {
              case 'radius':
                // max of radius is min(width, height) / 2
                return {
                  signal: "min(".concat(model.width.signal, ",").concat(model.height.signal, ")/2")
                };

              case 'theta':
                return {
                  signal: '2*PI'
                };

              case 'x':
                return {
                  field: {
                    group: 'width'
                  }
                };

              case 'y':
                return {
                  value: 0
                };
            }
          }

          break;

        case 'mid':
          {
            var sizeRef = model[getSizeChannel(channel)];
            return _extends(_extends({}, sizeRef), {
              mult: 0.5
            });
          }
      } // defautlPos === null


      return undefined;
    };
  }

  var ALIGNED_X_CHANNEL = {
    left: 'x',
    center: 'xc',
    right: 'x2'
  };
  var BASELINED_Y_CHANNEL = {
    top: 'y',
    middle: 'yc',
    bottom: 'y2'
  };
  function vgAlignedPositionChannel(channel, markDef, config) {
    var defaultAlign = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'middle';

    if (channel === 'radius' || channel === 'theta') {
      return getVgPositionChannel(channel);
    }

    var alignChannel = channel === 'x' ? 'align' : 'baseline';
    var align = getMarkPropOrConfig(alignChannel, markDef, config);

    if (channel === 'x') {
      return ALIGNED_X_CHANNEL[align || (defaultAlign === 'top' ? 'left' : 'center')];
    } else {
      return BASELINED_Y_CHANNEL[align || defaultAlign];
    }
  }

  /**
   * Utility for area/rule position, which can be either point or range. (One of the axes should be point and the other should be range.)
   */

  function pointOrRangePosition(channel, model, _ref) {
    var defaultPos = _ref.defaultPos,
        defaultPos2 = _ref.defaultPos2,
        range = _ref.range;

    if (range) {
      return rangePosition(channel, model, {
        defaultPos: defaultPos,
        defaultPos2: defaultPos2
      });
    }

    return pointPosition(channel, model, {
      defaultPos: defaultPos
    });
  }
  function rangePosition(channel, model, _ref2) {
    var defaultPos = _ref2.defaultPos,
        defaultPos2 = _ref2.defaultPos2;
    var markDef = model.markDef,
        config = model.config;
    var channel2 = getSecondaryRangeChannel(channel);
    var sizeChannel = getSizeChannel(channel);
    var pos2Mixins = pointPosition2OrSize(model, defaultPos2, channel2);
    var vgChannel = pos2Mixins[sizeChannel] ? // If there is width/height, we need to position the marks based on the alignment.
    vgAlignedPositionChannel(channel, markDef, config) : // Otherwise, make sure to apply to the right Vg Channel (for arc mark)
    getVgPositionChannel(channel);
    return _extends(_extends({}, pointPosition(channel, model, {
      defaultPos: defaultPos,
      vgChannel: vgChannel
    })), pos2Mixins);
  }
  /**
   * Return encode for x2, y2.
   * If channel is not specified, return one channel based on orientation.
   */

  function pointPosition2OrSize(model, defaultPos, channel) {
    var _position2orSize;

    var encoding = model.encoding,
        mark = model.mark,
        markDef = model.markDef,
        stack = model.stack,
        config = model.config;
    var baseChannel = getMainRangeChannel(channel);
    var sizeChannel = getSizeChannel(channel);
    var vgChannel = getVgPositionChannel(channel);
    var channelDef = encoding[baseChannel];
    var scaleName = model.scaleName(baseChannel);
    var scale = model.getScaleComponent(baseChannel);
    var offset = channel in encoding || channel in markDef ? getOffset(channel, model.markDef) : getOffset(baseChannel, model.markDef);

    if (!channelDef && (channel === 'x2' || channel === 'y2') && (encoding.latitude || encoding.longitude)) {
      // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.
      return _defineProperty({}, vgChannel, {
        field: model.getName(channel)
      });
    }

    var valueRef = position2Ref({
      channel: channel,
      channelDef: channelDef,
      channel2Def: encoding[channel],
      markDef: markDef,
      config: config,
      scaleName: scaleName,
      scale: scale,
      stack: stack,
      offset: offset,
      defaultRef: undefined
    });

    if (valueRef !== undefined) {
      return _defineProperty({}, vgChannel, valueRef);
    } // TODO: check width/height encoding here once we add them
    // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:
    // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)


    return position2orSize(channel, markDef) || position2orSize(channel, (_position2orSize = {}, _defineProperty(_position2orSize, channel, getMarkStyleConfig(channel, markDef, config.style)), _defineProperty(_position2orSize, sizeChannel, getMarkStyleConfig(sizeChannel, markDef, config.style)), _position2orSize)) || position2orSize(channel, config[mark]) || position2orSize(channel, config.mark) || _defineProperty({}, vgChannel, pointPositionDefaultRef({
      model: model,
      defaultPos: defaultPos,
      channel: channel,
      scaleName: scaleName,
      scale: scale
    })());
  }

  function position2Ref(_ref6) {
    var channel = _ref6.channel,
        channelDef = _ref6.channelDef,
        channel2Def = _ref6.channel2Def,
        markDef = _ref6.markDef,
        config = _ref6.config,
        scaleName = _ref6.scaleName,
        scale = _ref6.scale,
        stack = _ref6.stack,
        offset = _ref6.offset,
        defaultRef = _ref6.defaultRef;

    if (isFieldOrDatumDef(channelDef) && stack && // If fieldChannel is X and channel is X2 (or Y and Y2)
    channel.charAt(0) === stack.fieldChannel.charAt(0)) {
      return valueRefForFieldOrDatumDef(channelDef, scaleName, {
        suffix: 'start'
      }, {
        offset: offset
      });
    }

    return midPointRefWithPositionInvalidTest({
      channel: channel,
      channelDef: channel2Def,
      scaleName: scaleName,
      scale: scale,
      stack: stack,
      markDef: markDef,
      config: config,
      offset: offset,
      defaultRef: defaultRef
    });
  }

  function position2orSize(channel, markDef) {
    var sizeChannel = getSizeChannel(channel);
    var vgChannel = getVgPositionChannel(channel);

    if (markDef[vgChannel] !== undefined) {
      return _defineProperty({}, vgChannel, widthHeightValueOrSignalRef(channel, markDef[vgChannel]));
    } else if (markDef[channel] !== undefined) {
      return _defineProperty({}, vgChannel, widthHeightValueOrSignalRef(channel, markDef[channel]));
    } else if (markDef[sizeChannel]) {
      return _defineProperty({}, sizeChannel, widthHeightValueOrSignalRef(channel, markDef[sizeChannel]));
    }

    return undefined;
  }

  function rectPosition(model, channel, mark) {
    var _a, _b, _c, _d;

    var config = model.config,
        encoding = model.encoding,
        markDef = model.markDef,
        stack = model.stack;
    var channel2 = getSecondaryRangeChannel(channel);
    var sizeChannel = getSizeChannel(channel);
    var channelDef = encoding[channel];
    var channelDef2 = encoding[channel2];
    var scale = model.getScaleComponent(channel);
    var scaleType = scale ? scale.get('type') : undefined;
    var scaleName = model.scaleName(channel);
    var orient = markDef.orient;
    var hasSizeDef = (_b = (_a = encoding[sizeChannel]) !== null && _a !== void 0 ? _a : encoding.size) !== null && _b !== void 0 ? _b : getMarkPropOrConfig('size', markDef, config, {
      vgChannel: sizeChannel
    });
    var isBarBand = mark === 'bar' && (channel === 'x' ? orient === 'vertical' : orient === 'horizontal'); // x, x2, and width -- we must specify two of these in all conditions

    if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !hasSizeDef && !hasDiscreteDomain(scaleType)) {
      var band = getBand({
        channel: channel,
        fieldDef: channelDef,
        stack: stack,
        markDef: markDef,
        config: config
      });
      var axis = (_c = model.component.axes[channel]) === null || _c === void 0 ? void 0 : _c[0];
      var axisTranslate = (_d = axis === null || axis === void 0 ? void 0 : axis.get('translate')) !== null && _d !== void 0 ? _d : 0.5; // vega default is 0.5

      return rectBinPosition({
        fieldDef: channelDef,
        fieldDef2: channelDef2,
        channel: channel,
        markDef: markDef,
        scaleName: scaleName,
        band: band,
        axisTranslate: axisTranslate,
        spacing: isXorY(channel) ? getMarkPropOrConfig('binSpacing', markDef, config) : undefined,
        reverse: scale.get('reverse'),
        config: config
      });
    } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType) || isBarBand) && !channelDef2) {
      return positionAndSize(mark, channelDef, channel, model);
    } else {
      return rangePosition(channel, model, {
        defaultPos: 'zeroOrMax',
        defaultPos2: 'zeroOrMin'
      });
    }
  }

  function defaultSizeRef(mark, sizeChannel, scaleName, scale, config, band) {
    if (scale) {
      var scaleType = scale.get('type');

      if (scaleType === 'point' || scaleType === 'band') {
        if (config[mark].discreteBandSize !== undefined) {
          return {
            value: config[mark].discreteBandSize
          };
        }

        if (scaleType === ScaleType.POINT) {
          var scaleRange = scale.get('range');

          if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {
            return {
              value: scaleRange.step - 2
            };
          }

          return {
            value: DEFAULT_STEP - 2
          };
        } else {
          // BAND
          return {
            scale: scaleName,
            band: band
          };
        }
      } else {
        // continuous scale
        return {
          value: config[mark].continuousBandSize
        };
      }
    } // No Scale


    var step = getViewConfigDiscreteStep(config.view, sizeChannel);
    var value = getFirstDefined( // No scale is like discrete bar (with one item)
    config[mark].discreteBandSize, step - 2);
    return value !== undefined ? {
      value: value
    } : undefined;
  }
  /**
   * Output position encoding and its size encoding for continuous, point, and band scales.
   */


  function positionAndSize(mark, fieldDef, channel, model) {
    var _a;

    var markDef = model.markDef,
        encoding = model.encoding,
        config = model.config,
        stack = model.stack;
    var orient = markDef.orient;
    var scaleName = model.scaleName(channel);
    var scale = model.getScaleComponent(channel);
    var vgSizeChannel = getSizeChannel(channel);
    var channel2 = getSecondaryRangeChannel(channel); // use "size" channel for bars, if there is orient and the channel matches the right orientation

    var useVlSizeChannel = orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x';
    var sizeFromMarkOrConfig = getMarkPropOrConfig(useVlSizeChannel ? 'size' : vgSizeChannel, markDef, config, {
      vgChannel: vgSizeChannel
    }); // Use size encoding / mark property / config if it exists

    var sizeMixins;

    if (encoding.size || sizeFromMarkOrConfig !== undefined) {
      if (useVlSizeChannel) {
        sizeMixins = nonPosition('size', model, {
          vgChannel: vgSizeChannel,
          defaultValue: sizeFromMarkOrConfig
        });
      } else {
        warn$1(message.cannotApplySizeToNonOrientedMark(markDef.type));
      }
    } // Otherwise, apply default value


    var band = (_a = isFieldOrDatumDef(fieldDef) ? getBand({
      channel: channel,
      fieldDef: fieldDef,
      markDef: markDef,
      stack: stack,
      config: config
    }) : undefined) !== null && _a !== void 0 ? _a : 1;
    sizeMixins = sizeMixins || _defineProperty({}, vgSizeChannel, defaultSizeRef(mark, vgSizeChannel, scaleName, scale, config, band));
    /*
      Band scales with size value and all point scales, use xc/yc + band=0.5
         Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.
      In this case, size_band is the band specified in the x/y-encoding.
      By default band is 1, so `(1 - band) / 2` = 0.
      If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2
     */

    var center = (scale === null || scale === void 0 ? void 0 : scale.get('type')) !== 'band' || !('band' in sizeMixins[vgSizeChannel]);
    var vgChannel = vgAlignedPositionChannel(channel, markDef, config, center ? 'middle' : 'top');
    var offset = getOffset(channel, markDef);
    var posRef = midPointRefWithPositionInvalidTest({
      channel: channel,
      channelDef: fieldDef,
      markDef: markDef,
      config: config,
      scaleName: scaleName,
      scale: scale,
      stack: stack,
      offset: offset,
      defaultRef: pointPositionDefaultRef({
        model: model,
        defaultPos: 'mid',
        channel: channel,
        scaleName: scaleName,
        scale: scale
      }),
      band: center ? 0.5 : (1 - band) / 2
    });

    if (vgSizeChannel) {
      return _extends(_defineProperty({}, vgChannel, posRef), sizeMixins);
    } else {
      var _ref2;

      // otherwise, we must simulate size by setting position2 = position + size
      // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)
      var vgChannel2 = getVgPositionChannel(channel2);
      var sizeRef = sizeMixins[vgSizeChannel];
      var sizeOffset = offset ? _extends(_extends({}, sizeRef), {
        offset: offset
      }) : sizeRef;
      return _ref2 = {}, _defineProperty(_ref2, vgChannel, posRef), _defineProperty(_ref2, vgChannel2, isArray(posRef) ? [posRef[0], _extends(_extends({}, posRef[1]), {
        offset: sizeOffset
      })] : _extends(_extends({}, posRef), {
        offset: sizeOffset
      })), _ref2;
    }
  }

  function getBinSpacing(channel, spacing, reverse, translate, offset) {
    if (isPolarPositionChannel(channel)) {
      return 0;
    }

    var spacingOffset = channel === 'x' || channel === 'y2' ? -spacing / 2 : spacing / 2;

    if (isSignalRef(reverse)) {
      var offsetExpr = isSignalRef(offset) ? offset.signal : offset ? "".concat(offset) : '';
      return {
        signal: "".concat(reverse.signal, " ? ").concat(translate - spacingOffset).concat(offsetExpr ? '-' + offsetExpr : '', " : ").concat(translate + spacingOffset).concat(offsetExpr ? '+' + offsetExpr : '')
      };
    } else {
      if (isSignalRef(offset)) {
        var translateAndSpacingOffset = translate + (reverse ? -spacingOffset : spacingOffset);
        return {
          signal: "".concat(translateAndSpacingOffset || '').concat(reverse ? ' - ' : translateAndSpacingOffset ? ' + ' : '').concat(offset.signal)
        };
      }

      offset = offset || 0;
      return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);
    }
  }

  function rectBinPosition(_ref3) {
    var fieldDef = _ref3.fieldDef,
        fieldDef2 = _ref3.fieldDef2,
        channel = _ref3.channel,
        band = _ref3.band,
        scaleName = _ref3.scaleName,
        markDef = _ref3.markDef,
        _ref3$spacing = _ref3.spacing,
        spacing = _ref3$spacing === void 0 ? 0 : _ref3$spacing,
        axisTranslate = _ref3.axisTranslate,
        reverse = _ref3.reverse,
        config = _ref3.config;
    var channel2 = getSecondaryRangeChannel(channel);
    var vgChannel = getVgPositionChannel(channel);
    var vgChannel2 = getVgPositionChannel(channel2);
    var offset = getOffset(channel, markDef);

    if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {
      var _ref4;

      return _ref4 = {}, _defineProperty(_ref4, vgChannel2, rectBinRef({
        channel: channel,
        fieldDef: fieldDef,
        scaleName: scaleName,
        markDef: markDef,
        band: (1 - band) / 2,
        offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset),
        config: config
      })), _defineProperty(_ref4, vgChannel, rectBinRef({
        channel: channel,
        fieldDef: fieldDef,
        scaleName: scaleName,
        markDef: markDef,
        band: 1 - (1 - band) / 2,
        offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset),
        config: config
      })), _ref4;
    } else if (isBinned(fieldDef.bin) && isFieldDef(fieldDef2)) {
      var _ref5;

      return _ref5 = {}, _defineProperty(_ref5, vgChannel2, valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, {
        offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset)
      })), _defineProperty(_ref5, vgChannel, valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, {
        offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)
      })), _ref5;
    } else {
      warn$1(message.channelRequiredForBinned(channel2));
      return undefined;
    }
  }
  /**
   * Value Ref for binned fields
   */

  function rectBinRef(_ref6) {
    var channel = _ref6.channel,
        fieldDef = _ref6.fieldDef,
        scaleName = _ref6.scaleName,
        markDef = _ref6.markDef,
        band = _ref6.band,
        offset = _ref6.offset,
        config = _ref6.config;
    var r = interpolatedSignalRef({
      scaleName: scaleName,
      fieldOrDatumDef: fieldDef,
      band: band,
      offset: offset
    });
    return wrapPositionInvalidTest({
      fieldDef: fieldDef,
      channel: channel,
      markDef: markDef,
      ref: r,
      config: config
    });
  }

  function baseEncodeEntry(model, ignore) {
    var _ref = ignore.color === 'include' ? color$3(model) : {},
        _ref$fill = _ref.fill,
        fill = _ref$fill === void 0 ? undefined : _ref$fill,
        _ref$stroke = _ref.stroke,
        stroke = _ref$stroke === void 0 ? undefined : _ref$stroke;

    return _extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends({}, markDefProperties(model.markDef, ignore)), wrapAllFieldsInvalid(model, 'fill', fill)), wrapAllFieldsInvalid(model, 'stroke', stroke)), nonPosition('opacity', model)), nonPosition('fillOpacity', model)), nonPosition('strokeOpacity', model)), nonPosition('strokeWidth', model)), nonPosition('strokeDash', model)), tooltip(model)), text$1(model, 'href'));
  } // TODO: mark VgValueRef[] as readonly after https://github.com/vega/vega/pull/1987

  function wrapAllFieldsInvalid(model, channel, valueRef) {
    var config = model.config,
        mark = model.mark,
        markDef = model.markDef;
    var invalid = getMarkPropOrConfig('invalid', markDef, config);

    if (invalid === 'hide' && valueRef && !isPathMark(mark)) {
      // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.
      // For path marks, we will use "defined" property and skip these values instead.
      var test = allFieldsInvalidPredicate(model, {
        invalid: true,
        channels: SCALE_CHANNELS
      });

      if (test) {
        return _defineProperty({}, channel, [// prepend the invalid case
        // TODO: support custom value
        {
          test: test,
          value: null
        }].concat(_toConsumableArray(array(valueRef))));
      }
    }

    return valueRef ? _defineProperty({}, channel, valueRef) : {};
  }

  function markDefProperties(mark, ignore) {
    return VG_MARK_CONFIGS.reduce(function (m, prop) {
      if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {
        m[prop] = {
          value: mark[prop]
        };
      }

      return m;
    }, {});
  }

  function allFieldsInvalidPredicate(model, _ref4) {
    var _ref4$invalid = _ref4.invalid,
        invalid = _ref4$invalid === void 0 ? false : _ref4$invalid,
        channels = _ref4.channels;
    var filterIndex = channels.reduce(function (aggregator, channel) {
      var scaleComponent = model.getScaleComponent(channel);

      if (scaleComponent) {
        var scaleType = scaleComponent.get('type');
        var field = model.vgField(channel, {
          expr: 'datum'
        }); // While discrete domain scales can handle invalid values, continuous scales can't.

        if (field && hasContinuousDomain(scaleType)) {
          aggregator[field] = true;
        }
      }

      return aggregator;
    }, {});
    var fields = keys$2(filterIndex);

    if (fields.length > 0) {
      var op = invalid ? '||' : '&&';
      return fields.map(function (field) {
        return fieldInvalidPredicate(field, invalid);
      }).join(" ".concat(op, " "));
    }

    return undefined;
  }

  function defined(model) {
    var config = model.config,
        markDef = model.markDef;
    var invalid = getMarkPropOrConfig('invalid', markDef, config);

    if (invalid) {
      var signal = allFieldsInvalidPredicate$1(model, {
        channels: ['x', 'y']
      });

      if (signal) {
        return {
          defined: {
            signal: signal
          }
        };
      }
    }

    return {};
  }

  function allFieldsInvalidPredicate$1(model, _ref) {
    var _ref$invalid = _ref.invalid,
        invalid = _ref$invalid === void 0 ? false : _ref$invalid,
        channels = _ref.channels;
    var filterIndex = channels.reduce(function (aggregator, channel) {
      var scaleComponent = model.getScaleComponent(channel);

      if (scaleComponent) {
        var scaleType = scaleComponent.get('type');
        var field = model.vgField(channel, {
          expr: 'datum'
        }); // While discrete domain scales can handle invalid values, continuous scales can't.

        if (field && hasContinuousDomain(scaleType)) {
          aggregator[field] = true;
        }
      }

      return aggregator;
    }, {});
    var fields = keys$2(filterIndex);

    if (fields.length > 0) {
      var op = invalid ? '||' : '&&';
      return fields.map(function (field) {
        return fieldInvalidPredicate(field, invalid);
      }).join(" ".concat(op, " "));
    }

    return undefined;
  }

  function valueIfDefined(prop, value) {
    if (value !== undefined) {
      return _defineProperty({}, prop, signalOrValueRef(value));
    }

    return undefined;
  }

  var VORONOI = 'voronoi';
  var nearest = {
    has: function has(selCmpt) {
      return selCmpt.type !== 'interval' && selCmpt.nearest;
    },
    parse: function parse(model, selCmpt) {
      // Scope selection events to the voronoi mark to prevent capturing
      // events that occur on the group mark (https://github.com/vega/vega/issues/2112).
      if (selCmpt.events) {
        var _iterator = _createForOfIteratorHelper(selCmpt.events),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var s = _step.value;
            s.markname = model.getName(VORONOI);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    },
    marks: function marks(model, selCmpt, _marks) {
      var _selCmpt$project$hasC = selCmpt.project.hasChannel,
          x = _selCmpt$project$hasC.x,
          y = _selCmpt$project$hasC.y;
      var markType = model.mark;

      if (isPathMark(markType)) {
        warn$1(message.nearestNotSupportForContinuous(markType));
        return _marks;
      }

      var cellDef = {
        name: model.getName(VORONOI),
        type: 'path',
        interactive: true,
        from: {
          data: model.getName('marks')
        },
        encode: {
          update: _extends({
            fill: {
              value: 'transparent'
            },
            strokeWidth: {
              value: 0.35
            },
            stroke: {
              value: 'transparent'
            },
            isVoronoi: {
              value: true
            }
          }, tooltip(model, {
            reactiveGeom: true
          }))
        },
        transform: [{
          type: 'voronoi',
          x: {
            expr: x || !y ? 'datum.datum.x || 0' : '0'
          },
          y: {
            expr: y || !x ? 'datum.datum.y || 0' : '0'
          },
          size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]
        }]
      };
      var index = 0;
      var exists = false;

      _marks.forEach(function (mark, i) {
        var _a;

        var name = (_a = mark.name) !== null && _a !== void 0 ? _a : '';

        if (name === model.component.mark[0].name) {
          index = i;
        } else if (name.indexOf(VORONOI) >= 0) {
          exists = true;
        }
      });

      if (!exists) {
        _marks.splice(index + 1, 0, cellDef);
      }

      return _marks;
    }
  };

  /**
   * A node in the dataflow tree.
   */

  var DataFlowNode = /*#__PURE__*/function () {
    function DataFlowNode(parent, debugName) {
      _classCallCheck(this, DataFlowNode);

      this.debugName = debugName;
      this._children = [];
      this._parent = null;

      if (parent) {
        this.parent = parent;
      }
    }
    /**
     * Clone this node with a deep copy but don't clone links to children or parents.
     */


    _createClass(DataFlowNode, [{
      key: "clone",
      value: function clone() {
        throw new Error('Cannot clone node');
      }
    }, {
      key: "numChildren",
      value: function numChildren() {
        return this._children.length;
      }
    }, {
      key: "addChild",
      value: function addChild(child, loc) {
        // do not add the same child twice
        if (this._children.indexOf(child) > -1) {
          console.warn('Attempt to add the same child twice.');
          return;
        }

        if (loc !== undefined) {
          this._children.splice(loc, 0, child);
        } else {
          this._children.push(child);
        }
      }
    }, {
      key: "removeChild",
      value: function removeChild(oldChild) {
        var loc = this._children.indexOf(oldChild);

        this._children.splice(loc, 1);

        return loc;
      }
      /**
       * Remove node from the dataflow.
       */

    }, {
      key: "remove",
      value: function remove() {
        var loc = this._parent.removeChild(this);

        var _iterator = _createForOfIteratorHelper(this._children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            // do not use the set method because we want to insert at a particular location
            child._parent = this._parent;

            this._parent.addChild(child, loc++);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      /**
       * Insert another node as a parent of this node.
       */

    }, {
      key: "insertAsParentOf",
      value: function insertAsParentOf(other) {
        var parent = other.parent;
        parent.removeChild(this);
        this.parent = parent;
        other.parent = this;
      }
    }, {
      key: "swapWithParent",
      value: function swapWithParent() {
        var parent = this._parent;
        var newParent = parent.parent; // reconnect the children

        var _iterator2 = _createForOfIteratorHelper(this._children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            child.parent = parent;
          } // remove old links

        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this._children = []; // equivalent to removing every child link one by one

        parent.removeChild(this);
        parent.parent.removeChild(parent); // swap two nodes

        this.parent = newParent;
        parent.parent = this;
      }
    }, {
      key: "parent",
      get: function get() {
        return this._parent;
      }
      /**
       * Set the parent of the node and also add this node to the parent's children.
       */
      ,
      set: function set(parent) {
        this._parent = parent;

        if (parent) {
          parent.addChild(this);
        }
      }
    }, {
      key: "children",
      get: function get() {
        return this._children;
      }
    }]);

    return DataFlowNode;
  }();
  var OutputNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(OutputNode, _DataFlowNode);

    var _super = _createSuper(OutputNode);

    /**
     * @param source The name of the source. Will change in assemble.
     * @param type The type of the output node.
     * @param refCounts A global ref counter map.
     */
    function OutputNode(parent, source, type, refCounts) {
      var _this;

      _classCallCheck(this, OutputNode);

      _this = _super.call(this, parent, source);
      _this.type = type;
      _this.refCounts = refCounts;
      _this._source = _this._name = source;

      if (_this.refCounts && !(_this._name in _this.refCounts)) {
        _this.refCounts[_this._name] = 0;
      }

      return _this;
    }

    _createClass(OutputNode, [{
      key: "clone",
      value: function clone() {
        var cloneObj = new this.constructor();
        cloneObj.debugName = 'clone_' + this.debugName;
        cloneObj._source = this._source;
        cloneObj._name = 'clone_' + this._name;
        cloneObj.type = this.type;
        cloneObj.refCounts = this.refCounts;
        cloneObj.refCounts[cloneObj._name] = 0;
        return cloneObj;
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set();
      }
    }, {
      key: "hash",
      value: function hash() {
        if (this._hash === undefined) {
          this._hash = "Output ".concat(uniqueId());
        }

        return this._hash;
      }
      /**
       * Request the datasource name and increase the ref counter.
       *
       * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
       * It is crucial to request the name from an output node to mark it as a required node.
       * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
       *
       * In the assemble phase, this will return the correct name.
       */

    }, {
      key: "getSource",
      value: function getSource() {
        this.refCounts[this._name]++;
        return this._source;
      }
    }, {
      key: "isRequired",
      value: function isRequired() {
        return !!this.refCounts[this._name];
      }
    }, {
      key: "setSource",
      value: function setSource(source) {
        this._source = source;
      }
    }]);

    return OutputNode;
  }(DataFlowNode);

  var TimeUnitNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(TimeUnitNode, _DataFlowNode);

    var _super = _createSuper(TimeUnitNode);

    function TimeUnitNode(parent, formula) {
      var _this;

      _classCallCheck(this, TimeUnitNode);

      _this = _super.call(this, parent);
      _this.formula = formula;
      return _this;
    }

    _createClass(TimeUnitNode, [{
      key: "clone",
      value: function clone() {
        return new TimeUnitNode(null, duplicate(this.formula));
      }
    }, {
      key: "merge",

      /**
       * Merge together TimeUnitNodes assigning the children of `other` to `this`
       * and removing `other`.
       */
      value: function merge(other) {
        this.formula = _extends({}, this.formula); // if the same hash happen twice, merge "band"

        for (var key in other.formula) {
          if (!this.formula[key] || other.formula[key].band) {
            // copy if it's not a duplicate or if we need to include copy band over
            this.formula[key] = other.formula[key];
          }
        }

        var _iterator = _createForOfIteratorHelper(other.children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            other.removeChild(child);
            child.parent = this;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        other.remove();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(vals(this.formula).map(function (f) {
          return f.as;
        }));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set(vals(this.formula).map(function (f) {
          return f.field;
        }));
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "TimeUnit ".concat(hash(this.formula));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var transforms = [];

        var _iterator2 = _createForOfIteratorHelper(vals(this.formula)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var f = _step2.value;
            var field = f.field,
                as = f.as,
                timeUnit = f.timeUnit;

            var _a = normalizeTimeUnit(timeUnit),
                unit = _a.unit,
                utc = _a.utc,
                params = __rest(_a, ["unit", "utc"]);

            transforms.push(_extends(_extends(_extends(_extends({
              field: field,
              type: 'timeunit'
            }, unit ? {
              units: getTimeUnitParts(unit)
            } : {}), utc ? {
              timezone: 'utc'
            } : {}), params), {
              as: [as, "".concat(as, "_end")]
            }));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return transforms;
      }
    }], [{
      key: "makeFromEncoding",
      value: function makeFromEncoding(parent, model) {
        var formula = model.reduceFieldDef(function (timeUnitComponent, fieldDef, channel) {
          var field = fieldDef.field,
              timeUnit = fieldDef.timeUnit;
          var channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;
          var band = isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config);

          if (timeUnit) {
            var as = vgField(fieldDef, {
              forAs: true
            });
            timeUnitComponent[hash({
              as: as,
              field: field,
              timeUnit: timeUnit
            })] = _extends({
              as: as,
              field: field,
              timeUnit: timeUnit
            }, band ? {
              band: true
            } : {});
          }

          return timeUnitComponent;
        }, {});

        if (keys$2(formula).length === 0) {
          return null;
        }

        return new TimeUnitNode(parent, formula);
      }
    }, {
      key: "makeFromTransform",
      value: function makeFromTransform(parent, t) {
        var _a = _extends({}, t),
            timeUnit = _a.timeUnit,
            other = __rest(_a, ["timeUnit"]);

        var normalizedTimeUnit = normalizeTimeUnit(timeUnit);

        var component = _extends(_extends({}, other), {
          timeUnit: normalizedTimeUnit
        });

        return new TimeUnitNode(parent, _defineProperty({}, hash(component), component));
      }
    }]);

    return TimeUnitNode;
  }(DataFlowNode);

  var TUPLE_FIELDS = '_tuple_fields';
  var SelectionProjectionComponent = function SelectionProjectionComponent() {
    _classCallCheck(this, SelectionProjectionComponent);

    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
      items[_key] = arguments[_key];
    }

    this.items = items;
    this.hasChannel = {};
    this.hasField = {};
  };
  var project$1 = {
    has: function has() {
      return true; // This transform handles its own defaults, so always run parse.
    },
    parse: function parse(model, selCmpt, selDef) {
      var _a, _b, _c;

      var name = selCmpt.name;
      var proj = (_a = selCmpt.project) !== null && _a !== void 0 ? _a : selCmpt.project = new SelectionProjectionComponent();
      var parsed = {};
      var timeUnits = {};
      var signals = new Set();

      var signalName = function signalName(p, range) {
        var suffix = range === 'visual' ? p.channel : p.field;
        var sg = varName("".concat(name, "_").concat(suffix));

        for (var counter = 1; signals.has(sg); counter++) {
          sg = varName("".concat(name, "_").concat(suffix, "_").concat(counter));
        }

        signals.add(sg);
        return _defineProperty({}, range, sg);
      }; // If no explicit projection (either fields or encodings) is specified, set some defaults.
      // If an initial value is set, try to infer projections.
      // Otherwise, use the default configuration.


      if (!selDef.fields && !selDef.encodings) {
        var cfg = model.config.selection[selDef.type];

        if (selDef.init) {
          var _iterator = _createForOfIteratorHelper(array(selDef.init)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var init = _step.value;

              var _iterator2 = _createForOfIteratorHelper(keys$2(init)),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var key = _step2.value;

                  if (isSingleDefUnitChannel(key)) {
                    (selDef.encodings || (selDef.encodings = [])).push(key);
                  } else {
                    if (selDef.type === 'interval') {
                      warn$1('Interval selections should be initialized using "x" and/or "y" keys.');
                      selDef.encodings = cfg.encodings;
                    } else {
                      (selDef.fields || (selDef.fields = [])).push(key);
                    }
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          selDef.encodings = cfg.encodings;
          selDef.fields = cfg.fields;
        }
      } // TODO: find a possible channel mapping for these fields.


      var _iterator3 = _createForOfIteratorHelper((_b = selDef.fields) !== null && _b !== void 0 ? _b : []),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var field = _step3.value;
          var p = {
            type: 'E',
            field: field
          };
          p.signals = _extends({}, signalName(p, 'data'));
          proj.items.push(p);
          proj.hasField[field] = p;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper((_c = selDef.encodings) !== null && _c !== void 0 ? _c : []),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var channel = _step4.value;
          var fieldDef = model.fieldDef(channel);

          if (fieldDef) {
            var _field = fieldDef.field;

            if (fieldDef.aggregate) {
              warn$1(message.cannotProjectAggregate(channel, fieldDef.aggregate));
              continue;
            } else if (!_field) {
              warn$1(message.cannotProjectOnChannelWithoutField(channel));
              continue;
            }

            if (fieldDef.timeUnit) {
              _field = model.vgField(channel); // Construct TimeUnitComponents which will be combined into a
              // TimeUnitNode. This node may need to be inserted into the
              // dataflow if the selection is used across views that do not
              // have these time units defined.

              var component = {
                timeUnit: fieldDef.timeUnit,
                as: _field,
                field: fieldDef.field
              };
              timeUnits[hash(component)] = component;
            } // Prevent duplicate projections on the same field.
            // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).


            if (!parsed[_field]) {
              // Determine whether the tuple will store enumerated or ranged values.
              // Interval selections store ranges for continuous scales, and enumerations otherwise.
              // Single/multi selections store ranges for binned fields, and enumerations otherwise.
              var type = 'E';

              if (selCmpt.type === 'interval') {
                var scaleType = model.getScaleComponent(channel).get('type');

                if (hasContinuousDomain(scaleType)) {
                  type = 'R';
                }
              } else if (fieldDef.bin) {
                type = 'R-RE';
              }

              var _p = {
                field: _field,
                channel: channel,
                type: type
              };
              _p.signals = _extends(_extends({}, signalName(_p, 'data')), signalName(_p, 'visual'));
              proj.items.push(parsed[_field] = _p);
              proj.hasField[_field] = proj.hasChannel[channel] = parsed[_field];
            }
          } else {
            warn$1(message.cannotProjectOnChannelWithoutField(channel));
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (selDef.init) {
        var parseInit = function parseInit(i) {
          return proj.items.map(function (p) {
            return i[p.channel] !== undefined ? i[p.channel] : i[p.field];
          });
        };

        if (selDef.type === 'interval') {
          selCmpt.init = parseInit(selDef.init);
        } else {
          var _init = array(selDef.init);

          selCmpt.init = _init.map(parseInit);
        }
      }

      if (keys$2(timeUnits).length > 0) {
        proj.timeUnit = new TimeUnitNode(null, timeUnits);
      }
    },
    signals: function signals(model, selCmpt, allSignals) {
      var name = selCmpt.name + TUPLE_FIELDS;
      var hasSignal = allSignals.filter(function (s) {
        return s.name === name;
      });
      return hasSignal.length > 0 ? allSignals : allSignals.concat({
        name: name,
        value: selCmpt.project.items.map(function (proj) {
          var signals = proj.signals,
              hasLegend = proj.hasLegend,
              rest = __rest(proj, ["signals", "hasLegend"]);

          rest.field = replacePathInField(rest.field);
          return rest;
        })
      });
    }
  };

  var inputBindings = {
    has: function has(selCmpt) {
      return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);
    },
    parse: function parse(model, selCmpt, selDef, origDef) {
      // Binding a selection to input widgets disables default direct manipulation interaction.
      // A user can choose to re-enable it by explicitly specifying triggering input events.
      if (!origDef.on) delete selCmpt.events;
      if (!origDef.clear) delete selCmpt.clear;
    },
    topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
      var name = selCmpt.name;
      var proj = selCmpt.project;
      var bind = selCmpt.bind;
      var init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).

      var datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';
      proj.items.forEach(function (p, i) {
        var _a, _b;

        var sgname = varName("".concat(name, "_").concat(p.field));
        var hasSignal = signals.filter(function (s) {
          return s.name === sgname;
        });

        if (!hasSignal.length) {
          signals.unshift(_extends(_extends({
            name: sgname
          }, init ? {
            init: assembleInit(init[i])
          } : {
            value: null
          }), {
            on: selCmpt.events ? [{
              events: selCmpt.events,
              update: "datum && item().mark.marktype !== 'group' ? ".concat(datum, "[").concat($(p.field), "] : null")
            }] : [],
            bind: (_b = (_a = bind[p.field]) !== null && _a !== void 0 ? _a : bind[p.channel]) !== null && _b !== void 0 ? _b : bind
          }));
        }
      });
      return signals;
    },
    signals: function signals(model, selCmpt, _signals) {
      var name = selCmpt.name;
      var proj = selCmpt.project;

      var signal = _signals.filter(function (s) {
        return s.name === name + TUPLE;
      })[0];

      var fields = name + TUPLE_FIELDS;
      var values = proj.items.map(function (p) {
        return varName("".concat(name, "_").concat(p.field));
      });
      var valid = values.map(function (v) {
        return "".concat(v, " !== null");
      }).join(' && ');

      if (values.length) {
        signal.update = "".concat(valid, " ? {fields: ").concat(fields, ", values: [").concat(values.join(', '), "]} : null");
      }

      delete signal.value;
      delete signal.on;
      return _signals;
    }
  };

  var TOGGLE = '_toggle';
  var toggle = {
    has: function has(selCmpt) {
      return selCmpt.type === 'multi' && !!selCmpt.toggle;
    },
    signals: function signals(model, selCmpt, _signals) {
      return _signals.concat({
        name: selCmpt.name + TOGGLE,
        value: false,
        on: [{
          events: selCmpt.events,
          update: selCmpt.toggle
        }]
      });
    },
    modifyExpr: function modifyExpr(model, selCmpt) {
      var tpl = selCmpt.name + TUPLE;
      var signal = selCmpt.name + TOGGLE;
      return "".concat(signal, " ? null : ").concat(tpl, ", ") + (selCmpt.resolve === 'global' ? "".concat(signal, " ? null : true, ") : "".concat(signal, " ? null : {unit: ").concat(unitName(model), "}, ")) + "".concat(signal, " ? ").concat(tpl, " : null");
    }
  };

  var clear = {
    has: function has(selCmpt) {
      return selCmpt.clear !== undefined && selCmpt.clear !== false;
    },
    parse: function parse(model, selCmpt, selDef) {
      if (selDef.clear) {
        selCmpt.clear = isString(selDef.clear) ? parseSelector(selDef.clear, 'scope') : selDef.clear;
      }
    },
    topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
      if (inputBindings.has(selCmpt)) {
        var _iterator = _createForOfIteratorHelper(selCmpt.project.items),
            _step;

        try {
          var _loop = function _loop() {
            var proj = _step.value;
            var idx = signals.findIndex(function (n) {
              return n.name === varName("".concat(selCmpt.name, "_").concat(proj.field));
            });

            if (idx !== -1) {
              signals[idx].on.push({
                events: selCmpt.clear,
                update: 'null'
              });
            }
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return signals;
    },
    signals: function signals(model, selCmpt, _signals) {
      function addClear(idx, update) {
        if (idx !== -1 && _signals[idx].on) {
          _signals[idx].on.push({
            events: selCmpt.clear,
            update: update
          });
        }
      } // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.


      if (selCmpt.type === 'interval') {
        var _iterator2 = _createForOfIteratorHelper(selCmpt.project.items),
            _step2;

        try {
          var _loop2 = function _loop2() {
            var proj = _step2.value;

            var vIdx = _signals.findIndex(function (n) {
              return n.name === proj.signals.visual;
            });

            addClear(vIdx, '[0, 0]');

            if (vIdx === -1) {
              var dIdx = _signals.findIndex(function (n) {
                return n.name === proj.signals.data;
              });

              addClear(dIdx, 'null');
            }
          };

          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            _loop2();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        var tIdx = _signals.findIndex(function (n) {
          return n.name === selCmpt.name + TUPLE;
        });

        addClear(tIdx, 'null');

        if (toggle.has(selCmpt)) {
          tIdx = _signals.findIndex(function (n) {
            return n.name === selCmpt.name + TOGGLE;
          });
          addClear(tIdx, 'false');
        }
      }

      return _signals;
    }
  };

  var scaleBindings = {
    has: function has(selCmpt) {
      return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';
    },
    parse: function parse(model, selCmpt) {
      var bound = selCmpt.scales = [];

      var _iterator = _createForOfIteratorHelper(selCmpt.project.items),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var proj = _step.value;
          var channel = proj.channel;

          if (!isScaleChannel(channel)) {
            continue;
          }

          var scale = model.getScaleComponent(channel);
          var scaleType = scale ? scale.get('type') : undefined;

          if (!scale || !hasContinuousDomain(scaleType)) {
            warn$1(message.SCALE_BINDINGS_CONTINUOUS);
            continue;
          }

          var extent = {
            selection: selCmpt.name,
            field: proj.field
          };
          scale.set('selectionExtent', extent, true);
          bound.push(proj);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
      var bound = selCmpt.scales.filter(function (proj) {
        return signals.filter(function (s) {
          return s.name === proj.signals.data;
        }).length === 0;
      }); // Top-level signals are only needed for multiview displays and if this
      // view's top-level signals haven't already been generated.

      if (!model.parent || isTopLevelLayer(model) || bound.length === 0) {
        return signals;
      } // vlSelectionResolve does not account for the behavior of bound scales in
      // multiview displays. Each unit view adds a tuple to the store, but the
      // state of the selection is the unit selection most recently updated. This
      // state is captured by the top-level signals that we insert and "push
      // outer" to from within the units. We need to reassemble this state into
      // the top-level named signal, except no single selCmpt has a global view.


      var namedSg = signals.filter(function (s) {
        return s.name === selCmpt.name;
      })[0];
      var update = namedSg.update;

      if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {
        namedSg.update = "{".concat(bound.map(function (proj) {
          return "".concat($(proj.field), ": ").concat(proj.signals.data);
        }).join(', '), "}");
      } else {
        var _iterator2 = _createForOfIteratorHelper(bound),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var proj = _step2.value;
            var mapping = "".concat($(proj.field), ": ").concat(proj.signals.data);

            if (update.indexOf(mapping) < 0) {
              update = "".concat(update.substring(0, update.length - 1), ", ").concat(mapping, "}");
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        namedSg.update = update;
      }

      return signals.concat(bound.map(function (proj) {
        return {
          name: proj.signals.data
        };
      }));
    },
    signals: function signals(model, selCmpt, _signals) {
      // Nested signals need only push to top-level signals with multiview displays.
      if (model.parent && !isTopLevelLayer(model)) {
        var _iterator3 = _createForOfIteratorHelper(selCmpt.scales),
            _step3;

        try {
          var _loop = function _loop() {
            var proj = _step3.value;

            var signal = _signals.filter(function (s) {
              return s.name === proj.signals.data;
            })[0];

            signal.push = 'outer';
            delete signal.value;
            delete signal.update;
          };

          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      return _signals;
    }
  };
  function domain$2(model, channel) {
    var scale = $(model.scaleName(channel));
    return "domain(".concat(scale, ")");
  }

  function isTopLevelLayer(model) {
    var _a;

    return model.parent && isLayerModel(model.parent) && ((_a = !model.parent.parent) !== null && _a !== void 0 ? _a : isTopLevelLayer(model.parent.parent));
  }

  var legendBindings = {
    has: function has(selCmpt) {
      var spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);
      var projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;

      if (spec && !projLen) {
        warn$1(message.LEGEND_BINDINGS_PROJECT_LENGTH);
      }

      return spec && projLen;
    },
    parse: function parse(model, selCmpt, selDef, origDef) {
      var _a; // Binding a selection to a legend disables default direct manipulation interaction.
      // A user can choose to re-enable it by explicitly specifying triggering input events.


      if (!origDef.on) delete selCmpt.events;
      if (!origDef.clear) delete selCmpt.clear;

      if (origDef.on || origDef.clear) {
        var legendFilter = 'event.item && indexof(event.item.mark.role, "legend") < 0';

        var _iterator = _createForOfIteratorHelper(selCmpt.events),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _evt = _step.value;
            _evt.filter = array((_a = _evt.filter) !== null && _a !== void 0 ? _a : []);

            if (_evt.filter.indexOf(legendFilter) < 0) {
              _evt.filter.push(legendFilter);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      var evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';
      var stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);
      selCmpt.bind = {
        legend: {
          merge: stream
        }
      };
    },
    topLevelSignals: function topLevelSignals(model, selCmpt, signals) {
      var selName = selCmpt.name;
      var stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;

      var markName = function markName(name) {
        return function (s) {
          var ds = duplicate(s);
          ds.markname = name;
          return ds;
        };
      };

      var _iterator2 = _createForOfIteratorHelper(selCmpt.project.items),
          _step2;

      try {
        var _loop = function _loop() {
          var proj = _step2.value;
          if (!proj.hasLegend) return "continue";
          var prefix = "".concat(varName(proj.field), "_legend");
          var sgName = "".concat(selName, "_").concat(prefix);
          var hasSignal = signals.filter(function (s) {
            return s.name === sgName;
          });

          if (hasSignal.length === 0) {
            var events = stream.merge.map(markName("".concat(prefix, "_symbols"))).concat(stream.merge.map(markName("".concat(prefix, "_labels")))).concat(stream.merge.map(markName("".concat(prefix, "_entries"))));
            signals.unshift(_extends(_extends({
              name: sgName
            }, !selCmpt.init ? {
              value: null
            } : {}), {
              on: [// Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.
              {
                events: events,
                update: 'datum.value || item().items[0].items[0].datum.value',
                force: true
              }, {
                events: stream.merge,
                update: "!event.item || !datum ? null : ".concat(sgName),
                force: true
              }]
            }));
          }
        };

        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return signals;
    },
    signals: function signals(model, selCmpt, _signals) {
      var name = selCmpt.name;
      var proj = selCmpt.project;

      var tuple = _signals.find(function (s) {
        return s.name === name + TUPLE;
      });

      var fields = name + TUPLE_FIELDS;
      var values = proj.items.filter(function (p) {
        return p.hasLegend;
      }).map(function (p) {
        return varName("".concat(name, "_").concat(varName(p.field), "_legend"));
      });
      var valid = values.map(function (v) {
        return "".concat(v, " !== null");
      }).join(' && ');
      var update = "".concat(valid, " ? {fields: ").concat(fields, ", values: [").concat(values.join(', '), "]} : null");

      if (selCmpt.events && values.length > 0) {
        tuple.on.push({
          events: values.map(function (signal) {
            return {
              signal: signal
            };
          }),
          update: update
        });
      } else if (values.length > 0) {
        tuple.update = update;
        delete tuple.value;
        delete tuple.on;
      }

      var toggle = _signals.find(function (s) {
        return s.name === name + TOGGLE;
      });

      var events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;

      if (toggle) {
        if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push(_extends(_extends({}, toggle.on[0]), {
          events: events
        }));
      }

      return _signals;
    }
  };
  function parseInteractiveLegend(model, channel, legendCmpt) {
    var _a;

    var field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;
    forEachSelection(model, function (selCmpt) {
      var _a, _b;

      var proj = (_a = selCmpt.project.hasField[field]) !== null && _a !== void 0 ? _a : selCmpt.project.hasChannel[channel];

      if (proj && legendBindings.has(selCmpt)) {
        var legendSelections = (_b = legendCmpt.get('selections')) !== null && _b !== void 0 ? _b : [];
        legendSelections.push(selCmpt.name);
        legendCmpt.set('selections', legendSelections, false);
        proj.hasLegend = true;
      }
    });
  }

  var ANCHOR = '_translate_anchor';
  var DELTA = '_translate_delta';
  var translate$3 = {
    has: function has(selCmpt) {
      return selCmpt.type === 'interval' && selCmpt.translate;
    },
    signals: function signals(model, selCmpt, _signals) {
      var name = selCmpt.name;
      var hasScales = scaleBindings.has(selCmpt);
      var anchor = name + ANCHOR;
      var _selCmpt$project$hasC = selCmpt.project.hasChannel,
          x = _selCmpt$project$hasC.x,
          y = _selCmpt$project$hasC.y;
      var events = parseSelector(selCmpt.translate, 'scope');

      if (!hasScales) {
        events = events.map(function (e) {
          return e.between[0].markname = name + BRUSH, e;
        });
      }

      _signals.push({
        name: anchor,
        value: {},
        on: [{
          events: events.map(function (e) {
            return e.between[0];
          }),
          update: '{x: x(unit), y: y(unit)' + (x !== undefined ? ', extent_x: ' + (hasScales ? domain$2(model, X$1) : "slice(".concat(x.signals.visual, ")")) : '') + (y !== undefined ? ', extent_y: ' + (hasScales ? domain$2(model, Y$1) : "slice(".concat(y.signals.visual, ")")) : '') + '}'
        }]
      }, {
        name: name + DELTA,
        value: {},
        on: [{
          events: events,
          update: "{x: ".concat(anchor, ".x - x(unit), y: ").concat(anchor, ".y - y(unit)}")
        }]
      });

      if (x !== undefined) {
        onDelta(model, selCmpt, x, 'width', _signals);
      }

      if (y !== undefined) {
        onDelta(model, selCmpt, y, 'height', _signals);
      }

      return _signals;
    }
  };

  function onDelta(model, selCmpt, proj, size, signals) {
    var _a;

    var name = selCmpt.name;
    var anchor = name + ANCHOR;
    var delta = name + DELTA;
    var channel = proj.channel;
    var hasScales = scaleBindings.has(selCmpt);
    var signal = signals.filter(function (s) {
      return s.name === proj.signals[hasScales ? 'data' : 'visual'];
    })[0];
    var sizeSg = model.getSizeSignalRef(size).signal;
    var scaleCmpt = model.getScaleComponent(channel);
    var scaleType = scaleCmpt.get('type');
    var sign = hasScales && channel === X$1 ? '-' : ''; // Invert delta when panning x-scales.

    var extent = "".concat(anchor, ".extent_").concat(channel);
    var offset = "".concat(sign).concat(delta, ".").concat(channel, " / ") + (hasScales ? "".concat(sizeSg) : "span(".concat(extent, ")"));
    var panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'pow' ? 'panPow' : 'panLinear';
    var update = "".concat(panFn, "(").concat(extent, ", ").concat(offset) + (hasScales && scaleType === 'pow' ? ", ".concat((_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1) : '') + ')';
    signal.on.push({
      events: {
        signal: delta
      },
      update: hasScales ? update : "clampRange(".concat(update, ", 0, ").concat(sizeSg, ")")
    });
  }

  var ANCHOR$1 = '_zoom_anchor';
  var DELTA$1 = '_zoom_delta';
  var zoom$2 = {
    has: function has(selCmpt) {
      return selCmpt.type === 'interval' && selCmpt.zoom;
    },
    signals: function signals(model, selCmpt, _signals) {
      var name = selCmpt.name;
      var hasScales = scaleBindings.has(selCmpt);
      var delta = name + DELTA$1;
      var _selCmpt$project$hasC = selCmpt.project.hasChannel,
          x = _selCmpt$project$hasC.x,
          y = _selCmpt$project$hasC.y;
      var sx = $(model.scaleName(X$1));
      var sy = $(model.scaleName(Y$1));
      var events = parseSelector(selCmpt.zoom, 'scope');

      if (!hasScales) {
        events = events.map(function (e) {
          return e.markname = name + BRUSH, e;
        });
      }

      _signals.push({
        name: name + ANCHOR$1,
        on: [{
          events: events,
          update: !hasScales ? "{x: x(unit), y: y(unit)}" : '{' + [sx ? "x: invert(".concat(sx, ", x(unit))") : '', sy ? "y: invert(".concat(sy, ", y(unit))") : ''].filter(function (expr) {
            return !!expr;
          }).join(', ') + '}'
        }]
      }, {
        name: delta,
        on: [{
          events: events,
          force: true,
          update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'
        }]
      });

      if (x !== undefined) {
        onDelta$1(model, selCmpt, x, 'width', _signals);
      }

      if (y !== undefined) {
        onDelta$1(model, selCmpt, y, 'height', _signals);
      }

      return _signals;
    }
  };

  function onDelta$1(model, selCmpt, proj, size, signals) {
    var _a;

    var name = selCmpt.name;
    var channel = proj.channel;
    var hasScales = scaleBindings.has(selCmpt);
    var signal = signals.filter(function (s) {
      return s.name === proj.signals[hasScales ? 'data' : 'visual'];
    })[0];
    var sizeSg = model.getSizeSignalRef(size).signal;
    var scaleCmpt = model.getScaleComponent(channel);
    var scaleType = scaleCmpt.get('type');
    var base = hasScales ? domain$2(model, channel) : signal.name;
    var delta = name + DELTA$1;
    var anchor = "".concat(name).concat(ANCHOR$1, ".").concat(channel);
    var zoomFn = !hasScales ? 'zoomLinear' : scaleType === 'log' ? 'zoomLog' : scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';
    var update = "".concat(zoomFn, "(").concat(base, ", ").concat(anchor, ", ").concat(delta) + (hasScales && scaleType === 'pow' ? ", ".concat((_a = scaleCmpt.get('exponent')) !== null && _a !== void 0 ? _a : 1) : '') + ')';
    signal.on.push({
      events: {
        signal: delta
      },
      update: hasScales ? update : "clampRange(".concat(update, ", 0, ").concat(sizeSg, ")")
    });
  }

  var compilers = [project$1, toggle, scaleBindings, legendBindings, translate$3, zoom$2, inputBindings, nearest, clear];
  function forEachTransform(selCmpt, cb) {
    var _iterator = _createForOfIteratorHelper(compilers),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var t = _step.value;

        if (t.has(selCmpt)) {
          cb(t);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  function assembleInit(init) {
    var isExpr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var wrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;

    if (isArray(init)) {
      var assembled = init.map(function (v) {
        return assembleInit(v, isExpr, wrap);
      });
      return isExpr ? "[".concat(assembled.join(', '), "]") : assembled;
    } else if (isDateTime(init)) {
      if (isExpr) {
        return wrap(dateTimeToExpr(init));
      } else {
        return wrap(dateTimeToTimestamp(init));
      }
    }

    return isExpr ? wrap(JSON.stringify(init)) : init;
  }
  function assembleUnitSelectionSignals(model, signals) {
    forEachSelection(model, function (selCmpt, selCompiler) {
      var _signals;

      var name = selCmpt.name;
      var modifyExpr = selCompiler.modifyExpr(model, selCmpt);

      (_signals = signals).push.apply(_signals, _toConsumableArray(selCompiler.signals(model, selCmpt)));

      forEachTransform(selCmpt, function (txCompiler) {
        if (txCompiler.signals) {
          signals = txCompiler.signals(model, selCmpt, signals);
        }

        if (txCompiler.modifyExpr) {
          modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
        }
      });
      signals.push({
        name: name + MODIFY,
        on: [{
          events: {
            signal: selCmpt.name + TUPLE
          },
          update: "modify(".concat($(selCmpt.name + STORE), ", ").concat(modifyExpr, ")")
        }]
      });
    });
    return cleanupEmptyOnArray(signals);
  }
  function assembleFacetSignals(model, signals) {
    if (model.component.selection && keys$2(model.component.selection).length) {
      var name = $(model.getName('cell'));
      signals.unshift({
        name: 'facet',
        value: {},
        on: [{
          events: parseSelector('mousemove', 'scope'),
          update: "isTuple(facet) ? facet : group(".concat(name, ").datum")
        }]
      });
    }

    return cleanupEmptyOnArray(signals);
  }
  function assembleTopLevelSignals(model, signals) {
    var hasSelections = false;
    forEachSelection(model, function (selCmpt, selCompiler) {
      var name = selCmpt.name;
      var store = $(name + STORE);
      var hasSg = signals.filter(function (s) {
        return s.name === name;
      });

      if (hasSg.length === 0) {
        var resolve = selCmpt.resolve === 'global' ? 'union' : selCmpt.resolve;
        var isMulti = selCmpt.type === 'multi' ? ', true)' : ')';
        signals.push({
          name: selCmpt.name,
          update: "".concat(VL_SELECTION_RESOLVE, "(").concat(store, ", ").concat($(resolve)).concat(isMulti)
        });
      }

      hasSelections = true;

      if (selCompiler.topLevelSignals) {
        signals = selCompiler.topLevelSignals(model, selCmpt, signals);
      }

      forEachTransform(selCmpt, function (txCompiler) {
        if (txCompiler.topLevelSignals) {
          signals = txCompiler.topLevelSignals(model, selCmpt, signals);
        }
      });
    });

    if (hasSelections) {
      var hasUnit = signals.filter(function (s) {
        return s.name === 'unit';
      });

      if (hasUnit.length === 0) {
        signals.unshift({
          name: 'unit',
          value: {},
          on: [{
            events: 'mousemove',
            update: 'isTuple(group()) ? group() : unit'
          }]
        });
      }
    }

    return cleanupEmptyOnArray(signals);
  }
  function assembleUnitSelectionData(model, data) {
    var dataCopy = _toConsumableArray(data);

    forEachSelection(model, function (selCmpt) {
      var init = {
        name: selCmpt.name + STORE
      };

      if (selCmpt.init) {
        var fields = selCmpt.project.items.map(function (proj) {
          var signals = proj.signals,
              rest = __rest(proj, ["signals"]);

          return rest;
        });
        var insert = selCmpt.init.map(function (i) {
          return assembleInit(i, false);
        });
        init.values = selCmpt.type === 'interval' ? [{
          unit: unitName(model, {
            escape: false
          }),
          fields: fields,
          values: insert
        }] : insert.map(function (i) {
          return {
            unit: unitName(model, {
              escape: false
            }),
            fields: fields,
            values: i
          };
        });
      }

      var contains = dataCopy.filter(function (d) {
        return d.name === selCmpt.name + STORE;
      });

      if (!contains.length) {
        dataCopy.push(init);
      }
    });
    return dataCopy;
  }
  function assembleUnitSelectionMarks(model, marks) {
    forEachSelection(model, function (selCmpt, selCompiler) {
      marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
      forEachTransform(selCmpt, function (txCompiler) {
        if (txCompiler.marks) {
          marks = txCompiler.marks(model, selCmpt, marks);
        }
      });
    });
    return marks;
  }
  function assembleLayerSelectionMarks(model, marks) {
    var _iterator = _createForOfIteratorHelper(model.children),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var child = _step.value;

        if (isUnitModel(child)) {
          marks = assembleUnitSelectionMarks(child, marks);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return marks;
  }
  function assembleSelectionScaleDomain(model, extent) {
    var name = extent.selection;
    var selCmpt = model.getSelectionComponent(name, varName(name));
    return {
      signal: parseSelectionBinExtent(selCmpt, extent)
    };
  }

  function cleanupEmptyOnArray(signals) {
    return signals.map(function (s) {
      if (s.on && !s.on.length) delete s.on;
      return s;
    });
  }

  var BRUSH = '_brush';
  var SCALE_TRIGGER = '_scale_trigger';
  var interval$2 = {
    signals: function signals(model, selCmpt) {
      var name = selCmpt.name;
      var fieldsSg = name + TUPLE_FIELDS;
      var hasScales = scaleBindings.has(selCmpt);
      var signals = [];
      var dataSignals = [];
      var scaleTriggers = [];

      if (selCmpt.translate && !hasScales) {
        var filterExpr = "!event.item || event.item.mark.name !== ".concat($(name + BRUSH));
        events$2(selCmpt, function (on, evt) {
          var _a;

          var filters = array((_a = evt.between[0].filter) !== null && _a !== void 0 ? _a : evt.between[0].filter = []);

          if (filters.indexOf(filterExpr) < 0) {
            filters.push(filterExpr);
          }

          return on;
        });
      }

      selCmpt.project.items.forEach(function (proj, i) {
        var channel = proj.channel;

        if (channel !== X$1 && channel !== Y$1) {
          warn$1('Interval selections only support x and y encoding channels.');
          return;
        }

        var init = selCmpt.init ? selCmpt.init[i] : null;
        var cs = channelSignals(model, selCmpt, proj, init);
        var dname = proj.signals.data;
        var vname = proj.signals.visual;
        var scaleName = $(model.scaleName(channel));
        var scaleType = model.getScaleComponent(channel).get('type');
        var toNum = hasContinuousDomain(scaleType) ? '+' : '';
        signals.push.apply(signals, _toConsumableArray(cs));
        dataSignals.push(dname);
        scaleTriggers.push({
          scaleName: model.scaleName(channel),
          expr: "(!isArray(".concat(dname, ") || ") + "(".concat(toNum, "invert(").concat(scaleName, ", ").concat(vname, ")[0] === ").concat(toNum).concat(dname, "[0] && ") + "".concat(toNum, "invert(").concat(scaleName, ", ").concat(vname, ")[1] === ").concat(toNum).concat(dname, "[1]))")
        });
      }); // Proxy scale reactions to ensure that an infinite loop doesn't occur
      // when an interval selection filter touches the scale.

      if (!hasScales) {
        signals.push({
          name: name + SCALE_TRIGGER,
          value: {},
          on: [{
            events: scaleTriggers.map(function (t) {
              return {
                scale: t.scaleName
              };
            }),
            update: scaleTriggers.map(function (t) {
              return t.expr;
            }).join(' && ') + " ? ".concat(name + SCALE_TRIGGER, " : {}")
          }]
        });
      } // Only add an interval to the store if it has valid data extents. Data extents
      // are set to null if pixel extents are equal to account for intervals over
      // ordinal/nominal domains which, when inverted, will still produce a valid datum.


      var init = selCmpt.init;
      var update = "unit: ".concat(unitName(model), ", fields: ").concat(fieldsSg, ", values");
      return signals.concat(_extends(_extends({
        name: name + TUPLE
      }, init ? {
        init: "{".concat(update, ": ").concat(assembleInit(init), "}")
      } : {}), {
        on: [{
          events: [{
            signal: dataSignals.join(' || ')
          }],
          update: dataSignals.join(' && ') + " ? {".concat(update, ": [").concat(dataSignals, "]} : null")
        }]
      }));
    },
    modifyExpr: function modifyExpr(model, selCmpt) {
      var tpl = selCmpt.name + TUPLE;
      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : "{unit: ".concat(unitName(model), "}"));
    },
    marks: function marks(model, selCmpt, _marks) {
      var name = selCmpt.name;
      var _selCmpt$project$hasC = selCmpt.project.hasChannel,
          x = _selCmpt$project$hasC.x,
          y = _selCmpt$project$hasC.y;
      var xvname = x && x.signals.visual;
      var yvname = y && y.signals.visual;
      var store = "data(".concat($(selCmpt.name + STORE), ")"); // Do not add a brush if we're binding to scales.

      if (scaleBindings.has(selCmpt)) {
        return _marks;
      }

      var update = {
        x: x !== undefined ? {
          signal: "".concat(xvname, "[0]")
        } : {
          value: 0
        },
        y: y !== undefined ? {
          signal: "".concat(yvname, "[0]")
        } : {
          value: 0
        },
        x2: x !== undefined ? {
          signal: "".concat(xvname, "[1]")
        } : {
          field: {
            group: 'width'
          }
        },
        y2: y !== undefined ? {
          signal: "".concat(yvname, "[1]")
        } : {
          field: {
            group: 'height'
          }
        }
      }; // If the selection is resolved to global, only a single interval is in
      // the store. Wrap brush mark's encodings with a production rule to test
      // this based on the `unit` property. Hide the brush mark if it corresponds
      // to a unit different from the one in the store.

      if (selCmpt.resolve === 'global') {
        var _iterator = _createForOfIteratorHelper(keys$2(update)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var key = _step.value;
            update[key] = [_extends({
              test: "".concat(store, ".length && ").concat(store, "[0].unit === ").concat(unitName(model))
            }, update[key]), {
              value: 0
            }];
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } // Two brush marks ensure that fill colors and other aesthetic choices do
      // not interefere with the core marks, but that the brushed region can still
      // be interacted with (e.g., dragging it around).


      var _a = selCmpt.mark,
          fill = _a.fill,
          fillOpacity = _a.fillOpacity,
          cursor = _a.cursor,
          stroke = __rest(_a, ["fill", "fillOpacity", "cursor"]);

      var vgStroke = keys$2(stroke).reduce(function (def, k) {
        def[k] = [{
          test: [x !== undefined && "".concat(xvname, "[0] !== ").concat(xvname, "[1]"), y !== undefined && "".concat(yvname, "[0] !== ").concat(yvname, "[1]")].filter(function (t) {
            return t;
          }).join(' && '),
          value: stroke[k]
        }, {
          value: null
        }];
        return def;
      }, {});
      return [{
        name: name + BRUSH + '_bg',
        type: 'rect',
        clip: true,
        encode: {
          enter: {
            fill: {
              value: fill
            },
            fillOpacity: {
              value: fillOpacity
            }
          },
          update: update
        }
      }].concat(_toConsumableArray(_marks), [{
        name: name + BRUSH,
        type: 'rect',
        clip: true,
        encode: {
          enter: _extends(_extends({}, cursor ? {
            cursor: {
              value: cursor
            }
          } : {}), {
            fill: {
              value: 'transparent'
            }
          }),
          update: _extends(_extends({}, update), vgStroke)
        }
      }]);
    }
  };
  /**
   * Returns the visual and data signals for an interval selection.
   */

  function channelSignals(model, selCmpt, proj, init) {
    var channel = proj.channel;
    var vname = proj.signals.visual;
    var dname = proj.signals.data;
    var hasScales = scaleBindings.has(selCmpt);
    var scaleName = $(model.scaleName(channel));
    var scale = model.getScaleComponent(channel);
    var scaleType = scale ? scale.get('type') : undefined;

    var scaled = function scaled(str) {
      return "scale(".concat(scaleName, ", ").concat(str, ")");
    };

    var size = model.getSizeSignalRef(channel === X$1 ? 'width' : 'height').signal;
    var coord = "".concat(channel, "(unit)");
    var on = events$2(selCmpt, function (def, evt) {
      return [].concat(_toConsumableArray(def), [{
        events: evt.between[0],
        update: "[".concat(coord, ", ").concat(coord, "]")
      }, {
        events: evt,
        update: "[".concat(vname, "[0], clamp(").concat(coord, ", 0, ").concat(size, ")]")
      } // Brush End
      ]);
    }); // React to pan/zooms of continuous scales. Non-continuous scales
    // (band, point) cannot be pan/zoomed and any other changes
    // to their domains (e.g., filtering) should clear the brushes.

    on.push({
      events: {
        signal: selCmpt.name + SCALE_TRIGGER
      },
      update: hasContinuousDomain(scaleType) ? "[".concat(scaled("".concat(dname, "[0]")), ", ").concat(scaled("".concat(dname, "[1]")), "]") : "[0, 0]"
    });
    return hasScales ? [{
      name: dname,
      on: []
    }] : [_extends(_extends({
      name: vname
    }, init ? {
      init: assembleInit(init, true, scaled)
    } : {
      value: []
    }), {
      on: on
    }), _extends(_extends({
      name: dname
    }, init ? {
      init: assembleInit(init)
    } : {}), {
      on: [{
        events: {
          signal: vname
        },
        update: "".concat(vname, "[0] === ").concat(vname, "[1] ? null : invert(").concat(scaleName, ", ").concat(vname, ")")
      }]
    })];
  }

  function events$2(selCmpt, cb) {
    return selCmpt.events.reduce(function (on, evt) {
      if (!evt.between) {
        warn$1("".concat(evt, " is not an ordered event stream for interval selections."));
        return on;
      }

      return cb(on, evt);
    }, []);
  }

  function singleOrMultiSignals(model, selCmpt) {
    var name = selCmpt.name;
    var fieldsSg = name + TUPLE_FIELDS;
    var project = selCmpt.project;
    var datum = '(item().isVoronoi ? datum.datum : datum)';
    var values = project.items.map(function (p) {
      var fieldDef = model.fieldDef(p.channel); // Binned fields should capture extents, for a range test against the raw field.

      return fieldDef && fieldDef.bin ? "[".concat(datum, "[").concat($(model.vgField(p.channel, {})), "], ") + "".concat(datum, "[").concat($(model.vgField(p.channel, {
        binSuffix: 'end'
      })), "]]") : "".concat(datum, "[").concat($(p.field), "]");
    }).join(', '); // Only add a discrete selection to the store if a datum is present _and_
    // the interaction isn't occurring on a group mark. This guards against
    // polluting interactive state with invalid values in faceted displays
    // as the group marks are also data-driven. We force the update to account
    // for constant null states but varying toggles (e.g., shift-click in
    // whitespace followed by a click in whitespace; the store should only
    // be cleared on the second click).

    var update = "unit: ".concat(unitName(model), ", fields: ").concat(fieldsSg, ", values");
    var events = selCmpt.events;
    return [{
      name: name + TUPLE,
      on: events ? [{
        events: events,
        update: "datum && item().mark.marktype !== 'group' ? {".concat(update, ": [").concat(values, "]} : null"),
        force: true
      }] : []
    }];
  }
  var multi = {
    signals: singleOrMultiSignals,
    modifyExpr: function modifyExpr(model, selCmpt) {
      var tpl = selCmpt.name + TUPLE;
      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : "{unit: ".concat(unitName(model), "}"));
    }
  };

  var single = {
    signals: singleOrMultiSignals,
    modifyExpr: function modifyExpr(model, selCmpt) {
      var tpl = selCmpt.name + TUPLE;
      return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : "{unit: ".concat(unitName(model), "}"));
    }
  };

  var STORE = '_store';
  var TUPLE = '_tuple';
  var MODIFY = '_modify';
  var VL_SELECTION_RESOLVE = 'vlSelectionResolve';
  var compilers$1 = {
    single: single,
    multi: multi,
    interval: interval$2
  };
  function forEachSelection(model, cb) {
    var selections = model.component.selection;

    if (selections) {
      var _iterator = _createForOfIteratorHelper(vals(selections)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var sel = _step.value;
          var success = cb(sel, compilers$1[sel.type]);
          if (success === true) break;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }

  function getFacetModel(model) {
    var parent = model.parent;

    while (parent) {
      if (isFacetModel(parent)) {
        break;
      }

      parent = parent.parent;
    }

    return parent;
  }

  function unitName(model) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      escape: true
    },
        escape = _ref.escape;

    var name = escape ? $(model.name) : model.name;
    var facetModel = getFacetModel(model);

    if (facetModel) {
      var facet = facetModel.facet;

      var _iterator2 = _createForOfIteratorHelper(FACET_CHANNELS),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var channel = _step2.value;

          if (facet[channel]) {
            name += " + '__facet_".concat(channel, "_' + (facet[").concat($(facetModel.vgField(channel)), "])");
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    return name;
  }
  function requiresSelectionId(model) {
    var identifier = false;
    forEachSelection(model, function (selCmpt) {
      identifier = identifier || selCmpt.project.items.some(function (proj) {
        return proj.field === SELECTION_ID;
      });
    });
    return identifier;
  }

  function getName(node) {
    var name = [];

    if (node.type === 'Identifier') {
      return [node.name];
    }

    if (node.type === 'Literal') {
      return [node.value];
    }

    if (node.type === 'MemberExpression') {
      name.push.apply(name, _toConsumableArray(getName(node.object)));
      name.push.apply(name, _toConsumableArray(getName(node.property)));
    }

    return name;
  }

  function startsWithDatum(node) {
    if (node.object.type === 'MemberExpression') {
      return startsWithDatum(node.object);
    }

    return node.object.name === 'datum';
  }

  function getDependentFields(expression) {
    var ast = parse$6(expression);
    var dependents = new Set();
    ast.visit(function (node) {
      if (node.type === 'MemberExpression' && startsWithDatum(node)) {
        dependents.add(getName(node).slice(1).join('.'));
      }
    });
    return dependents;
  }

  var FilterNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(FilterNode, _DataFlowNode);

    var _super = _createSuper(FilterNode);

    function FilterNode(parent, model, filter) {
      var _this;

      _classCallCheck(this, FilterNode);

      _this = _super.call(this, parent);
      _this.model = model;
      _this.filter = filter; // TODO: refactor this to not take a node and
      // then add a static function makeFromOperand and make the constructor take only an expression

      _this.expr = expression$2(_this.model, _this.filter, _assertThisInitialized(_this));
      _this._dependentFields = getDependentFields(_this.expr);
      return _this;
    }

    _createClass(FilterNode, [{
      key: "clone",
      value: function clone() {
        return new FilterNode(null, this.model, duplicate(this.filter));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return this._dependentFields;
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(); // filter does not produce any new fields
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return {
          type: 'filter',
          expr: this.expr
        };
      }
    }, {
      key: "hash",
      value: function hash() {
        return "Filter ".concat(this.expr);
      }
    }]);

    return FilterNode;
  }(DataFlowNode);

  function parseUnitSelection(model, selDefs) {
    var _a;

    var selCmpts = {};
    var selectionConfig = model.config.selection;

    var _iterator = _createForOfIteratorHelper(keys$2(selDefs !== null && selDefs !== void 0 ? selDefs : {})),
        _step;

    try {
      var _loop = function _loop() {
        var name = _step.value;
        var selDef = duplicate(selDefs[name]);

        var _b = selectionConfig[selDef.type],
            fields = _b.fields,
            encodings = _b.encodings,
            cfg = __rest(_b, ["fields", "encodings"]); // Project transform applies its defaults.
        // Set default values from config if a property hasn't been specified,
        // or if it is true. E.g., "translate": true should use the default
        // event handlers for translate. However, true may be a valid value for
        // a property (e.g., "nearest": true).


        for (var key in cfg) {
          // A selection should contain either `encodings` or `fields`, only use
          // default values for these two values if neither of them is specified.
          if (key === 'encodings' && selDef.fields || key === 'fields' && selDef.encodings) {
            continue;
          }

          if (key === 'mark') {
            selDef[key] = _extends(_extends({}, cfg[key]), selDef[key]);
          }

          if (selDef[key] === undefined || selDef[key] === true) {
            selDef[key] = (_a = cfg[key]) !== null && _a !== void 0 ? _a : selDef[key];
          }
        }

        var safeName = varName(name);

        var selCmpt = selCmpts[safeName] = _extends(_extends({}, selDef), {
          name: safeName,
          events: isString(selDef.on) ? parseSelector(selDef.on, 'scope') : duplicate(selDef.on)
        });

        forEachTransform(selCmpt, function (txCompiler) {
          if (txCompiler.has(selCmpt) && txCompiler.parse) {
            txCompiler.parse(model, selCmpt, selDef, selDefs[name]);
          }
        });
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return selCmpts;
  }
  function parseSelectionPredicate(model, selections, dfnode) {
    var datum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'datum';
    var stores = [];

    function expr(name) {
      var vname = varName(name);
      var selCmpt = model.getSelectionComponent(vname, name);
      var store = $(vname + STORE);

      if (selCmpt.project.timeUnit) {
        var child = dfnode !== null && dfnode !== void 0 ? dfnode : model.component.data.raw;
        var tunode = selCmpt.project.timeUnit.clone();

        if (child.parent) {
          tunode.insertAsParentOf(child);
        } else {
          child.parent = tunode;
        }
      }

      if (selCmpt.empty !== 'none') {
        stores.push(store);
      }

      return "vlSelectionTest(".concat(store, ", ").concat(datum) + (selCmpt.resolve === 'global' ? ')' : ", ".concat($(selCmpt.resolve), ")"));
    }

    var predicateStr = logicalExpr(selections, expr);
    return (stores.length ? '!(' + stores.map(function (s) {
      return "length(data(".concat(s, "))");
    }).join(' || ') + ') || ' : '') + "(".concat(predicateStr, ")");
  }
  function parseSelectionBinExtent(selCmpt, extent) {
    var encoding = extent['encoding'];
    var field = extent['field'];

    if (!encoding && !field) {
      field = selCmpt.project.items[0].field;

      if (selCmpt.project.items.length > 1) {
        warn$1('A "field" or "encoding" must be specified when using a selection as a scale domain. ' + "Using \"field\": ".concat($(field), "."));
      }
    } else if (encoding && !field) {
      var encodings = selCmpt.project.items.filter(function (p) {
        return p.channel === encoding;
      });

      if (!encodings.length || encodings.length > 1) {
        field = selCmpt.project.items[0].field;
        warn$1((!encodings.length ? 'No ' : 'Multiple ') + "matching ".concat($(encoding), " encoding found for selection ").concat($(extent.selection), ". ") + "Using \"field\": ".concat($(field), "."));
      } else {
        field = encodings[0].field;
      }
    }

    return "".concat(selCmpt.name, "[").concat($(field), "]");
  }
  function materializeSelections(model, main) {
    forEachSelection(model, function (selCmpt) {
      var selection = selCmpt.name;
      var lookupName = model.getName("lookup_".concat(selection));
      model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, {
        selection: selection
      }), lookupName, 'lookup', model.component.data.outputNodeRefCounts);
    });
  }

  /**
   * Converts a predicate into an expression.
   */
  // model is only used for selection filters.

  function expression$2(model, filterOp, node) {
    return logicalExpr(filterOp, function (predicate) {
      if (isString(predicate)) {
        return predicate;
      } else if (isSelectionPredicate(predicate)) {
        return parseSelectionPredicate(model, predicate.selection, node);
      } else {
        // Filter Object
        return fieldFilterExpression(predicate);
      }
    });
  }

  function assembleTitle(title, config) {
    if (!title) {
      return undefined;
    }

    if (isArray(title) && !isText(title)) {
      return title.map(function (fieldDef) {
        return defaultTitle(fieldDef, config);
      }).join(', ');
    }

    return title;
  }

  function setAxisEncode(axis, part, vgProp, vgRef) {
    var _a, _b, _c;

    axis.encode = (_a = axis.encode) !== null && _a !== void 0 ? _a : {};
    axis.encode[part] = (_b = axis.encode[part]) !== null && _b !== void 0 ? _b : {};
    axis.encode[part].update = (_c = axis.encode[part].update) !== null && _c !== void 0 ? _c : {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291

    axis.encode[part].update[vgProp] = vgRef;
  }

  function exprFromValueOrSignalRef(ref) {
    if (isSignalRef(ref)) {
      return ref.signal;
    }

    return $(ref.value);
  }

  function assembleAxis(axisCmpt, kind, config) {
    var opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
      header: false
    };

    var _a, _b;

    var _c = axisCmpt.combine(),
        disable = _c.disable,
        orient = _c.orient,
        scale = _c.scale,
        labelExpr = _c.labelExpr,
        title = _c.title,
        zindex = _c.zindex,
        axis = __rest(_c, ["disable", "orient", "scale", "labelExpr", "title", "zindex"]);

    if (disable) {
      return undefined;
    }

    for (var prop in axis) {
      var propType = AXIS_PROPERTY_TYPE[prop];
      var propValue = axis[prop];

      if (propType && propType !== kind && propType !== 'both') {
        // Remove properties that are not valid for this kind of axis
        delete axis[prop];
      } else if (isConditionalAxisValue(propValue)) {
        // deal with conditional axis value
        var condition = propValue.condition,
            valueOrSignalRef = __rest(propValue, ["condition"]);

        var conditions = array(condition);
        var propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];

        if (propIndex) {
          var vgProp = propIndex.vgProp,
              part = propIndex.part; // If there is a corresponding Vega property for the channel,
          // use Vega's custom axis encoding and delete the original axis property to avoid conflicts

          var vgRef = [].concat(_toConsumableArray(conditions.map(function (c) {
            var test = c.test,
                valueOrSignalCRef = __rest(c, ["test"]);

            return _extends({
              test: expression$2(null, test)
            }, valueOrSignalCRef);
          })), [valueOrSignalRef]);
          setAxisEncode(axis, part, vgProp, vgRef);
          delete axis[prop];
        } else if (propIndex === null) {
          // If propIndex is null, this means we support conditional axis property by converting the condition to signal insteed.
          var signalRef = {
            signal: conditions.map(function (c) {
              var test = c.test,
                  valueOrSignalCRef = __rest(c, ["test"]);

              return "".concat(expression$2(null, test), " ? ").concat(exprFromValueOrSignalRef(valueOrSignalCRef), " : ");
            }).join('') + exprFromValueOrSignalRef(valueOrSignalRef)
          };
          axis[prop] = signalRef;
        }
      } else if (isSignalRef(propValue)) {
        var _propIndex = CONDITIONAL_AXIS_PROP_INDEX[prop];

        if (_propIndex) {
          var _vgProp = _propIndex.vgProp,
              _part = _propIndex.part;
          setAxisEncode(axis, _part, _vgProp, propValue);
          delete axis[prop];
        } // else do nothing since the property already supports signal

      }
    }

    if (kind === 'grid') {
      if (!axis.grid) {
        return undefined;
      } // Remove unnecessary encode block


      if (axis.encode) {
        // Only need to keep encode block for grid
        var grid = axis.encode.grid;
        axis.encode = _extends({}, grid ? {
          grid: grid
        } : {});

        if (keys$2(axis.encode).length === 0) {
          delete axis.encode;
        }
      }

      return _extends(_extends({
        scale: scale,
        orient: orient
      }, axis), {
        domain: false,
        labels: false,
        // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`
        // would not affect gridAxis
        maxExtent: 0,
        minExtent: 0,
        ticks: false,
        zindex: getFirstDefined(zindex, 0) // put grid behind marks by default

      });
    } else {
      // kind === 'main'
      if (!opt.header && axisCmpt.mainExtracted) {
        // if mainExtracted has been extracted to a separate facet
        return undefined;
      }

      if (labelExpr !== undefined) {
        var expr = labelExpr;

        if (((_b = (_a = axis.encode) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b.update) && isSignalRef(axis.encode.labels.update.text)) {
          expr = replaceAll(labelExpr, 'datum.label', axis.encode.labels.update.text.signal);
        }

        setAxisEncode(axis, 'labels', 'text', {
          signal: expr
        });
      } // Remove unnecessary encode block


      if (axis.encode) {
        var _iterator = _createForOfIteratorHelper(AXIS_PARTS),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _part2 = _step.value;

            if (!axisCmpt.hasAxisPart(_part2)) {
              delete axis.encode[_part2];
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (keys$2(axis.encode).length === 0) {
          delete axis.encode;
        }
      }

      var titleString = assembleTitle(title, config);
      return _extends(_extends(_extends({
        scale: scale,
        orient: orient,
        grid: false
      }, titleString ? {
        title: titleString
      } : {}), axis), {
        zindex: getFirstDefined(zindex, 0) // put axis line above marks by default

      });
    }
  }
  /**
   * Add axis signals so grid line works correctly
   * (Fix https://github.com/vega/vega-lite/issues/4226)
   */

  function assembleAxisSignals(model) {
    var axes = model.component.axes;
    var signals = [];

    var _iterator2 = _createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var channel = _step2.value;

        if (axes[channel]) {
          var _iterator3 = _createForOfIteratorHelper(axes[channel]),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var axis = _step3.value;

              if (!axis.get('disable') && !axis.get('gridScale')) {
                // If there is x-axis but no y-scale for gridScale, need to set height/width so x-axis can draw the grid with the right height. Same for y-axis and width.
                var sizeType = channel === 'x' ? 'height' : 'width';
                var update = model.getSizeSignalRef(sizeType).signal;

                if (sizeType !== update) {
                  signals.push({
                    name: sizeType,
                    update: update
                  });
                }
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return signals;
  }
  function assembleAxes(axisComponents, config) {
    var _axisComponents$x = axisComponents.x,
        x = _axisComponents$x === void 0 ? [] : _axisComponents$x,
        _axisComponents$y = axisComponents.y,
        y = _axisComponents$y === void 0 ? [] : _axisComponents$y;
    return [].concat(_toConsumableArray(x.map(function (a) {
      return assembleAxis(a, 'grid', config);
    })), _toConsumableArray(y.map(function (a) {
      return assembleAxis(a, 'grid', config);
    })), _toConsumableArray(x.map(function (a) {
      return assembleAxis(a, 'main', config);
    })), _toConsumableArray(y.map(function (a) {
      return assembleAxis(a, 'main', config);
    }))).filter(function (a) {
      return a;
    }); // filter undefined
  }

  var HEADER_TITLE_PROPERTIES_MAP = {
    titleAlign: 'align',
    titleAnchor: 'anchor',
    titleAngle: 'angle',
    titleBaseline: 'baseline',
    titleColor: 'color',
    titleFont: 'font',
    titleFontSize: 'fontSize',
    titleFontStyle: 'fontStyle',
    titleFontWeight: 'fontWeight',
    titleLimit: 'limit',
    titleLineHeight: 'lineHeight',
    titleOrient: 'orient',
    titlePadding: 'offset'
  };
  var HEADER_LABEL_PROPERTIES_MAP = {
    labelAlign: 'align',
    labelAnchor: 'anchor',
    labelAngle: 'angle',
    labelBaseline: 'baseline',
    labelColor: 'color',
    labelFont: 'font',
    labelFontSize: 'fontSize',
    labelFontStyle: 'fontStyle',
    labelFontWeight: 'fontWeight',
    labelLimit: 'limit',
    labelLineHeight: 'lineHeight',
    labelOrient: 'orient',
    labelPadding: 'offset'
  };
  var HEADER_TITLE_PROPERTIES = keys$2(HEADER_TITLE_PROPERTIES_MAP);
  var HEADER_LABEL_PROPERTIES = keys$2(HEADER_LABEL_PROPERTIES_MAP);

  function getAxisConfigFromConfigTypes(configTypes, config) {
    // TODO: add special casing to add conditional value based on orient signal
    return Object.assign.apply(null, [{}].concat(_toConsumableArray(configTypes.map(function (configType) {
      return config[configType];
    }))));
  }

  function getAxisConfigs(channel, scaleType, orient, config) {
    var typeBasedConfigTypes = scaleType === 'band' ? ['axisDiscrete', 'axisBand'] : scaleType === 'point' ? ['axisDiscrete', 'axisPoint'] : isQuantitative(scaleType) ? ['axisQuantitative'] : scaleType === 'time' || scaleType === 'utc' ? ['axisTemporal'] : [];
    var axisChannel = channel === 'x' ? 'axisX' : 'axisY';
    var axisOrient = 'axis' + titlecase(orient); // axisTop, axisBottom, ...

    var vlOnlyConfigTypes = [].concat(typeBasedConfigTypes, _toConsumableArray(typeBasedConfigTypes.map(function (c) {
      return axisChannel + c.substr(4);
    })));
    var vgConfigTypes = ['axis', axisOrient, axisChannel];
    return {
      vlOnlyAxisConfig: getAxisConfigFromConfigTypes(vlOnlyConfigTypes, config),
      vgAxisConfig: getAxisConfigFromConfigTypes(vgConfigTypes, config),
      axisConfigStyle: getAxisConfigStyle([].concat(vgConfigTypes, _toConsumableArray(vlOnlyConfigTypes)), config)
    };
  }
  function getAxisConfigStyle(axisConfigTypes, config) {
    var _a;

    var toMerge = [{}];

    var _iterator = _createForOfIteratorHelper(axisConfigTypes),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var configType = _step.value;
        // TODO: add special casing to add conditional value based on orient signal
        var style = (_a = config[configType]) === null || _a === void 0 ? void 0 : _a.style;

        if (style) {
          style = array(style);

          var _iterator2 = _createForOfIteratorHelper(style),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var s = _step2.value;
              toMerge.push(config.style[s]);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return Object.assign.apply(null, toMerge);
  }
  function getAxisConfig(property, config, style) {
    var axisConfigs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var _a;

    var styleConfig = getStyleConfig(property, style, config.style);

    if (styleConfig !== undefined) {
      return {
        configFrom: 'style',
        configValue: styleConfig
      };
    }

    for (var _i = 0, _arr = ['vlOnlyAxisConfig', 'vgAxisConfig', 'axisConfigStyle']; _i < _arr.length; _i++) {
      var configFrom = _arr[_i];

      if (((_a = axisConfigs[configFrom]) === null || _a === void 0 ? void 0 : _a[property]) !== undefined) {
        return {
          configFrom: configFrom,
          configValue: axisConfigs[configFrom][property]
        };
      }
    }

    return {};
  }

  var axisRules = {
    scale: function scale(_ref) {
      var model = _ref.model,
          channel = _ref.channel;
      return model.scaleName(channel);
    },
    format: function format(_ref2) {
      var fieldOrDatumDef = _ref2.fieldOrDatumDef,
          axis = _ref2.axis,
          config = _ref2.config;

      // We don't include temporal field and custom format as we apply format in encode block
      if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) || isFieldDefWithCustomTimeFormat(fieldOrDatumDef)) {
        return undefined;
      }

      return numberFormat(fieldOrDatumDef.type, axis.format, config);
    },
    formatType: function formatType(_ref3) {
      var fieldOrDatumDef = _ref3.fieldOrDatumDef,
          axis = _ref3.axis;

      // As with format, we don't include temporal field and custom format here as we apply format in encode block
      if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) || isFieldDefWithCustomTimeFormat(fieldOrDatumDef)) {
        return undefined;
      }

      var formatType = axis.formatType;

      if (formatType) {
        if (isSignalRef(formatType) || formatType === 'number' || formatType === 'time' || formatType === 'utc') {
          return formatType;
        }
      }

      return undefined;
    },
    grid: function grid(_ref4) {
      var fieldOrDatumDef = _ref4.fieldOrDatumDef,
          axis = _ref4.axis,
          scaleType = _ref4.scaleType;

      var _a;

      if (isFieldDef(fieldOrDatumDef) && isBinned(fieldOrDatumDef.bin)) {
        return false;
      } else {
        return (_a = axis.grid) !== null && _a !== void 0 ? _a : defaultGrid(scaleType, fieldOrDatumDef);
      }
    },
    gridScale: function gridScale(_ref5) {
      var model = _ref5.model,
          channel = _ref5.channel;
      return _gridScale(model, channel);
    },
    labelAlign: function labelAlign(_ref6) {
      var axis = _ref6.axis,
          labelAngle = _ref6.labelAngle,
          orient = _ref6.orient,
          channel = _ref6.channel;
      return axis.labelAlign || defaultLabelAlign(labelAngle, orient, channel);
    },
    labelAngle: function labelAngle(_ref7) {
      var _labelAngle = _ref7.labelAngle;
      return _labelAngle;
    },
    labelBaseline: function labelBaseline(_ref8) {
      var axis = _ref8.axis,
          labelAngle = _ref8.labelAngle,
          orient = _ref8.orient,
          channel = _ref8.channel;
      return axis.labelBaseline || defaultLabelBaseline(labelAngle, orient, channel);
    },
    labelFlush: function labelFlush(_ref9) {
      var axis = _ref9.axis,
          fieldOrDatumDef = _ref9.fieldOrDatumDef,
          channel = _ref9.channel;

      var _a;

      return (_a = axis.labelFlush) !== null && _a !== void 0 ? _a : defaultLabelFlush(fieldOrDatumDef.type, channel);
    },
    labelOverlap: function labelOverlap(_ref10) {
      var axis = _ref10.axis,
          fieldOrDatumDef = _ref10.fieldOrDatumDef,
          scaleType = _ref10.scaleType;

      var _a;

      return (_a = axis.labelOverlap) !== null && _a !== void 0 ? _a : defaultLabelOverlap(fieldOrDatumDef.type, scaleType);
    },
    orient: function orient(_ref11) {
      var _orient = _ref11.orient;
      return _orient;
    },
    tickCount: function tickCount(_ref12) {
      var channel = _ref12.channel,
          model = _ref12.model,
          axis = _ref12.axis,
          fieldOrDatumDef = _ref12.fieldOrDatumDef,
          scaleType = _ref12.scaleType;

      var _a;

      var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
      var size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;
      return (_a = axis.tickCount) !== null && _a !== void 0 ? _a : defaultTickCount({
        fieldOrDatumDef: fieldOrDatumDef,
        scaleType: scaleType,
        size: size,
        values: axis.values
      });
    },
    title: function title(_ref13) {
      var axis = _ref13.axis,
          model = _ref13.model,
          channel = _ref13.channel;

      if (axis.title !== undefined) {
        return axis.title;
      }

      var fieldDefTitle = getFieldDefTitle(model, channel);

      if (fieldDefTitle !== undefined) {
        return fieldDefTitle;
      }

      var fieldDef = model.typedFieldDef(channel);
      var channel2 = channel === 'x' ? 'x2' : 'y2';
      var fieldDef2 = model.fieldDef(channel2); // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)

      return mergeTitleFieldDefs(fieldDef ? [toFieldDefBase(fieldDef)] : [], isFieldDef(fieldDef2) ? [toFieldDefBase(fieldDef2)] : []);
    },
    values: function values(_ref14) {
      var axis = _ref14.axis,
          fieldOrDatumDef = _ref14.fieldOrDatumDef;
      return _values(axis, fieldOrDatumDef);
    },
    zindex: function zindex(_ref15) {
      var axis = _ref15.axis,
          fieldOrDatumDef = _ref15.fieldOrDatumDef,
          mark = _ref15.mark;

      var _a;

      return (_a = axis.zindex) !== null && _a !== void 0 ? _a : defaultZindex(mark, fieldOrDatumDef);
    }
  }; // TODO: we need to refactor this method after we take care of config refactoring

  /**
   * Default rules for whether to show a grid should be shown for a channel.
   * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned
   */

  function defaultGrid(scaleType, fieldDef) {
    return !hasDiscreteDomain(scaleType) && isFieldDef(fieldDef) && !isBinning(fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.bin);
  }

  function _gridScale(model, channel) {
    var gridChannel = channel === 'x' ? 'y' : 'x';

    if (model.getScaleComponent(gridChannel)) {
      return model.scaleName(gridChannel);
    }

    return undefined;
  }
  function getLabelAngle(model, specifiedAxis, channel, fieldOrDatumDef, axisConfigs) {
    // try axis value
    if ((specifiedAxis === null || specifiedAxis === void 0 ? void 0 : specifiedAxis.labelAngle) !== undefined) {
      return normalizeAngle(specifiedAxis === null || specifiedAxis === void 0 ? void 0 : specifiedAxis.labelAngle);
    } else {
      // try axis config value
      var _getAxisConfig = getAxisConfig('labelAngle', model.config, specifiedAxis === null || specifiedAxis === void 0 ? void 0 : specifiedAxis.style, axisConfigs),
          angle = _getAxisConfig.configValue;

      if (angle !== undefined) {
        return normalizeAngle(angle);
      } else {
        // get default value
        if (channel === X$1 && contains$1([NOMINAL, ORDINAL], fieldOrDatumDef.type)) {
          return 270;
        } // no default


        return undefined;
      }
    }
  }
  function defaultLabelBaseline(angle, axisOrient, channel) {
    channel = channel || (axisOrient === 'top' || axisOrient === 'bottom' ? 'x' : 'y');

    if (angle !== undefined) {
      if (channel === 'x') {
        return 45 < angle && angle < 135 || 225 < angle && angle < 315 ? 'middle' : (angle <= 45 || 315 <= angle) === (axisOrient === 'top') ? 'bottom' : 'top';
      } else {
        return angle <= 45 || 315 <= angle || 135 <= angle && angle <= 225 ? 'middle' : (45 <= angle && angle <= 135) === (axisOrient === 'left') ? 'top' : 'bottom';
      }
    }

    return undefined;
  }

  function _defaultLabelAlign(angle, axisOrient, startAngle, mainOrient) {
    // TODO: generate signal based on a similar formula if orient is a signal
    if ((angle + startAngle) % 180 === 0) {
      return 'center';
    } else if ((startAngle < angle && angle < 180 + startAngle) === (axisOrient === mainOrient)) {
      return 'left';
    }

    return 'right';
  }

  function defaultLabelAlign(angle, axisOrient, channel) {
    channel = channel || (axisOrient === 'top' || axisOrient === 'bottom' ? 'x' : 'y');

    if (angle !== undefined) {
      if (channel === 'x') {
        return _defaultLabelAlign(angle, axisOrient, 0, 'bottom');
      } else {
        return _defaultLabelAlign(angle, axisOrient, 90, 'left');
      }
    }

    return undefined;
  }
  function defaultLabelFlush(type, channel) {
    if (channel === 'x' && contains$1(['quantitative', 'temporal'], type)) {
      return true;
    }

    return undefined;
  }
  function defaultLabelOverlap(type, scaleType) {
    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are
    if (type !== 'nominal') {
      if (scaleType === 'log') {
        return 'greedy';
      }

      return true;
    }

    return undefined;
  }
  function defaultOrient(channel) {
    return channel === 'x' ? 'bottom' : 'left';
  }
  function defaultTickCount(_ref16) {
    var fieldOrDatumDef = _ref16.fieldOrDatumDef,
        scaleType = _ref16.scaleType,
        size = _ref16.size,
        vals = _ref16.values;

    var _a;

    if (!vals && !hasDiscreteDomain(scaleType) && scaleType !== 'log') {
      if (isFieldDef(fieldOrDatumDef)) {
        if (isBinning(fieldOrDatumDef.bin)) {
          // for binned data, we don't want more ticks than maxbins
          return {
            signal: "ceil(".concat(size.signal, "/10)")
          };
        }

        if (fieldOrDatumDef.timeUnit && contains$1(['month', 'hours', 'day', 'quarter'], (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit)) {
          return undefined;
        }
      }

      return {
        signal: "ceil(".concat(size.signal, "/40)")
      };
    }

    return undefined;
  }
  function getFieldDefTitle(model, channel) {
    var channel2 = channel === 'x' ? 'x2' : 'y2';
    var fieldDef = model.fieldDef(channel);
    var fieldDef2 = model.fieldDef(channel2);
    var title1 = fieldDef ? fieldDef.title : undefined;
    var title2 = fieldDef2 ? fieldDef2.title : undefined;

    if (title1 && title2) {
      return mergeTitle(title1, title2);
    } else if (title1) {
      return title1;
    } else if (title2) {
      return title2;
    } else if (title1 !== undefined) {
      // falsy value to disable config
      return title1;
    } else if (title2 !== undefined) {
      // falsy value to disable config
      return title2;
    }

    return undefined;
  }

  function _values(axis, fieldOrDatumDef) {
    var vals = axis.values;

    if (isArray(vals)) {
      return valueArray(fieldOrDatumDef, vals);
    } else if (isSignalRef(vals)) {
      return vals;
    }

    return undefined;
  }
  function defaultZindex(mark, fieldDef) {
    if (mark === 'rect' && isDiscrete$1(fieldDef)) {
      return 1;
    }

    return 0;
  }

  var CalculateNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(CalculateNode, _DataFlowNode);

    var _super = _createSuper(CalculateNode);

    function CalculateNode(parent, transform) {
      var _this;

      _classCallCheck(this, CalculateNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this._dependentFields = getDependentFields(_this.transform.calculate);
      return _this;
    }

    _createClass(CalculateNode, [{
      key: "clone",
      value: function clone() {
        return new CalculateNode(null, duplicate(this.transform));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set([this.transform.as]);
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return this._dependentFields;
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return {
          type: 'formula',
          expr: this.transform.calculate,
          as: this.transform.as
        };
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Calculate ".concat(hash(this.transform));
      }
    }], [{
      key: "parseAllForSortIndex",
      value: function parseAllForSortIndex(parent, model) {
        // get all the encoding with sort fields from model
        model.forEachFieldDef(function (fieldDef, channel) {
          if (!isScaleFieldDef(fieldDef)) {
            return;
          }

          if (isSortArray(fieldDef.sort)) {
            var field = fieldDef.field,
                timeUnit = fieldDef.timeUnit;
            var sort = fieldDef.sort; // generate `datum["a"] === val0 ? 0 : datum["a"] === val1 ? 1 : ... : n` via FieldEqualPredicate

            var calculate = sort.map(function (sortValue, i) {
              return "".concat(fieldFilterExpression({
                field: field,
                timeUnit: timeUnit,
                equal: sortValue
              }), " ? ").concat(i, " : ");
            }).join('') + sort.length;
            parent = new CalculateNode(parent, {
              calculate: calculate,
              as: sortArrayIndexField(fieldDef, channel, {
                forAs: true
              })
            });
          }
        });
        return parent;
      }
    }]);

    return CalculateNode;
  }(DataFlowNode);
  function sortArrayIndexField(fieldDef, channel, opt) {
    return vgField(fieldDef, _extends({
      prefix: channel,
      suffix: 'sort_index'
    }, opt !== null && opt !== void 0 ? opt : {}));
  }

  /**
   * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.
   */

  function getHeaderChannel(channel, orient) {
    if (contains$1(['top', 'bottom'], orient)) {
      return 'column';
    } else if (contains$1(['left', 'right'], orient)) {
      return 'row';
    }

    return channel === 'row' ? 'row' : 'column';
  }
  function getHeaderProperty(prop, facetFieldDef, config, channel) {
    var headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;
    return getFirstDefined(((facetFieldDef === null || facetFieldDef === void 0 ? void 0 : facetFieldDef.header) || {})[prop], headerSpecificConfig[prop], config.header[prop]);
  }
  function getHeaderProperties(properties, facetFieldDef, config, channel) {
    var props = {};

    var _iterator = _createForOfIteratorHelper(properties),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prop = _step.value;
        var value = getHeaderProperty(prop, facetFieldDef, config, channel);

        if (value !== undefined) {
          props[prop] = value;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return props;
  }

  var HEADER_CHANNELS = ['row', 'column'];
  var HEADER_TYPES = ['header', 'footer'];

  function assembleTitleGroup(model, channel) {
    var title = model.component.layoutHeaders[channel].title;
    var config = model.config ? model.config : undefined;
    var facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef ? model.component.layoutHeaders[channel].facetFieldDef : undefined;

    var _getHeaderProperties = getHeaderProperties(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef, config, channel),
        titleAnchor = _getHeaderProperties.titleAnchor,
        ta = _getHeaderProperties.titleAngle,
        titleOrient = _getHeaderProperties.titleOrient;

    var headerChannel = getHeaderChannel(channel, titleOrient);
    var titleAngle = normalizeAngle(ta);
    return {
      name: "".concat(channel, "-title"),
      type: 'group',
      role: "".concat(headerChannel, "-title"),
      title: _extends(_extends(_extends(_extends(_extends({
        text: title
      }, channel === 'row' ? {
        orient: 'left'
      } : {}), {
        style: 'guide-title'
      }), defaultHeaderGuideBaseline(titleAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))
    };
  }
  function defaultHeaderGuideAlign(headerChannel, angle) {
    var anchor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'middle';

    switch (anchor) {
      case 'start':
        return {
          align: 'left'
        };

      case 'end':
        return {
          align: 'right'
        };
    }

    var align = defaultLabelAlign(angle, headerChannel === 'row' ? 'left' : 'top');
    return align ? {
      align: align
    } : {};
  }
  function defaultHeaderGuideBaseline(angle, channel) {
    var baseline = defaultLabelBaseline(angle, channel === 'row' ? 'left' : 'top');
    return baseline ? {
      baseline: baseline
    } : {};
  }
  function assembleHeaderGroups(model, channel) {
    var layoutHeader = model.component.layoutHeaders[channel];
    var groups = [];

    var _iterator = _createForOfIteratorHelper(HEADER_TYPES),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var headerType = _step.value;

        if (layoutHeader[headerType]) {
          var _iterator2 = _createForOfIteratorHelper(layoutHeader[headerType]),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var headerComponent = _step2.value;
              var group = assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent);

              if (group != null) {
                groups.push(group);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return groups;
  }

  function getSort(facetFieldDef, channel) {
    var _a;

    var sort = facetFieldDef.sort;

    if (isSortField(sort)) {
      return {
        field: vgField(sort, {
          expr: 'datum'
        }),
        order: (_a = sort.order) !== null && _a !== void 0 ? _a : 'ascending'
      };
    } else if (isArray(sort)) {
      return {
        field: sortArrayIndexField(facetFieldDef, channel, {
          expr: 'datum'
        }),
        order: 'ascending'
      };
    } else {
      return {
        field: vgField(facetFieldDef, {
          expr: 'datum'
        }),
        order: sort !== null && sort !== void 0 ? sort : 'ascending'
      };
    }
  }

  function assembleLabelTitle(facetFieldDef, channel, config) {
    var _getHeaderProperties2 = getHeaderProperties(['format', 'formatType', 'labelAngle', 'labelAnchor', 'labelOrient', 'labelExpr'], facetFieldDef, config, channel),
        format = _getHeaderProperties2.format,
        formatType = _getHeaderProperties2.formatType,
        labelAngle = _getHeaderProperties2.labelAngle,
        labelAnchor = _getHeaderProperties2.labelAnchor,
        labelOrient = _getHeaderProperties2.labelOrient,
        labelExpr = _getHeaderProperties2.labelExpr;

    var titleTextExpr = formatSignalRef({
      fieldOrDatumDef: facetFieldDef,
      format: format,
      formatType: formatType,
      expr: 'parent',
      config: config
    }).signal;
    var headerChannel = getHeaderChannel(channel, labelOrient);
    return _extends(_extends(_extends(_extends(_extends({
      text: {
        signal: labelExpr ? replaceAll(replaceAll(labelExpr, 'datum.label', titleTextExpr), 'datum.value', vgField(facetFieldDef, {
          expr: 'parent'
        })) : titleTextExpr
      }
    }, channel === 'row' ? {
      orient: 'left'
    } : {}), {
      style: 'guide-label',
      frame: 'group'
    }), defaultHeaderGuideBaseline(labelAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP));
  }
  function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerComponent) {
    if (headerComponent) {
      var title = null;
      var facetFieldDef = layoutHeader.facetFieldDef;
      var config = model.config ? model.config : undefined;

      if (facetFieldDef && headerComponent.labels) {
        var _getHeaderProperties3 = getHeaderProperties(['labelOrient'], facetFieldDef, config, channel),
            labelOrient = _getHeaderProperties3.labelOrient; // Include label title in the header if orient aligns with the channel


        if (channel === 'row' && !contains$1(['top', 'bottom'], labelOrient) || channel === 'column' && !contains$1(['left', 'right'], labelOrient)) {
          title = assembleLabelTitle(facetFieldDef, channel, config);
        }
      }

      var isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);
      var axes = headerComponent.axes;
      var hasAxes = (axes === null || axes === void 0 ? void 0 : axes.length) > 0;

      if (title || hasAxes) {
        var sizeChannel = channel === 'row' ? 'height' : 'width';
        return _extends(_extends(_extends(_extends(_extends({
          name: model.getName("".concat(channel, "_").concat(headerType)),
          type: 'group',
          role: "".concat(channel, "-").concat(headerType)
        }, layoutHeader.facetFieldDef ? {
          from: {
            data: model.getName(channel + '_domain')
          },
          sort: getSort(facetFieldDef, channel)
        } : {}), hasAxes && isFacetWithoutRowCol ? {
          from: {
            data: model.getName("facet_domain_".concat(channel))
          }
        } : {}), title ? {
          title: title
        } : {}), headerComponent.sizeSignal ? {
          encode: {
            update: _defineProperty({}, sizeChannel, headerComponent.sizeSignal)
          }
        } : {}), hasAxes ? {
          axes: axes
        } : {});
      }
    }

    return null;
  }
  var LAYOUT_TITLE_BAND = {
    column: {
      start: 0,
      end: 1
    },
    row: {
      start: 1,
      end: 0
    }
  };
  function getLayoutTitleBand(titleAnchor, headerChannel) {
    return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];
  }
  function assembleLayoutTitleBand(headerComponentIndex, config) {
    var titleBand = {};

    var _iterator3 = _createForOfIteratorHelper(FACET_CHANNELS),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var channel = _step3.value;
        var headerComponent = headerComponentIndex[channel];

        if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent.facetFieldDef) {
          var _getHeaderProperties4 = getHeaderProperties(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef, config, channel),
              titleAnchor = _getHeaderProperties4.titleAnchor,
              titleOrient = _getHeaderProperties4.titleOrient;

          var headerChannel = getHeaderChannel(channel, titleOrient);
          var band = getLayoutTitleBand(titleAnchor, headerChannel);

          if (band !== undefined) {
            titleBand[headerChannel] = band;
          }
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return keys$2(titleBand).length > 0 ? titleBand : undefined;
  }
  function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {
    var props = {};

    var _iterator4 = _createForOfIteratorHelper(properties),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var prop = _step4.value;

        if (!propertiesMap[prop]) {
          continue;
        }

        var value = getHeaderProperty(prop, facetFieldDef, config, channel);

        if (value !== undefined) {
          props[propertiesMap[prop]] = value;
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    return props;
  }

  function assembleLayoutSignals(model) {
    return [].concat(_toConsumableArray(sizeSignals(model, 'width')), _toConsumableArray(sizeSignals(model, 'height')), _toConsumableArray(sizeSignals(model, 'childWidth')), _toConsumableArray(sizeSignals(model, 'childHeight')));
  }
  function sizeSignals(model, sizeType) {
    var channel = sizeType === 'width' ? 'x' : 'y';
    var size = model.component.layoutSize.get(sizeType);

    if (!size || size === 'merged') {
      return [];
    } // Read size signal name from name map, just in case it is the top-level size signal that got renamed.


    var name = model.getSizeSignalRef(sizeType).signal;

    if (size === 'step') {
      var scaleComponent = model.getScaleComponent(channel);

      if (scaleComponent) {
        var type = scaleComponent.get('type');
        var range = scaleComponent.get('range');

        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
          var scaleName = model.scaleName(channel);

          if (isFacetModel(model.parent)) {
            // If parent is facet and this is an independent scale, return only signal signal
            // as the width/height will be calculated using the cardinality from
            // facet's aggregate rather than reading from scale domain
            var parentResolve = model.parent.component.resolve;

            if (parentResolve.scale[channel] === 'independent') {
              return [stepSignal(scaleName, range)];
            }
          }

          return [stepSignal(scaleName, range), {
            name: name,
            update: sizeExpr(scaleName, scaleComponent, "domain('".concat(scaleName, "').length"))
          }];
        }
      }
      /* istanbul ignore next: Condition should not happen -- only for warning in development. */


      throw new Error('layout size is step although width/height is not step.');
    } else if (size == 'container') {
      var isWidth = name.endsWith('width');
      var expr = isWidth ? 'containerSize()[0]' : 'containerSize()[1]';
      var defaultValue = getViewConfigContinuousSize(model.config.view, isWidth ? 'width' : 'height');
      var safeExpr = "isFinite(".concat(expr, ") ? ").concat(expr, " : ").concat(defaultValue);
      return [{
        name: name,
        init: safeExpr,
        on: [{
          update: safeExpr,
          events: 'window:resize'
        }]
      }];
    } else {
      return [{
        name: name,
        value: size
      }];
    }
  }

  function stepSignal(scaleName, range) {
    return {
      name: scaleName + '_step',
      value: range.step
    };
  }

  function sizeExpr(scaleName, scaleComponent, cardinality) {
    var type = scaleComponent.get('type');
    var padding = scaleComponent.get('padding');
    var paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);
    var paddingInner = scaleComponent.get('paddingInner');
    paddingInner = type === 'band' ? // only band has real paddingInner
    paddingInner !== undefined ? paddingInner : padding : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,
    // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
    1;
    return "bandspace(".concat(cardinality, ", ").concat(paddingInner, ", ").concat(paddingOuter, ") * ").concat(scaleName, "_step");
  }

  function getSizeTypeFromLayoutSizeType(layoutSizeType) {
    return layoutSizeType === 'childWidth' ? 'width' : layoutSizeType === 'childHeight' ? 'height' : layoutSizeType;
  }

  function guideEncodeEntry(encoding, model) {
    return keys$2(encoding).reduce(function (encode, channel) {
      var valueDef = encoding[channel];
      return _extends(_extends({}, encode), wrapCondition(model, valueDef, channel, function (x) {
        return isSignalRef(x) ? x : {
          value: x.value
        };
      }));
    }, {});
  }

  function defaultScaleResolve(channel, model) {
    if (isLayerModel(model) || isFacetModel(model)) {
      return 'shared';
    } else if (isConcatModel(model)) {
      return contains$1(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';
    }
    /* istanbul ignore next: should never reach here. */


    throw new Error('invalid model type for resolve');
  }
  function parseGuideResolve(resolve, channel) {
    var channelScaleResolve = resolve.scale[channel];
    var guide = contains$1(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';

    if (channelScaleResolve === 'independent') {
      if (resolve[guide][channel] === 'shared') {
        warn$1(message.independentScaleMeansIndependentGuide(channel));
      }

      return 'independent';
    }

    return resolve[guide][channel] || 'shared';
  }

  /**
   * Generic class for storing properties that are explicitly specified
   * and implicitly determined by the compiler.
   * This is important for scale/axis/legend merging as
   * we want to prioritize properties that users explicitly specified.
   */

  var Split = /*#__PURE__*/function () {
    function Split() {
      var explicit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var implicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Split);

      this.explicit = explicit;
      this.implicit = implicit;
    }

    _createClass(Split, [{
      key: "clone",
      value: function clone() {
        return new Split(duplicate(this.explicit), duplicate(this.implicit));
      }
    }, {
      key: "combine",
      value: function combine() {
        // FIXME remove "as any".
        // Add "as any" to avoid an error "Spread types may only be created from object types".
        return _extends(_extends({}, this.explicit), this.implicit);
      }
    }, {
      key: "get",
      value: function get(key) {
        // Explicit has higher precedence
        return getFirstDefined(this.explicit[key], this.implicit[key]);
      }
    }, {
      key: "getWithExplicit",
      value: function getWithExplicit(key) {
        // Explicit has higher precedence
        if (this.explicit[key] !== undefined) {
          return {
            explicit: true,
            value: this.explicit[key]
          };
        } else if (this.implicit[key] !== undefined) {
          return {
            explicit: false,
            value: this.implicit[key]
          };
        }

        return {
          explicit: false,
          value: undefined
        };
      }
    }, {
      key: "setWithExplicit",
      value: function setWithExplicit(key, value) {
        if (value.value !== undefined) {
          this.set(key, value.value, value.explicit);
        }
      }
    }, {
      key: "set",
      value: function set(key, value, explicit) {
        delete this[explicit ? 'implicit' : 'explicit'][key];
        this[explicit ? 'explicit' : 'implicit'][key] = value;
        return this;
      }
    }, {
      key: "copyKeyFromSplit",
      value: function copyKeyFromSplit(key, s) {
        // Explicit has higher precedence
        if (s.explicit[key] !== undefined) {
          this.set(key, s.explicit[key], true);
        } else if (s.implicit[key] !== undefined) {
          this.set(key, s.implicit[key], false);
        }
      }
    }, {
      key: "copyKeyFromObject",
      value: function copyKeyFromObject(key, s) {
        // Explicit has higher precedence
        if (s[key] !== undefined) {
          this.set(key, s[key], true);
        }
      }
      /**
       * Merge split object into this split object. Properties from the other split
       * overwrite properties from this split.
       */

    }, {
      key: "copyAll",
      value: function copyAll(other) {
        var _iterator = _createForOfIteratorHelper(keys$2(other.combine())),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var key = _step.value;
            var val = other.getWithExplicit(key);
            this.setWithExplicit(key, val);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }]);

    return Split;
  }();
  function makeExplicit(value) {
    return {
      explicit: true,
      value: value
    };
  }
  function makeImplicit(value) {
    return {
      explicit: false,
      value: value
    };
  }
  function tieBreakByComparing(compare) {
    return function (v1, v2, property, propertyOf) {
      var diff = compare(v1.value, v2.value);

      if (diff > 0) {
        return v1;
      } else if (diff < 0) {
        return v2;
      }

      return defaultTieBreaker(v1, v2, property, propertyOf);
    };
  }
  function defaultTieBreaker(v1, v2, property, propertyOf) {
    if (v1.explicit && v2.explicit) {
      warn$1(message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));
    } // If equal score, prefer v1.


    return v1;
  }
  function mergeValuesWithExplicit(v1, v2, property, propertyOf) {
    var tieBreaker = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultTieBreaker;

    if (v1 === undefined || v1.value === undefined) {
      // For first run
      return v2;
    }

    if (v1.explicit && !v2.explicit) {
      return v1;
    } else if (v2.explicit && !v1.explicit) {
      return v2;
    } else if (deepEqual(v1.value, v2.value)) {
      return v1;
    } else {
      return tieBreaker(v1, v2, property, propertyOf);
    }
  }

  var LEGEND_COMPONENT_PROPERTY_INDEX = _extends(_extends({}, COMMON_LEGEND_PROPERTY_INDEX), {
    disable: 1,
    labelExpr: 1,
    selections: 1,
    // channel scales
    opacity: 1,
    shape: 1,
    stroke: 1,
    fill: 1,
    size: 1,
    strokeWidth: 1,
    strokeDash: 1,
    // encode
    encode: 1
  });

  var LEGEND_COMPONENT_PROPERTIES = keys$2(LEGEND_COMPONENT_PROPERTY_INDEX);
  var LegendComponent = /*#__PURE__*/function (_Split) {
    _inherits(LegendComponent, _Split);

    var _super = _createSuper(LegendComponent);

    function LegendComponent() {
      _classCallCheck(this, LegendComponent);

      return _super.apply(this, arguments);
    }

    return LegendComponent;
  }(Split);

  var legendEncodeRules = {
    symbols: symbols$2,
    gradient: gradient$2,
    labels: labels,
    entries: entries
  };
  function symbols$2(symbolsSpec, _ref) {
    var fieldOrDatumDef = _ref.fieldOrDatumDef,
        model = _ref.model,
        channel = _ref.channel,
        legendCmpt = _ref.legendCmpt,
        legendType = _ref.legendType;

    var _a, _b, _c, _d, _e;

    if (legendType !== 'symbol') {
      return undefined;
    }

    var markDef = model.markDef,
        encoding = model.encoding,
        config = model.config,
        mark = model.mark;
    var filled = markDef.filled && mark !== 'trail';

    var out = _extends(_extends({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG)), color$3(model, {
      filled: filled
    })); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry


    var opacity = (_a = getMaxValue(encoding.opacity)) !== null && _a !== void 0 ? _a : markDef.opacity;

    if (out.fill) {
      // for fill legend, we don't want any fill in symbol
      if (channel === 'fill' || filled && channel === COLOR) {
        delete out.fill;
      } else {
        if (out.fill['field']) {
          // For others, set fill to some opaque value (or nothing if a color is already set)
          if (legendCmpt.get('symbolFillColor')) {
            delete out.fill;
          } else {
            out.fill = signalOrValueRef((_b = config.legend.symbolBaseFillColor) !== null && _b !== void 0 ? _b : 'black');
            out.fillOpacity = signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1);
          }
        } else if (isArray(out.fill)) {
          var fill = (_e = (_d = getFirstConditionValue((_c = encoding.fill) !== null && _c !== void 0 ? _c : encoding.color)) !== null && _d !== void 0 ? _d : markDef.fill) !== null && _e !== void 0 ? _e : filled && markDef.color;

          if (fill) {
            out.fill = signalOrValueRef(fill);
          }
        }
      }
    }

    if (out.stroke) {
      if (channel === 'stroke' || !filled && channel === COLOR) {
        delete out.stroke;
      } else {
        if (out.stroke['field']) {
          // For others, remove stroke field
          delete out.stroke;
        } else if (isArray(out.stroke)) {
          var stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);

          if (stroke) {
            out.stroke = {
              value: stroke
            };
          }
        }
      }
    }

    if (channel !== OPACITY) {
      var condition = isFieldDef(fieldOrDatumDef) && selectedCondition(model, legendCmpt, fieldOrDatumDef);

      if (condition) {
        out.opacity = [_extends({
          test: condition
        }, signalOrValueRef(opacity !== null && opacity !== void 0 ? opacity : 1)), signalOrValueRef(config.legend.unselectedOpacity)];
      } else if (opacity) {
        out.opacity = signalOrValueRef(opacity);
      }
    }

    out = _extends(_extends({}, out), symbolsSpec);
    return keys$2(out).length > 0 ? out : undefined;
  }
  function gradient$2(gradientSpec, _ref2) {
    var model = _ref2.model,
        legendType = _ref2.legendType;

    if (legendType !== 'gradient') {
      return undefined;
    }

    var out = {};
    var opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;

    if (opacity) {
      // only apply opacity if it is neither zero or undefined
      out.opacity = signalOrValueRef(opacity);
    }

    out = _extends(_extends({}, out), gradientSpec);
    return keys$2(out).length > 0 ? out : undefined;
  }
  function labels(specifiedlabelsSpec, _ref3) {
    var fieldOrDatumDef = _ref3.fieldOrDatumDef,
        model = _ref3.model,
        channel = _ref3.channel,
        legendCmpt = _ref3.legendCmpt;
    var legend = model.legend(channel) || {};
    var config = model.config;
    var condition = isFieldDef(fieldOrDatumDef) ? selectedCondition(model, legendCmpt, fieldOrDatumDef) : undefined;
    var opacity = condition ? [{
      test: condition,
      value: 1
    }, {
      value: config.legend.unselectedOpacity
    }] : undefined;
    var format = legend.format,
        formatType = legend.formatType;
    var text = formatSignalRef({
      fieldOrDatumDef: fieldOrDatumDef,
      format: format,
      formatType: formatType,
      field: 'datum.value',
      config: config,
      isUTCScale: model.getScaleComponent(channel).get('type') === ScaleType.UTC,
      omitNumberFormatAndEmptyTimeFormat: true // no need to generate number format for encoding block as we can use Vega's legend format

    });

    var labelsSpec = _extends(_extends(_extends({}, opacity ? {
      opacity: opacity
    } : {}), text ? {
      text: text
    } : {}), specifiedlabelsSpec);

    return keys$2(labelsSpec).length > 0 ? labelsSpec : undefined;
  }
  function entries(entriesSpec, _ref4) {
    var legendCmpt = _ref4.legendCmpt;
    var selections = legendCmpt.get('selections');
    return (selections === null || selections === void 0 ? void 0 : selections.length) ? _extends(_extends({}, entriesSpec), {
      fill: {
        value: 'transparent'
      }
    }) : entriesSpec;
  }

  function getMaxValue(channelDef) {
    return getConditionValue(channelDef, function (v, conditionalDef) {
      return Math.max(v, conditionalDef.value);
    });
  }

  function getFirstConditionValue(channelDef) {
    return getConditionValue(channelDef, function (v, conditionalDef) {
      return getFirstDefined(v, conditionalDef.value);
    });
  }

  function getConditionValue(channelDef, reducer) {
    if (hasConditionalValueDef(channelDef)) {
      return array(channelDef.condition).reduce(reducer, channelDef.value);
    } else if (isValueDef(channelDef)) {
      return channelDef.value;
    }

    return undefined;
  }

  function selectedCondition(model, legendCmpt, fieldDef) {
    var selections = legendCmpt.get('selections');
    if (!(selections === null || selections === void 0 ? void 0 : selections.length)) return undefined;
    var field = $(fieldDef.field);
    return selections.map(function (name) {
      var store = $(varName(name) + STORE);
      return "(!length(data(".concat(store, ")) || (").concat(name, "[").concat(field, "] && indexof(").concat(name, "[").concat(field, "], datum.value) >= 0))");
    }).join(' || ');
  }

  var legendRules = {
    direction: function direction(_ref) {
      var _direction = _ref.direction;
      return _direction;
    },
    format: function format(_ref2) {
      var fieldOrDatumDef = _ref2.fieldOrDatumDef,
          legend = _ref2.legend,
          config = _ref2.config;

      // We don't include temporal field here as we apply format in encode block
      if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
        return undefined;
      }

      return numberFormat(fieldOrDatumDef.type, legend.format, config);
    },
    formatType: function formatType(_ref3) {
      var fieldOrDatumDef = _ref3.fieldOrDatumDef,
          legend = _ref3.legend;

      // As with format, we don't include temporal field here as we apply format in encode block
      if (isFieldOrDatumDefForTimeFormat(fieldOrDatumDef)) {
        return undefined;
      }

      var formatType = legend.formatType;

      if (formatType) {
        if (isSignalRef(formatType) || formatType === 'number' || formatType === 'time' || formatType === 'utc') {
          return formatType;
        }
      }

      return undefined;
    },
    gradientLength: function gradientLength(params) {
      var _a, _b;

      var legend = params.legend,
          legendConfig = params.legendConfig;
      return (_b = (_a = legend.gradientLength) !== null && _a !== void 0 ? _a : legendConfig.gradientLength) !== null && _b !== void 0 ? _b : defaultGradientLength(params);
    },
    labelOverlap: function labelOverlap(_ref4) {
      var legend = _ref4.legend,
          legendConfig = _ref4.legendConfig,
          scaleType = _ref4.scaleType;

      var _a, _b;

      return (_b = (_a = legend.labelOverlap) !== null && _a !== void 0 ? _a : legendConfig.labelOverlap) !== null && _b !== void 0 ? _b : defaultLabelOverlap$1(scaleType);
    },
    symbolType: function symbolType(_ref5) {
      var legend = _ref5.legend,
          markDef = _ref5.markDef,
          channel = _ref5.channel,
          encoding = _ref5.encoding;

      var _a;

      return (_a = legend.symbolType) !== null && _a !== void 0 ? _a : defaultSymbolType(markDef.type, channel, encoding.shape, markDef.shape);
    },
    title: function title$1(_ref6) {
      var fieldOrDatumDef = _ref6.fieldOrDatumDef,
          config = _ref6.config;
      return title(fieldOrDatumDef, config, {
        allowDisabling: true
      });
    },
    type: function type(_ref7) {
      var legendType = _ref7.legendType,
          scaleType = _ref7.scaleType,
          channel = _ref7.channel;

      if (isColorChannel(channel) && isContinuousToContinuous(scaleType)) {
        if (legendType === 'gradient') {
          return undefined;
        }
      } else if (legendType === 'symbol') {
        return undefined;
      }

      return legendType;
    },
    values: function values(_ref8) {
      var fieldOrDatumDef = _ref8.fieldOrDatumDef,
          legend = _ref8.legend;
      return _values$1(legend, fieldOrDatumDef);
    }
  };

  function _values$1(legend, fieldOrDatumDef) {
    var vals = legend.values;

    if (isArray(vals)) {
      return valueArray(fieldOrDatumDef, vals);
    } else if (isSignalRef(vals)) {
      return vals;
    }

    return undefined;
  }
  function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {
    var _a;

    if (channel !== 'shape') {
      // use the value from the shape encoding or the mark config if they exist
      var shape = (_a = getFirstConditionValue(shapeChannelDef)) !== null && _a !== void 0 ? _a : markShape;

      if (shape) {
        return shape;
      }
    }

    switch (mark) {
      case 'bar':
      case 'rect':
      case 'image':
      case 'square':
        return 'square';

      case 'line':
      case 'trail':
      case 'rule':
        return 'stroke';

      case 'arc':
      case 'point':
      case 'circle':
      case 'tick':
      case 'geoshape':
      case 'area':
      case 'text':
        return 'circle';
    }
  }
  function getLegendType(params) {
    var legend = params.legend;
    return getFirstDefined(legend.type, defaultType$1(params));
  }
  function defaultType$1(_ref9) {
    var channel = _ref9.channel,
        timeUnit = _ref9.timeUnit,
        scaleType = _ref9.scaleType;

    // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js
    if (isColorChannel(channel)) {
      if (contains$1(['quarter', 'month', 'day'], timeUnit)) {
        return 'symbol';
      }

      if (isContinuousToContinuous(scaleType)) {
        return 'gradient';
      }
    }

    return 'symbol';
  }
  function getDirection(_ref10) {
    var legendConfig = _ref10.legendConfig,
        legendType = _ref10.legendType,
        orient = _ref10.orient,
        legend = _ref10.legend;

    var _a, _b;

    return (_b = (_a = legend.direction) !== null && _a !== void 0 ? _a : legendConfig[legendType ? 'gradientDirection' : 'symbolDirection']) !== null && _b !== void 0 ? _b : defaultDirection(orient, legendType);
  }
  function defaultDirection(orient, legendType) {
    switch (orient) {
      case 'top':
      case 'bottom':
        return 'horizontal';

      case 'left':
      case 'right':
      case 'none':
      case undefined:
        // undefined = "right" in Vega
        return undefined;
      // vertical is Vega's default

      default:
        // top-left / ...
        // For inner legend, uses compact layout like Tableau
        return legendType === 'gradient' ? 'horizontal' : undefined;
    }
  }
  function defaultGradientLength(_ref11) {
    var legendConfig = _ref11.legendConfig,
        model = _ref11.model,
        direction = _ref11.direction,
        orient = _ref11.orient,
        scaleType = _ref11.scaleType;
    var gradientHorizontalMaxLength = legendConfig.gradientHorizontalMaxLength,
        gradientHorizontalMinLength = legendConfig.gradientHorizontalMinLength,
        gradientVerticalMaxLength = legendConfig.gradientVerticalMaxLength,
        gradientVerticalMinLength = legendConfig.gradientVerticalMinLength;

    if (isContinuousToContinuous(scaleType)) {
      if (direction === 'horizontal') {
        if (orient === 'top' || orient === 'bottom') {
          return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);
        } else {
          return gradientHorizontalMinLength;
        }
      } else {
        // vertical / undefined (Vega uses vertical by default)
        return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);
      }
    }

    return undefined;
  }

  function gradientLengthSignal(model, sizeType, min, max) {
    var sizeSignal = model.getSizeSignalRef(sizeType).signal;
    return {
      signal: "clamp(".concat(sizeSignal, ", ").concat(min, ", ").concat(max, ")")
    };
  }

  function defaultLabelOverlap$1(scaleType) {
    if (contains$1(['quantile', 'threshold', 'log'], scaleType)) {
      return 'greedy';
    }

    return undefined;
  }

  function parseLegend$1(model) {
    if (isUnitModel(model)) {
      model.component.legends = parseUnitLegend(model);
    } else {
      model.component.legends = parseNonUnitLegend(model);
    }
  }

  function parseUnitLegend(model) {
    var encoding = model.encoding;
    var legendComponent = {};

    for (var _i = 0, _arr = [COLOR].concat(_toConsumableArray(LEGEND_SCALE_CHANNELS)); _i < _arr.length; _i++) {
      var channel = _arr[_i];
      var def = getFieldOrDatumDef(encoding[channel]);

      if (!def || !model.getScaleComponent(channel)) {
        continue;
      }

      if (channel === SHAPE && isFieldDef(def) && def.type === GEOJSON) {
        continue;
      }

      legendComponent[channel] = parseLegendForChannel(model, channel);
    }

    return legendComponent;
  }

  function getLegendDefWithScale(model, channel) {
    var scale = model.scaleName(channel);

    if (model.mark === 'trail') {
      if (channel === 'color') {
        // trail is a filled mark, but its default symbolType ("stroke") should use "stroke"
        return {
          stroke: scale
        };
      } else if (channel === 'size') {
        return {
          strokeWidth: scale
        };
      }
    }

    if (channel === 'color') {
      return model.markDef.filled ? {
        fill: scale
      } : {
        stroke: scale
      };
    }

    return _defineProperty({}, channel, scale);
  }

  function isExplicit(value, property, legend, fieldDef) {
    switch (property) {
      case 'disable':
        return legend !== undefined;
      // if axis is specified or null/false, then it's enable/disable state is explicit

      case 'values':
        // specified legend.values is already respected, but may get transformed.
        return !!(legend === null || legend === void 0 ? void 0 : legend.values);

      case 'title':
        // title can be explicit if fieldDef.title is set
        if (property === 'title' && value === (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.title)) {
          return true;
        }

    } // Otherwise, things are explicit if the returned value matches the specified property


    return value === (legend || {})[property];
  }

  function parseLegendForChannel(model, channel) {
    var _a, _b, _c;

    var legend = model.legend(channel);
    var markDef = model.markDef,
        encoding = model.encoding,
        config = model.config;
    var legendConfig = config.legend;
    var legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));
    parseInteractiveLegend(model, channel, legendCmpt);

    if (legend !== undefined && !legend || legendConfig.disable) {
      legendCmpt.set('disable', true, legend !== undefined && !legend);
    }

    legend = legend || {};
    var scaleType = model.getScaleComponent(channel).get('type');
    var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
    var timeUnit = isFieldDef(fieldOrDatumDef) ? (_a = normalizeTimeUnit(fieldOrDatumDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit : undefined;
    var orient = legend.orient || config.legend.orient || 'right';
    var legendType = getLegendType({
      legend: legend,
      channel: channel,
      timeUnit: timeUnit,
      scaleType: scaleType
    });
    var direction = getDirection({
      legend: legend,
      legendType: legendType,
      orient: orient,
      legendConfig: legendConfig
    });
    var ruleParams = {
      legend: legend,
      channel: channel,
      model: model,
      markDef: markDef,
      encoding: encoding,
      fieldOrDatumDef: fieldOrDatumDef,
      legendConfig: legendConfig,
      config: config,
      scaleType: scaleType,
      orient: orient,
      legendType: legendType,
      direction: direction
    };

    var _iterator = _createForOfIteratorHelper(LEGEND_COMPONENT_PROPERTIES),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var property = _step.value;

        var _value = property in legendRules ? legendRules[property](ruleParams) : legend[property];

        if (_value !== undefined) {
          var explicit = isExplicit(_value, property, legend, model.fieldDef(channel));

          if (explicit || config.legend[property] === undefined) {
            legendCmpt.set(property, _value, explicit);
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var legendEncoding = (_b = legend === null || legend === void 0 ? void 0 : legend.encoding) !== null && _b !== void 0 ? _b : {};
    var selections = legendCmpt.get('selections');
    var legendEncode = {};
    var legendEncodeParams = {
      fieldOrDatumDef: fieldOrDatumDef,
      model: model,
      channel: channel,
      legendCmpt: legendCmpt,
      legendType: legendType
    };

    for (var _i2 = 0, _arr2 = ['labels', 'legend', 'title', 'symbols', 'gradient', 'entries']; _i2 < _arr2.length; _i2++) {
      var part = _arr2[_i2];
      var legendEncodingPart = guideEncodeEntry((_c = legendEncoding[part]) !== null && _c !== void 0 ? _c : {}, model);
      var value = part in legendEncodeRules ? legendEncodeRules[part](legendEncodingPart, legendEncodeParams) // apply rule
      : legendEncodingPart; // no rule -- just default values

      if (value !== undefined && keys$2(value).length > 0) {
        legendEncode[part] = _extends(_extends(_extends({}, (selections === null || selections === void 0 ? void 0 : selections.length) && isFieldDef(fieldOrDatumDef) ? {
          name: "".concat(varName(fieldOrDatumDef.field), "_legend_").concat(part)
        } : {}), (selections === null || selections === void 0 ? void 0 : selections.length) ? {
          interactive: !!selections
        } : {}), {
          update: value
        });
      }
    }

    if (keys$2(legendEncode).length > 0) {
      legendCmpt.set('encode', legendEncode, !!(legend === null || legend === void 0 ? void 0 : legend.encoding));
    }

    return legendCmpt;
  }

  function parseNonUnitLegend(model) {
    var _model$component = model.component,
        legends = _model$component.legends,
        resolve = _model$component.resolve;

    var _iterator2 = _createForOfIteratorHelper(model.children),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var child = _step2.value;
        parseLegend$1(child);

        var _iterator4 = _createForOfIteratorHelper(keys$2(child.component.legends)),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var channel = _step4.value;
            resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);

            if (resolve.legend[channel] === 'shared') {
              // If the resolve says shared (and has not been overridden)
              // We will try to merge and see if there is a conflict
              legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);

              if (!legends[channel]) {
                // If merge returns nothing, there is a conflict so we cannot make the legend shared.
                // Thus, mark legend as independent and remove the legend component.
                resolve.legend[channel] = 'independent';
                delete legends[channel];
              }
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var _iterator3 = _createForOfIteratorHelper(keys$2(legends)),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _channel = _step3.value;

        var _iterator5 = _createForOfIteratorHelper(model.children),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _child = _step5.value;

            if (!_child.component.legends[_channel]) {
              // skip if the child does not have a particular legend
              continue;
            }

            if (resolve.legend[_channel] === 'shared') {
              // After merging shared legend, make sure to remove legend from child
              delete _child.component.legends[_channel];
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return legends;
  }

  function mergeLegendComponent(mergedLegend, childLegend) {
    var _a, _b, _c, _d, _e, _f;

    if (!mergedLegend) {
      return childLegend.clone();
    }

    var mergedOrient = mergedLegend.getWithExplicit('orient');
    var childOrient = childLegend.getWithExplicit('orient');

    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
      // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
      // Cannot merge due to inconsistent orient
      return undefined;
    }

    var typeMerged = false; // Otherwise, let's merge

    var _iterator6 = _createForOfIteratorHelper(LEGEND_COMPONENT_PROPERTIES),
        _step6;

    try {
      var _loop = function _loop() {
        var prop = _step6.value;
        var mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', // Tie breaker function
        function (v1, v2) {
          switch (prop) {
            case 'symbolType':
              return mergeSymbolType(v1, v2);

            case 'title':
              return mergeTitleComponent(v1, v2);

            case 'type':
              // There are only two types. If we have different types, then prefer symbol over gradient.
              typeMerged = true;
              return makeImplicit('symbol');
          }

          return defaultTieBreaker(v1, v2, prop, 'legend');
        });
        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
      };

      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    if (typeMerged) {
      if ((_c = (_b = (_a = mergedLegend.implicit) === null || _a === void 0 ? void 0 : _a.encode) === null || _b === void 0 ? void 0 : _b.gradient) !== null && _c !== void 0 ? _c : {}) {
        deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);
      }

      if ((_f = (_e = (_d = mergedLegend.explicit) === null || _d === void 0 ? void 0 : _d.encode) === null || _e === void 0 ? void 0 : _e.gradient) !== null && _f !== void 0 ? _f : {}) {
        deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);
      }
    }

    return mergedLegend;
  }

  function mergeSymbolType(st1, st2) {
    if (st2.value === 'circle') {
      // prefer "circle" over "stroke"
      return st2;
    }

    return st1;
  }

  function setLegendEncode(legend, part, vgProp, vgRef) {
    var _a, _b, _c;

    legend.encode = (_a = legend.encode) !== null && _a !== void 0 ? _a : {};
    legend.encode[part] = (_b = legend.encode[part]) !== null && _b !== void 0 ? _b : {};
    legend.encode[part].update = (_c = legend.encode[part].update) !== null && _c !== void 0 ? _c : {}; // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291

    legend.encode[part].update[vgProp] = vgRef;
  }

  function assembleLegends(model) {
    var legendComponentIndex = model.component.legends;
    var legendByDomain = {};

    var _iterator = _createForOfIteratorHelper(keys$2(legendComponentIndex)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;
        var scaleComponent = model.getScaleComponent(channel);
        var domainHash = stringify$1(scaleComponent.get('domains'));

        if (legendByDomain[domainHash]) {
          var _iterator2 = _createForOfIteratorHelper(legendByDomain[domainHash]),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var mergedLegendComponent = _step2.value;
              var merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);

              if (!merged) {
                // If cannot merge, need to add this legend separately
                legendByDomain[domainHash].push(legendComponentIndex[channel]);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else {
          legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return vals(legendByDomain).flat().map(assembleLegend).filter(function (l) {
      return l !== undefined;
    });
  }
  function assembleLegend(legendCmpt) {
    var _a, _b, _c, _d;

    var _e = legendCmpt.combine(),
        disable = _e.disable,
        labelExpr = _e.labelExpr,
        selections = _e.selections,
        legend = __rest(_e, ["disable", "labelExpr", "selections"]);

    if (disable) {
      return undefined;
    }

    if ((_a = legend.encode) === null || _a === void 0 ? void 0 : _a.symbols) {
      var out = legend.encode.symbols.update;

      if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {
        // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.
        out.stroke = {
          value: 'transparent'
        };
      } // Remove properties that the legend is encoding.


      var _iterator3 = _createForOfIteratorHelper(LEGEND_SCALE_CHANNELS),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var property = _step3.value;

          if (legend[property]) {
            delete out[property];
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }

    if (!legend.title) {
      // title schema doesn't include null, ''
      delete legend.title;
    }

    if (labelExpr !== undefined) {
      var expr = labelExpr;

      if (((_d = (_c = (_b = legend.encode) === null || _b === void 0 ? void 0 : _b.labels) === null || _c === void 0 ? void 0 : _c.update) === null || _d === void 0 ? void 0 : _d.text) && isSignalRef(legend.encode.labels.update.text)) {
        expr = replaceAll(labelExpr, 'datum.label', legend.encode.labels.update.text.signal);
      }

      setLegendEncode(legend, 'labels', 'text', {
        signal: expr
      });
    }

    for (var prop in legend) {
      var propValue = legend[prop];

      if (isSignalRef(propValue)) {
        var propIndex = SIGNAL_LEGEND_PROP_INDEX[prop];

        if (propIndex) {
          var vgProp = propIndex.vgProp,
              part = propIndex.part;
          setLegendEncode(legend, part, vgProp, propValue);
          delete legend[prop];
        }
      }
    }

    return legend;
  }

  function assembleProjections(model) {
    if (isLayerModel(model) || isConcatModel(model)) {
      return assembleProjectionsForModelAndChildren(model);
    } else {
      return assembleProjectionForModel(model);
    }
  }
  function assembleProjectionsForModelAndChildren(model) {
    return model.children.reduce(function (projections, child) {
      return projections.concat(child.assembleProjections());
    }, assembleProjectionForModel(model));
  }
  function assembleProjectionForModel(model) {
    var component = model.component.projection;

    if (!component || component.merged) {
      return [];
    }

    var projection = component.combine();
    var name = projection.name; // we need to extract name so that it is always present in the output and pass TS type validation

    if (!component.data) {
      // generate custom projection, no automatic fitting
      return [_extends(_extends({
        name: name
      }, {
        translate: {
          signal: '[width / 2, height / 2]'
        }
      }), projection)];
    } else {
      // generate projection that uses extent fitting
      var size = {
        signal: "[".concat(component.size.map(function (ref) {
          return ref.signal;
        }).join(', '), "]")
      };
      var fit = component.data.reduce(function (sources, data) {
        var source = isSignalRef(data) ? data.signal : "data('".concat(model.lookupDataSource(data), "')");

        if (!contains$1(sources, source)) {
          // build a unique list of sources
          sources.push(source);
        }

        return sources;
      }, []);

      if (fit.length <= 0) {
        throw new Error("Projection's fit didn't find any data sources");
      }

      return [_extends({
        name: name,
        size: size,
        fit: {
          signal: fit.length > 1 ? "[".concat(fit.join(', '), "]") : fit[0]
        }
      }, projection)];
    }
  }

  var PROJECTION_PROPERTIES = ['type', 'clipAngle', 'clipExtent', 'center', 'rotate', 'precision', 'reflectX', 'reflectY', 'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];

  var ProjectionComponent = /*#__PURE__*/function (_Split) {
    _inherits(ProjectionComponent, _Split);

    var _super = _createSuper(ProjectionComponent);

    function ProjectionComponent(name, specifiedProjection, size, data) {
      var _this;

      _classCallCheck(this, ProjectionComponent);

      _this = _super.call(this, _extends({}, specifiedProjection), // all explicit properties of projection
      {
        name: name
      } // name as initial implicit property
      );
      _this.specifiedProjection = specifiedProjection;
      _this.size = size;
      _this.data = data;
      _this.merged = false;
      return _this;
    }
    /**
     * Whether the projection parameters should fit provided data.
     */


    _createClass(ProjectionComponent, [{
      key: "isFit",
      get: function get() {
        return !!this.data;
      }
    }]);

    return ProjectionComponent;
  }(Split);

  function parseProjection$1(model) {
    model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);
  }

  function parseUnitProjection(model) {
    var _a;

    if (model.hasProjection) {
      var proj = model.specifiedProjection;
      var fit = !(proj && (proj.scale != null || proj.translate != null));
      var size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;
      var data = fit ? gatherFitData(model) : undefined;
      return new ProjectionComponent(model.projectionName(true), _extends(_extends({}, (_a = model.config.projection) !== null && _a !== void 0 ? _a : {}), proj !== null && proj !== void 0 ? proj : {}), size, data);
    }

    return undefined;
  }

  function gatherFitData(model) {
    var data = [];
    var encoding = model.encoding;

    for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {
      var posssiblePair = _arr[_i];

      if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {
        data.push({
          signal: model.getName("geojson_".concat(data.length))
        });
      }
    }

    if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {
      data.push({
        signal: model.getName("geojson_".concat(data.length))
      });
    }

    if (data.length === 0) {
      // main source is geojson, so we can just use that
      data.push(model.requestDataName(MAIN));
    }

    return data;
  }

  function mergeIfNoConflict(first, second) {
    var allPropertiesShared = every(PROJECTION_PROPERTIES, function (prop) {
      // neither has the property
      if (!hasOwnProperty$1(first.explicit, prop) && !hasOwnProperty$1(second.explicit, prop)) {
        return true;
      } // both have property and an equal value for property


      if (hasOwnProperty$1(first.explicit, prop) && hasOwnProperty$1(second.explicit, prop) && // some properties might be signals or objects and require hashing for comparison
      stringify$1(first.get(prop)) === stringify$1(second.get(prop))) {
        return true;
      }

      return false;
    });
    var size = stringify$1(first.size) === stringify$1(second.size);

    if (size) {
      if (allPropertiesShared) {
        return first;
      } else if (stringify$1(first.explicit) === stringify$1({})) {
        return second;
      } else if (stringify$1(second.explicit) === stringify$1({})) {
        return first;
      }
    } // if all properties don't match, let each unit spec have its own projection


    return null;
  }

  function parseNonUnitProjections(model) {
    if (model.children.length === 0) {
      return undefined;
    }

    var nonUnitProjection; // parse all children first

    var _iterator = _createForOfIteratorHelper(model.children),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _child = _step.value;
        parseProjection$1(_child);
      } // analyze parsed projections, attempt to merge

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var mergable = every(model.children, function (child) {
      var projection = child.component.projection;

      if (!projection) {
        // child layer does not use a projection
        return true;
      } else if (!nonUnitProjection) {
        // cached 'projection' is null, cache this one
        nonUnitProjection = projection;
        return true;
      } else {
        var merge = mergeIfNoConflict(nonUnitProjection, projection);

        if (merge) {
          nonUnitProjection = merge;
        }

        return !!merge;
      }
    }); // if cached one and all other children share the same projection,

    if (nonUnitProjection && mergable) {
      // so we can elevate it to the layer level
      var name = model.projectionName(true);
      var modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data)); // rename and assign all others as merged

      var _iterator2 = _createForOfIteratorHelper(model.children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;
          var projection = child.component.projection;

          if (projection) {
            if (projection.isFit) {
              var _modelProjection$data;

              (_modelProjection$data = modelProjection.data).push.apply(_modelProjection$data, _toConsumableArray(child.component.projection.data));
            }

            child.renameProjection(projection.get('name'), name);
            projection.merged = true;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return modelProjection;
    }

    return undefined;
  }

  function rangeFormula(model, fieldDef, channel, config) {
    var _a, _b;

    if (binRequiresRange(fieldDef, channel)) {
      // read format from axis or legend, if there is no format then use config.numberFormat
      var guide = isUnitModel(model) ? (_b = (_a = model.axis(channel)) !== null && _a !== void 0 ? _a : model.legend(channel)) !== null && _b !== void 0 ? _b : {} : {};
      var startField = vgField(fieldDef, {
        expr: 'datum'
      });
      var endField = vgField(fieldDef, {
        expr: 'datum',
        binSuffix: 'end'
      });
      return {
        formulaAs: vgField(fieldDef, {
          binSuffix: 'range',
          forAs: true
        }),
        formula: binFormatExpression(startField, endField, guide.format, guide.formatType, config)
      };
    }

    return {};
  }

  function binKey(bin, field) {
    return "".concat(binToString(bin), "_").concat(field);
  }

  function getSignalsFromModel(model, key) {
    return {
      signal: model.getName("".concat(key, "_bins")),
      extentSignal: model.getName("".concat(key, "_extent"))
    };
  }

  function getBinSignalName(model, field, bin) {
    var _a;

    var normalizedBin = (_a = normalizeBin(bin, undefined)) !== null && _a !== void 0 ? _a : {};
    var key = binKey(normalizedBin, field);
    return model.getName("".concat(key, "_bins"));
  }

  function isBinTransform(t) {
    return 'as' in t;
  }

  function createBinComponent(t, bin, model) {
    var as;
    var span;

    if (isBinTransform(t)) {
      as = isString(t.as) ? [t.as, "".concat(t.as, "_end")] : [t.as[0], t.as[1]];
    } else {
      as = [vgField(t, {
        forAs: true
      }), vgField(t, {
        binSuffix: 'end',
        forAs: true
      })];
    }

    var normalizedBin = _extends({}, normalizeBin(bin, undefined));

    var key = binKey(normalizedBin, t.field);

    var _getSignalsFromModel = getSignalsFromModel(model, key),
        signal = _getSignalsFromModel.signal,
        extentSignal = _getSignalsFromModel.extentSignal;

    if (isSelectionExtent(normalizedBin.extent)) {
      var ext = normalizedBin.extent;
      var selName = ext.selection;
      span = parseSelectionBinExtent(model.getSelectionComponent(varName(selName), selName), ext);
      delete normalizedBin.extent; // Vega-Lite selection extent map to Vega's span property.
    }

    var binComponent = _extends(_extends(_extends({
      bin: normalizedBin,
      field: t.field,
      as: [as]
    }, signal ? {
      signal: signal
    } : {}), extentSignal ? {
      extentSignal: extentSignal
    } : {}), span ? {
      span: span
    } : {});

    return {
      key: key,
      binComponent: binComponent
    };
  }

  var BinNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(BinNode, _DataFlowNode);

    var _super = _createSuper(BinNode);

    function BinNode(parent, bins) {
      var _this;

      _classCallCheck(this, BinNode);

      _this = _super.call(this, parent);
      _this.bins = bins;
      return _this;
    }

    _createClass(BinNode, [{
      key: "clone",
      value: function clone() {
        return new BinNode(null, duplicate(this.bins));
      }
    }, {
      key: "merge",

      /**
       * Merge bin nodes. This method either integrates the bin config from the other node
       * or if this node already has a bin config, renames the corresponding signal in the model.
       */
      value: function merge(other, renameSignal) {
        var _iterator = _createForOfIteratorHelper(keys$2(other.bins)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var key = _step.value;

            if (key in this.bins) {
              renameSignal(other.bins[key].signal, this.bins[key].signal); // Ensure that we don't have duplicate names for signal pairs

              this.bins[key].as = unique([].concat(_toConsumableArray(this.bins[key].as), _toConsumableArray(other.bins[key].as)), hash);
            } else {
              this.bins[key] = other.bins[key];
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var _iterator2 = _createForOfIteratorHelper(other.children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            other.removeChild(child);
            child.parent = this;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        other.remove();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(vals(this.bins).map(function (c) {
          return c.as;
        }).flat(2));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set(vals(this.bins).map(function (c) {
          return c.field;
        }));
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Bin ".concat(hash(this.bins));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return vals(this.bins).flatMap(function (bin) {
          var transform = [];

          var _bin$as = _toArray(bin.as),
              binAs = _bin$as[0],
              remainingAs = _bin$as.slice(1);

          var _a = bin.bin,
              extent = _a.extent,
              params = __rest(_a, ["extent"]);

          var binTrans = _extends(_extends(_extends({
            type: 'bin',
            field: replacePathInField(bin.field),
            as: binAs,
            signal: bin.signal
          }, !isSelectionExtent(extent) ? {
            extent: extent
          } : {
            extent: null
          }), bin.span ? {
            span: {
              signal: "span(".concat(bin.span, ")")
            }
          } : {}), params);

          if (!extent && bin.extentSignal) {
            transform.push({
              type: 'extent',
              field: replacePathInField(bin.field),
              signal: bin.extentSignal
            });
            binTrans.extent = {
              signal: bin.extentSignal
            };
          }

          transform.push(binTrans);

          var _iterator3 = _createForOfIteratorHelper(remainingAs),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var as = _step3.value;

              for (var i = 0; i < 2; i++) {
                transform.push({
                  type: 'formula',
                  expr: vgField({
                    field: binAs[i]
                  }, {
                    expr: 'datum'
                  }),
                  as: as[i]
                });
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          if (bin.formula) {
            transform.push({
              type: 'formula',
              expr: bin.formula,
              as: bin.formulaAs
            });
          }

          return transform;
        });
      }
    }], [{
      key: "makeFromEncoding",
      value: function makeFromEncoding(parent, model) {
        var bins = model.reduceFieldDef(function (binComponentIndex, fieldDef, channel) {
          if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
            var _createBinComponent = createBinComponent(fieldDef, fieldDef.bin, model),
                key = _createBinComponent.key,
                binComponent = _createBinComponent.binComponent;

            binComponentIndex[key] = _extends(_extends(_extends({}, binComponent), binComponentIndex[key]), rangeFormula(model, fieldDef, channel, model.config));
          }

          return binComponentIndex;
        }, {});

        if (keys$2(bins).length === 0) {
          return null;
        }

        return new BinNode(parent, bins);
      }
      /**
       * Creates a bin node from BinTransform.
       * The optional parameter should provide
       */

    }, {
      key: "makeFromTransform",
      value: function makeFromTransform(parent, t, model) {
        var _createBinComponent2 = createBinComponent(t, t.bin, model),
            key = _createBinComponent2.key,
            binComponent = _createBinComponent2.binComponent;

        return new BinNode(parent, _defineProperty({}, key, binComponent));
      }
    }]);

    return BinNode;
  }(DataFlowNode);

  var SourceNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(SourceNode, _DataFlowNode);

    var _super = _createSuper(SourceNode);

    function SourceNode(data) {
      var _this;

      _classCallCheck(this, SourceNode);

      _this = _super.call(this, null); // source cannot have parent

      data = data !== null && data !== void 0 ? data : {
        name: 'source'
      };
      var format;

      if (!isGenerator(data)) {
        format = data.format ? _extends({}, omit(data.format, ['parse'])) : {};
      }

      if (isInlineData(data)) {
        _this._data = {
          values: data.values
        };
      } else if (isUrlData(data)) {
        _this._data = {
          url: data.url
        };

        if (!format.type) {
          // Extract extension from URL using snippet from
          // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
          var defaultExtension = /(?:\.([^.]+))?$/.exec(data.url)[1];

          if (!contains$1(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {
            defaultExtension = 'json';
          } // defaultExtension has type string but we ensure that it is DataFormatType above


          format.type = defaultExtension;
        }
      } else if (isSphereGenerator(data)) {
        // hardwire GeoJSON sphere data into output specification
        _this._data = {
          values: [{
            type: 'Sphere'
          }]
        };
      } else if (isNamedData(data) || isGenerator(data)) {
        _this._data = {};
      } // set flag to check if generator


      _this._generator = isGenerator(data); // any dataset can be named

      if (data.name) {
        _this._name = data.name;
      }

      if (format && keys$2(format).length > 0) {
        _this._data.format = format;
      }

      return _this;
    }

    _createClass(SourceNode, [{
      key: "dependentFields",
      value: function dependentFields() {
        return new Set();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return undefined; // we don't know what this source produces
      }
    }, {
      key: "hasName",
      value: function hasName() {
        return !!this._name;
      }
    }, {
      key: "remove",
      value: function remove() {
        throw new Error('Source nodes are roots and cannot be removed.');
      }
    }, {
      key: "hash",
      value: function hash() {
        throw new Error('Cannot hash sources');
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return _extends(_extends({
          name: this._name
        }, this._data), {
          transform: []
        });
      }
    }, {
      key: "data",
      get: function get() {
        return this._data;
      }
    }, {
      key: "isGenerator",
      get: function get() {
        return this._generator;
      }
    }, {
      key: "dataName",
      get: function get() {
        return this._name;
      },
      set: function set(name) {
        this._name = name;
      }
    }, {
      key: "parent",
      set: function set(parent) {
        throw new Error('Source nodes have to be roots.');
      }
    }]);

    return SourceNode;
  }(DataFlowNode);

  /**
   * Iterates over a dataflow graph and checks whether all links are consistent.
   */

  function checkLinks(nodes) {
    var _iterator3 = _createForOfIteratorHelper(nodes),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var node = _step3.value;

        var _iterator4 = _createForOfIteratorHelper(node.children),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var child = _step4.value;

            if (child.parent !== node) {
              console.error('Dataflow graph is inconsistent.', node, child);
              return false;
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        if (!checkLinks(node.children)) {
          return false;
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return true;
  }

  var GraticuleNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(GraticuleNode, _DataFlowNode);

    var _super = _createSuper(GraticuleNode);

    function GraticuleNode(parent, params) {
      var _this;

      _classCallCheck(this, GraticuleNode);

      _this = _super.call(this, parent);
      _this.params = params;
      return _this;
    }

    _createClass(GraticuleNode, [{
      key: "clone",
      value: function clone() {
        return new GraticuleNode(null, this.params);
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return undefined; // there should never be a node before graticule
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Graticule ".concat(hash(this.params));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return _extends({
          type: 'graticule'
        }, this.params === true ? {} : this.params);
      }
    }]);

    return GraticuleNode;
  }(DataFlowNode);

  var SequenceNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(SequenceNode, _DataFlowNode);

    var _super = _createSuper(SequenceNode);

    function SequenceNode(parent, params) {
      var _this;

      _classCallCheck(this, SequenceNode);

      _this = _super.call(this, parent);
      _this.params = params;
      return _this;
    }

    _createClass(SequenceNode, [{
      key: "clone",
      value: function clone() {
        return new SequenceNode(null, this.params);
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        var _a;

        return new Set([(_a = this.params.as) !== null && _a !== void 0 ? _a : 'data']);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Hash ".concat(hash(this.params));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return _extends({
          type: 'sequence'
        }, this.params);
      }
    }]);

    return SequenceNode;
  }(DataFlowNode);

  /**
   * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.
   */

  function isDataSourceNode(node) {
    return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;
  }
  /**
   * Abstract base class for BottomUpOptimizer and TopDownOptimizer.
   * Contains only mutation handling logic. Subclasses need to implement iteration logic.
   */

  var OptimizerBase = /*#__PURE__*/function () {
    function OptimizerBase() {
      _classCallCheck(this, OptimizerBase);

      this._mutated = false;
    } // Once true, _mutated is never set to false


    _createClass(OptimizerBase, [{
      key: "setMutated",
      value: function setMutated() {
        this._mutated = true;
      }
    }, {
      key: "mutatedFlag",
      get: function get() {
        return this._mutated;
      }
    }]);

    return OptimizerBase;
  }();
  /**
   * Starts from a node and runs the optimization function(the "run" method) upwards to the root,
   * depending on the continueFlag and mutatedFlag values returned by the optimization function.
   */


  var BottomUpOptimizer = /*#__PURE__*/function (_OptimizerBase) {
    _inherits(BottomUpOptimizer, _OptimizerBase);

    var _super = _createSuper(BottomUpOptimizer);

    function BottomUpOptimizer() {
      var _this;

      _classCallCheck(this, BottomUpOptimizer);

      _this = _super.call(this);
      _this._continue = false;
      return _this;
    }

    _createClass(BottomUpOptimizer, [{
      key: "setContinue",
      value: function setContinue() {
        this._continue = true;
      }
    }, {
      key: "reset",

      /**
       * Reset the state of the optimizer after it has completed a run from the bottom of the tree to the top.
       */
      value: function reset() {// do nothing
      }
    }, {
      key: "optimizeNextFromLeaves",
      value: function optimizeNextFromLeaves(node) {
        if (isDataSourceNode(node)) {
          return false;
        }

        var next = node.parent;

        var _this$run = this.run(node),
            continueFlag = _this$run.continueFlag;

        if (continueFlag) {
          this.optimizeNextFromLeaves(next);
        }

        return this.mutatedFlag;
      }
    }, {
      key: "continueFlag",
      get: function get() {
        return this._continue;
      }
    }, {
      key: "flags",
      get: function get() {
        return {
          continueFlag: this.continueFlag,
          mutatedFlag: this.mutatedFlag
        };
      },
      set: function set(_ref) {
        var continueFlag = _ref.continueFlag,
            mutatedFlag = _ref.mutatedFlag;

        if (continueFlag) {
          this.setContinue();
        }

        if (mutatedFlag) {
          this.setMutated();
        }
      }
    }]);

    return BottomUpOptimizer;
  }(OptimizerBase);
  /**
   * The optimizer function( the "run" method), is invoked on the given node and then continues recursively.
   */

  var TopDownOptimizer = /*#__PURE__*/function (_OptimizerBase2) {
    _inherits(TopDownOptimizer, _OptimizerBase2);

    var _super2 = _createSuper(TopDownOptimizer);

    function TopDownOptimizer() {
      _classCallCheck(this, TopDownOptimizer);

      return _super2.apply(this, arguments);
    }

    return TopDownOptimizer;
  }(OptimizerBase);

  function addDimension(dims, channel, fieldDef, model) {
    var channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;

    if (isTypedFieldDef(fieldDef) && isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.stack, model.markDef, model.config)) {
      dims.add(vgField(fieldDef, {}));
      dims.add(vgField(fieldDef, {
        suffix: 'end'
      }));

      if (fieldDef.bin && binRequiresRange(fieldDef, channel)) {
        dims.add(vgField(fieldDef, {
          binSuffix: 'range'
        }));
      }
    } else if (isGeoPositionChannel(channel)) {
      var posChannel = getPositionChannelFromLatLong(channel);
      dims.add(model.getName(posChannel));
    } else {
      dims.add(vgField(fieldDef));
    }

    return dims;
  }

  function mergeMeasures(parentMeasures, childMeasures) {
    var _a;

    var _iterator = _createForOfIteratorHelper(keys$2(childMeasures)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var field = _step.value;
        // when we merge a measure, we either have to add an aggregation operator or even a new field
        var ops = childMeasures[field];

        var _iterator2 = _createForOfIteratorHelper(keys$2(ops)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var op = _step2.value;

            if (field in parentMeasures) {
              // add operator to existing measure field
              parentMeasures[field][op] = new Set([].concat(_toConsumableArray((_a = parentMeasures[field][op]) !== null && _a !== void 0 ? _a : []), _toConsumableArray(ops[op])));
            } else {
              parentMeasures[field] = _defineProperty({}, op, ops[op]);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  var AggregateNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(AggregateNode, _DataFlowNode);

    var _super = _createSuper(AggregateNode);

    /**
     * @param dimensions string set for dimensions
     * @param measures dictionary mapping field name => dict of aggregation functions and names to use
     */
    function AggregateNode(parent, dimensions, measures) {
      var _this;

      _classCallCheck(this, AggregateNode);

      _this = _super.call(this, parent);
      _this.dimensions = dimensions;
      _this.measures = measures;
      return _this;
    }

    _createClass(AggregateNode, [{
      key: "clone",
      value: function clone() {
        return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));
      }
    }, {
      key: "merge",
      value: function merge(other) {
        if (setEqual(this.dimensions, other.dimensions)) {
          mergeMeasures(this.measures, other.measures);
          return true;
        } else {
          debug$3('different dimensions, cannot merge');
          return false;
        }
      }
    }, {
      key: "addDimensions",
      value: function addDimensions(fields) {
        fields.forEach(this.dimensions.add, this.dimensions);
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set([].concat(_toConsumableArray(this.dimensions), _toConsumableArray(keys$2(this.measures))));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        var out = new Set();

        var _iterator3 = _createForOfIteratorHelper(keys$2(this.measures)),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var field = _step3.value;

            var _iterator4 = _createForOfIteratorHelper(keys$2(this.measures[field])),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var op = _step4.value;
                var m = this.measures[field][op];

                if (m.size === 0) {
                  out.add("".concat(op, "_").concat(field));
                } else {
                  m.forEach(out.add, out);
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return out;
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Aggregate ".concat(hash({
          dimensions: this.dimensions,
          measures: this.measures
        }));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var ops = [];
        var fields = [];
        var as = [];

        var _iterator5 = _createForOfIteratorHelper(keys$2(this.measures)),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var field = _step5.value;

            var _iterator6 = _createForOfIteratorHelper(keys$2(this.measures[field])),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var op = _step6.value;

                var _iterator7 = _createForOfIteratorHelper(this.measures[field][op]),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var alias = _step7.value;
                    as.push(alias);
                    ops.push(op);
                    fields.push(field === '*' ? null : replacePathInField(field));
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        var result = {
          type: 'aggregate',
          groupby: _toConsumableArray(this.dimensions).map(replacePathInField),
          ops: ops,
          fields: fields,
          as: as
        };
        return result;
      }
    }, {
      key: "groupBy",
      get: function get() {
        return this.dimensions;
      }
    }], [{
      key: "makeFromEncoding",
      value: function makeFromEncoding(parent, model) {
        var isAggregate = false;
        model.forEachFieldDef(function (fd) {
          if (fd.aggregate) {
            isAggregate = true;
          }
        });
        var meas = {};
        var dims = new Set();

        if (!isAggregate) {
          // no need to create this node if the model has no aggregation
          return null;
        }

        model.forEachFieldDef(function (fieldDef, channel) {
          var _a, _b, _c, _d;

          var aggregate = fieldDef.aggregate,
              field = fieldDef.field;

          if (aggregate) {
            if (aggregate === 'count') {
              meas['*'] = (_a = meas['*']) !== null && _a !== void 0 ? _a : {};
              meas['*']['count'] = new Set([vgField(fieldDef, {
                forAs: true
              })]);
            } else {
              if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
                var op = isArgminDef(aggregate) ? 'argmin' : 'argmax';
                var argField = aggregate[op];
                meas[argField] = (_b = meas[argField]) !== null && _b !== void 0 ? _b : {};
                meas[argField][op] = new Set([vgField({
                  op: op,
                  field: argField
                }, {
                  forAs: true
                })]);
              } else {
                meas[field] = (_c = meas[field]) !== null && _c !== void 0 ? _c : {};
                meas[field][aggregate] = new Set([vgField(fieldDef, {
                  forAs: true
                })]);
              } // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain


              if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {
                meas[field] = (_d = meas[field]) !== null && _d !== void 0 ? _d : {};
                meas[field]['min'] = new Set([vgField({
                  field: field,
                  aggregate: 'min'
                }, {
                  forAs: true
                })]);
                meas[field]['max'] = new Set([vgField({
                  field: field,
                  aggregate: 'max'
                }, {
                  forAs: true
                })]);
              }
            }
          } else {
            addDimension(dims, channel, fieldDef, model);
          }
        });

        if (dims.size + keys$2(meas).length === 0) {
          return null;
        }

        return new AggregateNode(parent, dims, meas);
      }
    }, {
      key: "makeFromTransform",
      value: function makeFromTransform(parent, t) {
        var _a, _b, _c;

        var dims = new Set();
        var meas = {};

        var _iterator8 = _createForOfIteratorHelper(t.aggregate),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var s = _step8.value;
            var op = s.op,
                field = s.field,
                as = s.as;

            if (op) {
              if (op === 'count') {
                meas['*'] = (_a = meas['*']) !== null && _a !== void 0 ? _a : {};
                meas['*']['count'] = new Set([as ? as : vgField(s, {
                  forAs: true
                })]);
              } else {
                meas[field] = (_b = meas[field]) !== null && _b !== void 0 ? _b : {};
                meas[field][op] = new Set([as ? as : vgField(s, {
                  forAs: true
                })]);
              }
            }
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        var _iterator9 = _createForOfIteratorHelper((_c = t.groupby) !== null && _c !== void 0 ? _c : []),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var _s = _step9.value;
            dims.add(_s);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }

        if (dims.size + keys$2(meas).length === 0) {
          return null;
        }

        return new AggregateNode(parent, dims, meas);
      }
    }]);

    return AggregateNode;
  }(DataFlowNode);

  /**
   * A node that helps us track what fields we are faceting by.
   */

  var FacetNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(FacetNode, _DataFlowNode);

    var _super = _createSuper(FacetNode);

    /**
     * @param model The facet model.
     * @param name The name that this facet source will have.
     * @param data The source data for this facet data.
     */
    function FacetNode(parent, model, name, data) {
      var _this;

      _classCallCheck(this, FacetNode);

      _this = _super.call(this, parent);
      _this.model = model;
      _this.name = name;
      _this.data = data;

      var _iterator = _createForOfIteratorHelper(FACET_CHANNELS),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var channel = _step.value;
          var fieldDef = model.facet[channel];

          if (fieldDef) {
            var bin = fieldDef.bin,
                sort = fieldDef.sort;
            _this[channel] = _extends({
              name: model.getName("".concat(channel, "_domain")),
              fields: [vgField(fieldDef)].concat(_toConsumableArray(isBinning(bin) ? [vgField(fieldDef, {
                binSuffix: 'end'
              })] : []))
            }, isSortField(sort) ? {
              sortField: sort
            } : isArray(sort) ? {
              sortIndexField: sortArrayIndexField(fieldDef, channel)
            } : {});
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      _this.childModel = model.child;
      return _this;
    }

    _createClass(FacetNode, [{
      key: "hash",
      value: function hash$1() {
        var out = "Facet";

        var _iterator2 = _createForOfIteratorHelper(FACET_CHANNELS),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var channel = _step2.value;

            if (this[channel]) {
              out += " ".concat(channel.charAt(0), ":").concat(hash(this[channel]));
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return out;
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var depFields = new Set(this.fields);

        var _iterator3 = _createForOfIteratorHelper(FACET_CHANNELS),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var channel = _step3.value;

            if (this[channel]) {
              if (this[channel].sortField) {
                depFields.add(this[channel].sortField.field);
              }

              if (this[channel].sortIndexField) {
                depFields.add(this[channel].sortIndexField);
              }
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return depFields;
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(); // facet does not produce any new fields
      }
      /**
       * The name to reference this source is its name.
       */

    }, {
      key: "getSource",
      value: function getSource() {
        return this.name;
      }
    }, {
      key: "getChildIndependentFieldsWithStep",
      value: function getChildIndependentFieldsWithStep() {
        var childIndependentFieldsWithStep = {};

        for (var _i = 0, _arr = ['x', 'y']; _i < _arr.length; _i++) {
          var channel = _arr[_i];
          var childScaleComponent = this.childModel.component.scales[channel];

          if (childScaleComponent && !childScaleComponent.merged) {
            // independent scale
            var type = childScaleComponent.get('type');
            var range = childScaleComponent.get('range');

            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
              var domain = assembleDomain(this.childModel, channel);
              var field = getFieldFromDomain(domain);

              if (field) {
                childIndependentFieldsWithStep[channel] = field;
              } else {
                warn$1("Unknown field for ".concat(channel, ". Cannot calculate view size."));
              }
            }
          }
        }

        return childIndependentFieldsWithStep;
      }
    }, {
      key: "assembleRowColumnHeaderData",
      value: function assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
        var childChannel = {
          row: 'y',
          column: 'x'
        }[channel];
        var fields = [];
        var ops = [];
        var as = [];

        if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
          if (crossedDataName) {
            // If there is a crossed data, calculate max
            fields.push("distinct_".concat(childIndependentFieldsWithStep[childChannel]));
            ops.push('max');
          } else {
            // If there is no crossed data, just calculate distinct
            fields.push(childIndependentFieldsWithStep[childChannel]);
            ops.push('distinct');
          } // Although it is technically a max, just name it distinct so it's easier to refer to it


          as.push("distinct_".concat(childIndependentFieldsWithStep[childChannel]));
        }

        var _this$channel = this[channel],
            sortField = _this$channel.sortField,
            sortIndexField = _this$channel.sortIndexField;

        if (sortField) {
          var _sortField$op = sortField.op,
              op = _sortField$op === void 0 ? DEFAULT_SORT_OP : _sortField$op,
              field = sortField.field;
          fields.push(field);
          ops.push(op);
          as.push(vgField(sortField, {
            forAs: true
          }));
        } else if (sortIndexField) {
          fields.push(sortIndexField);
          ops.push('max');
          as.push(sortIndexField);
        }

        return {
          name: this[channel].name,
          // Use data from the crossed one if it exist
          source: crossedDataName !== null && crossedDataName !== void 0 ? crossedDataName : this.data,
          transform: [_extends({
            type: 'aggregate',
            groupby: this[channel].fields
          }, fields.length ? {
            fields: fields,
            ops: ops,
            as: as
          } : {})]
        };
      }
    }, {
      key: "assembleFacetHeaderData",
      value: function assembleFacetHeaderData(childIndependentFieldsWithStep) {
        var _a, _b;

        var columns = this.model.layout.columns;
        var layoutHeaders = this.model.component.layoutHeaders;
        var data = [];
        var hasSharedAxis = {};

        var _iterator4 = _createForOfIteratorHelper(HEADER_CHANNELS),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var headerChannel = _step4.value;

            var _iterator5 = _createForOfIteratorHelper(HEADER_TYPES),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var headerType = _step5.value;
                var headers = (_a = layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) !== null && _a !== void 0 ? _a : [];

                var _iterator6 = _createForOfIteratorHelper(headers),
                    _step6;

                try {
                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                    var header = _step6.value;

                    if (((_b = header.axes) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                      hasSharedAxis[headerChannel] = true;
                      break;
                    }
                  }
                } catch (err) {
                  _iterator6.e(err);
                } finally {
                  _iterator6.f();
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }

            if (hasSharedAxis[headerChannel]) {
              var cardinality = "length(data(\"".concat(this.facet.name, "\"))");
              var stop = headerChannel === 'row' ? columns ? {
                signal: "ceil(".concat(cardinality, " / ").concat(columns, ")")
              } : 1 : columns ? {
                signal: "min(".concat(cardinality, ", ").concat(columns, ")")
              } : {
                signal: cardinality
              };
              data.push({
                name: "".concat(this.facet.name, "_").concat(headerChannel),
                transform: [{
                  type: 'sequence',
                  start: 0,
                  stop: stop
                }]
              });
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        var row = hasSharedAxis.row,
            column = hasSharedAxis.column;

        if (row || column) {
          data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));
        }

        return data;
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _a, _b;

        var data = [];
        var crossedDataName = null;
        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
        var column = this.column,
            row = this.row,
            facet = this.facet;

        if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
          // Need to create a cross dataset to correctly calculate cardinality
          crossedDataName = "cross_".concat(this.column.name, "_").concat(this.row.name);
          var fields = [].concat((_a = childIndependentFieldsWithStep.x) !== null && _a !== void 0 ? _a : [], (_b = childIndependentFieldsWithStep.y) !== null && _b !== void 0 ? _b : []);
          var ops = fields.map(function () {
            return 'distinct';
          });
          data.push({
            name: crossedDataName,
            source: this.data,
            transform: [{
              type: 'aggregate',
              groupby: this.fields,
              fields: fields,
              ops: ops
            }]
          });
        }

        for (var _i2 = 0, _arr2 = [COLUMN, ROW]; _i2 < _arr2.length; _i2++) {
          var channel = _arr2[_i2];

          if (this[channel]) {
            data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
          }
        }

        if (facet) {
          var facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);

          if (facetData) {
            data.push.apply(data, _toConsumableArray(facetData));
          }
        }

        return data;
      }
    }, {
      key: "fields",
      get: function get() {
        var _a;

        var f = [];

        var _iterator7 = _createForOfIteratorHelper(FACET_CHANNELS),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var channel = _step7.value;

            if ((_a = this[channel]) === null || _a === void 0 ? void 0 : _a.fields) {
              f.push.apply(f, _toConsumableArray(this[channel].fields));
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        return f;
      }
    }]);

    return FacetNode;
  }(DataFlowNode);

  /**
   * Remove quotes from a string.
   */

  function unquote(pattern) {
    if (pattern[0] === "'" && pattern[pattern.length - 1] === "'" || pattern[0] === '"' && pattern[pattern.length - 1] === '"') {
      return pattern.slice(1, -1);
    }

    return pattern;
  }
  /**
   * @param field The field.
   * @param parse What to parse the field as.
   */


  function parseExpression$2(field, parse) {
    var f = accessPathWithDatum(field);

    if (parse === 'number') {
      return "toNumber(".concat(f, ")");
    } else if (parse === 'boolean') {
      return "toBoolean(".concat(f, ")");
    } else if (parse === 'string') {
      return "toString(".concat(f, ")");
    } else if (parse === 'date') {
      return "toDate(".concat(f, ")");
    } else if (parse === 'flatten') {
      return f;
    } else if (parse.indexOf('date:') === 0) {
      var specifier = unquote(parse.slice(5, parse.length));
      return "timeParse(".concat(f, ",'").concat(specifier, "')");
    } else if (parse.indexOf('utc:') === 0) {
      var _specifier = unquote(parse.slice(4, parse.length));

      return "utcParse(".concat(f, ",'").concat(_specifier, "')");
    } else {
      warn$1(message.unrecognizedParse(parse));
      return null;
    }
  }

  function getImplicitFromFilterTransform(transform) {
    var implicit = {};
    forEachLeaf(transform.filter, function (filter) {
      var _a;

      if (isFieldPredicate(filter)) {
        // Automatically add a parse node for filters with filter objects
        var val = null; // For EqualFilter, just use the equal property.
        // For RangeFilter and OneOfFilter, all array members should have
        // the same type, so we only use the first one.

        if (isFieldEqualPredicate(filter)) {
          val = filter.equal;
        } else if (isFieldRangePredicate(filter)) {
          val = filter.range[0];
        } else if (isFieldOneOfPredicate(filter)) {
          val = ((_a = filter.oneOf) !== null && _a !== void 0 ? _a : filter['in'])[0];
        } // else -- for filter expression, we can't infer anything


        if (val) {
          if (isDateTime(val)) {
            implicit[filter.field] = 'date';
          } else if (isNumber(val)) {
            implicit[filter.field] = 'number';
          } else if (isString(val)) {
            implicit[filter.field] = 'string';
          }
        }

        if (filter.timeUnit) {
          implicit[filter.field] = 'date';
        }
      }
    });
    return implicit;
  }
  /**
   * Creates a parse node for implicit parsing from a model and updates ancestorParse.
   */

  function getImplicitFromEncoding(model) {
    var implicit = {};

    function add(fieldDef) {
      if (isFieldOrDatumDefForTimeFormat(fieldDef)) {
        implicit[fieldDef.field] = 'date';
      } else if (fieldDef.type === 'quantitative' && isMinMaxOp(fieldDef.aggregate) // we need to parse numbers to support correct min and max
      ) {
          implicit[fieldDef.field] = 'number';
        } else if (accessPathDepth(fieldDef.field) > 1) {
        // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.
        // (Parsing numbers / dates already flattens numeric and temporal fields.)
        if (!(fieldDef.field in implicit)) {
          implicit[fieldDef.field] = 'flatten';
        }
      } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {
        // Flatten fields that we sort by but that are not otherwise flattened.
        if (!(fieldDef.sort.field in implicit)) {
          implicit[fieldDef.sort.field] = 'flatten';
        }
      }
    }

    if (isUnitModel(model) || isFacetModel(model)) {
      // Parse encoded fields
      model.forEachFieldDef(function (fieldDef, channel) {
        if (isTypedFieldDef(fieldDef)) {
          add(fieldDef);
        } else {
          var mainChannel = getMainRangeChannel(channel);
          var mainFieldDef = model.fieldDef(mainChannel);
          add(_extends(_extends({}, fieldDef), {
            type: mainFieldDef.type
          }));
        }
      });
    } // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.


    if (isUnitModel(model)) {
      var mark = model.mark,
          markDef = model.markDef,
          encoding = model.encoding;

      if (isPathMark(mark) && // No need to sort by dimension if we have a connected scatterplot (order channel is present)
      !model.encoding.order) {
        var dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
        var dimensionChannelDef = encoding[dimensionChannel];

        if (isFieldDef(dimensionChannelDef) && dimensionChannelDef.type === 'quantitative' && !(dimensionChannelDef.field in implicit)) {
          implicit[dimensionChannelDef.field] = 'number';
        }
      }
    }

    return implicit;
  }
  /**
   * Creates a parse node for implicit parsing from a model and updates ancestorParse.
   */

  function getImplicitFromSelection(model) {
    var implicit = {};

    if (isUnitModel(model) && model.component.selection) {
      var _iterator = _createForOfIteratorHelper(keys$2(model.component.selection)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var name = _step.value;
          var selCmpt = model.component.selection[name];

          var _iterator2 = _createForOfIteratorHelper(selCmpt.project.items),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var proj = _step2.value;

              if (!proj.channel && accessPathDepth(proj.field) > 1) {
                implicit[proj.field] = 'flatten';
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    return implicit;
  }
  var ParseNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(ParseNode, _DataFlowNode);

    var _super = _createSuper(ParseNode);

    function ParseNode(parent, parse) {
      var _this;

      _classCallCheck(this, ParseNode);

      _this = _super.call(this, parent);
      _this._parse = parse;
      return _this;
    }

    _createClass(ParseNode, [{
      key: "clone",
      value: function clone() {
        return new ParseNode(null, duplicate(this._parse));
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Parse ".concat(hash(this._parse));
      }
      /**
       * Creates a parse node from a data.format.parse and updates ancestorParse.
       */

    }, {
      key: "merge",
      value: function merge(other) {
        this._parse = _extends(_extends({}, this._parse), other.parse);
        other.remove();
      }
      /**
       * Assemble an object for Vega's format.parse property.
       */

    }, {
      key: "assembleFormatParse",
      value: function assembleFormatParse() {
        var formatParse = {};

        var _iterator3 = _createForOfIteratorHelper(keys$2(this._parse)),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var field = _step3.value;
            var p = this._parse[field];

            if (accessPathDepth(field) === 1) {
              formatParse[field] = p;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return formatParse;
      } // format parse depends and produces all fields in its parse

    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(keys$2(this._parse));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set(keys$2(this._parse));
      }
    }, {
      key: "assembleTransforms",
      value: function assembleTransforms() {
        var _this2 = this;

        var onlyNested = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return keys$2(this._parse).filter(function (field) {
          return onlyNested ? accessPathDepth(field) > 1 : true;
        }).map(function (field) {
          var expr = parseExpression$2(field, _this2._parse[field]);

          if (!expr) {
            return null;
          }

          var formula = {
            type: 'formula',
            expr: expr,
            as: removePathFromField(field) // Vega output is always flattened

          };
          return formula;
        }).filter(function (t) {
          return t !== null;
        });
      }
    }, {
      key: "parse",
      get: function get() {
        return this._parse;
      }
    }], [{
      key: "makeExplicit",
      value: function makeExplicit(parent, model, ancestorParse) {
        // Custom parse
        var explicit = {};
        var data = model.data;

        if (!isGenerator(data) && data && data.format && data.format.parse) {
          explicit = data.format.parse;
        }

        return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
      }
      /**
       * Creates a parse node from "explicit" parse and "implicit" parse and updates ancestorParse.
       */

    }, {
      key: "makeWithAncestors",
      value: function makeWithAncestors(parent, explicit, implicit, ancestorParse) {
        // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as "derived"). We also don't need to flatten a field that has already been parsed.
        var _iterator4 = _createForOfIteratorHelper(keys$2(implicit)),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var field = _step4.value;
            var parsedAs = ancestorParse.getWithExplicit(field);

            if (parsedAs.value !== undefined) {
              // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.
              if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {
                delete implicit[field];
              } else {
                warn$1(message.differentParse(field, implicit[field], parsedAs.value));
              }
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        var _iterator5 = _createForOfIteratorHelper(keys$2(explicit)),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _field = _step5.value;

            var _parsedAs = ancestorParse.get(_field);

            if (_parsedAs !== undefined) {
              // Don't parse a field again if it has been parsed with the same type already.
              if (_parsedAs === explicit[_field]) {
                delete explicit[_field];
              } else {
                warn$1(message.differentParse(_field, explicit[_field], _parsedAs));
              }
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        var parse = new Split(explicit, implicit); // add the format parse from this model so that children don't parse the same field again

        ancestorParse.copyAll(parse); // copy only non-null parses

        var p = {};

        var _iterator6 = _createForOfIteratorHelper(keys$2(parse.combine())),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var key = _step6.value;
            var val = parse.get(key);

            if (val !== null) {
              p[key] = val;
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        if (keys$2(p).length === 0 || ancestorParse.parseNothing) {
          return null;
        }

        return new ParseNode(parent, p);
      }
    }]);

    return ParseNode;
  }(DataFlowNode);

  /**
   * A class for the join aggregate transform nodes.
   */

  var JoinAggregateTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(JoinAggregateTransformNode, _DataFlowNode);

    var _super = _createSuper(JoinAggregateTransformNode);

    function JoinAggregateTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, JoinAggregateTransformNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      return _this;
    }

    _createClass(JoinAggregateTransformNode, [{
      key: "clone",
      value: function clone() {
        return new JoinAggregateTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "addDimensions",
      value: function addDimensions(fields) {
        this.transform.groupby = unique(this.transform.groupby.concat(fields), function (d) {
          return d;
        });
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var out = new Set();

        if (this.transform.groupby) {
          this.transform.groupby.forEach(out.add, out);
        }

        this.transform.joinaggregate.map(function (w) {
          return w.field;
        }).filter(function (f) {
          return f !== undefined;
        }).forEach(out.add, out);
        return out;
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.joinaggregate.map(this.getDefaultName));
      }
    }, {
      key: "getDefaultName",
      value: function getDefaultName(joinAggregateFieldDef) {
        var _a;

        return (_a = joinAggregateFieldDef.as) !== null && _a !== void 0 ? _a : vgField(joinAggregateFieldDef);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "JoinAggregateTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var fields = [];
        var ops = [];
        var as = [];

        var _iterator = _createForOfIteratorHelper(this.transform.joinaggregate),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var joinaggregate = _step.value;
            ops.push(joinaggregate.op);
            as.push(this.getDefaultName(joinaggregate));
            fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var groupby = this.transform.groupby;
        return _extends({
          type: 'joinaggregate',
          as: as,
          ops: ops,
          fields: fields
        }, groupby !== undefined ? {
          groupby: groupby
        } : {});
      }
    }]);

    return JoinAggregateTransformNode;
  }(DataFlowNode);

  function getStackByFields(model) {
    return model.stack.stackBy.reduce(function (fields, by) {
      var fieldDef = by.fieldDef;

      var _field = vgField(fieldDef);

      if (_field) {
        fields.push(_field);
      }

      return fields;
    }, []);
  }

  function isValidAsArray(as) {
    return isArray(as) && as.every(function (s) {
      return isString(s);
    }) && as.length > 1;
  }

  var StackNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(StackNode, _DataFlowNode);

    var _super = _createSuper(StackNode);

    function StackNode(parent, stack) {
      var _this;

      _classCallCheck(this, StackNode);

      _this = _super.call(this, parent);
      _this._stack = stack;
      return _this;
    }

    _createClass(StackNode, [{
      key: "clone",
      value: function clone() {
        return new StackNode(null, duplicate(this._stack));
      }
    }, {
      key: "addDimensions",
      value: function addDimensions(fields) {
        var _this$_stack$facetby;

        (_this$_stack$facetby = this._stack.facetby).push.apply(_this$_stack$facetby, _toConsumableArray(fields));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var out = new Set();
        out.add(this._stack.stackField);
        this.getGroupbyFields().forEach(out.add, out);

        this._stack.facetby.forEach(out.add, out);

        this._stack.sort.field.forEach(out.add, out);

        return out;
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this._stack.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Stack ".concat(hash(this._stack));
      }
    }, {
      key: "getGroupbyFields",
      value: function getGroupbyFields() {
        var _this$_stack = this._stack,
            dimensionFieldDef = _this$_stack.dimensionFieldDef,
            impute = _this$_stack.impute,
            groupby = _this$_stack.groupby;

        if (dimensionFieldDef) {
          if (dimensionFieldDef.bin) {
            if (impute) {
              // For binned group by field with impute, we calculate bin_mid
              // as we cannot impute two fields simultaneously
              return [vgField(dimensionFieldDef, {
                binSuffix: 'mid'
              })];
            }

            return [// For binned group by field without impute, we need both bin (start) and bin_end
            vgField(dimensionFieldDef, {}), vgField(dimensionFieldDef, {
              binSuffix: 'end'
            })];
          }

          return [vgField(dimensionFieldDef)];
        }

        return groupby !== null && groupby !== void 0 ? groupby : [];
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var transform = [];
        var _this$_stack2 = this._stack,
            facetby = _this$_stack2.facetby,
            dimensionFieldDef = _this$_stack2.dimensionFieldDef,
            field = _this$_stack2.stackField,
            stackby = _this$_stack2.stackby,
            sort = _this$_stack2.sort,
            offset = _this$_stack2.offset,
            impute = _this$_stack2.impute,
            as = _this$_stack2.as; // Impute

        if (impute && dimensionFieldDef) {
          var _dimensionFieldDef$ba = dimensionFieldDef.band,
              band = _dimensionFieldDef$ba === void 0 ? 0.5 : _dimensionFieldDef$ba,
              bin = dimensionFieldDef.bin;

          if (bin) {
            // As we can only impute one field at a time, we need to calculate
            // mid point for a binned field
            transform.push({
              type: 'formula',
              expr: "".concat(band, "*") + vgField(dimensionFieldDef, {
                expr: 'datum'
              }) + "+".concat(1 - band, "*") + vgField(dimensionFieldDef, {
                expr: 'datum',
                binSuffix: 'end'
              }),
              as: vgField(dimensionFieldDef, {
                binSuffix: 'mid',
                forAs: true
              })
            });
          }

          transform.push({
            type: 'impute',
            field: field,
            groupby: [].concat(_toConsumableArray(stackby), _toConsumableArray(facetby)),
            key: vgField(dimensionFieldDef, {
              binSuffix: 'mid'
            }),
            method: 'value',
            value: 0
          });
        } // Stack


        transform.push({
          type: 'stack',
          groupby: [].concat(_toConsumableArray(this.getGroupbyFields()), _toConsumableArray(facetby)),
          field: field,
          sort: sort,
          as: as,
          offset: offset
        });
        return transform;
      }
    }, {
      key: "stack",
      get: function get() {
        return this._stack;
      }
    }], [{
      key: "makeFromTransform",
      value: function makeFromTransform(parent, stackTransform) {
        var stack = stackTransform.stack,
            groupby = stackTransform.groupby,
            as = stackTransform.as,
            _stackTransform$offse = stackTransform.offset,
            offset = _stackTransform$offse === void 0 ? 'zero' : _stackTransform$offse;
        var sortFields = [];
        var sortOrder = [];

        if (stackTransform.sort !== undefined) {
          var _iterator = _createForOfIteratorHelper(stackTransform.sort),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var sortField = _step.value;
              sortFields.push(sortField.field);
              sortOrder.push(getFirstDefined(sortField.order, 'ascending'));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        var sort = {
          field: sortFields,
          order: sortOrder
        };
        var normalizedAs;

        if (isValidAsArray(as)) {
          normalizedAs = as;
        } else if (isString(as)) {
          normalizedAs = [as, as + '_end'];
        } else {
          normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];
        }

        return new StackNode(parent, {
          stackField: stack,
          groupby: groupby,
          offset: offset,
          sort: sort,
          facetby: [],
          as: normalizedAs
        });
      }
    }, {
      key: "makeFromEncoding",
      value: function makeFromEncoding(parent, model) {
        var stackProperties = model.stack;
        var encoding = model.encoding;

        if (!stackProperties) {
          return null;
        }

        var groupbyChannel = stackProperties.groupbyChannel,
            fieldChannel = stackProperties.fieldChannel,
            offset = stackProperties.offset,
            impute = stackProperties.impute;
        var dimensionFieldDef;

        if (groupbyChannel) {
          var cDef = encoding[groupbyChannel];
          dimensionFieldDef = getFieldDef(cDef); // Fair to cast as groupByChannel is always either x or y
        }

        var stackby = getStackByFields(model);
        var orderDef = model.encoding.order;
        var sort;

        if (isArray(orderDef) || isFieldDef(orderDef)) {
          sort = sortParams(orderDef);
        } else {
          // default = descending by stackFields
          // FIXME is the default here correct for binned fields?
          sort = stackby.reduce(function (s, field) {
            s.field.push(field);
            s.order.push(fieldChannel === 'y' ? 'descending' : 'ascending');
            return s;
          }, {
            field: [],
            order: []
          });
        }

        return new StackNode(parent, {
          dimensionFieldDef: dimensionFieldDef,
          stackField: model.vgField(fieldChannel),
          facetby: [],
          stackby: stackby,
          sort: sort,
          offset: offset,
          impute: impute,
          as: [model.vgField(fieldChannel, {
            suffix: 'start',
            forAs: true
          }), model.vgField(fieldChannel, {
            suffix: 'end',
            forAs: true
          })]
        });
      }
    }]);

    return StackNode;
  }(DataFlowNode);

  /**
   * A class for the window transform nodes
   */

  var WindowTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(WindowTransformNode, _DataFlowNode);

    var _super = _createSuper(WindowTransformNode);

    function WindowTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, WindowTransformNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      return _this;
    }

    _createClass(WindowTransformNode, [{
      key: "clone",
      value: function clone() {
        return new WindowTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "addDimensions",
      value: function addDimensions(fields) {
        this.transform.groupby = unique(this.transform.groupby.concat(fields), function (d) {
          return d;
        });
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a, _b;

        var out = new Set();
        ((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).forEach(out.add, out);
        ((_b = this.transform.sort) !== null && _b !== void 0 ? _b : []).forEach(function (m) {
          return out.add(m.field);
        });
        this.transform.window.map(function (w) {
          return w.field;
        }).filter(function (f) {
          return f !== undefined;
        }).forEach(out.add, out);
        return out;
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.window.map(this.getDefaultName));
      }
    }, {
      key: "getDefaultName",
      value: function getDefaultName(windowFieldDef) {
        var _a;

        return (_a = windowFieldDef.as) !== null && _a !== void 0 ? _a : vgField(windowFieldDef);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "WindowTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _a;

        var fields = [];
        var ops = [];
        var as = [];
        var params = [];

        var _iterator = _createForOfIteratorHelper(this.transform.window),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var window = _step.value;
            ops.push(window.op);
            as.push(this.getDefaultName(window));
            params.push(window.param === undefined ? null : window.param);
            fields.push(window.field === undefined ? null : window.field);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var frame = this.transform.frame;
        var groupby = this.transform.groupby;

        if (frame && frame[0] === null && frame[1] === null && ops.every(function (o) {
          return isAggregateOp(o);
        })) {
          // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate
          return _extends({
            type: 'joinaggregate',
            as: as,
            ops: ops,
            fields: fields
          }, groupby !== undefined ? {
            groupby: groupby
          } : {});
        }

        var sortFields = [];
        var sortOrder = [];

        if (this.transform.sort !== undefined) {
          var _iterator2 = _createForOfIteratorHelper(this.transform.sort),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var sortField = _step2.value;
              sortFields.push(sortField.field);
              sortOrder.push((_a = sortField.order) !== null && _a !== void 0 ? _a : 'ascending');
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }

        var sort = {
          field: sortFields,
          order: sortOrder
        };
        var ignorePeers = this.transform.ignorePeers;
        return _extends(_extends(_extends({
          type: 'window',
          params: params,
          as: as,
          ops: ops,
          fields: fields,
          sort: sort
        }, ignorePeers !== undefined ? {
          ignorePeers: ignorePeers
        } : {}), groupby !== undefined ? {
          groupby: groupby
        } : {}), frame !== undefined ? {
          frame: frame
        } : {});
      }
    }]);

    return WindowTransformNode;
  }(DataFlowNode);

  var IdentifierNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(IdentifierNode, _DataFlowNode);

    var _super = _createSuper(IdentifierNode);

    _createClass(IdentifierNode, [{
      key: "clone",
      value: function clone() {
        return new IdentifierNode(null);
      }
    }]);

    function IdentifierNode(parent) {
      _classCallCheck(this, IdentifierNode);

      return _super.call(this, parent);
    }

    _createClass(IdentifierNode, [{
      key: "dependentFields",
      value: function dependentFields() {
        return new Set();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set([SELECTION_ID]);
      }
    }, {
      key: "hash",
      value: function hash() {
        return 'Identifier';
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return {
          type: 'identifier',
          as: SELECTION_ID
        };
      }
    }]);

    return IdentifierNode;
  }(DataFlowNode);

  /**
   * Move parse nodes up to forks.
   */

  var MoveParseUp = /*#__PURE__*/function (_BottomUpOptimizer) {
    _inherits(MoveParseUp, _BottomUpOptimizer);

    var _super = _createSuper(MoveParseUp);

    function MoveParseUp() {
      _classCallCheck(this, MoveParseUp);

      return _super.apply(this, arguments);
    }

    _createClass(MoveParseUp, [{
      key: "run",
      value: function run(node) {
        var parent = node.parent; // Move parse up by merging or swapping.

        if (node instanceof ParseNode) {
          if (isDataSourceNode(parent)) {
            return this.flags;
          }

          if (parent.numChildren() > 1) {
            // Don't move parse further up but continue with parent.
            this.setContinue();
            return this.flags;
          }

          if (parent instanceof ParseNode) {
            this.setMutated();
            parent.merge(node);
          } else {
            // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).
            if (fieldIntersection(parent.producedFields(), node.dependentFields())) {
              this.setContinue();
              return this.flags;
            }

            this.setMutated();
            node.swapWithParent();
          }
        }

        this.setContinue();
        return this.flags;
      }
    }]);

    return MoveParseUp;
  }(BottomUpOptimizer);
  /**
   * Merge identical nodes at forks by comparing hashes.
   *
   * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.
   */

  var MergeIdenticalNodes = /*#__PURE__*/function (_TopDownOptimizer) {
    _inherits(MergeIdenticalNodes, _TopDownOptimizer);

    var _super2 = _createSuper(MergeIdenticalNodes);

    function MergeIdenticalNodes() {
      _classCallCheck(this, MergeIdenticalNodes);

      return _super2.apply(this, arguments);
    }

    _createClass(MergeIdenticalNodes, [{
      key: "mergeNodes",
      value: function mergeNodes(parent, nodes) {
        var mergedNode = nodes.shift();

        var _iterator = _createForOfIteratorHelper(nodes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value;
            parent.removeChild(node);
            node.parent = mergedNode;
            node.remove();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "run",
      value: function run(node) {
        var hashes = node.children.map(function (x) {
          return x.hash();
        });
        var buckets = {};

        for (var i = 0; i < hashes.length; i++) {
          if (buckets[hashes[i]] === undefined) {
            buckets[hashes[i]] = [node.children[i]];
          } else {
            buckets[hashes[i]].push(node.children[i]);
          }
        }

        var _iterator2 = _createForOfIteratorHelper(keys$2(buckets)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var k = _step2.value;

            if (buckets[k].length > 1) {
              this.setMutated();
              this.mergeNodes(node, buckets[k]);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var _iterator3 = _createForOfIteratorHelper(node.children),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var child = _step3.value;
            this.run(child);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return this.mutatedFlag;
      }
    }]);

    return MergeIdenticalNodes;
  }(TopDownOptimizer);
  /**
   * Repeatedly remove leaf nodes that are not output or facet nodes.
   * The reason is that we don't need subtrees that don't have any output nodes.
   * Facet nodes are needed for the row or column domains.
   */

  var RemoveUnusedSubtrees = /*#__PURE__*/function (_BottomUpOptimizer2) {
    _inherits(RemoveUnusedSubtrees, _BottomUpOptimizer2);

    var _super3 = _createSuper(RemoveUnusedSubtrees);

    function RemoveUnusedSubtrees() {
      _classCallCheck(this, RemoveUnusedSubtrees);

      return _super3.apply(this, arguments);
    }

    _createClass(RemoveUnusedSubtrees, [{
      key: "run",
      value: function run(node) {
        if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {
          // no need to continue with parent because it is output node or will have children (there was a fork)
          return this.flags;
        } else {
          this.setMutated();
          node.remove();
        }

        return this.flags;
      }
    }]);

    return RemoveUnusedSubtrees;
  }(BottomUpOptimizer);
  /**
   * Removes duplicate time unit nodes (as determined by the name of the
   * output field) that may be generated due to selections projected over
   * time units.
   *
   * TODO: Try to make this a top down optimizer that keeps only the first
   * insance of a time unit node.
   * TODO: Try to make a generic version of this that only keeps one node per hash.
   */

  var RemoveDuplicateTimeUnits = /*#__PURE__*/function (_BottomUpOptimizer3) {
    _inherits(RemoveDuplicateTimeUnits, _BottomUpOptimizer3);

    var _super4 = _createSuper(RemoveDuplicateTimeUnits);

    function RemoveDuplicateTimeUnits() {
      var _this;

      _classCallCheck(this, RemoveDuplicateTimeUnits);

      _this = _super4.apply(this, arguments);
      _this.fields = new Set();
      _this.prev = null;
      return _this;
    }

    _createClass(RemoveDuplicateTimeUnits, [{
      key: "run",
      value: function run(node) {
        this.setContinue();

        if (node instanceof TimeUnitNode) {
          var pfields = node.producedFields();

          if (hasIntersection(pfields, this.fields)) {
            this.setMutated();
            this.prev.remove();
          } else {
            this.fields = new Set([].concat(_toConsumableArray(this.fields), _toConsumableArray(pfields)));
          }

          this.prev = node;
        }

        return this.flags;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.fields.clear();
      }
    }]);

    return RemoveDuplicateTimeUnits;
  }(BottomUpOptimizer);
  /**
   * Merge adjacent time unit nodes.
   */

  var MergeTimeUnits = /*#__PURE__*/function (_BottomUpOptimizer4) {
    _inherits(MergeTimeUnits, _BottomUpOptimizer4);

    var _super5 = _createSuper(MergeTimeUnits);

    function MergeTimeUnits() {
      _classCallCheck(this, MergeTimeUnits);

      return _super5.apply(this, arguments);
    }

    _createClass(MergeTimeUnits, [{
      key: "run",
      value: function run(node) {
        this.setContinue();
        var parent = node.parent;
        var timeUnitChildren = parent.children.filter(function (x) {
          return x instanceof TimeUnitNode;
        });
        var combination = timeUnitChildren.pop();

        var _iterator4 = _createForOfIteratorHelper(timeUnitChildren),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var timeUnit = _step4.value;
            this.setMutated();
            combination.merge(timeUnit);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        return this.flags;
      }
    }]);

    return MergeTimeUnits;
  }(BottomUpOptimizer);
  /**
   * Clones the subtree and ignores output nodes except for the leaves, which are renamed.
   */

  function cloneSubtree(facet) {
    function clone(node) {
      if (!(node instanceof FacetNode)) {
        var copy = node.clone();

        if (copy instanceof OutputNode) {
          var newName = FACET_SCALE_PREFIX + copy.getSource();
          copy.setSource(newName);
          facet.model.component.data.outputNodes[newName] = copy;
        } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {
          copy.addDimensions(facet.fields);
        }

        var _iterator5 = _createForOfIteratorHelper(node.children.flatMap(clone)),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var n = _step5.value;
            n.parent = copy;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return [copy];
      }

      return node.children.flatMap(clone);
    }

    return clone;
  }
  /**
   * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.
   * After moving down the facet node, make a copy of the subtree and make it a child of the main output.
   */


  function moveFacetDown(node) {
    if (node instanceof FacetNode) {
      if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {
        // move down until we hit a fork or output node
        var child = node.children[0];

        if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {
          child.addDimensions(node.fields);
        }

        child.swapWithParent();
        moveFacetDown(node);
      } else {
        // move main to facet
        var facetMain = node.model.component.data.main;
        moveMainDownToFacet(facetMain); // replicate the subtree and place it before the facet's main node

        var cloner = cloneSubtree(node);
        var copy = node.children.map(cloner).flat();

        var _iterator6 = _createForOfIteratorHelper(copy),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var c = _step6.value;
            c.parent = facetMain;
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
    } else {
      node.children.map(moveFacetDown);
    }
  }

  function moveMainDownToFacet(node) {
    if (node instanceof OutputNode && node.type === MAIN) {
      if (node.numChildren() === 1) {
        var child = node.children[0];

        if (!(child instanceof FacetNode)) {
          child.swapWithParent();
          moveMainDownToFacet(node);
        }
      }
    }
  }
  /**
   * Remove output nodes that are not required. Starting from a root.
   */


  var RemoveUnnecessaryOutputNodes = /*#__PURE__*/function (_TopDownOptimizer2) {
    _inherits(RemoveUnnecessaryOutputNodes, _TopDownOptimizer2);

    var _super6 = _createSuper(RemoveUnnecessaryOutputNodes);

    function RemoveUnnecessaryOutputNodes() {
      _classCallCheck(this, RemoveUnnecessaryOutputNodes);

      return _super6.call(this);
    }

    _createClass(RemoveUnnecessaryOutputNodes, [{
      key: "run",
      value: function run(node) {
        if (node instanceof OutputNode && !node.isRequired()) {
          this.setMutated();
          node.remove();
        }

        var _iterator7 = _createForOfIteratorHelper(node.children),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var child = _step7.value;
            this.run(child);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        return this.mutatedFlag;
      }
    }]);

    return RemoveUnnecessaryOutputNodes;
  }(TopDownOptimizer);
  var RemoveUnnecessaryIdentifierNodes = /*#__PURE__*/function (_TopDownOptimizer3) {
    _inherits(RemoveUnnecessaryIdentifierNodes, _TopDownOptimizer3);

    var _super7 = _createSuper(RemoveUnnecessaryIdentifierNodes);

    function RemoveUnnecessaryIdentifierNodes(model) {
      var _this2;

      _classCallCheck(this, RemoveUnnecessaryIdentifierNodes);

      _this2 = _super7.call(this);
      _this2.requiresSelectionId = model && requiresSelectionId(model);
      return _this2;
    }

    _createClass(RemoveUnnecessaryIdentifierNodes, [{
      key: "run",
      value: function run(node) {
        if (node instanceof IdentifierNode) {
          // Only preserve IdentifierNodes if we have default discrete selections
          // in our model tree, and if the nodes come after tuple producing nodes.
          if (!(this.requiresSelectionId && (isDataSourceNode(node.parent) || node.parent instanceof AggregateNode || node.parent instanceof ParseNode))) {
            this.setMutated();
            node.remove();
          }
        }

        var _iterator8 = _createForOfIteratorHelper(node.children),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var child = _step8.value;
            this.run(child);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        return this.mutatedFlag;
      }
    }]);

    return RemoveUnnecessaryIdentifierNodes;
  }(TopDownOptimizer);
  /**
   * Inserts an intermediate ParseNode containing all non-conflicting parse fields and removes the empty ParseNodes.
   *
   * We assume that dependent paths that do not have a parse node can be just merged.
   */

  var MergeParse = /*#__PURE__*/function (_BottomUpOptimizer5) {
    _inherits(MergeParse, _BottomUpOptimizer5);

    var _super8 = _createSuper(MergeParse);

    function MergeParse() {
      _classCallCheck(this, MergeParse);

      return _super8.apply(this, arguments);
    }

    _createClass(MergeParse, [{
      key: "run",
      value: function run(node) {
        var parent = node.parent;

        var originalChildren = _toConsumableArray(parent.children);

        var parseChildren = parent.children.filter(function (child) {
          return child instanceof ParseNode;
        });

        if (parent.numChildren() > 1 && parseChildren.length >= 1) {
          var commonParse = {};
          var conflictingParse = new Set();

          var _iterator9 = _createForOfIteratorHelper(parseChildren),
              _step9;

          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var parseNode = _step9.value;
              var parse = parseNode.parse;

              var _iterator13 = _createForOfIteratorHelper(keys$2(parse)),
                  _step13;

              try {
                for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                  var k = _step13.value;

                  if (!(k in commonParse)) {
                    commonParse[k] = parse[k];
                  } else if (commonParse[k] !== parse[k]) {
                    conflictingParse.add(k);
                  }
                }
              } catch (err) {
                _iterator13.e(err);
              } finally {
                _iterator13.f();
              }
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }

          var _iterator10 = _createForOfIteratorHelper(conflictingParse),
              _step10;

          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var field = _step10.value;
              delete commonParse[field];
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }

          if (keys$2(commonParse).length !== 0) {
            this.setMutated();
            var mergedParseNode = new ParseNode(parent, commonParse);

            var _iterator11 = _createForOfIteratorHelper(originalChildren),
                _step11;

            try {
              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                var childNode = _step11.value;

                if (childNode instanceof ParseNode) {
                  var _iterator12 = _createForOfIteratorHelper(keys$2(commonParse)),
                      _step12;

                  try {
                    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                      var key = _step12.value;
                      delete childNode.parse[key];
                    }
                  } catch (err) {
                    _iterator12.e(err);
                  } finally {
                    _iterator12.f();
                  }
                }

                parent.removeChild(childNode);
                childNode.parent = mergedParseNode; // remove empty parse nodes

                if (childNode instanceof ParseNode && keys$2(childNode.parse).length === 0) {
                  childNode.remove();
                }
              }
            } catch (err) {
              _iterator11.e(err);
            } finally {
              _iterator11.f();
            }
          }
        }

        this.setContinue();
        return this.flags;
      }
    }]);

    return MergeParse;
  }(BottomUpOptimizer);
  var MergeAggregates = /*#__PURE__*/function (_BottomUpOptimizer6) {
    _inherits(MergeAggregates, _BottomUpOptimizer6);

    var _super9 = _createSuper(MergeAggregates);

    function MergeAggregates() {
      _classCallCheck(this, MergeAggregates);

      return _super9.apply(this, arguments);
    }

    _createClass(MergeAggregates, [{
      key: "run",
      value: function run(node) {
        var parent = node.parent;
        var aggChildren = parent.children.filter(function (child) {
          return child instanceof AggregateNode;
        }); // Object which we'll use to map the fields which an aggregate is grouped by to
        // the set of aggregates with that grouping. This is useful as only aggregates
        // with the same group by can be merged

        var groupedAggregates = {}; // Build groupedAggregates

        var _iterator14 = _createForOfIteratorHelper(aggChildren),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var agg = _step14.value;
            var groupBys = hash(agg.groupBy);

            if (!(groupBys in groupedAggregates)) {
              groupedAggregates[groupBys] = [];
            }

            groupedAggregates[groupBys].push(agg);
          } // Merge aggregateNodes with same key in groupedAggregates

        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        var _iterator15 = _createForOfIteratorHelper(keys$2(groupedAggregates)),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var group = _step15.value;
            var mergeableAggs = groupedAggregates[group];

            if (mergeableAggs.length > 1) {
              var mergedAggs = mergeableAggs.pop();

              var _iterator16 = _createForOfIteratorHelper(mergeableAggs),
                  _step16;

              try {
                for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                  var _agg = _step16.value;

                  if (mergedAggs.merge(_agg)) {
                    parent.removeChild(_agg);
                    _agg.parent = mergedAggs;

                    _agg.remove();

                    this.setMutated();
                  }
                }
              } catch (err) {
                _iterator16.e(err);
              } finally {
                _iterator16.f();
              }
            }
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }

        this.setContinue();
        return this.flags;
      }
    }]);

    return MergeAggregates;
  }(BottomUpOptimizer);
  /**
   * Merge bin nodes and move them up through forks. Stop at filters, parse, identifier as we want them to stay before the bin node.
   */

  var MergeBins = /*#__PURE__*/function (_BottomUpOptimizer7) {
    _inherits(MergeBins, _BottomUpOptimizer7);

    var _super10 = _createSuper(MergeBins);

    function MergeBins(model) {
      var _this3;

      _classCallCheck(this, MergeBins);

      _this3 = _super10.call(this);
      _this3.model = model;
      return _this3;
    }

    _createClass(MergeBins, [{
      key: "run",
      value: function run(node) {
        var parent = node.parent;
        var moveBinsUp = !(isDataSourceNode(parent) || parent instanceof FilterNode || parent instanceof ParseNode || parent instanceof IdentifierNode);
        var promotableBins = [];
        var remainingBins = [];

        var _iterator17 = _createForOfIteratorHelper(parent.children),
            _step17;

        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var child = _step17.value;

            if (child instanceof BinNode) {
              if (moveBinsUp && !fieldIntersection(parent.producedFields(), child.dependentFields())) {
                promotableBins.push(child);
              } else {
                remainingBins.push(child);
              }
            }
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }

        if (promotableBins.length > 0) {
          var promotedBin = promotableBins.pop();

          var _iterator18 = _createForOfIteratorHelper(promotableBins),
              _step18;

          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var bin = _step18.value;
              promotedBin.merge(bin, this.model.renameSignal.bind(this.model));
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }

          this.setMutated();

          if (parent instanceof BinNode) {
            parent.merge(promotedBin, this.model.renameSignal.bind(this.model));
          } else {
            promotedBin.swapWithParent();
          }
        }

        if (remainingBins.length > 1) {
          var remainingBin = remainingBins.pop();

          var _iterator19 = _createForOfIteratorHelper(remainingBins),
              _step19;

          try {
            for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
              var _bin = _step19.value;
              remainingBin.merge(_bin, this.model.renameSignal.bind(this.model));
            }
          } catch (err) {
            _iterator19.e(err);
          } finally {
            _iterator19.f();
          }

          this.setMutated();
        }

        this.setContinue();
        return this.flags;
      }
    }]);

    return MergeBins;
  }(BottomUpOptimizer);
  /**
   * This optimizer takes output nodes that are at a fork and moves them before the fork.
   *
   * The algorithm iterates over the children and tries to find the last output node in a cahin of output nodes.
   * It then moves all output nodes before that main output node. All other children (and the children of the output nodes)
   * are inserted after the main output node.
   */

  var MergeOutputs = /*#__PURE__*/function (_BottomUpOptimizer8) {
    _inherits(MergeOutputs, _BottomUpOptimizer8);

    var _super11 = _createSuper(MergeOutputs);

    function MergeOutputs() {
      _classCallCheck(this, MergeOutputs);

      return _super11.apply(this, arguments);
    }

    _createClass(MergeOutputs, [{
      key: "run",
      value: function run(node) {
        var parent = node.parent;

        var children = _toConsumableArray(parent.children);

        var hasOutputChild = some(children, function (child) {
          return child instanceof OutputNode;
        });

        if (!hasOutputChild || parent.numChildren() <= 1) {
          this.setContinue();
          return this.flags;
        }

        var otherChildren = []; // The output node we will connect all other nodes to
        // output nodes will be added before, other nodes after

        var mainOutput;

        var _iterator20 = _createForOfIteratorHelper(children),
            _step20;

        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var _child = _step20.value;

            if (_child instanceof OutputNode) {
              var lastOutput = _child;

              while (lastOutput.numChildren() === 1) {
                var theChild = lastOutput.children[0];

                if (theChild instanceof OutputNode) {
                  lastOutput = theChild;
                } else {
                  break;
                }
              }

              otherChildren.push.apply(otherChildren, _toConsumableArray(lastOutput.children));

              if (mainOutput) {
                // Move the output nodes before the mainOutput. We do this by setting
                // the parent of the first not to the parent of the main output and
                // the main output's parent to the last output.
                // note: the child is the first output
                parent.removeChild(_child);
                _child.parent = mainOutput.parent;
                mainOutput.parent.removeChild(mainOutput);
                mainOutput.parent = lastOutput;
                this.setMutated();
              } else {
                mainOutput = lastOutput;
              }
            } else {
              otherChildren.push(_child);
            }
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }

        if (otherChildren.length) {
          this.setMutated();

          var _iterator21 = _createForOfIteratorHelper(otherChildren),
              _step21;

          try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
              var child = _step21.value;
              child.parent.removeChild(child);
              child.parent = mainOutput;
            }
          } catch (err) {
            _iterator21.e(err);
          } finally {
            _iterator21.f();
          }
        }

        this.setContinue();
        return this.flags;
      }
    }]);

    return MergeOutputs;
  }(BottomUpOptimizer);

  var FACET_SCALE_PREFIX = 'scale_';
  var MAX_OPTIMIZATION_RUNS = 5;
  /**
   * Return all leaf nodes.
   */

  function getLeaves(roots) {
    var leaves = [];

    function append(node) {
      if (node.numChildren() === 0) {
        leaves.push(node);
      } else {
        var _iterator = _createForOfIteratorHelper(node.children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            append(child);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }

    var _iterator2 = _createForOfIteratorHelper(roots),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var child = _step2.value;
        append(child);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return leaves;
  }

  function isTrue(x) {
    return x;
  }
  /**
   * Run the specified optimizer on the provided nodes.
   *
   * @param optimizer The optimizer instance to run.
   * @param nodes A set of nodes to optimize.
   * @param flag Flag that will be or'ed with return valued from optimization calls to the nodes.
   */

  function runOptimizer(optimizer, nodes) {
    var flags = nodes.map(function (node) {
      if (optimizer instanceof BottomUpOptimizer) {
        var runFlags = optimizer.optimizeNextFromLeaves(node);
        optimizer.reset();
        return runFlags;
      } else {
        return optimizer.run(node);
      }
    });
    return flags.some(isTrue);
  }

  function optimizationDataflowHelper(dataComponent, model) {
    var roots = dataComponent.sources;
    var mutatedFlags = new Set();
    mutatedFlags.add(runOptimizer(new RemoveUnnecessaryOutputNodes(), roots));
    mutatedFlags.add(runOptimizer(new RemoveUnnecessaryIdentifierNodes(model), roots)); // remove source nodes that don't have any children because they also don't have output nodes

    roots = roots.filter(function (r) {
      return r.numChildren() > 0;
    });
    mutatedFlags.add(runOptimizer(new RemoveUnusedSubtrees(), getLeaves(roots)));
    roots = roots.filter(function (r) {
      return r.numChildren() > 0;
    });
    mutatedFlags.add(runOptimizer(new MoveParseUp(), getLeaves(roots)));
    mutatedFlags.add(runOptimizer(new MergeBins(model), getLeaves(roots)));
    mutatedFlags.add(runOptimizer(new RemoveDuplicateTimeUnits(), getLeaves(roots)));
    mutatedFlags.add(runOptimizer(new MergeParse(), getLeaves(roots)));
    mutatedFlags.add(runOptimizer(new MergeAggregates(), getLeaves(roots)));
    mutatedFlags.add(runOptimizer(new MergeTimeUnits(), getLeaves(roots)));
    mutatedFlags.add(runOptimizer(new MergeIdenticalNodes(), roots));
    mutatedFlags.add(runOptimizer(new MergeOutputs(), getLeaves(roots)));
    dataComponent.sources = roots;
    return mutatedFlags.has(true);
  }
  /**
   * Optimizes the dataflow of the passed in data component.
   */


  function optimizeDataflow(data, model) {
    // check before optimizations
    checkLinks(data.sources);
    var firstPassCounter = 0;
    var secondPassCounter = 0;

    for (var i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
      if (!optimizationDataflowHelper(data, model)) {
        break;
      }

      firstPassCounter++;
    } // move facets down and make a copy of the subtree so that we can have scales at the top level


    data.sources.map(moveFacetDown);

    for (var _i = 0; _i < MAX_OPTIMIZATION_RUNS; _i++) {
      if (!optimizationDataflowHelper(data, model)) {
        break;
      }

      secondPassCounter++;
    } // check after optimizations


    checkLinks(data.sources);

    if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {
      warn$1("Maximum optimization runs(".concat(MAX_OPTIMIZATION_RUNS, ") reached."));
    }
  }

  /**
   * A class that behaves like a SignalRef but lazily generates the signal.
   * The provided generator function should use `Model.getSignalName` to use the correct signal name.
   */
  var SignalRefWrapper = /*#__PURE__*/function () {
    function SignalRefWrapper(exprGenerator) {
      _classCallCheck(this, SignalRefWrapper);

      Object.defineProperty(this, 'signal', {
        enumerable: true,
        get: exprGenerator
      });
    }

    _createClass(SignalRefWrapper, null, [{
      key: "fromName",
      value: function fromName(rename, signalName) {
        return new SignalRefWrapper(function () {
          return rename(signalName);
        });
      }
    }]);

    return SignalRefWrapper;
  }();

  function parseScaleDomain$1(model) {
    if (isUnitModel(model)) {
      parseUnitScaleDomain(model);
    } else {
      parseNonUnitScaleDomain(model);
    }
  }

  function parseUnitScaleDomain(model) {
    var localScaleComponents = model.component.scales;

    var _iterator = _createForOfIteratorHelper(keys$2(localScaleComponents)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;
        var domains = parseDomainForChannel(model, channel);
        var localScaleCmpt = localScaleComponents[channel];
        localScaleCmpt.setWithExplicit('domains', domains);
        parseSelectionDomain(model, channel);

        if (model.component.data.isFaceted) {
          // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not
          var facetParent = model;

          while (!isFacetModel(facetParent) && facetParent.parent) {
            facetParent = facetParent.parent;
          }

          var resolve = facetParent.component.resolve.scale[channel];

          if (resolve === 'shared') {
            var _iterator2 = _createForOfIteratorHelper(domains.value),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var domain = _step2.value;

                // Replace the scale domain with data output from a cloned subtree after the facet.
                if (isDataRefDomain(domain)) {
                  // use data from cloned subtree (which is the same as data but with a prefix added once)
                  domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  function parseNonUnitScaleDomain(model) {
    var _iterator3 = _createForOfIteratorHelper(model.children),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var child = _step3.value;
        parseScaleDomain$1(child);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    var localScaleComponents = model.component.scales;

    var _iterator4 = _createForOfIteratorHelper(keys$2(localScaleComponents)),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var channel = _step4.value;
        var domains = void 0;
        var selectionExtent = null;

        var _iterator5 = _createForOfIteratorHelper(model.children),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _child = _step5.value;
            var childComponent = _child.component.scales[channel];

            if (childComponent) {
              if (domains === undefined) {
                domains = childComponent.getWithExplicit('domains');
              } else {
                domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit('domains'), 'domains', 'scale', domainsTieBreaker);
              }

              var se = childComponent.get('selectionExtent');

              if (selectionExtent && se && selectionExtent.selection !== se.selection) {
                warn$1('The same selection must be used to override scale domains in a layered view.');
              }

              selectionExtent = se;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        localScaleComponents[channel].setWithExplicit('domains', domains);

        if (selectionExtent) {
          localScaleComponents[channel].set('selectionExtent', selectionExtent, true);
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  }
  /**
   * Remove unaggregated domain if it is not applicable
   * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.
   */


  function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {
    if (domain === 'unaggregated') {
      var _canUseUnaggregatedDo = canUseUnaggregatedDomain(fieldDef, scaleType),
          valid = _canUseUnaggregatedDo.valid,
          reason = _canUseUnaggregatedDo.reason;

      if (!valid) {
        warn$1(reason);
        return undefined;
      }
    } else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {
      // Apply config if domain is not specified.
      var _canUseUnaggregatedDo2 = canUseUnaggregatedDomain(fieldDef, scaleType),
          _valid = _canUseUnaggregatedDo2.valid;

      if (_valid) {
        return 'unaggregated';
      }
    }

    return domain;
  }

  function parseDomainForChannel(model, channel) {
    var scaleType = model.getScaleComponent(channel).get('type');
    var encoding = model.encoding;
    var domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.typedFieldDef(channel), scaleType, model.config.scale);

    if (domain !== model.scaleDomain(channel)) {
      model.specifiedScales[channel] = _extends(_extends({}, model.specifiedScales[channel]), {
        domain: domain
      });
    } // If channel is either X or Y then union them with X2 & Y2 if they exist


    if (channel === 'x' && getFieldOrDatumDef(encoding.x2)) {
      if (getFieldOrDatumDef(encoding.x)) {
        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'x'), parseSingleChannelDomain(scaleType, domain, model, 'x2'), 'domain', 'scale', domainsTieBreaker);
      } else {
        return parseSingleChannelDomain(scaleType, domain, model, 'x2');
      }
    } else if (channel === 'y' && getFieldOrDatumDef(encoding.y2)) {
      if (getFieldOrDatumDef(encoding.y)) {
        return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'y'), parseSingleChannelDomain(scaleType, domain, model, 'y2'), 'domain', 'scale', domainsTieBreaker);
      } else {
        return parseSingleChannelDomain(scaleType, domain, model, 'y2');
      }
    }

    return parseSingleChannelDomain(scaleType, domain, model, channel);
  }

  function mapDomainToDataSignal(domain, type, timeUnit) {
    return domain.map(function (v) {
      var data = valueExpr(v, {
        timeUnit: timeUnit,
        type: type
      });
      return {
        signal: "{data: ".concat(data, "}")
      };
    });
  }

  function convertDomainIfItIsDateTime(domain, type, timeUnit) {
    var _a; // explicit value


    var normalizedTimeUnit = (_a = normalizeTimeUnit(timeUnit)) === null || _a === void 0 ? void 0 : _a.unit;

    if (type === 'temporal' || normalizedTimeUnit) {
      return mapDomainToDataSignal(domain, type, normalizedTimeUnit);
    }

    return [domain]; // Date time won't make sense
  }

  function parseSingleChannelDomain(scaleType, domain, model, channel) {
    var encoding = model.encoding;
    var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
    var type = fieldOrDatumDef.type;
    var timeUnit = fieldOrDatumDef['timeUnit'];

    if (isDomainUnionWith(domain)) {
      var defaultDomain = parseSingleChannelDomain(scaleType, undefined, model, channel);
      var unionWith = convertDomainIfItIsDateTime(domain.unionWith, type, timeUnit);
      return makeExplicit([].concat(_toConsumableArray(defaultDomain.value), _toConsumableArray(unionWith)));
    } else if (isSignalRef(domain)) {
      return makeExplicit([domain]);
    } else if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {
      return makeExplicit(convertDomainIfItIsDateTime(domain, type, timeUnit));
    }

    var stack = model.stack;

    if (stack && channel === stack.fieldChannel) {
      if (stack.offset === 'normalize') {
        return makeImplicit([[0, 1]]);
      }

      var data = model.requestDataName(MAIN);
      return makeImplicit([{
        data: data,
        field: model.vgField(channel, {
          suffix: 'start'
        })
      }, {
        data: data,
        field: model.vgField(channel, {
          suffix: 'end'
        })
      }]);
    }

    var sort = isScaleChannel(channel) && isFieldDef(fieldOrDatumDef) ? domainSort(model, channel, scaleType) : undefined;

    if (isDatumDef(fieldOrDatumDef)) {
      var d = convertDomainIfItIsDateTime([fieldOrDatumDef.datum], type, timeUnit);
      return makeImplicit(d);
    }

    var fieldDef = fieldOrDatumDef; // now we can be sure it's a fieldDef

    if (domain === 'unaggregated') {
      var _data = model.requestDataName(MAIN);

      var field = fieldOrDatumDef.field;
      return makeImplicit([{
        data: _data,
        field: vgField({
          field: field,
          aggregate: 'min'
        })
      }, {
        data: _data,
        field: vgField({
          field: field,
          aggregate: 'max'
        })
      }]);
    } else if (isBinning(fieldDef.bin)) {
      if (hasDiscreteDomain(scaleType)) {
        if (scaleType === 'bin-ordinal') {
          // we can omit the domain as it is inferred from the `bins` property
          return makeImplicit([]);
        } // ordinal bin scale takes domain from bin_range, ordered by bin start
        // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).


        return makeImplicit([{
          // If sort by aggregation of a specified sort field, we need to use RAW table,
          // so we can aggregate values for the scale independently from the main aggregation.
          data: isBoolean$3(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),
          // Use range if we added it and the scale does not support computing a range as a signal.
          field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? {
            binSuffix: 'range'
          } : {}),
          // we have to use a sort object if sort = true to make the sort correct by bin start
          sort: sort === true || !isObject(sort) ? {
            field: model.vgField(channel, {}),
            op: 'min' // min or max doesn't matter since we sort by the start of the bin range

          } : sort
        }]);
      } else {
        // continuous scales
        var bin = fieldDef.bin;

        if (isBinning(bin)) {
          var binSignal = getBinSignalName(model, fieldDef.field, bin);
          return makeImplicit([new SignalRefWrapper(function () {
            var signal = model.getSignalName(binSignal);
            return "[".concat(signal, ".start, ").concat(signal, ".stop]");
          })]);
        } else {
          return makeImplicit([{
            data: model.requestDataName(MAIN),
            field: model.vgField(channel, {})
          }]);
        }
      }
    } else if (fieldDef.timeUnit && contains$1(['time', 'utc'], scaleType) && hasBand(channel, fieldDef, isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined, model.stack, model.markDef, model.config)) {
      var _data2 = model.requestDataName(MAIN);

      return makeImplicit([{
        data: _data2,
        field: model.vgField(channel)
      }, {
        data: _data2,
        field: model.vgField(channel, {
          suffix: 'end'
        })
      }]);
    } else if (sort) {
      return makeImplicit([{
        // If sort by aggregation of a specified sort field, we need to use RAW table,
        // so we can aggregate values for the scale independently from the main aggregation.
        data: isBoolean$3(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),
        field: model.vgField(channel),
        sort: sort
      }]);
    } else {
      return makeImplicit([{
        data: model.requestDataName(MAIN),
        field: model.vgField(channel)
      }]);
    }
  }

  function normalizeSortField(sort, isStackedMeasure) {
    var op = sort.op,
        field = sort.field,
        order = sort.order;
    return _extends(_extends({
      // Apply default op
      op: op !== null && op !== void 0 ? op : isStackedMeasure ? 'sum' : DEFAULT_SORT_OP
    }, field ? {
      field: replacePathInField(field)
    } : {}), order ? {
      order: order
    } : {});
  }

  function parseSelectionDomain(model, channel) {
    var _a;

    var scale = model.component.scales[channel];
    var spec = model.specifiedScales[channel].domain;
    var bin = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.bin;
    var domain = isSelectionDomain(spec) && spec;
    var extent = isBinParams(bin) && isSelectionExtent(bin.extent) && bin.extent;

    if (domain || extent) {
      // As scale parsing occurs before selection parsing, we cannot set
      // domainRaw directly. So instead, we store the selectionExtent on
      // the scale component, and then add domainRaw during scale assembly.
      scale.set('selectionExtent', domain !== null && domain !== void 0 ? domain : extent, true);
    }
  }

  function domainSort(model, channel, scaleType) {
    if (!hasDiscreteDomain(scaleType)) {
      return undefined;
    } // save to cast as the only exception is the geojson type for shape, which would not generate a scale


    var fieldDef = model.fieldDef(channel);
    var sort = fieldDef.sort; // if the sort is specified with array, use the derived sort index field

    if (isSortArray(sort)) {
      return {
        op: 'min',
        field: sortArrayIndexField(fieldDef, channel),
        order: 'ascending'
      };
    }

    var stack = model.stack;
    var stackDimensions = stack ? [].concat(_toConsumableArray(stack.groupbyField ? [stack.groupbyField] : []), _toConsumableArray(stack.stackBy.map(function (s) {
      return s.fieldDef.field;
    }))) : undefined; // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)

    if (isSortField(sort)) {
      var isStackedMeasure = stack && !contains$1(stackDimensions, sort.field);
      return normalizeSortField(sort, isStackedMeasure);
    } else if (isSortByEncoding(sort)) {
      var encoding = sort.encoding,
          order = sort.order;
      var fieldDefToSortBy = model.fieldDef(encoding);
      var aggregate = fieldDefToSortBy.aggregate,
          field = fieldDefToSortBy.field;

      var _isStackedMeasure = stack && !contains$1(stackDimensions, field);

      if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {
        return normalizeSortField({
          field: vgField(fieldDefToSortBy),
          order: order
        }, _isStackedMeasure);
      } else if (isAggregateOp(aggregate) || !aggregate) {
        return normalizeSortField({
          op: aggregate,
          field: field,
          order: order
        }, _isStackedMeasure);
      }
    } else if (sort === 'descending') {
      return {
        op: 'min',
        field: model.vgField(channel),
        order: 'descending'
      };
    } else if (contains$1(['ascending', undefined
    /* default =ascending*/
    ], sort)) {
      return true;
    } // sort == null


    return undefined;
  }
  /**
   * Determine if a scale can use unaggregated domain.
   * @return {Boolean} Returns true if all of the following conditions apply:
   * 1. `scale.domain` is `unaggregated`
   * 2. Aggregation function is not `count` or `sum`
   * 3. The scale is quantitative or time scale.
   */

  function canUseUnaggregatedDomain(fieldDef, scaleType) {
    var aggregate = fieldDef.aggregate,
        type = fieldDef.type;

    if (!aggregate) {
      return {
        valid: false,
        reason: message.unaggregateDomainHasNoEffectForRawField(fieldDef)
      };
    }

    if (isString(aggregate) && !SHARED_DOMAIN_OP_INDEX[aggregate]) {
      return {
        valid: false,
        reason: message.unaggregateDomainWithNonSharedDomainOp(aggregate)
      };
    }

    if (type === 'quantitative') {
      if (scaleType === 'log') {
        return {
          valid: false,
          reason: message.unaggregatedDomainWithLogScale(fieldDef)
        };
      }
    }

    return {
      valid: true
    };
  }
  /**
   * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.
   */

  function domainsTieBreaker(v1, v2, property, propertyOf) {
    if (v1.explicit && v2.explicit) {
      warn$1(message.mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));
    } // If equal score, concat the domains so that we union them later.


    return {
      explicit: v1.explicit,
      value: [].concat(_toConsumableArray(v1.value), _toConsumableArray(v2.value))
    };
  }
  /**
   * Converts an array of domains to a single Vega scale domain.
   */


  function mergeDomains(domains) {
    var uniqueDomains = unique(domains.map(function (domain) {
      // ignore sort property when computing the unique domains
      if (isDataRefDomain(domain)) {
        var _s = domain.sort,
            domainWithoutSort = __rest(domain, ["sort"]);

        return domainWithoutSort;
      }

      return domain;
    }), hash);
    var sorts = unique(domains.map(function (d) {
      if (isDataRefDomain(d)) {
        var s = d.sort;

        if (s !== undefined && !isBoolean$3(s)) {
          if ('op' in s && s.op === 'count') {
            // let's make sure that if op is count, we don't use a field
            delete s.field;
          }

          if (s.order === 'ascending') {
            // drop order: ascending as it is the default
            delete s.order;
          }
        }

        return s;
      }

      return undefined;
    }).filter(function (s) {
      return s !== undefined;
    }), hash);

    if (uniqueDomains.length === 0) {
      return undefined;
    } else if (uniqueDomains.length === 1) {
      var domain = domains[0];

      if (isDataRefDomain(domain) && sorts.length > 0) {
        var _sort = sorts[0];

        if (sorts.length > 1) {
          warn$1(message.MORE_THAN_ONE_SORT);
          _sort = true;
        } else {
          // Simplify domain sort by removing field and op when the field is the same as the domain field.
          if (isObject(_sort) && 'field' in _sort) {
            var sortField = _sort.field;

            if (domain.field === sortField) {
              _sort = _sort.order ? {
                order: _sort.order
              } : true;
            }
          }
        }

        return _extends(_extends({}, domain), {
          sort: _sort
        });
      }

      return domain;
    } // only keep sort properties that work with unioned domains


    var unionDomainSorts = unique(sorts.map(function (s) {
      if (isBoolean$3(s) || !('op' in s) || s.op in MULTIDOMAIN_SORT_OP_INDEX) {
        return s;
      }

      warn$1(message.domainSortDropped(s));
      return true;
    }), hash);
    var sort;

    if (unionDomainSorts.length === 1) {
      sort = unionDomainSorts[0];
    } else if (unionDomainSorts.length > 1) {
      warn$1(message.MORE_THAN_ONE_SORT);
      sort = true;
    }

    var allData = unique(domains.map(function (d) {
      if (isDataRefDomain(d)) {
        return d.data;
      }

      return null;
    }), function (x) {
      return x;
    });

    if (allData.length === 1 && allData[0] !== null) {
      // create a union domain of different fields with a single data source
      var _domain = _extends({
        data: allData[0],
        fields: uniqueDomains.map(function (d) {
          return d.field;
        })
      }, sort ? {
        sort: sort
      } : {});

      return _domain;
    }

    return _extends({
      fields: uniqueDomains
    }, sort ? {
      sort: sort
    } : {});
  }
  /**
   * Return a field if a scale uses a single field.
   * Return `undefined` otherwise.
   */

  function getFieldFromDomain(domain) {
    if (isDataRefDomain(domain) && isString(domain.field)) {
      return domain.field;
    } else if (isDataRefUnionedDomain(domain)) {
      var field;

      var _iterator6 = _createForOfIteratorHelper(domain.fields),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var nonUnionDomain = _step6.value;

          if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {
            if (!field) {
              field = nonUnionDomain.field;
            } else if (field !== nonUnionDomain.field) {
              warn$1('Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.');
              return field;
            }
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      warn$1('Detected faceted independent scales that union domain of identical fields from different source detected. We will assume that this is the same field from a different fork of the same data source. However, if this is not case, the result view size maybe incorrect.');
      return field;
    } else if (isFieldRefUnionDomain(domain)) {
      warn$1('Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.');
      var _field = domain.fields[0];
      return isString(_field) ? _field : undefined;
    }

    return undefined;
  }
  function assembleDomain(model, channel) {
    var scaleComponent = model.component.scales[channel];
    var domains = scaleComponent.get('domains').map(function (domain) {
      // Correct references to data as the original domain's data was determined
      // in parseScale, which happens before parseData. Thus the original data
      // reference can be incorrect.
      if (isDataRefDomain(domain)) {
        domain.data = model.lookupDataSource(domain.data);
      }

      return domain;
    }); // domains is an array that has to be merged into a single vega domain

    return mergeDomains(domains);
  }

  function assembleScales(model) {
    if (isLayerModel(model) || isConcatModel(model)) {
      // For concat and layer, include scales of children too
      return model.children.reduce(function (scales, child) {
        return scales.concat(assembleScales(child));
      }, assembleScalesForModel(model));
    } else {
      // For facet, child scales would not be included in the parent's scope.
      // For unit, there is no child.
      return assembleScalesForModel(model);
    }
  }
  function assembleScalesForModel(model) {
    return keys$2(model.component.scales).reduce(function (scales, channel) {
      var scaleComponent = model.component.scales[channel];

      if (scaleComponent.merged) {
        // Skipped merged scales
        return scales;
      }

      var scale = scaleComponent.combine();

      var name = scale.name,
          type = scale.type,
          selectionExtent = scale.selectionExtent,
          _d = scale.domains,
          _r = scale.range,
          reverse = scale.reverse,
          otherScaleProps = __rest(scale, ["name", "type", "selectionExtent", "domains", "range", "reverse"]);

      var range = assembleScaleRange(scale.range, name, channel);
      var domainRaw;

      if (selectionExtent) {
        domainRaw = assembleSelectionScaleDomain(model, selectionExtent);
      }

      var domain = assembleDomain(model, channel);
      scales.push(_extends(_extends(_extends(_extends(_extends({
        name: name,
        type: type
      }, domain ? {
        domain: domain
      } : {}), domainRaw ? {
        domainRaw: domainRaw
      } : {}), {
        range: range
      }), reverse !== undefined ? {
        reverse: reverse
      } : {}), otherScaleProps));
      return scales;
    }, []);
  }
  function assembleScaleRange(scaleRange, scaleName, channel) {
    // add signals to x/y range
    if (isXorY(channel)) {
      if (isVgRangeStep(scaleRange)) {
        // For width/height step, use a signal created in layout assemble instead of a constant step.
        return {
          step: {
            signal: scaleName + '_step'
          }
        };
      }
    }

    return scaleRange;
  }

  var ScaleComponent = /*#__PURE__*/function (_Split) {
    _inherits(ScaleComponent, _Split);

    var _super = _createSuper(ScaleComponent);

    function ScaleComponent(name, typeWithExplicit) {
      var _this;

      _classCallCheck(this, ScaleComponent);

      _this = _super.call(this, {}, // no initial explicit property
      {
        name: name
      } // name as initial implicit property
      );
      _this.merged = false;

      _this.setWithExplicit('type', typeWithExplicit);

      return _this;
    }
    /**
     * Whether the scale definitely includes zero in the domain
     */


    _createClass(ScaleComponent, [{
      key: "domainDefinitelyIncludesZero",
      value: function domainDefinitelyIncludesZero() {
        if (this.get('zero') !== false) {
          return true;
        }

        return some(this.get('domains'), function (d) {
          return isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0;
        });
      }
    }]);

    return ScaleComponent;
  }(Split);

  var RANGE_PROPERTIES = ['range', 'scheme'];

  function getSizeChannel$1(channel) {
    return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
  }

  function parseUnitScaleRange(model) {
    var localScaleComponents = model.component.scales; // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!

    var _iterator = _createForOfIteratorHelper(SCALE_CHANNELS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;
        var localScaleCmpt = localScaleComponents[channel];

        if (!localScaleCmpt) {
          continue;
        }

        var rangeWithExplicit = parseRangeForChannel(channel, model);
        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  function getBinStepSignal(model, channel) {
    var fieldDef = model.fieldDef(channel);

    if (fieldDef && fieldDef.bin && isBinning(fieldDef.bin)) {
      var binSignal = getBinSignalName(model, fieldDef.field, fieldDef.bin); // TODO: extract this to be range step signal

      var sizeType = getSizeChannel$1(channel);
      var sizeSignal = model.getName(sizeType);
      return new SignalRefWrapper(function () {
        var updatedName = model.getSignalName(binSignal);
        var binCount = "(".concat(updatedName, ".stop - ").concat(updatedName, ".start) / ").concat(updatedName, ".step");
        return "".concat(model.getSignalName(sizeSignal), " / (").concat(binCount, ")");
      });
    }

    return undefined;
  }
  /**
   * Return mixins that includes one of the Vega range types (explicit range, range.step, range.scheme).
   */


  function parseRangeForChannel(channel, model) {
    var specifiedScale = model.specifiedScales[channel];
    var size = model.size;
    var mergedScaleCmpt = model.getScaleComponent(channel);
    var scaleType = mergedScaleCmpt.get('type'); // Check if any of the range properties is specified.
    // If so, check if it is compatible and make sure that we only output one of the properties

    var _iterator2 = _createForOfIteratorHelper(RANGE_PROPERTIES),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var property = _step2.value;

        if (specifiedScale[property] !== undefined) {
          var supportedByScaleType = scaleTypeSupportProperty(scaleType, property);
          var channelIncompatability = channelScalePropertyIncompatability(channel, property);

          if (!supportedByScaleType) {
            warn$1(message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));
          } else if (channelIncompatability) {
            // channel
            warn$1(channelIncompatability);
          } else {
            switch (property) {
              case 'range':
                if (isArray(specifiedScale.range) && isXorY(channel)) {
                  return makeExplicit(specifiedScale.range.map(function (v) {
                    if (v === 'width' || v === 'height') {
                      // get signal for width/height
                      // Just like default range logic below, we use SignalRefWrapper to account for potential merges and renames.
                      var sizeSignal = model.getName(v);
                      var getSignalName = model.getSignalName.bind(model);
                      return SignalRefWrapper.fromName(getSignalName, sizeSignal);
                    }

                    return v;
                  }));
                }

                return makeExplicit(specifiedScale.range);

              case 'scheme':
                return makeExplicit(parseScheme(specifiedScale[property]));
            }
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    if (channel === X$1 || channel === Y$1) {
      var sizeChannel = channel === X$1 ? 'width' : 'height';
      var sizeValue = size[sizeChannel];

      if (isStep(sizeValue)) {
        if (hasDiscreteDomain(scaleType)) {
          return makeExplicit({
            step: sizeValue.step
          });
        } else {
          warn$1(message.stepDropped(sizeChannel));
        }
      }
    }

    return makeImplicit(defaultRange(channel, model));
  }

  function parseScheme(scheme) {
    if (isExtendedScheme(scheme)) {
      return _extends({
        scheme: scheme.name
      }, omit(scheme, ['name']));
    }

    return {
      scheme: scheme
    };
  }

  function defaultRange(channel, model) {
    var size = model.size,
        config = model.config,
        mark = model.mark,
        encoding = model.encoding;
    var getSignalName = model.getSignalName.bind(model);

    var _getFieldOrDatumDef = getFieldOrDatumDef(encoding[channel]),
        type = _getFieldOrDatumDef.type;

    var mergedScaleCmpt = model.getScaleComponent(channel);
    var scaleType = mergedScaleCmpt.get('type');
    var _model$specifiedScale = model.specifiedScales[channel],
        domain = _model$specifiedScale.domain,
        domainMid = _model$specifiedScale.domainMid;

    switch (channel) {
      case X$1:
      case Y$1:
        {
          // If there is no explicit width/height for discrete x/y scales
          if (contains$1(['point', 'band'], scaleType)) {
            if (channel === X$1 && !size.width) {
              var w = getViewConfigDiscreteSize(config.view, 'width');

              if (isStep(w)) {
                return w;
              }
            } else if (channel === Y$1 && !size.height) {
              var h = getViewConfigDiscreteSize(config.view, 'height');

              if (isStep(h)) {
                return h;
              }
            }
          } // If step is null, use zero to width or height.
          // Note that we use SignalRefWrapper to account for potential merges and renames.


          var sizeType = getSizeChannel$1(channel);
          var sizeSignal = model.getName(sizeType);

          if (channel === Y$1 && hasContinuousDomain(scaleType)) {
            // For y continuous scale, we have to start from the height as the bottom part has the max value.
            return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];
          } else {
            return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];
          }
        }

      case SIZE:
        {
          // TODO: support custom rangeMin, rangeMax
          var zero = model.component.scales[channel].get('zero');
          var rangeMin = sizeRangeMin(mark, zero, config);
          var rangeMax = sizeRangeMax(mark, size, model, config);

          if (isContinuousToDiscrete(scaleType)) {
            return interpolateRange$1(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));
          } else {
            return [rangeMin, rangeMax];
          }
        }

      case THETA:
        return [0, Math.PI * 2];

      case ANGLE:
        // TODO: add config.scale.min/maxAngleDegree (for point and text) and config.scale.min/maxAngleRadian (for arc) once we add arc marks.
        // (It's weird to add just config.scale.min/maxAngleDegree for now)
        return [0, 360];

      case RADIUS:
        {
          // max radius = half od min(width,height)
          return [0, new SignalRefWrapper(function () {
            var w = model.getSignalName('width');
            var h = model.getSignalName('height');
            return "min(".concat(w, ",").concat(h, ")/2");
          })];
        }

      case STROKEWIDTH:
        // TODO: support custom rangeMin, rangeMax
        return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];

      case STROKEDASH:
        return [// TODO: add this to Vega's config.range?
        [1, 0], [4, 2], [2, 1], [1, 1], [1, 2, 4, 2]];

      case SHAPE:
        return 'symbol';

      case COLOR:
      case FILL:
      case STROKE:
        if (scaleType === 'ordinal') {
          // Only nominal data uses ordinal scale by default
          return type === 'nominal' ? 'category' : 'ordinal';
        } else {
          if (domainMid !== undefined) {
            return 'diverging';
          } else {
            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';
          }
        }

      case OPACITY:
      case FILLOPACITY:
      case STROKEOPACITY:
        // TODO: support custom rangeMin, rangeMax
        return [config.scale.minOpacity, config.scale.maxOpacity];
    }
    /* istanbul ignore next: should never reach here */


    throw new Error("Scale range undefined for channel ".concat(channel));
  }

  function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {
    switch (scaleType) {
      case 'quantile':
        return config.scale.quantileCount;

      case 'quantize':
        return config.scale.quantizeCount;

      case 'threshold':
        if (domain !== undefined && isArray(domain)) {
          return domain.length + 1;
        } else {
          warn$1(message.domainRequiredForThresholdScale(channel)); // default threshold boundaries for threshold scale since domain has cardinality of 2

          return 3;
        }

    }
  }
  /**
   * Returns the linear interpolation of the range according to the cardinality
   *
   * @param rangeMin start of the range
   * @param rangeMax end of the range
   * @param cardinality number of values in the output range
   */

  function interpolateRange$1(rangeMin, rangeMax, cardinality) {
    // always return a signal since it's better to compute the sequence in Vega later
    var f = function f() {
      var rMax = isSignalRef(rangeMax) ? rangeMax.signal : rangeMax;
      var rMin = isSignalRef(rangeMin) ? rangeMin.signal : rangeMin;
      var step = "(".concat(rMax, " - ").concat(rMin, ") / (").concat(cardinality, " - 1)");
      return "sequence(".concat(rMin, ", ").concat(rMax, " + ").concat(step, ", ").concat(step, ")");
    };

    if (isSignalRef(rangeMax)) {
      return new SignalRefWrapper(f);
    } else {
      return {
        signal: f()
      };
    }
  }

  function sizeRangeMin(mark, zero, config) {
    if (zero) {
      if (isSignalRef(zero)) {
        return {
          signal: "".concat(zero.signal, " ? 0 : ").concat(sizeRangeMin(mark, false, config))
        };
      } else {
        return 0;
      }
    }

    switch (mark) {
      case 'bar':
      case 'tick':
        return config.scale.minBandSize;

      case 'line':
      case 'trail':
      case 'rule':
        return config.scale.minStrokeWidth;

      case 'text':
        return config.scale.minFontSize;

      case 'point':
      case 'square':
      case 'circle':
        return config.scale.minSize;
    }
    /* istanbul ignore next: should never reach here */
    // sizeRangeMin not implemented for the mark


    throw new Error(message.incompatibleChannel('size', mark));
  }

  var MAX_SIZE_RANGE_STEP_RATIO = 0.95;

  function sizeRangeMax(mark, size, model, config) {
    var xyStepSignals = {
      x: getBinStepSignal(model, 'x'),
      y: getBinStepSignal(model, 'y')
    };

    switch (mark) {
      case 'bar':
      case 'tick':
        {
          if (config.scale.maxBandSize !== undefined) {
            return config.scale.maxBandSize;
          }

          var min = minXYStep(size, xyStepSignals, config.view);

          if (isNumber(min)) {
            return min - 1;
          } else {
            return new SignalRefWrapper(function () {
              return "".concat(min.signal, " - 1");
            });
          }
        }

      case 'line':
      case 'trail':
      case 'rule':
        return config.scale.maxStrokeWidth;

      case 'text':
        return config.scale.maxFontSize;

      case 'point':
      case 'square':
      case 'circle':
        {
          if (config.scale.maxSize) {
            return config.scale.maxSize;
          }

          var pointStep = minXYStep(size, xyStepSignals, config.view);

          if (isNumber(pointStep)) {
            return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);
          } else {
            return new SignalRefWrapper(function () {
              return "pow(".concat(MAX_SIZE_RANGE_STEP_RATIO, " * ").concat(pointStep.signal, ", 2)");
            });
          }
        }
    }
    /* istanbul ignore next: should never reach here */
    // sizeRangeMax not implemented for the mark


    throw new Error(message.incompatibleChannel('size', mark));
  }
  /**
   * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.
   */


  function minXYStep(size, xyStepSignals, viewConfig) {
    var widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, 'width');
    var heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, 'height');

    if (xyStepSignals.x || xyStepSignals.y) {
      return new SignalRefWrapper(function () {
        var exprs = [xyStepSignals.x ? xyStepSignals.x.signal : widthStep, xyStepSignals.y ? xyStepSignals.y.signal : heightStep];
        return "min(".concat(exprs.join(', '), ")");
      });
    }

    return Math.min(widthStep, heightStep);
  }

  function parseScaleProperty(model, property) {
    if (isUnitModel(model)) {
      parseUnitScaleProperty(model, property);
    } else {
      parseNonUnitScaleProperty(model, property);
    }
  }

  function parseUnitScaleProperty(model, property) {
    var localScaleComponents = model.component.scales;
    var config = model.config,
        encoding = model.encoding,
        markDef = model.markDef,
        specifiedScales = model.specifiedScales;

    var _iterator = _createForOfIteratorHelper(keys$2(localScaleComponents)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;
        var specifiedScale = specifiedScales[channel];
        var localScaleCmpt = localScaleComponents[channel];
        var mergedScaleCmpt = model.getScaleComponent(channel);
        var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);
        var specifiedValue = specifiedScale[property];
        var sType = mergedScaleCmpt.get('type');
        var supportedByScaleType = scaleTypeSupportProperty(sType, property);
        var channelIncompatability = channelScalePropertyIncompatability(channel, property);

        if (specifiedValue !== undefined) {
          // If there is a specified value, check if it is compatible with scale type and channel
          if (!supportedByScaleType) {
            warn$1(message.scalePropertyNotWorkWithScaleType(sType, property, channel));
          } else if (channelIncompatability) {
            // channel
            warn$1(channelIncompatability);
          }
        }

        if (supportedByScaleType && channelIncompatability === undefined) {
          if (specifiedValue !== undefined) {
            // copyKeyFromObject ensures type safety
            localScaleCmpt.copyKeyFromObject(property, specifiedScale);
          } else {
            var value = getDefaultValue(property, model, channel, fieldOrDatumDef, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, markDef, config);

            if (value !== undefined) {
              localScaleCmpt.set(property, value, false);
            }
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } // Note: This method is used in Voyager.


  function getDefaultValue(property, model, channel, fieldOrDatumDef, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {
    var scaleConfig = config.scale;
    var type = fieldOrDatumDef.type; // If we have default rule-base, determine default value first

    switch (property) {
      case 'bins':
        return isFieldDef(fieldOrDatumDef) ? bins(model, fieldOrDatumDef) : undefined;

      case 'interpolate':
        return interpolate$2(channel, type);

      case 'nice':
        return nice$1(scaleType, channel, fieldOrDatumDef);

      case 'padding':
        return padding$1(channel, scaleType, scaleConfig, fieldOrDatumDef, markDef, config.bar);

      case 'paddingInner':
        return paddingInner(scalePadding, channel, markDef.type, scaleConfig);

      case 'paddingOuter':
        return paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, scaleConfig);

      case 'reverse':
        {
          var sort = isFieldDef(fieldOrDatumDef) ? fieldOrDatumDef.sort : undefined;
          return reverse$1(scaleType, sort, channel, scaleConfig);
        }

      case 'zero':
        return zero$5(channel, fieldOrDatumDef, specifiedDomain, markDef, scaleType);
    } // Otherwise, use scale config


    return scaleConfig[property];
  } // This method is here rather than in range.ts to avoid circular dependency.

  function parseScaleRange$1(model) {
    if (isUnitModel(model)) {
      parseUnitScaleRange(model);
    } else {
      parseNonUnitScaleProperty(model, 'range');
    }
  }
  function parseNonUnitScaleProperty(model, property) {
    var localScaleComponents = model.component.scales;

    var _iterator2 = _createForOfIteratorHelper(model.children),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var child = _step2.value;

        if (property === 'range') {
          parseScaleRange$1(child);
        } else {
          parseScaleProperty(child, property);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var _iterator3 = _createForOfIteratorHelper(keys$2(localScaleComponents)),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var channel = _step3.value;
        var valueWithExplicit = void 0;

        var _iterator4 = _createForOfIteratorHelper(model.children),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _child = _step4.value;
            var childComponent = _child.component.scales[channel];

            if (childComponent) {
              var childValueWithExplicit = childComponent.getWithExplicit(property);
              valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing(function (v1, v2) {
                switch (property) {
                  case 'range':
                    // For step, prefer larger step
                    if (v1.step && v2.step) {
                      return v1.step - v2.step;
                    }

                    return 0;
                  // TODO: precedence rule for other properties
                }

                return 0;
              }));
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
  function bins(model, fieldDef) {
    var bin = fieldDef.bin;

    if (isBinning(bin)) {
      var binSignal = getBinSignalName(model, fieldDef.field, bin);
      return new SignalRefWrapper(function () {
        return model.getSignalName(binSignal);
      });
    } else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {
      // start and stop will be determined from the scale domain
      return {
        step: bin.step
      };
    }

    return undefined;
  }
  function interpolate$2(channel, type) {
    if (contains$1([COLOR, FILL, STROKE], channel) && type !== 'nominal') {
      return 'hcl';
    }

    return undefined;
  }
  function nice$1(scaleType, channel, fieldOrDatumDef) {
    var _a;

    if (((_a = getFieldDef(fieldOrDatumDef)) === null || _a === void 0 ? void 0 : _a.bin) || contains$1([ScaleType.TIME, ScaleType.UTC], scaleType)) {
      return undefined;
    }

    return contains$1([X$1, Y$1], channel) ? true : undefined;
  }
  function padding$1(channel, scaleType, scaleConfig, fieldOrDatumDef, markDef, barConfig) {
    if (contains$1([X$1, Y$1], channel)) {
      if (isContinuousToContinuous(scaleType)) {
        if (scaleConfig.continuousPadding !== undefined) {
          return scaleConfig.continuousPadding;
        }

        var type = markDef.type,
            orient = markDef.orient;

        if (type === 'bar' && !(isFieldDef(fieldOrDatumDef) && (fieldOrDatumDef.bin || fieldOrDatumDef.timeUnit))) {
          if (orient === 'vertical' && channel === 'x' || orient === 'horizontal' && channel === 'y') {
            return barConfig.continuousBandSize;
          }
        }
      }

      if (scaleType === ScaleType.POINT) {
        return scaleConfig.pointPadding;
      }
    }

    return undefined;
  }
  function paddingInner(paddingValue, channel, mark, scaleConfig) {
    if (paddingValue !== undefined) {
      // If user has already manually specified "padding", no need to add default paddingInner.
      return undefined;
    }

    if (contains$1([X$1, Y$1], channel)) {
      // Padding is only set for X and Y by default.
      // Basically it doesn't make sense to add padding for color and size.
      // paddingOuter would only be called if it's a band scale, just return the default for bandScale.
      var bandPaddingInner = scaleConfig.bandPaddingInner,
          barBandPaddingInner = scaleConfig.barBandPaddingInner,
          rectBandPaddingInner = scaleConfig.rectBandPaddingInner;
      return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);
    }

    return undefined;
  }
  function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {
    if (paddingValue !== undefined) {
      // If user has already manually specified "padding", no need to add default paddingOuter.
      return undefined;
    }

    if (contains$1([X$1, Y$1], channel)) {
      // Padding is only set for X and Y by default.
      // Basically it doesn't make sense to add padding for color and size.
      if (scaleType === ScaleType.BAND) {
        var bandPaddingOuter = scaleConfig.bandPaddingOuter;
        return getFirstDefined(bandPaddingOuter,
        /* By default, paddingOuter is paddingInner / 2. The reason is that
          size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
          and we want the width/height to be integer by default.
          Note that step (by default) and cardinality are integers.) */
        isSignalRef(paddingInnerValue) ? {
          signal: "".concat(paddingInnerValue.signal, "/2")
        } : paddingInnerValue / 2);
      }
    }

    return undefined;
  }
  function reverse$1(scaleType, sort, channel, scaleConfig) {
    if (channel === 'x' && scaleConfig.xReverse !== undefined) {
      if (hasContinuousDomain(scaleType) && sort === 'descending') {
        if (isSignalRef(scaleConfig.xReverse)) {
          return {
            signal: "!".concat(scaleConfig.xReverse.signal)
          };
        } else {
          return !scaleConfig.xReverse;
        }
      }

      return scaleConfig.xReverse;
    }

    if (hasContinuousDomain(scaleType) && sort === 'descending') {
      // For continuous domain scales, Vega does not support domain sort.
      // Thus, we reverse range instead if sort is descending
      return true;
    }

    return undefined;
  }
  function zero$5(channel, fieldDef, specifiedDomain, markDef, scaleType) {
    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.
    var hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';

    if (hasCustomDomain) {
      if (hasContinuousDomain(scaleType)) {
        if (isArray(specifiedDomain)) {
          var first = specifiedDomain[0];
          var last = specifiedDomain[specifiedDomain.length - 1];

          if (first <= 0 && last >= 0) {
            // if the domain includes zero, make zero remains true
            return true;
          }
        }

        return false;
      }
    } // If there is no custom domain, return true only for the following cases:
    // 1) using quantitative field with size
    // While this can be either ratio or interval fields, our assumption is that
    // ratio are more common. However, if the scaleType is discretizing scale, we want to return
    // false so that range doesn't start at zero


    if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {
      return true;
    } // 2) non-binned, quantitative x-scale or y-scale
    // (For binning, we should not include zero by default because binning are calculated without zero.)


    if (!(isFieldDef(fieldDef) && fieldDef.bin) && contains$1([X$1, Y$1, THETA, RADIUS], channel)) {
      var orient = markDef.orient,
          type = markDef.type;

      if (contains$1(['bar', 'area', 'line', 'trail'], type)) {
        if (orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x') {
          return false;
        }
      }

      return true;
    }

    return false;
  }

  /**
   * Determine if there is a specified scale type and if it is appropriate,
   * or determine default type if type is unspecified or inappropriate.
   */
  // NOTE: CompassQL uses this method.

  function scaleType(specifiedScale, channel, fieldDef, mark) {
    var defaultScaleType = defaultType$2(channel, fieldDef, mark);
    var type = specifiedScale.type;

    if (!isScaleChannel(channel)) {
      // There is no scale for these channels
      return null;
    }

    if (type !== undefined) {
      // Check if explicitly specified scale type is supported by the channel
      if (!channelSupportScaleType(channel, type)) {
        warn$1(message.scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));
        return defaultScaleType;
      } // Check if explicitly specified scale type is supported by the data type


      if (isFieldDef(fieldDef) && !scaleTypeSupportDataType(type, fieldDef.type)) {
        warn$1(message.scaleTypeNotWorkWithFieldDef(type, defaultScaleType));
        return defaultScaleType;
      }

      return type;
    }

    return defaultScaleType;
  }
  /**
   * Determine appropriate default scale type.
   */
  // NOTE: Voyager uses this method.

  function defaultType$2(channel, fieldDef, mark) {
    var _a;

    switch (fieldDef.type) {
      case 'nominal':
      case 'ordinal':
        if (isColorChannel(channel) || rangeType(channel) === 'discrete') {
          if (channel === 'shape' && fieldDef.type === 'ordinal') {
            warn$1(message.discreteChannelCannotEncode(channel, 'ordinal'));
          }

          return 'ordinal';
        }

        if (contains$1(['x', 'y'], channel)) {
          if (contains$1(['rect', 'bar', 'image', 'rule'], mark)) {
            // The rect/bar mark should fit into a band.
            // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429
            return 'band';
          }
        } else if (mark === 'arc' && contains$1(['theta', 'radius'], channel)) {
          return 'band';
        }

        if (fieldDef.band !== undefined || isPositionFieldOrDatumDef(fieldDef) && ((_a = fieldDef.axis) === null || _a === void 0 ? void 0 : _a.tickBand)) {
          return 'band';
        } // Otherwise, use ordinal point scale so we can easily get center positions of the marks.


        return 'point';

      case 'temporal':
        if (isColorChannel(channel)) {
          return 'time';
        } else if (rangeType(channel) === 'discrete') {
          warn$1(message.discreteChannelCannotEncode(channel, 'temporal')); // TODO: consider using quantize (equivalent to binning) once we have it

          return 'ordinal';
        } else if (isFieldDef(fieldDef) && fieldDef.timeUnit && normalizeTimeUnit(fieldDef.timeUnit).utc) {
          return 'utc';
        }

        return 'time';

      case 'quantitative':
        if (isColorChannel(channel)) {
          if (isFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
            return 'bin-ordinal';
          }

          return 'linear';
        } else if (rangeType(channel) === 'discrete') {
          warn$1(message.discreteChannelCannotEncode(channel, 'quantitative')); // TODO: consider using quantize (equivalent to binning) once we have it

          return 'ordinal';
        }

        return 'linear';

      case 'geojson':
        return undefined;
    }
    /* istanbul ignore next: should never reach this */


    throw new Error(message.invalidFieldType(fieldDef.type));
  }

  function parseScales(model) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        ignoreRange = _ref.ignoreRange;

    parseScaleCore(model);
    parseScaleDomain$1(model);

    var _iterator = _createForOfIteratorHelper(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prop = _step.value;
        parseScaleProperty(model, prop);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (!ignoreRange) {
      // range depends on zero
      parseScaleRange$1(model);
    }
  }
  function parseScaleCore(model) {
    if (isUnitModel(model)) {
      model.component.scales = parseUnitScaleCore(model);
    } else {
      model.component.scales = parseNonUnitScaleCore(model);
    }
  }
  /**
   * Parse scales for all channels of a model.
   */

  function parseUnitScaleCore(model) {
    var encoding = model.encoding,
        mark = model.mark;
    return SCALE_CHANNELS.reduce(function (scaleComponents, channel) {
      var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]); // must be typed def to have scale
      // Don't generate scale for shape of geoshape

      if (fieldOrDatumDef && mark === GEOSHAPE && channel === SHAPE && fieldOrDatumDef.type === GEOJSON) {
        return scaleComponents;
      }

      var specifiedScale = fieldOrDatumDef && fieldOrDatumDef['scale'];

      if (fieldOrDatumDef && specifiedScale !== null && specifiedScale !== false) {
        specifiedScale = specifiedScale !== null && specifiedScale !== void 0 ? specifiedScale : {};
        var sType = scaleType(specifiedScale, channel, fieldOrDatumDef, mark);
        scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {
          value: sType,
          explicit: specifiedScale.type === sType
        });
      }

      return scaleComponents;
    }, {});
  }

  var scaleTypeTieBreaker = tieBreakByComparing(function (st1, st2) {
    return scaleTypePrecedence(st1) - scaleTypePrecedence(st2);
  });

  function parseNonUnitScaleCore(model) {
    var _a;

    var scaleComponents = model.component.scales = {};
    var scaleTypeWithExplicitIndex = {};
    var resolve = model.component.resolve; // Parse each child scale and determine if a particular channel can be merged.

    var _iterator2 = _createForOfIteratorHelper(model.children),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var child = _step2.value;
        parseScaleCore(child); // Instead of always merging right away -- check if it is compatible to merge first!

        var _iterator4 = _createForOfIteratorHelper(keys$2(child.component.scales)),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var channel = _step4.value;
            // if resolve is undefined, set default first
            resolve.scale[channel] = (_a = resolve.scale[channel]) !== null && _a !== void 0 ? _a : defaultScaleResolve(channel, model);

            if (resolve.scale[channel] === 'shared') {
              var explicitScaleType = scaleTypeWithExplicitIndex[channel];
              var childScaleType = child.component.scales[channel].getWithExplicit('type');

              if (explicitScaleType) {
                if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {
                  // merge scale component if type are compatible
                  scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);
                } else {
                  // Otherwise, update conflicting channel to be independent
                  resolve.scale[channel] = 'independent'; // Remove from the index so they don't get merged

                  delete scaleTypeWithExplicitIndex[channel];
                }
              } else {
                scaleTypeWithExplicitIndex[channel] = childScaleType;
              }
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } // Merge each channel listed in the index

    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var _iterator3 = _createForOfIteratorHelper(keys$2(scaleTypeWithExplicitIndex)),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _channel = _step3.value;
        // Create new merged scale component
        var name = model.scaleName(_channel, true);
        var typeWithExplicit = scaleTypeWithExplicitIndex[_channel];
        scaleComponents[_channel] = new ScaleComponent(name, typeWithExplicit); // rename each child and mark them as merged

        var _iterator5 = _createForOfIteratorHelper(model.children),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _child = _step5.value;
            var childScale = _child.component.scales[_channel];

            if (childScale) {
              _child.renameScale(childScale.get('name'), name);

              childScale.merged = true;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return scaleComponents;
  }

  var NameMap = /*#__PURE__*/function () {
    function NameMap() {
      _classCallCheck(this, NameMap);

      this.nameMap = {};
    }

    _createClass(NameMap, [{
      key: "rename",
      value: function rename(oldName, newName) {
        this.nameMap[oldName] = newName;
      }
    }, {
      key: "has",
      value: function has(name) {
        return this.nameMap[name] !== undefined;
      }
    }, {
      key: "get",
      value: function get(name) {
        // If the name appears in the _nameMap, we need to read its new name.
        // We have to loop over the dict just in case the new name also gets renamed.
        while (this.nameMap[name] && name !== this.nameMap[name]) {
          name = this.nameMap[name];
        }

        return name;
      }
    }]);

    return NameMap;
  }();
  /*
    We use type guards instead of `instanceof` as `instanceof` makes
    different parts of the compiler depend on the actual implementation of
    the model classes, which in turn depend on different parts of the compiler.
    Thus, `instanceof` leads to circular dependency problems.

    On the other hand, type guards only make different parts of the compiler
    depend on the type of the model classes, but not the actual implementation.
  */

  function isUnitModel(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === 'unit';
  }
  function isFacetModel(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === 'facet';
  }
  function isConcatModel(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === 'concat';
  }
  function isLayerModel(model) {
    return (model === null || model === void 0 ? void 0 : model.type) === 'layer';
  }
  var Model = /*#__PURE__*/function () {
    function Model(spec, type, parent, parentGivenName, config, resolve, view) {
      var _this = this;

      _classCallCheck(this, Model);

      var _a, _b;

      this.type = type;
      this.parent = parent;
      this.config = config;
      this.view = view;
      this.children = [];
      /**
       * Corrects the data references in marks after assemble.
       */

      this.correctDataNames = function (mark) {
        // TODO: make this correct
        // for normal data references
        if (mark.from && mark.from.data) {
          mark.from.data = _this.lookupDataSource(mark.from.data);
        } // for access to facet data


        if (mark.from && mark.from.facet && mark.from.facet.data) {
          mark.from.facet.data = _this.lookupDataSource(mark.from.facet.data);
        }

        return mark;
      };

      this.parent = parent;
      this.config = config; // If name is not provided, always use parent's givenName to avoid name conflicts.

      this.name = (_a = spec.name) !== null && _a !== void 0 ? _a : parentGivenName;
      this.title = isText(spec.title) ? {
        text: spec.title
      } : spec.title; // Shared name maps

      this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
      this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
      this.signalNameMap = parent ? parent.signalNameMap : new NameMap();
      this.data = spec.data;
      this.description = spec.description;
      this.transforms = normalizeTransform((_b = spec.transform) !== null && _b !== void 0 ? _b : []);
      this.layout = type === 'layer' || type === 'unit' ? {} : extractCompositionLayout(spec, type, config);
      this.component = {
        data: {
          sources: parent ? parent.component.data.sources : [],
          outputNodes: parent ? parent.component.data.outputNodes : {},
          outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
          // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined
          isFaceted: isFacetSpec(spec) || parent && parent.component.data.isFaceted && spec.data === undefined
        },
        layoutSize: new Split(),
        layoutHeaders: {
          row: {},
          column: {},
          facet: {}
        },
        mark: null,
        resolve: _extends({
          scale: {},
          axis: {},
          legend: {}
        }, resolve ? duplicate(resolve) : {}),
        selection: null,
        scales: null,
        projection: null,
        axes: {},
        legends: {}
      };
    }

    _createClass(Model, [{
      key: "parse",
      value: function parse() {
        this.parseScale();
        this.parseLayoutSize(); // depends on scale

        this.renameTopLevelLayoutSizeSignal();
        this.parseSelections();
        this.parseProjection();
        this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.

        this.parseAxesAndHeaders(); // depends on scale and layout size

        this.parseLegends(); // depends on scale, markDef

        this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.
      }
    }, {
      key: "parseScale",
      value: function parseScale() {
        parseScales(this);
      }
    }, {
      key: "parseProjection",
      value: function parseProjection() {
        parseProjection$1(this);
      }
      /**
       * Rename top-level spec's size to be just width / height, ignoring model name.
       * This essentially merges the top-level spec's width/height signals with the width/height signals
       * to help us reduce redundant signals declaration.
       */

    }, {
      key: "renameTopLevelLayoutSizeSignal",
      value: function renameTopLevelLayoutSizeSignal() {
        if (this.getName('width') !== 'width') {
          this.renameSignal(this.getName('width'), 'width');
        }

        if (this.getName('height') !== 'height') {
          this.renameSignal(this.getName('height'), 'height');
        }
      }
    }, {
      key: "parseLegends",
      value: function parseLegends() {
        parseLegend$1(this);
      }
    }, {
      key: "assembleGroupStyle",
      value: function assembleGroupStyle() {
        var _a, _b;

        if (this.type === 'unit' || this.type === 'layer') {
          return (_b = (_a = this.view) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : 'cell';
        }

        return undefined;
      }
    }, {
      key: "assembleEncodeFromView",
      value: function assembleEncodeFromView(view) {
        // Exclude "style"
        var _ = view.style,
            baseView = __rest(view, ["style"]);

        var e = {};

        var _iterator = _createForOfIteratorHelper(keys$2(baseView)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var property = _step.value;
            var value = baseView[property];

            if (value !== undefined) {
              e[property] = signalOrValueRef(value);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return e;
      }
    }, {
      key: "assembleGroupEncodeEntry",
      value: function assembleGroupEncodeEntry(isTopLevel) {
        var encodeEntry = undefined;

        if (this.view) {
          encodeEntry = this.assembleEncodeFromView(this.view);
        }

        if (!isTopLevel) {
          // For top-level spec, we can set the global width and height signal to adjust the group size.
          // For other child specs, we have to manually set width and height in the encode entry.
          if (this.type === 'unit' || this.type === 'layer') {
            return _extends({
              width: this.getSizeSignalRef('width'),
              height: this.getSizeSignalRef('height')
            }, encodeEntry !== null && encodeEntry !== void 0 ? encodeEntry : {});
          }
        }

        return encodeEntry;
      }
    }, {
      key: "assembleLayout",
      value: function assembleLayout() {
        if (!this.layout) {
          return undefined;
        }

        var _a = this.layout,
            spacing = _a.spacing,
            layout = __rest(_a, ["spacing"]);

        var component = this.component,
            config = this.config;
        var titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);
        return _extends(_extends(_extends({
          padding: spacing
        }, this.assembleDefaultLayout()), layout), titleBand ? {
          titleBand: titleBand
        } : {});
      }
    }, {
      key: "assembleDefaultLayout",
      value: function assembleDefaultLayout() {
        return {};
      }
    }, {
      key: "assembleHeaderMarks",
      value: function assembleHeaderMarks() {
        var layoutHeaders = this.component.layoutHeaders;
        var headerMarks = [];

        var _iterator2 = _createForOfIteratorHelper(FACET_CHANNELS),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var channel = _step2.value;

            if (layoutHeaders[channel].title) {
              headerMarks.push(assembleTitleGroup(this, channel));
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var _iterator3 = _createForOfIteratorHelper(HEADER_CHANNELS),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _channel = _step3.value;
            headerMarks = headerMarks.concat(assembleHeaderGroups(this, _channel));
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return headerMarks;
      }
    }, {
      key: "assembleAxes",
      value: function assembleAxes$1() {
        return assembleAxes(this.component.axes, this.config);
      }
    }, {
      key: "assembleLegends",
      value: function assembleLegends$1() {
        return assembleLegends(this);
      }
    }, {
      key: "assembleProjections",
      value: function assembleProjections$1() {
        return assembleProjections(this);
      }
    }, {
      key: "assembleTitle",
      value: function assembleTitle() {
        var _a, _b, _c;

        var _d = (_a = this.title) !== null && _a !== void 0 ? _a : {},
            encoding = _d.encoding,
            titleNoEncoding = __rest(_d, ["encoding"]);

        var title = _extends(_extends(_extends({}, extractTitleConfig(this.config.title).nonMark), titleNoEncoding), encoding ? {
          encode: {
            update: encoding
          }
        } : {});

        if (title.text) {
          if (contains$1(['unit', 'layer'], this.type)) {
            // Unit/Layer
            if (contains$1(['middle', undefined], title.anchor)) {
              title.frame = (_b = title.frame) !== null && _b !== void 0 ? _b : 'group';
            }
          } else {
            // composition with Vega layout
            // Set title = "start" by default for composition as "middle" does not look nice
            // https://github.com/vega/vega/issues/960#issuecomment-471360328
            title.anchor = (_c = title.anchor) !== null && _c !== void 0 ? _c : 'start';
          }

          return keys$2(title).length > 0 ? title : undefined;
        }

        return undefined;
      }
      /**
       * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
       */

    }, {
      key: "assembleGroup",
      value: function assembleGroup() {
        var signals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var group = {};
        signals = signals.concat(this.assembleSignals());

        if (signals.length > 0) {
          group.signals = signals;
        }

        var layout = this.assembleLayout();

        if (layout) {
          group.layout = layout;
        }

        group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks()); // Only include scales if this spec is top-level or if parent is facet.
        // (Otherwise, it will be merged with upper-level's scope.)

        var scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];

        if (scales.length > 0) {
          group.scales = scales;
        }

        var axes = this.assembleAxes();

        if (axes.length > 0) {
          group.axes = axes;
        }

        var legends = this.assembleLegends();

        if (legends.length > 0) {
          group.legends = legends;
        }

        return group;
      }
    }, {
      key: "getName",
      value: function getName(text) {
        return varName((this.name ? this.name + '_' : '') + text);
      }
      /**
       * Request a data source name for the given data source type and mark that data source as required.
       * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
       * You can lookup the correct dataset name in assemble with `lookupDataSource`.
       */

    }, {
      key: "requestDataName",
      value: function requestDataName(name) {
        var _a;

        var fullName = this.getName(name); // Increase ref count. This is critical because otherwise we won't create a data source.
        // We also increase the ref counts on OutputNode.getSource() calls.

        var refCounts = this.component.data.outputNodeRefCounts;
        refCounts[fullName] = ((_a = refCounts[fullName]) !== null && _a !== void 0 ? _a : 0) + 1;
        return fullName;
      }
    }, {
      key: "getSizeSignalRef",
      value: function getSizeSignalRef(layoutSizeType) {
        if (isFacetModel(this.parent)) {
          var sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
          var channel = getPositionScaleChannel(sizeType);
          var scaleComponent = this.component.scales[channel];

          if (scaleComponent && !scaleComponent.merged) {
            // independent scale
            var type = scaleComponent.get('type');
            var range = scaleComponent.get('range');

            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
              var scaleName = scaleComponent.get('name');
              var domain = assembleDomain(this, channel);
              var field = getFieldFromDomain(domain);

              if (field) {
                var fieldRef = vgField({
                  aggregate: 'distinct',
                  field: field
                }, {
                  expr: 'datum'
                });

                return {
                  signal: sizeExpr(scaleName, scaleComponent, fieldRef)
                };
              } else {
                warn$1("Unknown field for ".concat(channel, ". Cannot calculate view size."));
                return null;
              }
            }
          }
        }

        return {
          signal: this.signalNameMap.get(this.getName(layoutSizeType))
        };
      }
      /**
       * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
       */

    }, {
      key: "lookupDataSource",
      value: function lookupDataSource(name) {
        var node = this.component.data.outputNodes[name];

        if (!node) {
          // Name not found in map so let's just return what we got.
          // This can happen if we already have the correct name.
          return name;
        }

        return node.getSource();
      }
    }, {
      key: "getSignalName",
      value: function getSignalName(oldSignalName) {
        return this.signalNameMap.get(oldSignalName);
      }
    }, {
      key: "renameSignal",
      value: function renameSignal(oldName, newName) {
        this.signalNameMap.rename(oldName, newName);
      }
    }, {
      key: "renameScale",
      value: function renameScale(oldName, newName) {
        this.scaleNameMap.rename(oldName, newName);
      }
    }, {
      key: "renameProjection",
      value: function renameProjection(oldName, newName) {
        this.projectionNameMap.rename(oldName, newName);
      }
      /**
       * @return scale name for a given channel after the scale has been parsed and named.
       */

    }, {
      key: "scaleName",
      value: function scaleName(originalScaleName, parse) {
        if (parse) {
          // During the parse phase always return a value
          // No need to refer to rename map because a scale can't be renamed
          // before it has the original name.
          return this.getName(originalScaleName);
        } // If there is a scale for the channel, it should either
        // be in the scale component or exist in the name map


        if ( // If there is a scale for the channel, there should be a local scale component for it
        isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)
        this.scaleNameMap.has(this.getName(originalScaleName))) {
          return this.scaleNameMap.get(this.getName(originalScaleName));
        }

        return undefined;
      }
      /**
       * @return projection name after the projection has been parsed and named.
       */

    }, {
      key: "projectionName",
      value: function projectionName(parse) {
        if (parse) {
          // During the parse phase always return a value
          // No need to refer to rename map because a projection can't be renamed
          // before it has the original name.
          return this.getName('projection');
        }

        if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName('projection'))) {
          return this.projectionNameMap.get(this.getName('projection'));
        }

        return undefined;
      }
      /**
       * Traverse a model's hierarchy to get the scale component for a particular channel.
       */

    }, {
      key: "getScaleComponent",
      value: function getScaleComponent(channel) {
        /* istanbul ignore next: This is warning for debugging test */
        if (!this.component.scales) {
          throw new Error('getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().');
        }

        var localScaleComponent = this.component.scales[channel];

        if (localScaleComponent && !localScaleComponent.merged) {
          return localScaleComponent;
        }

        return this.parent ? this.parent.getScaleComponent(channel) : undefined;
      }
      /**
       * Traverse a model's hierarchy to get a particular selection component.
       */

    }, {
      key: "getSelectionComponent",
      value: function getSelectionComponent(variableName, origName) {
        var sel = this.component.selection[variableName];

        if (!sel && this.parent) {
          sel = this.parent.getSelectionComponent(variableName, origName);
        }

        if (!sel) {
          throw new Error(message.selectionNotFound(origName));
        }

        return sel;
      }
    }, {
      key: "width",
      get: function get() {
        return this.getSizeSignalRef('width');
      }
    }, {
      key: "height",
      get: function get() {
        return this.getSizeSignalRef('height');
      }
    }]);

    return Model;
  }();
  /** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */

  var ModelWithField = /*#__PURE__*/function (_Model) {
    _inherits(ModelWithField, _Model);

    var _super = _createSuper(ModelWithField);

    function ModelWithField() {
      _classCallCheck(this, ModelWithField);

      return _super.apply(this, arguments);
    }

    _createClass(ModelWithField, [{
      key: "vgField",

      /** Get "field" reference for Vega */
      value: function vgField$1(channel) {
        var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var fieldDef = this.fieldDef(channel);

        if (!fieldDef) {
          return undefined;
        }

        return vgField(fieldDef, opt);
      }
    }, {
      key: "reduceFieldDef",
      value: function reduceFieldDef(f, init) {
        return reduce(this.getMapping(), function (acc, cd, c) {
          var fieldDef = getFieldDef(cd);

          if (fieldDef) {
            return f(acc, fieldDef, c);
          }

          return acc;
        }, init);
      }
    }, {
      key: "forEachFieldDef",
      value: function forEachFieldDef(f, t) {
        forEach$1(this.getMapping(), function (cd, c) {
          var fieldDef = getFieldDef(cd);

          if (fieldDef) {
            f(fieldDef, c);
          }
        }, t);
      }
    }]);

    return ModelWithField;
  }(Model);

  /**
   * A class for density transform nodes
   */

  var DensityTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(DensityTransformNode, _DataFlowNode);

    var _super = _createSuper(DensityTransformNode);

    function DensityTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, DensityTransformNode);

      var _a, _b, _c;

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this.transform = duplicate(transform); // duplicate to prevent side effects

      var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
      _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'value', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'density'];
      return _this;
    }

    _createClass(DensityTransformNode, [{
      key: "clone",
      value: function clone() {
        return new DensityTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a;

        return new Set([this.transform.density].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "DensityTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _a = this.transform,
            density = _a.density,
            rest = __rest(_a, ["density"]);

        var result = _extends({
          type: 'kde',
          field: density
        }, rest);

        return result;
      }
    }]);

    return DensityTransformNode;
  }(DataFlowNode);

  var FilterInvalidNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(FilterInvalidNode, _DataFlowNode);

    var _super = _createSuper(FilterInvalidNode);

    function FilterInvalidNode(parent, filter) {
      var _this;

      _classCallCheck(this, FilterInvalidNode);

      _this = _super.call(this, parent);
      _this.filter = filter;
      return _this;
    }

    _createClass(FilterInvalidNode, [{
      key: "clone",
      value: function clone() {
        return new FilterInvalidNode(null, _extends({}, this.filter));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set(keys$2(this.filter));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(); // filter does not produce any new fields
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "FilterInvalid ".concat(hash(this.filter));
      }
      /**
       * Create the VgTransforms for each of the filtered fields.
       */

    }, {
      key: "assemble",
      value: function assemble() {
        var _this2 = this;

        var filters = keys$2(this.filter).reduce(function (vegaFilters, field) {
          var fieldDef = _this2.filter[field];
          var ref = vgField(fieldDef, {
            expr: 'datum'
          });

          if (fieldDef !== null) {
            if (fieldDef.type === 'temporal') {
              vegaFilters.push("(isDate(".concat(ref, ") || (isValid(").concat(ref, ") && isFinite(+").concat(ref, ")))"));
            } else if (fieldDef.type === 'quantitative') {
              vegaFilters.push("isValid(".concat(ref, ")"));
              vegaFilters.push("isFinite(+".concat(ref, ")"));
            }
          }

          return vegaFilters;
        }, []);
        return filters.length > 0 ? {
          type: 'filter',
          expr: filters.join(' && ')
        } : null;
      }
    }], [{
      key: "make",
      value: function make(parent, model) {
        var config = model.config,
            mark = model.mark,
            markDef = model.markDef;
        var invalid = getMarkPropOrConfig('invalid', markDef, config);

        if (invalid !== 'filter') {
          return null;
        }

        var filter = model.reduceFieldDef(function (aggregator, fieldDef, channel) {
          var scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);

          if (scaleComponent) {
            var scaleType = scaleComponent.get('type'); // While discrete domain scales can handle invalid values, continuous scales can't.
            // Thus, for non-path marks, we have to filter null for scales with continuous domains.
            // (For path marks, we will use "defined" property and skip these values instead.)

            if (hasContinuousDomain(scaleType) && fieldDef.aggregate !== 'count' && !isPathMark(mark)) {
              aggregator[fieldDef.field] = fieldDef; // we know that the fieldDef is a typed field def
            }
          }

          return aggregator;
        }, {});

        if (!keys$2(filter).length) {
          return null;
        }

        return new FilterInvalidNode(parent, filter);
      }
    }]);

    return FilterInvalidNode;
  }(DataFlowNode);

  /**
   * A class for flatten transform nodes
   */

  var FlattenTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(FlattenTransformNode, _DataFlowNode);

    var _super = _createSuper(FlattenTransformNode);

    function FlattenTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, FlattenTransformNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this.transform = duplicate(transform); // duplicate to prevent side effects

      var _this$transform = _this.transform,
          flatten = _this$transform.flatten,
          _this$transform$as = _this$transform.as,
          as = _this$transform$as === void 0 ? [] : _this$transform$as;
      _this.transform.as = flatten.map(function (f, i) {
        var _a;

        return (_a = as[i]) !== null && _a !== void 0 ? _a : f;
      });
      return _this;
    }

    _createClass(FlattenTransformNode, [{
      key: "clone",
      value: function clone() {
        return new FlattenTransformNode(this.parent, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set(this.transform.flatten);
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "FlattenTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _this$transform2 = this.transform,
            fields = _this$transform2.flatten,
            as = _this$transform2.as;
        var result = {
          type: 'flatten',
          fields: fields,
          as: as
        };
        return result;
      }
    }]);

    return FlattenTransformNode;
  }(DataFlowNode);

  /**
   * A class for flatten transform nodes
   */

  var FoldTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(FoldTransformNode, _DataFlowNode);

    var _super = _createSuper(FoldTransformNode);

    function FoldTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, FoldTransformNode);

      var _a, _b, _c;

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this.transform = duplicate(transform); // duplicate to prevent side effects

      var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
      _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];
      return _this;
    }

    _createClass(FoldTransformNode, [{
      key: "clone",
      value: function clone() {
        return new FoldTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set(this.transform.fold);
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "FoldTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _this$transform = this.transform,
            fold = _this$transform.fold,
            as = _this$transform.as;
        var result = {
          type: 'fold',
          fields: fold,
          as: as
        };
        return result;
      }
    }]);

    return FoldTransformNode;
  }(DataFlowNode);

  var GeoJSONNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(GeoJSONNode, _DataFlowNode);

    var _super = _createSuper(GeoJSONNode);

    function GeoJSONNode(parent, fields, geojson, signal) {
      var _this;

      _classCallCheck(this, GeoJSONNode);

      _this = _super.call(this, parent);
      _this.fields = fields;
      _this.geojson = geojson;
      _this.signal = signal;
      return _this;
    }

    _createClass(GeoJSONNode, [{
      key: "clone",
      value: function clone() {
        return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a;

        var fields = ((_a = this.fields) !== null && _a !== void 0 ? _a : []).filter(isString);
        return new Set([].concat(_toConsumableArray(this.geojson ? [this.geojson] : []), _toConsumableArray(fields)));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set();
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "GeoJSON ".concat(this.geojson, " ").concat(this.signal, " ").concat(hash(this.fields));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return _extends(_extends(_extends({
          type: 'geojson'
        }, this.fields ? {
          fields: this.fields
        } : {}), this.geojson ? {
          geojson: this.geojson
        } : {}), {
          signal: this.signal
        });
      }
    }], [{
      key: "parseAll",
      value: function parseAll(parent, model) {
        if (model.component.projection && !model.component.projection.isFit) {
          return parent;
        }

        var geoJsonCounter = 0;

        for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {
          var coordinates = _arr[_i];
          var pair = coordinates.map(function (channel) {
            var def = getFieldOrDatumDef(model.encoding[channel]);
            return isFieldDef(def) ? def.field : isDatumDef(def) ? {
              expr: "".concat(def.datum)
            } : isValueDef(def) ? {
              expr: "".concat(def['value'])
            } : undefined;
          });

          if (pair[0] || pair[1]) {
            parent = new GeoJSONNode(parent, pair, null, model.getName("geojson_".concat(geoJsonCounter++)));
          }
        }

        if (model.channelHasField(SHAPE)) {
          var fieldDef = model.typedFieldDef(SHAPE);

          if (fieldDef.type === GEOJSON) {
            parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName("geojson_".concat(geoJsonCounter++)));
          }
        }

        return parent;
      }
    }]);

    return GeoJSONNode;
  }(DataFlowNode);

  var GeoPointNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(GeoPointNode, _DataFlowNode);

    var _super = _createSuper(GeoPointNode);

    function GeoPointNode(parent, projection, fields, as) {
      var _this;

      _classCallCheck(this, GeoPointNode);

      _this = _super.call(this, parent);
      _this.projection = projection;
      _this.fields = fields;
      _this.as = as;
      return _this;
    }

    _createClass(GeoPointNode, [{
      key: "clone",
      value: function clone() {
        return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set(this.fields.filter(isString));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Geopoint ".concat(this.projection, " ").concat(hash(this.fields), " ").concat(hash(this.as));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return {
          type: 'geopoint',
          projection: this.projection,
          fields: this.fields,
          as: this.as
        };
      }
    }], [{
      key: "parseAll",
      value: function parseAll(parent, model) {
        if (!model.projectionName()) {
          return parent;
        }

        for (var _i = 0, _arr = [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]; _i < _arr.length; _i++) {
          var coordinates = _arr[_i];
          var pair = coordinates.map(function (channel) {
            var def = getFieldOrDatumDef(model.encoding[channel]);
            return isFieldDef(def) ? def.field : isDatumDef(def) ? {
              expr: "".concat(def.datum)
            } : isValueDef(def) ? {
              expr: "".concat(def['value'])
            } : undefined;
          });
          var suffix = coordinates[0] === LONGITUDE2 ? '2' : '';

          if (pair[0] || pair[1]) {
            parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);
          }
        }

        return parent;
      }
    }]);

    return GeoPointNode;
  }(DataFlowNode);

  var ImputeNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(ImputeNode, _DataFlowNode);

    var _super = _createSuper(ImputeNode);

    function ImputeNode(parent, transform) {
      var _this;

      _classCallCheck(this, ImputeNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      return _this;
    }

    _createClass(ImputeNode, [{
      key: "clone",
      value: function clone() {
        return new ImputeNode(null, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a;

        return new Set([this.transform.impute, this.transform.key].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set([this.transform.impute]);
      }
    }, {
      key: "processSequence",
      value: function processSequence(keyvals) {
        var _keyvals$start = keyvals.start,
            start = _keyvals$start === void 0 ? 0 : _keyvals$start,
            stop = keyvals.stop,
            step = keyvals.step;
        var result = [start, stop].concat(_toConsumableArray(step ? [step] : [])).join(',');
        return {
          signal: "sequence(".concat(result, ")")
        };
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Impute ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _this$transform = this.transform,
            impute = _this$transform.impute,
            key = _this$transform.key,
            keyvals = _this$transform.keyvals,
            method = _this$transform.method,
            groupby = _this$transform.groupby,
            value = _this$transform.value,
            _this$transform$frame = _this$transform.frame,
            frame = _this$transform$frame === void 0 ? [null, null] : _this$transform$frame;

        var imputeTransform = _extends(_extends(_extends(_extends({
          type: 'impute',
          field: impute,
          key: key
        }, keyvals ? {
          keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals
        } : {}), {
          method: 'value'
        }), groupby ? {
          groupby: groupby
        } : {}), {
          value: !method || method === 'value' ? value : null
        });

        if (method && method !== 'value') {
          var deriveNewField = _extends({
            type: 'window',
            as: ["imputed_".concat(impute, "_value")],
            ops: [method],
            fields: [impute],
            frame: frame,
            ignorePeers: false
          }, groupby ? {
            groupby: groupby
          } : {});

          var replaceOriginal = {
            type: 'formula',
            expr: "datum.".concat(impute, " === null ? datum.imputed_").concat(impute, "_value : datum.").concat(impute),
            as: impute
          };
          return [imputeTransform, deriveNewField, replaceOriginal];
        } else {
          return [imputeTransform];
        }
      }
    }], [{
      key: "makeFromTransform",
      value: function makeFromTransform(parent, imputeTransform) {
        return new ImputeNode(parent, imputeTransform);
      }
    }, {
      key: "makeFromEncoding",
      value: function makeFromEncoding(parent, model) {
        var encoding = model.encoding;
        var xDef = encoding.x;
        var yDef = encoding.y;

        if (isFieldDef(xDef) && isFieldDef(yDef)) {
          var imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;

          if (imputedChannel === undefined) {
            return undefined;
          }

          var keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;
          var _imputedChannel$imput = imputedChannel.impute,
              method = _imputedChannel$imput.method,
              value = _imputedChannel$imput.value,
              frame = _imputedChannel$imput.frame,
              keyvals = _imputedChannel$imput.keyvals;
          var groupbyFields = pathGroupingFields(model.mark, encoding);
          return new ImputeNode(parent, _extends(_extends(_extends(_extends(_extends({
            impute: imputedChannel.field,
            key: keyChannel.field
          }, method ? {
            method: method
          } : {}), value !== undefined ? {
            value: value
          } : {}), frame ? {
            frame: frame
          } : {}), keyvals !== undefined ? {
            keyvals: keyvals
          } : {}), groupbyFields.length ? {
            groupby: groupbyFields
          } : {}));
        }

        return null;
      }
    }]);

    return ImputeNode;
  }(DataFlowNode);

  /**
   * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)
   * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the
   * same field again (or differently).
   */

  var AncestorParse = /*#__PURE__*/function (_Split) {
    _inherits(AncestorParse, _Split);

    var _super = _createSuper(AncestorParse);

    function AncestorParse() {
      var _this;

      var explicit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var implicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parseNothing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      _classCallCheck(this, AncestorParse);

      _this = _super.call(this, explicit, implicit);
      _this.explicit = explicit;
      _this.implicit = implicit;
      _this.parseNothing = parseNothing;
      return _this;
    }

    _createClass(AncestorParse, [{
      key: "clone",
      value: function clone() {
        var clone = _get(_getPrototypeOf(AncestorParse.prototype), "clone", this).call(this);

        clone.parseNothing = this.parseNothing;
        return clone;
      }
    }]);

    return AncestorParse;
  }(Split);

  /**
   * A class for loess transform nodes
   */

  var LoessTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(LoessTransformNode, _DataFlowNode);

    var _super = _createSuper(LoessTransformNode);

    function LoessTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, LoessTransformNode);

      var _a, _b, _c;

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this.transform = duplicate(transform); // duplicate to prevent side effects

      var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
      _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform.on, (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : transform.loess];
      return _this;
    }

    _createClass(LoessTransformNode, [{
      key: "clone",
      value: function clone() {
        return new LoessTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a;

        return new Set([this.transform.loess, this.transform.on].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "LoessTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _a = this.transform,
            loess = _a.loess,
            on = _a.on,
            rest = __rest(_a, ["loess", "on"]);

        var result = _extends({
          type: 'loess',
          x: on,
          y: loess
        }, rest);

        return result;
      }
    }]);

    return LoessTransformNode;
  }(DataFlowNode);

  var LookupNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(LookupNode, _DataFlowNode);

    var _super = _createSuper(LookupNode);

    function LookupNode(parent, transform, secondary) {
      var _this;

      _classCallCheck(this, LookupNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this.secondary = secondary;
      return _this;
    }

    _createClass(LookupNode, [{
      key: "clone",
      value: function clone() {
        return new LookupNode(null, duplicate(this.transform), this.secondary);
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set([this.transform.lookup]);
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "Lookup ".concat(hash({
          transform: this.transform,
          secondary: this.secondary
        }));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var foreign;

        if (this.transform.from.fields) {
          // lookup a few fields and add create a flat output
          foreign = _extends({
            values: this.transform.from.fields
          }, this.transform.as ? {
            as: array(this.transform.as)
          } : {});
        } else {
          // lookup full record and nest it
          var asName = this.transform.as;

          if (!isString(asName)) {
            warn$1(message.NO_FIELDS_NEEDS_AS);
            asName = '_lookup';
          }

          foreign = {
            as: [asName]
          };
        }

        return _extends(_extends({
          type: 'lookup',
          from: this.secondary,
          key: this.transform.from.key,
          fields: [this.transform.lookup]
        }, foreign), this.transform.default ? {
          default: this.transform.default
        } : {});
      }
    }], [{
      key: "make",
      value: function make(parent, model, transform, counter) {
        var sources = model.component.data.sources;
        var _transform = transform,
            from = _transform.from;
        var fromOutputNode = null;

        if (isLookupData(from)) {
          var fromSource = findSource(from.data, sources);

          if (!fromSource) {
            fromSource = new SourceNode(from.data);
            sources.push(fromSource);
          }

          var fromOutputName = model.getName("lookup_".concat(counter));
          fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);
          model.component.data.outputNodes[fromOutputName] = fromOutputNode;
        } else if (isLookupSelection(from)) {
          var selName = from.selection;
          transform = _extends({
            as: selName
          }, transform);
          fromOutputNode = model.getSelectionComponent(varName(selName), selName).materialized;

          if (!fromOutputNode) {
            throw new Error(message.noSameUnitLookup(selName));
          }
        }

        return new LookupNode(parent, transform, fromOutputNode.getSource());
      }
    }]);

    return LookupNode;
  }(DataFlowNode);

  /**
   * A class for quantile transform nodes
   */

  var QuantileTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(QuantileTransformNode, _DataFlowNode);

    var _super = _createSuper(QuantileTransformNode);

    function QuantileTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, QuantileTransformNode);

      var _a, _b, _c;

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this.transform = duplicate(transform); // duplicate to prevent side effects

      var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
      _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'prob', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];
      return _this;
    }

    _createClass(QuantileTransformNode, [{
      key: "clone",
      value: function clone() {
        return new QuantileTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a;

        return new Set([this.transform.quantile].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "QuantileTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _a = this.transform,
            quantile = _a.quantile,
            rest = __rest(_a, ["quantile"]);

        var result = _extends({
          type: 'quantile',
          field: quantile
        }, rest);

        return result;
      }
    }]);

    return QuantileTransformNode;
  }(DataFlowNode);

  /**
   * A class for regression transform nodes
   */

  var RegressionTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(RegressionTransformNode, _DataFlowNode);

    var _super = _createSuper(RegressionTransformNode);

    function RegressionTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, RegressionTransformNode);

      var _a, _b, _c;

      _this = _super.call(this, parent);
      _this.transform = transform;
      _this.transform = duplicate(transform); // duplicate to prevent side effects

      var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];
      _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : transform.on, (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : transform.regression];
      return _this;
    }

    _createClass(RegressionTransformNode, [{
      key: "clone",
      value: function clone() {
        return new RegressionTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a;

        return new Set([this.transform.regression, this.transform.on].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set(this.transform.as);
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "RegressionTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _a = this.transform,
            regression = _a.regression,
            on = _a.on,
            rest = __rest(_a, ["regression", "on"]);

        var result = _extends({
          type: 'regression',
          x: on,
          y: regression
        }, rest);

        return result;
      }
    }]);

    return RegressionTransformNode;
  }(DataFlowNode);

  /**
   * A class for pivot transform nodes.
   */

  var PivotTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(PivotTransformNode, _DataFlowNode);

    var _super = _createSuper(PivotTransformNode);

    function PivotTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, PivotTransformNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      return _this;
    }

    _createClass(PivotTransformNode, [{
      key: "clone",
      value: function clone() {
        return new PivotTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "addDimensions",
      value: function addDimensions(fields) {
        var _a;

        this.transform.groupby = unique(((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : []).concat(fields), function (d) {
          return d;
        });
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return undefined; // return undefined so that potentially everything can depend on the pivot
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        var _a;

        return new Set([this.transform.pivot, this.transform.value].concat(_toConsumableArray((_a = this.transform.groupby) !== null && _a !== void 0 ? _a : [])));
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "PivotTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        var _this$transform = this.transform,
            pivot = _this$transform.pivot,
            value = _this$transform.value,
            groupby = _this$transform.groupby,
            limit = _this$transform.limit,
            op = _this$transform.op;
        return _extends(_extends(_extends({
          type: 'pivot',
          field: pivot,
          value: value
        }, limit !== undefined ? {
          limit: limit
        } : {}), op !== undefined ? {
          op: op
        } : {}), groupby !== undefined ? {
          groupby: groupby
        } : {});
      }
    }]);

    return PivotTransformNode;
  }(DataFlowNode);

  /**
   * A class for the sample transform nodes
   */

  var SampleTransformNode = /*#__PURE__*/function (_DataFlowNode) {
    _inherits(SampleTransformNode, _DataFlowNode);

    var _super = _createSuper(SampleTransformNode);

    function SampleTransformNode(parent, transform) {
      var _this;

      _classCallCheck(this, SampleTransformNode);

      _this = _super.call(this, parent);
      _this.transform = transform;
      return _this;
    }

    _createClass(SampleTransformNode, [{
      key: "clone",
      value: function clone() {
        return new SampleTransformNode(null, duplicate(this.transform));
      }
    }, {
      key: "dependentFields",
      value: function dependentFields() {
        return new Set();
      }
    }, {
      key: "producedFields",
      value: function producedFields() {
        return new Set();
      }
    }, {
      key: "hash",
      value: function hash$1() {
        return "SampleTransform ".concat(hash(this.transform));
      }
    }, {
      key: "assemble",
      value: function assemble() {
        return {
          type: 'sample',
          size: this.transform.sample
        };
      }
    }]);

    return SampleTransformNode;
  }(DataFlowNode);

  function makeWalkTree(data) {
    // to name datasources
    var datasetIndex = 0;
    /**
     * Recursively walk down the tree.
     */

    function walkTree(node, dataSource) {
      var _a;

      if (node instanceof SourceNode) {
        // If the source is a named data source or a data source with values, we need
        // to put it in a different data source. Otherwise, Vega may override the data.
        if (!node.isGenerator && !isUrlData(node.data)) {
          data.push(dataSource);
          var newData = {
            name: null,
            source: dataSource.name,
            transform: []
          };
          dataSource = newData;
        }
      }

      if (node instanceof ParseNode) {
        if (node.parent instanceof SourceNode && !dataSource.source) {
          var _dataSource$transform;

          // If node's parent is a root source and the data source does not refer to another data source, use normal format parse
          dataSource.format = _extends(_extends({}, (_a = dataSource.format) !== null && _a !== void 0 ? _a : {}), {
            parse: node.assembleFormatParse()
          }); // add calculates for all nested fields

          (_dataSource$transform = dataSource.transform).push.apply(_dataSource$transform, _toConsumableArray(node.assembleTransforms(true)));
        } else {
          var _dataSource$transform2;

          // Otherwise use Vega expression to parse
          (_dataSource$transform2 = dataSource.transform).push.apply(_dataSource$transform2, _toConsumableArray(node.assembleTransforms()));
        }
      }

      if (node instanceof FacetNode) {
        if (!dataSource.name) {
          dataSource.name = "data_".concat(datasetIndex++);
        }

        if (!dataSource.source || dataSource.transform.length > 0) {
          data.push(dataSource);
          node.data = dataSource.name;
        } else {
          node.data = dataSource.source;
        }

        var _iterator = _createForOfIteratorHelper(node.assemble()),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var d = _step.value;
            data.push(d);
          } // break here because the rest of the tree has to be taken care of by the facet.

        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return;
      }

      if (node instanceof GraticuleNode || node instanceof SequenceNode || node instanceof FilterInvalidNode || node instanceof FilterNode || node instanceof CalculateNode || node instanceof GeoPointNode || node instanceof GeoJSONNode || node instanceof AggregateNode || node instanceof LookupNode || node instanceof WindowTransformNode || node instanceof JoinAggregateTransformNode || node instanceof FoldTransformNode || node instanceof FlattenTransformNode || node instanceof DensityTransformNode || node instanceof LoessTransformNode || node instanceof QuantileTransformNode || node instanceof RegressionTransformNode || node instanceof IdentifierNode || node instanceof SampleTransformNode || node instanceof PivotTransformNode) {
        dataSource.transform.push(node.assemble());
      }

      if (node instanceof BinNode || node instanceof TimeUnitNode || node instanceof ImputeNode || node instanceof StackNode) {
        var _dataSource$transform3;

        (_dataSource$transform3 = dataSource.transform).push.apply(_dataSource$transform3, _toConsumableArray(node.assemble()));
      }

      if (node instanceof OutputNode) {
        if (dataSource.source && dataSource.transform.length === 0) {
          node.setSource(dataSource.source);
        } else if (node.parent instanceof OutputNode) {
          // Note that an output node may be required but we still do not assemble a
          // separate data source for it.
          node.setSource(dataSource.name);
        } else {
          if (!dataSource.name) {
            dataSource.name = "data_".concat(datasetIndex++);
          } // Here we set the name of the datasource we generated. From now on
          // other assemblers can use it.


          node.setSource(dataSource.name); // if this node has more than one child, we will add a datasource automatically

          if (node.numChildren() === 1) {
            data.push(dataSource);
            var _newData = {
              name: null,
              source: dataSource.name,
              transform: []
            };
            dataSource = _newData;
          }
        }
      }

      switch (node.numChildren()) {
        case 0:
          // done
          if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
            // do not push empty datasources that are simply references
            data.push(dataSource);
          }

          break;

        case 1:
          walkTree(node.children[0], dataSource);
          break;

        default:
          {
            if (!dataSource.name) {
              dataSource.name = "data_".concat(datasetIndex++);
            }

            var source = dataSource.name;

            if (!dataSource.source || dataSource.transform.length > 0) {
              data.push(dataSource);
            } else {
              source = dataSource.source;
            }

            var _iterator2 = _createForOfIteratorHelper(node.children),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var child = _step2.value;
                var _newData2 = {
                  name: null,
                  source: source,
                  transform: []
                };
                walkTree(child, _newData2);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            break;
          }
      }
    }

    return walkTree;
  }
  /**
   * Assemble data sources that are derived from faceted data.
   */


  function assembleFacetData(root) {
    var data = [];
    var walkTree = makeWalkTree(data);

    var _iterator3 = _createForOfIteratorHelper(root.children),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var child = _step3.value;
        walkTree(child, {
          source: root.name,
          name: null,
          transform: []
        });
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return data;
  }
  /**
   * Create Vega Data array from a given compiled model and append all of them to the given array
   *
   * @param  model
   * @param  data array
   * @return modified data array
   */

  function assembleRootData(dataComponent, datasets) {
    var _a, _b;

    var data = []; // dataComponent.sources.forEach(debug);
    // draw(dataComponent.sources);

    var walkTree = makeWalkTree(data);
    var sourceIndex = 0;

    var _iterator4 = _createForOfIteratorHelper(dataComponent.sources),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var root = _step4.value;

        // assign a name if the source does not have a name yet
        if (!root.hasName()) {
          root.dataName = "source_".concat(sourceIndex++);
        }

        var newData = root.assemble();
        walkTree(root, newData);
      } // remove empty transform arrays for cleaner output

    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    for (var _i = 0, _data = data; _i < _data.length; _i++) {
      var d = _data[_i];

      if (d.transform.length === 0) {
        delete d.transform;
      }
    } // move sources without transforms (the ones that are potentially used in lookups) to the beginning


    var whereTo = 0;

    var _iterator5 = _createForOfIteratorHelper(data.entries()),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _step5$value = _slicedToArray(_step5.value, 2),
            i = _step5$value[0],
            _d3 = _step5$value[1];

        if (((_a = _d3.transform) !== null && _a !== void 0 ? _a : []).length === 0 && !_d3.source) {
          data.splice(whereTo++, 0, data.splice(i, 1)[0]);
        }
      } // now fix the from references in lookup transforms

    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }

    for (var _i2 = 0, _data2 = data; _i2 < _data2.length; _i2++) {
      var _d = _data2[_i2];

      var _iterator6 = _createForOfIteratorHelper((_b = _d.transform) !== null && _b !== void 0 ? _b : []),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var t = _step6.value;

          if (t.type === 'lookup') {
            t.from = dataComponent.outputNodes[t.from].getSource();
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    } // inline values for datasets that are in the datastore


    for (var _i3 = 0, _data3 = data; _i3 < _data3.length; _i3++) {
      var _d2 = _data3[_i3];

      if (_d2.name in datasets) {
        _d2.values = datasets[_d2.name];
      }
    }

    return data;
  }

  function getHeaderType(orient) {
    if (orient === 'top' || orient === 'left') {
      return 'header';
    }

    return 'footer';
  }
  function parseFacetHeaders(model) {
    var _iterator = _createForOfIteratorHelper(FACET_CHANNELS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;
        parseFacetHeader(model, channel);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    mergeChildAxis(model, 'x');
    mergeChildAxis(model, 'y');
  }

  function parseFacetHeader(model, channel) {
    var _a;

    var facet = model.facet,
        config = model.config,
        child = model.child,
        component = model.component;

    if (model.channelHasField(channel)) {
      var fieldDef = facet[channel];
      var titleConfig = getHeaderProperty('title', null, config, channel);
      var title$1 = title(fieldDef, config, {
        allowDisabling: true,
        includeDefault: titleConfig === undefined || !!titleConfig
      });

      if (child.component.layoutHeaders[channel].title) {
        // TODO: better handle multiline titles
        title$1 = isArray(title$1) ? title$1.join(', ') : title$1; // merge title with child to produce "Title / Subtitle / Sub-subtitle"

        title$1 += ' / ' + child.component.layoutHeaders[channel].title;
        child.component.layoutHeaders[channel].title = null;
      }

      var labelOrient = getHeaderProperty('labelOrient', fieldDef, config, channel);
      var header = (_a = fieldDef.header) !== null && _a !== void 0 ? _a : {};
      var labels = getFirstDefined(header.labels, config.header.labels, true);
      var headerType = contains$1(['bottom', 'right'], labelOrient) ? 'footer' : 'header';
      component.layoutHeaders[channel] = _defineProperty({
        title: title$1,
        facetFieldDef: fieldDef
      }, headerType, channel === 'facet' ? [] : [makeHeaderComponent(model, channel, labels)]);
    }
  }

  function makeHeaderComponent(model, channel, labels) {
    var sizeType = channel === 'row' ? 'height' : 'width';
    return {
      labels: labels,
      sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,
      axes: []
    };
  }

  function mergeChildAxis(model, channel) {
    var _a;

    var child = model.child;

    if (child.component.axes[channel]) {
      var _model$component = model.component,
          layoutHeaders = _model$component.layoutHeaders,
          resolve = _model$component.resolve;
      resolve.axis[channel] = parseGuideResolve(resolve, channel);

      if (resolve.axis[channel] === 'shared') {
        // For shared axis, move the axes to facet's header or footer
        var headerChannel = channel === 'x' ? 'column' : 'row';
        var layoutHeader = layoutHeaders[headerChannel];

        var _iterator2 = _createForOfIteratorHelper(child.component.axes[channel]),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var axisComponent = _step2.value;
            var headerType = getHeaderType(axisComponent.get('orient'));
            layoutHeader[headerType] = (_a = layoutHeader[headerType]) !== null && _a !== void 0 ? _a : [makeHeaderComponent(model, headerChannel, false)]; // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes

            var mainAxis = assembleAxis(axisComponent, 'main', model.config, {
              header: true
            });

            if (mainAxis) {
              // LayoutHeader no longer keep track of property precedence, thus let's combine.
              layoutHeader[headerType][0].axes.push(mainAxis);
            }

            axisComponent.mainExtracted = true;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
  }

  function parseLayerLayoutSize(model) {
    parseChildrenLayoutSize(model);
    parseNonUnitLayoutSizeForChannel(model, 'width');
    parseNonUnitLayoutSizeForChannel(model, 'height');
  }
  function parseConcatLayoutSize(model) {
    parseChildrenLayoutSize(model); // for columns === 1 (vconcat), we can completely merge width. Otherwise, we can treat merged width as childWidth.

    var widthType = model.layout.columns === 1 ? 'width' : 'childWidth'; // for columns === undefined (hconcat), we can completely merge height. Otherwise, we can treat merged height as childHeight.

    var heightType = model.layout.columns === undefined ? 'height' : 'childHeight';
    parseNonUnitLayoutSizeForChannel(model, widthType);
    parseNonUnitLayoutSizeForChannel(model, heightType);
  }
  function parseChildrenLayoutSize(model) {
    var _iterator = _createForOfIteratorHelper(model.children),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var child = _step.value;
        child.parseLayoutSize();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  /**
   * Merge child layout size (width or height).
   */

  function parseNonUnitLayoutSizeForChannel(model, layoutSizeType) {
    /*
     * For concat, the parent width or height might not be the same as the children's shared height.
     * For example, hconcat's subviews may share width, but the shared width is not the hconcat view's width.
     *
     * layoutSizeType represents the output of the view (could be childWidth/childHeight/width/height)
     * while the sizeType represents the properties of the child.
     */
    var sizeType = getSizeTypeFromLayoutSizeType(layoutSizeType);
    var channel = getPositionScaleChannel(sizeType);
    var resolve = model.component.resolve;
    var layoutSizeCmpt = model.component.layoutSize;
    var mergedSize; // Try to merge layout size

    var _iterator2 = _createForOfIteratorHelper(model.children),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _child = _step2.value;

        var childSize = _child.component.layoutSize.getWithExplicit(sizeType);

        var scaleResolve = resolve.scale[channel];

        if (scaleResolve === 'independent' && childSize.value === 'step') {
          // Do not merge independent scales with range-step as their size depends
          // on the scale domains, which can be different between scales.
          mergedSize = undefined;
          break;
        }

        if (mergedSize) {
          if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {
            // For independent scale, only merge if all the sizes are the same.
            // If the values are different, abandon the merge!
            mergedSize = undefined;
            break;
          }

          mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');
        } else {
          mergedSize = childSize;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    if (mergedSize) {
      // If merged, rename size and set size of all children.
      var _iterator3 = _createForOfIteratorHelper(model.children),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var child = _step3.value;
          model.renameSignal(child.getName(sizeType), model.getName(layoutSizeType));
          child.component.layoutSize.set(sizeType, 'merged', false);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      layoutSizeCmpt.setWithExplicit(layoutSizeType, mergedSize);
    } else {
      layoutSizeCmpt.setWithExplicit(layoutSizeType, {
        explicit: false,
        value: undefined
      });
    }
  }

  function parseUnitLayoutSize(model) {
    var size = model.size,
        component = model.component;

    var _iterator4 = _createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var channel = _step4.value;
        var sizeType = getSizeChannel(channel);

        if (size[sizeType]) {
          var specifiedSize = size[sizeType];
          component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);
        } else {
          var defaultSize = defaultUnitSize(model, sizeType);
          component.layoutSize.set(sizeType, defaultSize, false);
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  }

  function defaultUnitSize(model, sizeType) {
    var channel = sizeType === 'width' ? 'x' : 'y';
    var config = model.config;
    var scaleComponent = model.getScaleComponent(channel);

    if (scaleComponent) {
      var scaleType = scaleComponent.get('type');
      var range = scaleComponent.get('range');

      if (hasDiscreteDomain(scaleType)) {
        var size = getViewConfigDiscreteSize(config.view, sizeType);

        if (isVgRangeStep(range) || isStep(size)) {
          // For discrete domain with range.step, use dynamic width/height
          return 'step';
        } else {
          return size;
        }
      } else {
        return getViewConfigContinuousSize(config.view, sizeType);
      }
    } else if (model.hasProjection || model.mark === 'arc') {
      // arc should use continuous size by default otherwise the pie is extremely small
      return getViewConfigContinuousSize(config.view, sizeType);
    } else {
      var _size = getViewConfigDiscreteSize(config.view, sizeType);

      return isStep(_size) ? _size.step : _size;
    }
  }

  function facetSortFieldName(fieldDef, sort, opt) {
    return vgField(sort, _extends({
      suffix: "by_".concat(vgField(fieldDef))
    }, opt !== null && opt !== void 0 ? opt : {}));
  }
  var FacetModel = /*#__PURE__*/function (_ModelWithField) {
    _inherits(FacetModel, _ModelWithField);

    var _super = _createSuper(FacetModel);

    function FacetModel(spec, parent, parentGivenName, config) {
      var _this;

      _classCallCheck(this, FacetModel);

      _this = _super.call(this, spec, 'facet', parent, parentGivenName, config, spec.resolve);
      _this.child = buildModel(spec.spec, _assertThisInitialized(_this), _this.getName('child'), undefined, config);
      _this.children = [_this.child];
      _this.facet = _this.initFacet(spec.facet);
      return _this;
    }

    _createClass(FacetModel, [{
      key: "initFacet",
      value: function initFacet(facet) {
        // clone to prevent side effect to the original spec
        if (!isFacetMapping(facet)) {
          return {
            facet: initChannelDef(facet, 'facet')
          };
        }

        return reduce(facet, function (normalizedFacet, fieldDef, channel) {
          if (!contains$1([ROW, COLUMN], channel)) {
            // Drop unsupported channel
            warn$1(message.incompatibleChannel(channel, 'facet'));
            return normalizedFacet;
          }

          if (fieldDef.field === undefined) {
            warn$1(message.emptyFieldDef(fieldDef, channel));
            return normalizedFacet;
          } // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.


          normalizedFacet[channel] = initChannelDef(fieldDef, channel);
          return normalizedFacet;
        }, {});
      }
    }, {
      key: "channelHasField",
      value: function channelHasField(channel) {
        return !!this.facet[channel];
      }
    }, {
      key: "fieldDef",
      value: function fieldDef(channel) {
        return this.facet[channel];
      }
    }, {
      key: "parseData",
      value: function parseData() {
        this.component.data = parseData$2(this);
        this.child.parseData();
      }
    }, {
      key: "parseLayoutSize",
      value: function parseLayoutSize() {
        parseChildrenLayoutSize(this);
      }
    }, {
      key: "parseSelections",
      value: function parseSelections() {
        // As a facet has a single child, the selection components are the same.
        // The child maintains its selections to assemble signals, which remain
        // within its unit.
        this.child.parseSelections();
        this.component.selection = this.child.component.selection;
      }
    }, {
      key: "parseMarkGroup",
      value: function parseMarkGroup() {
        this.child.parseMarkGroup();
      }
    }, {
      key: "parseAxesAndHeaders",
      value: function parseAxesAndHeaders() {
        this.child.parseAxesAndHeaders();
        parseFacetHeaders(this);
      }
    }, {
      key: "assembleSelectionTopLevelSignals",
      value: function assembleSelectionTopLevelSignals(signals) {
        return this.child.assembleSelectionTopLevelSignals(signals);
      }
    }, {
      key: "assembleSignals",
      value: function assembleSignals() {
        this.child.assembleSignals();
        return [];
      }
    }, {
      key: "assembleSelectionData",
      value: function assembleSelectionData(data) {
        return this.child.assembleSelectionData(data);
      }
    }, {
      key: "getHeaderLayoutMixins",
      value: function getHeaderLayoutMixins() {
        var _a, _b, _c;

        var layoutMixins = {};

        var _iterator = _createForOfIteratorHelper(FACET_CHANNELS),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var channel = _step.value;

            var _iterator2 = _createForOfIteratorHelper(HEADER_TYPES),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var headerType = _step2.value;
                var layoutHeaderComponent = this.component.layoutHeaders[channel];
                var headerComponent = layoutHeaderComponent[headerType];
                var facetFieldDef = layoutHeaderComponent.facetFieldDef;

                if (facetFieldDef) {
                  var titleOrient = getHeaderProperty('titleOrient', facetFieldDef, this.config, channel);

                  if (contains$1(['right', 'bottom'], titleOrient)) {
                    var headerChannel = getHeaderChannel(channel, titleOrient);
                    layoutMixins.titleAnchor = (_a = layoutMixins.titleAnchor) !== null && _a !== void 0 ? _a : {};
                    layoutMixins.titleAnchor[headerChannel] = 'end';
                  }
                }

                if (headerComponent === null || headerComponent === void 0 ? void 0 : headerComponent[0]) {
                  // set header/footerBand
                  var sizeType = channel === 'row' ? 'height' : 'width';
                  var bandType = headerType === 'header' ? 'headerBand' : 'footerBand';

                  if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {
                    // If facet child does not have size signal, then apply headerBand
                    layoutMixins[bandType] = (_b = layoutMixins[bandType]) !== null && _b !== void 0 ? _b : {};
                    layoutMixins[bandType][channel] = 0.5;
                  }

                  if (layoutHeaderComponent.title) {
                    layoutMixins.offset = (_c = layoutMixins.offset) !== null && _c !== void 0 ? _c : {};
                    layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;
                  }
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return layoutMixins;
      }
    }, {
      key: "assembleDefaultLayout",
      value: function assembleDefaultLayout() {
        var _this$facet = this.facet,
            column = _this$facet.column,
            row = _this$facet.row;
        var columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;
        var align = 'all'; // Do not align the cells if the scale corresponding to the direction is indepent.
        // We always align when we facet into both row and column.

        if (!row && this.component.resolve.scale.x === 'independent') {
          align = 'none';
        } else if (!column && this.component.resolve.scale.y === 'independent') {
          align = 'none';
        }

        return _extends(_extends(_extends({}, this.getHeaderLayoutMixins()), columns ? {
          columns: columns
        } : {}), {
          bounds: 'full',
          align: align
        });
      }
    }, {
      key: "assembleLayoutSignals",
      value: function assembleLayoutSignals() {
        // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.
        return this.child.assembleLayoutSignals();
      }
    }, {
      key: "columnDistinctSignal",
      value: function columnDistinctSignal() {
        if (this.parent && this.parent instanceof FacetModel) {
          // For nested facet, we will add columns to group mark instead
          // See discussion in https://github.com/vega/vega/issues/952
          // and https://github.com/vega/vega-view/releases/tag/v1.2.6
          return undefined;
        } else {
          // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.
          var facetLayoutDataName = this.getName('column_domain');
          return {
            signal: "length(data('".concat(facetLayoutDataName, "'))")
          };
        }
      }
    }, {
      key: "assembleGroup",
      value: function assembleGroup(signals) {
        if (this.parent && this.parent instanceof FacetModel) {
          // Provide number of columns for layout.
          // See discussion in https://github.com/vega/vega/issues/952
          // and https://github.com/vega/vega-view/releases/tag/v1.2.6
          return _extends(_extends({}, this.channelHasField('column') ? {
            encode: {
              update: {
                // TODO(https://github.com/vega/vega-lite/issues/2759):
                // Correct the signal for facet of concat of facet_column
                columns: {
                  field: vgField(this.facet.column, {
                    prefix: 'distinct'
                  })
                }
              }
            }
          } : {}), _get(_getPrototypeOf(FacetModel.prototype), "assembleGroup", this).call(this, signals));
        }

        return _get(_getPrototypeOf(FacetModel.prototype), "assembleGroup", this).call(this, signals);
      }
      /**
       * Aggregate cardinality for calculating size
       */

    }, {
      key: "getCardinalityAggregateForChild",
      value: function getCardinalityAggregateForChild() {
        var fields = [];
        var ops = [];
        var as = [];

        if (this.child instanceof FacetModel) {
          if (this.child.channelHasField('column')) {
            var field = vgField(this.child.facet.column);
            fields.push(field);
            ops.push('distinct');
            as.push("distinct_".concat(field));
          }
        } else {
          for (var _i = 0, _arr = ['x', 'y']; _i < _arr.length; _i++) {
            var channel = _arr[_i];
            var childScaleComponent = this.child.component.scales[channel];

            if (childScaleComponent && !childScaleComponent.merged) {
              var type = childScaleComponent.get('type');
              var range = childScaleComponent.get('range');

              if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                var domain = assembleDomain(this.child, channel);

                var _field = getFieldFromDomain(domain);

                if (_field) {
                  fields.push(_field);
                  ops.push('distinct');
                  as.push("distinct_".concat(_field));
                } else {
                  warn$1("Unknown field for ".concat(channel, ". Cannot calculate view size."));
                }
              }
            }
          }
        }

        return {
          fields: fields,
          ops: ops,
          as: as
        };
      }
    }, {
      key: "assembleFacet",
      value: function assembleFacet() {
        var _this$component$data$ = this.component.data.facetRoot,
            name = _this$component$data$.name,
            data = _this$component$data$.data;
        var _this$facet2 = this.facet,
            row = _this$facet2.row,
            column = _this$facet2.column;

        var _this$getCardinalityA = this.getCardinalityAggregateForChild(),
            fields = _this$getCardinalityA.fields,
            ops = _this$getCardinalityA.ops,
            as = _this$getCardinalityA.as;

        var groupby = [];

        var _iterator3 = _createForOfIteratorHelper(FACET_CHANNELS),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var channel = _step3.value;
            var fieldDef = this.facet[channel];

            if (fieldDef) {
              groupby.push(vgField(fieldDef));
              var bin = fieldDef.bin,
                  sort = fieldDef.sort;

              if (isBinning(bin)) {
                groupby.push(vgField(fieldDef, {
                  binSuffix: 'end'
                }));
              }

              if (isSortField(sort)) {
                var field = sort.field,
                    _sort$op = sort.op,
                    op = _sort$op === void 0 ? DEFAULT_SORT_OP : _sort$op;
                var outputName = facetSortFieldName(fieldDef, sort);

                if (row && column) {
                  // For crossed facet, use pre-calculate field as it requires a different groupby
                  // For each calculated field, apply max and assign them to the same name as
                  // all values of the same group should be the same anyway.
                  fields.push(outputName);
                  ops.push('max');
                  as.push(outputName);
                } else {
                  fields.push(field);
                  ops.push(op);
                  as.push(outputName);
                }
              } else if (isArray(sort)) {
                var _outputName = sortArrayIndexField(fieldDef, channel);

                fields.push(_outputName);
                ops.push('max');
                as.push(_outputName);
              }
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        var cross = !!row && !!column;
        return _extends({
          name: name,
          data: data,
          groupby: groupby
        }, cross || fields.length > 0 ? {
          aggregate: _extends(_extends({}, cross ? {
            cross: cross
          } : {}), fields.length ? {
            fields: fields,
            ops: ops,
            as: as
          } : {})
        } : {});
      }
    }, {
      key: "facetSortFields",
      value: function facetSortFields(channel) {
        var facet = this.facet;
        var fieldDef = facet[channel];

        if (fieldDef) {
          if (isSortField(fieldDef.sort)) {
            return [facetSortFieldName(fieldDef, fieldDef.sort, {
              expr: 'datum'
            })];
          } else if (isArray(fieldDef.sort)) {
            return [sortArrayIndexField(fieldDef, channel, {
              expr: 'datum'
            })];
          }

          return [vgField(fieldDef, {
            expr: 'datum'
          })];
        }

        return [];
      }
    }, {
      key: "facetSortOrder",
      value: function facetSortOrder(channel) {
        var facet = this.facet;
        var fieldDef = facet[channel];

        if (fieldDef) {
          var sort = fieldDef.sort;
          var order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';
          return [order];
        }

        return [];
      }
    }, {
      key: "assembleLabelTitle",
      value: function assembleLabelTitle$1() {
        var facet = this.facet,
            config = this.config;

        if (facet.facet) {
          // Facet always uses title to display labels
          return assembleLabelTitle(facet.facet, 'facet', config);
        }

        var ORTHOGONAL_ORIENT = {
          row: ['top', 'bottom'],
          column: ['left', 'right']
        };

        var _iterator4 = _createForOfIteratorHelper(HEADER_CHANNELS),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var channel = _step4.value;

            if (facet[channel]) {
              var labelOrient = getHeaderProperty('labelOrient', facet[channel], config, channel);

              if (contains$1(ORTHOGONAL_ORIENT[channel], labelOrient)) {
                // Row/Column with orthogonal labelOrient must use title to display labels
                return assembleLabelTitle(facet[channel], channel, config);
              }
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        return undefined;
      }
    }, {
      key: "assembleMarks",
      value: function assembleMarks() {
        var _this2 = this;

        var child = this.child; // If we facet by two dimensions, we need to add a cross operator to the aggregation
        // so that we create all groups

        var facetRoot = this.component.data.facetRoot;
        var data = assembleFacetData(facetRoot);
        var encodeEntry = child.assembleGroupEncodeEntry(false);
        var title = this.assembleLabelTitle() || child.assembleTitle();
        var style = child.assembleGroupStyle();

        var markGroup = _extends(_extends(_extends(_extends(_extends(_extends({
          name: this.getName('cell'),
          type: 'group'
        }, title ? {
          title: title
        } : {}), style ? {
          style: style
        } : {}), {
          from: {
            facet: this.assembleFacet()
          },
          // TODO: move this to after data
          sort: {
            field: FACET_CHANNELS.map(function (c) {
              return _this2.facetSortFields(c);
            }).flat(),
            order: FACET_CHANNELS.map(function (c) {
              return _this2.facetSortOrder(c);
            }).flat()
          }
        }), data.length > 0 ? {
          data: data
        } : {}), encodeEntry ? {
          encode: {
            update: encodeEntry
          }
        } : {}), child.assembleGroup(assembleFacetSignals(this, [])));

        return [markGroup];
      }
    }, {
      key: "getMapping",
      value: function getMapping() {
        return this.facet;
      }
    }]);

    return FacetModel;
  }(ModelWithField);

  function makeJoinAggregateFromFacet(parent, facet) {
    var row = facet.row,
        column = facet.column;

    if (row && column) {
      var newParent = null; // only need to make one for crossed facet

      for (var _i = 0, _arr = [row, column]; _i < _arr.length; _i++) {
        var fieldDef = _arr[_i];

        if (isSortField(fieldDef.sort)) {
          var _fieldDef$sort = fieldDef.sort,
              field = _fieldDef$sort.field,
              _fieldDef$sort$op = _fieldDef$sort.op,
              op = _fieldDef$sort$op === void 0 ? DEFAULT_SORT_OP : _fieldDef$sort$op;
          parent = newParent = new JoinAggregateTransformNode(parent, {
            joinaggregate: [{
              op: op,
              field: field,
              as: facetSortFieldName(fieldDef, fieldDef.sort, {
                forAs: true
              })
            }],
            groupby: [vgField(fieldDef)]
          });
        }
      }

      return newParent;
    }

    return null;
  }

  function findSource(data, sources) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

    var _iterator = _createForOfIteratorHelper(sources),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var other = _step.value;
        var otherData = other.data; // if both datasets have a name defined, we cannot merge

        if (data.name && other.hasName() && data.name !== other.dataName) {
          continue;
        } // feature and mesh are mutually exclusive


        if (((_a = data['format']) === null || _a === void 0 ? void 0 : _a.mesh) && ((_b = otherData.format) === null || _b === void 0 ? void 0 : _b.feature)) {
          continue;
        } // we have to extract the same feature or mesh


        if ((((_c = data['format']) === null || _c === void 0 ? void 0 : _c.feature) || ((_d = otherData.format) === null || _d === void 0 ? void 0 : _d.feature)) && ((_e = data['format']) === null || _e === void 0 ? void 0 : _e.feature) !== ((_f = otherData.format) === null || _f === void 0 ? void 0 : _f.feature)) {
          continue;
        }

        if ((((_g = data['format']) === null || _g === void 0 ? void 0 : _g.mesh) || ((_h = otherData.format) === null || _h === void 0 ? void 0 : _h.mesh)) && ((_j = data['format']) === null || _j === void 0 ? void 0 : _j.mesh) !== ((_k = otherData.format) === null || _k === void 0 ? void 0 : _k.mesh)) {
          continue;
        }

        if (isInlineData(data) && isInlineData(otherData)) {
          if (deepEqual(data.values, otherData.values)) {
            return other;
          }
        } else if (isUrlData(data) && isUrlData(otherData)) {
          if (data.url === otherData.url) {
            return other;
          }
        } else if (isNamedData(data)) {
          if (data.name === other.dataName) {
            return other;
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return null;
  }

  function parseRoot(model, sources) {
    if (model.data || !model.parent) {
      // if the model defines a data source or is the root, create a source node
      if (model.data === null) {
        // data: null means we should ignore the parent's data so we just create a new data source
        var source = new SourceNode([]);
        sources.push(source);
        return source;
      }

      var existingSource = findSource(model.data, sources);

      if (existingSource) {
        if (!isGenerator(model.data)) {
          existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);
        } // if the new source has a name but the existing one does not, we can set it


        if (!existingSource.hasName() && model.data.name) {
          existingSource.dataName = model.data.name;
        }

        return existingSource;
      } else {
        var _source = new SourceNode(model.data);

        sources.push(_source);
        return _source;
      }
    } else {
      // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.
      return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;
    }
  }
  /**
   * Parses a transform array into a chain of connected dataflow nodes.
   */


  function parseTransformArray(head, model, ancestorParse) {
    var _a, _b;

    var lookupCounter = 0;

    var _iterator2 = _createForOfIteratorHelper(model.transforms),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var t = _step2.value;
        var derivedType = undefined;
        var transformNode = void 0;

        if (isCalculate(t)) {
          transformNode = head = new CalculateNode(head, t);
          derivedType = 'derived';
        } else if (isFilter(t)) {
          var implicit = getImplicitFromFilterTransform(t);
          transformNode = head = (_a = ParseNode.makeWithAncestors(head, {}, implicit, ancestorParse)) !== null && _a !== void 0 ? _a : head;
          head = new FilterNode(head, model, t.filter);
        } else if (isBin(t)) {
          transformNode = head = BinNode.makeFromTransform(head, t, model);
          derivedType = 'number';
        } else if (isTimeUnit(t)) {
          derivedType = 'date';
          var parsedAs = ancestorParse.getWithExplicit(t.field); // Create parse node because the input to time unit is always date.

          if (parsedAs.value === undefined) {
            head = new ParseNode(head, _defineProperty({}, t.field, derivedType));
            ancestorParse.set(t.field, derivedType, false);
          }

          transformNode = head = TimeUnitNode.makeFromTransform(head, t);
        } else if (isAggregate$1(t)) {
          transformNode = head = AggregateNode.makeFromTransform(head, t);
          derivedType = 'number';

          if (requiresSelectionId(model)) {
            head = new IdentifierNode(head);
          }
        } else if (isLookup(t)) {
          transformNode = head = LookupNode.make(head, model, t, lookupCounter++);
          derivedType = 'derived';
        } else if (isWindow(t)) {
          transformNode = head = new WindowTransformNode(head, t);
          derivedType = 'number';
        } else if (isJoinAggregate(t)) {
          transformNode = head = new JoinAggregateTransformNode(head, t);
          derivedType = 'number';
        } else if (isStack(t)) {
          transformNode = head = StackNode.makeFromTransform(head, t);
          derivedType = 'derived';
        } else if (isFold(t)) {
          transformNode = head = new FoldTransformNode(head, t);
          derivedType = 'derived';
        } else if (isFlatten(t)) {
          transformNode = head = new FlattenTransformNode(head, t);
          derivedType = 'derived';
        } else if (isPivot(t)) {
          transformNode = head = new PivotTransformNode(head, t);
          derivedType = 'derived';
        } else if (isSample(t)) {
          head = new SampleTransformNode(head, t);
        } else if (isImpute(t)) {
          transformNode = head = ImputeNode.makeFromTransform(head, t);
          derivedType = 'derived';
        } else if (isDensity(t)) {
          transformNode = head = new DensityTransformNode(head, t);
          derivedType = 'derived';
        } else if (isQuantile$1(t)) {
          transformNode = head = new QuantileTransformNode(head, t);
          derivedType = 'derived';
        } else if (isRegression(t)) {
          transformNode = head = new RegressionTransformNode(head, t);
          derivedType = 'derived';
        } else if (isLoess(t)) {
          transformNode = head = new LoessTransformNode(head, t);
          derivedType = 'derived';
        } else {
          warn$1(message.invalidTransformIgnored(t));
          continue;
        }

        if (transformNode && derivedType !== undefined) {
          var _iterator3 = _createForOfIteratorHelper((_b = transformNode.producedFields()) !== null && _b !== void 0 ? _b : []),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var field = _step3.value;
              ancestorParse.set(field, derivedType, false);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return head;
  }
  /*
  Description of the dataflow (http://asciiflow.com/):
       +--------+
       | Source |
       +---+----+
           |
           v
       FormatParse
       (explicit)
           |
           v
       Transforms
  (Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)
           |
           v
       FormatParse
       (implicit)
           |
           v
   Binning (in `encoding`)
           |
           v
   Timeunit (in `encoding`)
           |
           v
  Formula From Sort Array
           |
           v
        +--+--+
        | Raw |
        +-----+
           |
           v
    Aggregate (in `encoding`)
           |
           v
    Stack (in `encoding`)
           |
           v
    Invalid Filter
           |
           v
     +----------+
     |   Main   |
     +----------+
           |
           v
       +-------+
       | Facet |----> "column", "column-layout", and "row"
       +-------+
           |
           v
    ...Child data...
  */

  function parseData$2(model) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

    var head = parseRoot(model, model.component.data.sources);
    var _model$component$data = model.component.data,
        outputNodes = _model$component$data.outputNodes,
        outputNodeRefCounts = _model$component$data.outputNodeRefCounts;
    var ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();
    var data = model.data;

    if (isGenerator(data)) {
      // insert generator transform
      if (isSequenceGenerator(data)) {
        head = new SequenceNode(head, data.sequence);
      } else if (isGraticuleGenerator(data)) {
        head = new GraticuleNode(head, data.graticule);
      } // no parsing necessary for generator


      ancestorParse.parseNothing = true;
    } else if (((_a = data === null || data === void 0 ? void 0 : data.format) === null || _a === void 0 ? void 0 : _a.parse) === null) {
      // format.parse: null means disable parsing
      ancestorParse.parseNothing = true;
    }

    head = (_b = ParseNode.makeExplicit(head, model, ancestorParse)) !== null && _b !== void 0 ? _b : head; // Default discrete selections require an identifer transform to
    // uniquely identify data points. Add this transform at the head of
    // the pipeline such that the identifier field is available for all
    // subsequent datasets. During optimization, we will remove this
    // transform if it proves to be unnecessary. Additional identifier
    // transforms will be necessary when new tuples are constructed
    // (e.g., post-aggregation).

    head = new IdentifierNode(head); // HACK: This is equivalent for merging bin extent for union scale.
    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale

    var parentIsLayer = model.parent && isLayerModel(model.parent);

    if (isUnitModel(model) || isFacetModel(model)) {
      if (parentIsLayer) {
        head = (_c = BinNode.makeFromEncoding(head, model)) !== null && _c !== void 0 ? _c : head;
      }
    }

    if (model.transforms.length > 0) {
      head = parseTransformArray(head, model, ancestorParse);
    } // create parse nodes for fields that need to be parsed (or flattened) implicitly


    var implicitSelection = getImplicitFromSelection(model);
    var implicitEncoding = getImplicitFromEncoding(model);
    head = (_d = ParseNode.makeWithAncestors(head, {}, _extends(_extends({}, implicitSelection), implicitEncoding), ancestorParse)) !== null && _d !== void 0 ? _d : head;

    if (isUnitModel(model)) {
      head = GeoJSONNode.parseAll(head, model);
      head = GeoPointNode.parseAll(head, model);
    }

    if (isUnitModel(model) || isFacetModel(model)) {
      if (!parentIsLayer) {
        head = (_e = BinNode.makeFromEncoding(head, model)) !== null && _e !== void 0 ? _e : head;
      }

      head = (_f = TimeUnitNode.makeFromEncoding(head, model)) !== null && _f !== void 0 ? _f : head;
      head = CalculateNode.parseAllForSortIndex(head, model);
    } // add an output node pre aggregation


    var rawName = model.getName(RAW);
    var raw = new OutputNode(head, rawName, RAW, outputNodeRefCounts);
    outputNodes[rawName] = raw;
    head = raw;

    if (isUnitModel(model)) {
      var agg = AggregateNode.makeFromEncoding(head, model);

      if (agg) {
        head = agg;

        if (requiresSelectionId(model)) {
          head = new IdentifierNode(head);
        }
      }

      head = (_g = ImputeNode.makeFromEncoding(head, model)) !== null && _g !== void 0 ? _g : head;
      head = (_h = StackNode.makeFromEncoding(head, model)) !== null && _h !== void 0 ? _h : head;
    }

    if (isUnitModel(model)) {
      head = (_j = FilterInvalidNode.make(head, model)) !== null && _j !== void 0 ? _j : head;
    } // output node for marks


    var mainName = model.getName(MAIN);
    var main = new OutputNode(head, mainName, MAIN, outputNodeRefCounts);
    outputNodes[mainName] = main;
    head = main;

    if (isUnitModel(model)) {
      materializeSelections(model, main);
    } // add facet marker


    var facetRoot = null;

    if (isFacetModel(model)) {
      var facetName = model.getName('facet'); // Derive new aggregate for facet's sort field
      // augment data source with new fields for crossed facet

      head = (_k = makeJoinAggregateFromFacet(head, model.facet)) !== null && _k !== void 0 ? _k : head;
      facetRoot = new FacetNode(head, model, facetName, main.getSource());
      outputNodes[facetName] = facetRoot;
      head = facetRoot;
    }

    return _extends(_extends({}, model.component.data), {
      outputNodes: outputNodes,
      outputNodeRefCounts: outputNodeRefCounts,
      raw: raw,
      main: main,
      facetRoot: facetRoot,
      ancestorParse: ancestorParse
    });
  }

  var ConcatModel = /*#__PURE__*/function (_Model) {
    _inherits(ConcatModel, _Model);

    var _super = _createSuper(ConcatModel);

    function ConcatModel(spec, parent, parentGivenName, config) {
      var _this;

      _classCallCheck(this, ConcatModel);

      var _a, _b, _c, _d;

      _this = _super.call(this, spec, 'concat', parent, parentGivenName, config, spec.resolve);

      if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {
        warn$1(message.CONCAT_CANNOT_SHARE_AXIS);
      }

      _this.children = _this.getChildren(spec).map(function (child, i) {
        return buildModel(child, _assertThisInitialized(_this), _this.getName('concat_' + i), undefined, config);
      });
      return _this;
    }

    _createClass(ConcatModel, [{
      key: "parseData",
      value: function parseData() {
        this.component.data = parseData$2(this);

        var _iterator = _createForOfIteratorHelper(this.children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            child.parseData();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "parseSelections",
      value: function parseSelections() {
        // Merge selections up the hierarchy so that they may be referenced
        // across unit specs. Persist their definitions within each child
        // to assemble signals which remain within output Vega unit groups.
        this.component.selection = {};

        var _iterator2 = _createForOfIteratorHelper(this.children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            child.parseSelections();

            var _iterator3 = _createForOfIteratorHelper(keys$2(child.component.selection)),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var key = _step3.value;
                this.component.selection[key] = child.component.selection[key];
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }, {
      key: "parseMarkGroup",
      value: function parseMarkGroup() {
        var _iterator4 = _createForOfIteratorHelper(this.children),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var child = _step4.value;
            child.parseMarkGroup();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }, {
      key: "parseAxesAndHeaders",
      value: function parseAxesAndHeaders() {
        var _iterator5 = _createForOfIteratorHelper(this.children),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var child = _step5.value;
            child.parseAxesAndHeaders();
          } // TODO(#2415): support shared axes

        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren(spec) {
        if (isVConcatSpec(spec)) {
          return spec.vconcat;
        } else if (isHConcatSpec(spec)) {
          return spec.hconcat;
        }

        return spec.concat;
      }
    }, {
      key: "parseLayoutSize",
      value: function parseLayoutSize() {
        parseConcatLayoutSize(this);
      }
    }, {
      key: "parseAxisGroup",
      value: function parseAxisGroup() {
        return null;
      }
    }, {
      key: "assembleSelectionTopLevelSignals",
      value: function assembleSelectionTopLevelSignals(signals) {
        return this.children.reduce(function (sg, child) {
          return child.assembleSelectionTopLevelSignals(sg);
        }, signals);
      }
    }, {
      key: "assembleSignals",
      value: function assembleSignals() {
        this.children.forEach(function (child) {
          return child.assembleSignals();
        });
        return [];
      }
    }, {
      key: "assembleLayoutSignals",
      value: function assembleLayoutSignals$1() {
        var layoutSignals = assembleLayoutSignals(this);

        var _iterator6 = _createForOfIteratorHelper(this.children),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var child = _step6.value;
            layoutSignals.push.apply(layoutSignals, _toConsumableArray(child.assembleLayoutSignals()));
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return layoutSignals;
      }
    }, {
      key: "assembleSelectionData",
      value: function assembleSelectionData(data) {
        return this.children.reduce(function (db, child) {
          return child.assembleSelectionData(db);
        }, data);
      }
    }, {
      key: "assembleMarks",
      value: function assembleMarks() {
        // only children have marks
        return this.children.map(function (child) {
          var title = child.assembleTitle();
          var style = child.assembleGroupStyle();
          var encodeEntry = child.assembleGroupEncodeEntry(false);
          return _extends(_extends(_extends(_extends({
            type: 'group',
            name: child.getName('group')
          }, title ? {
            title: title
          } : {}), style ? {
            style: style
          } : {}), encodeEntry ? {
            encode: {
              update: encodeEntry
            }
          } : {}), child.assembleGroup());
        });
      }
    }, {
      key: "assembleDefaultLayout",
      value: function assembleDefaultLayout() {
        var columns = this.layout.columns;
        return _extends(_extends({}, columns != null ? {
          columns: columns
        } : {}), {
          bounds: 'full',
          // Use align each so it can work with multiple plots with different size
          align: 'each'
        });
      }
    }]);

    return ConcatModel;
  }(Model);

  function isFalseOrNull(v) {
    return v === false || v === null;
  }

  var AXIS_COMPONENT_PROPERTIES_INDEX = _extends(_extends({
    disable: 1,
    gridScale: 1,
    scale: 1
  }, COMMON_AXIS_PROPERTIES_INDEX), {
    labelExpr: 1,
    encode: 1
  });

  var AXIS_COMPONENT_PROPERTIES = keys$2(AXIS_COMPONENT_PROPERTIES_INDEX);
  var AxisComponent = /*#__PURE__*/function (_Split) {
    _inherits(AxisComponent, _Split);

    var _super = _createSuper(AxisComponent);

    function AxisComponent() {
      var _this;

      var explicit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var implicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var mainExtracted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      _classCallCheck(this, AxisComponent);

      _this = _super.call(this);
      _this.explicit = explicit;
      _this.implicit = implicit;
      _this.mainExtracted = mainExtracted;
      return _this;
    }

    _createClass(AxisComponent, [{
      key: "clone",
      value: function clone() {
        return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);
      }
    }, {
      key: "hasAxisPart",
      value: function hasAxisPart(part) {
        // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.
        if (part === 'axis') {
          // always has the axis container part
          return true;
        }

        if (part === 'grid' || part === 'title') {
          return !!this.get(part);
        } // Other parts are enabled by default, so they should not be false or null.


        return !isFalseOrNull(this.get(part));
      }
    }]);

    return AxisComponent;
  }(Split);

  function labels$1(model, channel, specifiedLabelsSpec) {
    var _a;

    var encoding = model.encoding,
        config = model.config;
    var fieldOrDatumDef = (_a = getFieldOrDatumDef(encoding[channel])) !== null && _a !== void 0 ? _a : getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);
    var axis = model.axis(channel) || {};
    var format = axis.format,
        formatType = axis.formatType;
    var text = formatSignalRef({
      fieldOrDatumDef: fieldOrDatumDef,
      field: 'datum.value',
      format: format,
      formatType: formatType,
      config: config,
      isUTCScale: model.getScaleComponent(channel).get('type') === ScaleType.UTC,
      omitTimeFormatConfig: true,
      omitNumberFormatAndEmptyTimeFormat: true // no need to generate number format for encoding block as we can use Vega's axis format

    });

    var labelsSpec = _extends(_extends({}, text ? {
      text: text
    } : {}), specifiedLabelsSpec);

    labelsSpec = _extends(_extends({}, labelsSpec), specifiedLabelsSpec);
    return keys$2(labelsSpec).length === 0 ? undefined : labelsSpec;
  }

  function parseUnitAxes(model) {
    return POSITION_SCALE_CHANNELS.reduce(function (axis, channel) {
      if (model.component.scales[channel]) {
        axis[channel] = [parseAxis$1(channel, model)];
      }

      return axis;
    }, {});
  }
  var OPPOSITE_ORIENT = {
    bottom: 'top',
    top: 'bottom',
    left: 'right',
    right: 'left'
  };
  function parseLayerAxes(model) {
    var _a;

    var _model$component = model.component,
        axes = _model$component.axes,
        resolve = _model$component.resolve;
    var axisCount = {
      top: 0,
      bottom: 0,
      right: 0,
      left: 0
    };

    var _iterator = _createForOfIteratorHelper(model.children),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _child = _step.value;

        _child.parseAxesAndHeaders();

        var _iterator5 = _createForOfIteratorHelper(keys$2(_child.component.axes)),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _channel = _step5.value;
            resolve.axis[_channel] = parseGuideResolve(model.component.resolve, _channel);

            if (resolve.axis[_channel] === 'shared') {
              // If the resolve says shared (and has not been overridden)
              // We will try to merge and see if there is a conflict
              axes[_channel] = mergeAxisComponents(axes[_channel], _child.component.axes[_channel]);

              if (!axes[_channel]) {
                // If merge returns nothing, there is a conflict so we cannot make the axis shared.
                // Thus, mark axis as independent and remove the axis component.
                resolve.axis[_channel] = 'independent';
                delete axes[_channel];
              }
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      } // Move axes to layer's axis component and merge shared axes

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    for (var _i = 0, _arr = [X$1, Y$1]; _i < _arr.length; _i++) {
      var channel = _arr[_i];

      var _iterator2 = _createForOfIteratorHelper(model.children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;

          if (!child.component.axes[channel]) {
            // skip if the child does not have a particular axis
            continue;
          }

          if (resolve.axis[channel] === 'independent') {
            // If axes are independent, concat the axisComponent array.
            axes[channel] = ((_a = axes[channel]) !== null && _a !== void 0 ? _a : []).concat(child.component.axes[channel]); // Automatically adjust orient

            var _iterator4 = _createForOfIteratorHelper(child.component.axes[channel]),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var axisComponent = _step4.value;

                var _axisComponent$getWit = axisComponent.getWithExplicit('orient'),
                    orient = _axisComponent$getWit.value,
                    explicit = _axisComponent$getWit.explicit;

                if (axisCount[orient] > 0 && !explicit) {
                  // Change axis orient if the number do not match
                  var oppositeOrient = OPPOSITE_ORIENT[orient];

                  if (axisCount[orient] > axisCount[oppositeOrient]) {
                    axisComponent.set('orient', oppositeOrient, false);
                  }
                }

                axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          } // After merging, make sure to remove axes from child


          delete child.component.axes[channel];
        } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)

      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {
        var _iterator3 = _createForOfIteratorHelper(axes[channel]),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var axisCmpt = _step3.value;

            if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {
              axisCmpt.implicit.grid = false;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }

  function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
    if (mergedAxisCmpts) {
      // FIXME: this is a bit wrong once we support multiple axes
      if (mergedAxisCmpts.length !== childAxisCmpts.length) {
        return undefined; // Cannot merge axis component with different number of axes.
      }

      var length = mergedAxisCmpts.length;

      for (var i = 0; i < length; i++) {
        var merged = mergedAxisCmpts[i];
        var child = childAxisCmpts[i];

        if (!!merged !== !!child) {
          return undefined;
        } else if (merged && child) {
          var mergedOrient = merged.getWithExplicit('orient');
          var childOrient = child.getWithExplicit('orient');

          if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
            // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
            // Cannot merge due to inconsistent orient
            return undefined;
          } else {
            mergedAxisCmpts[i] = mergeAxisComponent(merged, child);
          }
        }
      }
    } else {
      // For first one, return a copy of the child
      return childAxisCmpts.map(function (axisComponent) {
        return axisComponent.clone();
      });
    }

    return mergedAxisCmpts;
  }

  function mergeAxisComponent(merged, child) {
    var _iterator6 = _createForOfIteratorHelper(AXIS_COMPONENT_PROPERTIES),
        _step6;

    try {
      var _loop = function _loop() {
        var prop = _step6.value;
        var mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function
        function (v1, v2) {
          switch (prop) {
            case 'title':
              return mergeTitleComponent(v1, v2);

            case 'gridScale':
              return {
                explicit: v1.explicit,
                value: getFirstDefined(v1.value, v2.value)
              };
          }

          return defaultTieBreaker(v1, v2, prop, 'axis');
        });
        merged.setWithExplicit(prop, mergedValueWithExplicit);
      };

      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    return merged;
  }

  function isExplicit$1(value, property, axis, model, channel) {
    if (property === 'disable') {
      return axis !== undefined; // if axis is specified or null/false, then it's enable/disable state is explicit
    }

    axis = axis || {};

    switch (property) {
      case 'titleAngle':
      case 'labelAngle':
        return value === normalizeAngle(axis[property]);

      case 'values':
        return !!axis.values;
      // specified axis.values is already respected, but may get transformed.

      case 'encode':
        // both VL axis.encoding and axis.labelAngle affect VG axis.encode
        return !!axis.encoding || !!axis.labelAngle;

      case 'title':
        // title can be explicit if fieldDef.title is set
        if (value === getFieldDefTitle(model, channel)) {
          return true;
        }

    } // Otherwise, things are explicit if the returned value matches the specified property


    return value === axis[property];
  }
  /**
   * Properties to always include values from config
   */


  var propsToAlwaysIncludeConfig = new Set(['grid', 'translate', // the rest are not axis configs in Vega, but are in VL, so we need to set too.
  'format', 'formatType', 'orient', 'labelExpr', 'tickCount', 'position', 'tickMinStep']);

  function parseAxis$1(channel, model) {
    var _a, _b, _c;

    var axis = model.axis(channel);
    var axisComponent = new AxisComponent();
    var fieldOrDatumDef = getFieldOrDatumDef(model.encoding[channel]);
    var mark = model.mark,
        config = model.config;
    var orient = (axis === null || axis === void 0 ? void 0 : axis.orient) || ((_a = config[channel === 'x' ? 'axisX' : 'axisY']) === null || _a === void 0 ? void 0 : _a.orient) || ((_b = config.axis) === null || _b === void 0 ? void 0 : _b.orient) || defaultOrient(channel);
    var scaleType = model.getScaleComponent(channel).get('type');
    var axisConfigs = getAxisConfigs(channel, scaleType, orient, model.config);

    if (axis !== undefined && !axis || getAxisConfig('disable', config, axis === null || axis === void 0 ? void 0 : axis.style, axisConfigs).configValue) {
      // if axis is explicitly falsy, disable it and include no other properties.
      axisComponent.set('disable', true, axis !== undefined && !axis);
      return axisComponent;
    }

    axis = axis || {};
    var labelAngle = getLabelAngle(model, axis, channel, fieldOrDatumDef, axisConfigs);
    var ruleParams = {
      fieldOrDatumDef: fieldOrDatumDef,
      axis: axis,
      channel: channel,
      model: model,
      scaleType: scaleType,
      orient: orient,
      labelAngle: labelAngle,
      mark: mark,
      config: config
    }; // 1.2. Add properties

    var _iterator7 = _createForOfIteratorHelper(AXIS_COMPONENT_PROPERTIES),
        _step7;

    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var property = _step7.value;
        var value = property in axisRules ? axisRules[property](ruleParams) : isAxisProperty(property) ? axis[property] : undefined;
        var hasValue = value !== undefined;
        var explicit = isExplicit$1(value, property, axis, model, channel);

        if (hasValue && explicit) {
          axisComponent.set(property, value, explicit);
        } else {
          var _ref = isAxisProperty(property) && property !== 'values' ? getAxisConfig(property, model.config, axis.style, axisConfigs) : {},
              _ref$configValue = _ref.configValue,
              configValue = _ref$configValue === void 0 ? undefined : _ref$configValue,
              _ref$configFrom = _ref.configFrom,
              configFrom = _ref$configFrom === void 0 ? undefined : _ref$configFrom;

          var hasConfigValue = configValue !== undefined;

          if (hasValue && !hasConfigValue) {
            // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)
            axisComponent.set(property, value, explicit);
          } else if ( // Cases need implicit values
          // 1. Axis config that aren't available in Vega
          !(configFrom === 'vgAxisConfig') || // 2. Certain properties are always included (see `propsToAlwaysIncludeConfig`'s declaration for more details)
          propsToAlwaysIncludeConfig.has(property) && hasConfigValue || // 3. Conditional axis values and signals
          isConditionalAxisValue(configValue) || // need to set "any" as TS isn't smart enough to figure the generic parameter type yet
          isSignalRef(configValue)) {
            // If a config is specified and is conditional, copy conditional value from axis config
            axisComponent.set(property, configValue, false);
          }
        }
      } // 2) Add guide encode definition groups

    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }

    var axisEncoding = (_c = axis.encoding) !== null && _c !== void 0 ? _c : {};
    var axisEncode = AXIS_PARTS.reduce(function (e, part) {
      var _a;

      if (!axisComponent.hasAxisPart(part)) {
        // No need to create encode for a disabled part.
        return e;
      }

      var axisEncodingPart = guideEncodeEntry((_a = axisEncoding[part]) !== null && _a !== void 0 ? _a : {}, model);
      var value = part === 'labels' ? labels$1(model, channel, axisEncodingPart) : axisEncodingPart;

      if (value !== undefined && keys$2(value).length > 0) {
        e[part] = {
          update: value
        };
      }

      return e;
    }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.

    if (keys$2(axisEncode).length > 0) {
      axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);
    }

    return axisComponent;
  }

  function initLayoutSize(_ref) {
    var encoding = _ref.encoding,
        size = _ref.size;

    var _iterator = _createForOfIteratorHelper(POSITION_SCALE_CHANNELS),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var channel = _step.value;
        var sizeType = getSizeChannel(channel);

        if (isStep(size[sizeType])) {
          if (isContinuousFieldOrDatumDef(encoding[channel])) {
            delete size[sizeType];
            warn$1(message.stepDropped(sizeType));
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return size;
  }

  function initMarkdef(mark, encoding, config, _ref) {
    var graticule = _ref.graticule;
    var markDef = isMarkDef(mark) ? _extends({}, mark) : {
      type: mark
    }; // set orient, which can be overridden by rules as sometimes the specified orient is invalid.

    var specifiedOrient = getMarkPropOrConfig('orient', markDef, config);
    markDef.orient = orient$1(markDef.type, encoding, specifiedOrient);

    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {
      warn$1(message.orientOverridden(markDef.orient, specifiedOrient));
    }

    if (markDef.type === 'bar' && markDef.orient) {
      var cornerRadiusEnd = getMarkPropOrConfig('cornerRadiusEnd', markDef, config);

      if (cornerRadiusEnd !== undefined) {
        var newProps = markDef.orient === 'horizontal' && encoding.x2 || markDef.orient === 'vertical' && encoding.y2 ? ['cornerRadius'] : BAR_CORNER_RADIUS_INDEX[markDef.orient];

        var _iterator = _createForOfIteratorHelper(newProps),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var newProp = _step.value;
            markDef[newProp] = cornerRadiusEnd;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (markDef.cornerRadiusEnd !== undefined) {
          delete markDef.cornerRadiusEnd; // no need to keep the original cap cornerRadius
        }
      }
    } // set opacity and filled if not specified in mark config


    var specifiedOpacity = getMarkPropOrConfig('opacity', markDef, config);

    if (specifiedOpacity === undefined) {
      markDef.opacity = opacity(markDef.type, encoding);
    }

    var specifiedFilled = markDef.filled;

    if (specifiedFilled === undefined) {
      markDef.filled = graticule ? false : filled(markDef, config);
    } // set cursor, which should be pointer if href channel is present unless otherwise specified


    var specifiedCursor = getMarkPropOrConfig('cursor', markDef, config);

    if (specifiedCursor === undefined) {
      markDef.cursor = cursor$1(markDef, encoding, config);
    }

    return markDef;
  }

  function cursor$1(markDef, encoding, config) {
    if (encoding.href || markDef.href || getMarkPropOrConfig('href', markDef, config)) {
      return 'pointer';
    }

    return markDef.cursor;
  }

  function opacity(mark, encoding) {
    if (contains$1([POINT, TICK, CIRCLE, SQUARE], mark)) {
      // point-based marks
      if (!isAggregate(encoding)) {
        return 0.7;
      }
    }

    return undefined;
  }

  function filled(markDef, config) {
    var filledConfig = getMarkConfig('filled', markDef, config);
    var mark = markDef.type;
    return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);
  }

  function orient$1(mark, encoding, specifiedOrient) {
    switch (mark) {
      case POINT:
      case CIRCLE:
      case SQUARE:
      case TEXT:
      case RECT:
      case IMAGE:
        // orient is meaningless for these marks.
        return undefined;
    }

    var x = encoding.x,
        y = encoding.y,
        x2 = encoding.x2,
        y2 = encoding.y2;

    switch (mark) {
      case BAR:
        if (isFieldDef(x) && (isBinned(x.bin) || isFieldDef(y) && y.aggregate && !x.aggregate)) {
          return 'vertical';
        }

        if (isFieldDef(y) && (isBinned(y.bin) || isFieldDef(x) && x.aggregate && !y.aggregate)) {
          return 'horizontal';
        }

        if (y2 || x2) {
          // Ranged bar does not always have clear orientation, so we allow overriding
          if (specifiedOrient) {
            return specifiedOrient;
          } // If y is range and x is non-range, non-bin Q, y is likely a prebinned field


          if (!x2) {
            if (isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin) || isNumericDataDef(x)) {
              return 'horizontal';
            }
          } // If x is range and y is non-range, non-bin Q, x is likely a prebinned field


          if (!y2) {
            if (isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin) || isNumericDataDef(y)) {
              return 'vertical';
            }
          }
        }

      // falls through

      case RULE:
        // return undefined for line segment rule and bar with both axis ranged
        // we have to ignore the case that the data are already binned
        if (x2 && !(isFieldDef(x) && isBinned(x.bin)) && y2 && !(isFieldDef(y) && isBinned(y.bin))) {
          return undefined;
        }

      // falls through

      case AREA:
        // If there are range for both x and y, y (vertical) has higher precedence.
        if (y2) {
          if (isFieldDef(y) && isBinned(y.bin)) {
            return 'horizontal';
          } else {
            return 'vertical';
          }
        } else if (x2) {
          if (isFieldDef(x) && isBinned(x.bin)) {
            return 'vertical';
          } else {
            return 'horizontal';
          }
        } else if (mark === RULE) {
          if (x && !y) {
            return 'vertical';
          } else if (y && !x) {
            return 'horizontal';
          }
        }

      // falls through

      case LINE:
      case TICK:
        {
          // Tick is opposite to bar, line, area and never have ranged mark.
          var xIsContinuous = isContinuousFieldOrDatumDef(x);
          var yIsContinuous = isContinuousFieldOrDatumDef(y);

          if (xIsContinuous && !yIsContinuous) {
            return mark !== 'tick' ? 'horizontal' : 'vertical';
          } else if (!xIsContinuous && yIsContinuous) {
            return mark !== 'tick' ? 'vertical' : 'horizontal';
          } else if (xIsContinuous && yIsContinuous) {
            var xDef = x; // we can cast here since they are surely fieldDef

            var yDef = y;
            var xIsTemporal = xDef.type === TEMPORAL;
            var yIsTemporal = yDef.type === TEMPORAL; // temporal without timeUnit is considered continuous, but better serves as dimension

            if (xIsTemporal && !yIsTemporal) {
              return mark !== 'tick' ? 'vertical' : 'horizontal';
            } else if (!xIsTemporal && yIsTemporal) {
              return mark !== 'tick' ? 'horizontal' : 'vertical';
            }

            if (!xDef.aggregate && yDef.aggregate) {
              return mark !== 'tick' ? 'vertical' : 'horizontal';
            } else if (xDef.aggregate && !yDef.aggregate) {
              return mark !== 'tick' ? 'horizontal' : 'vertical';
            }

            if (specifiedOrient) {
              // When ambiguous, use user specified one.
              return specifiedOrient;
            }

            return 'vertical';
          } else {
            // Discrete x Discrete case
            if (specifiedOrient) {
              // When ambiguous, use user specified one.
              return specifiedOrient;
            }

            return undefined;
          }
        }
    }

    return 'vertical';
  }

  var arc$3 = {
    vgMark: 'arc',
    encodeEntry: function encodeEntry(model) {
      return _extends(_extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        size: 'ignore',
        orient: 'ignore',
        theta: 'ignore'
      })), pointPosition('x', model, {
        defaultPos: 'mid'
      })), pointPosition('y', model, {
        defaultPos: 'mid'
      })), rectPosition(model, 'radius', 'arc')), rectPosition(model, 'theta', 'arc'));
    }
  };

  var area$4 = {
    vgMark: 'area',
    encodeEntry: function encodeEntry(model) {
      return _extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        orient: 'include',
        size: 'ignore',
        theta: 'ignore'
      })), pointOrRangePosition('x', model, {
        defaultPos: 'zeroOrMin',
        defaultPos2: 'zeroOrMin',
        range: model.markDef.orient === 'horizontal'
      })), pointOrRangePosition('y', model, {
        defaultPos: 'zeroOrMin',
        defaultPos2: 'zeroOrMin',
        range: model.markDef.orient === 'vertical'
      })), defined(model));
    }
  };

  var bar = {
    vgMark: 'rect',
    encodeEntry: function encodeEntry(model) {
      return _extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        orient: 'ignore',
        size: 'ignore',
        theta: 'ignore'
      })), rectPosition(model, 'x', 'bar')), rectPosition(model, 'y', 'bar'));
    }
  };

  var geoshape = {
    vgMark: 'shape',
    encodeEntry: function encodeEntry(model) {
      return _extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        size: 'ignore',
        orient: 'ignore',
        theta: 'ignore'
      }));
    },
    postEncodingTransform: function postEncodingTransform(model) {
      var encoding = model.encoding;
      var shapeDef = encoding.shape;

      var transform = _extends({
        type: 'geoshape',
        projection: model.projectionName()
      }, shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? {
        field: vgField(shapeDef, {
          expr: 'datum'
        })
      } : {});

      return [transform];
    }
  };

  var image$2 = {
    vgMark: 'image',
    encodeEntry: function encodeEntry(model) {
      return _extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'ignore',
        orient: 'ignore',
        size: 'ignore',
        theta: 'ignore'
      })), rectPosition(model, 'x', 'image')), rectPosition(model, 'y', 'image')), text$1(model, 'url'));
    }
  };

  var line$3 = {
    vgMark: 'line',
    encodeEntry: function encodeEntry(model) {
      return _extends(_extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        size: 'ignore',
        orient: 'ignore',
        theta: 'ignore'
      })), pointPosition('x', model, {
        defaultPos: 'mid'
      })), pointPosition('y', model, {
        defaultPos: 'mid'
      })), nonPosition('size', model, {
        vgChannel: 'strokeWidth' // VL's line size is strokeWidth

      })), defined(model));
    }
  };
  var trail$2 = {
    vgMark: 'trail',
    encodeEntry: function encodeEntry(model) {
      return _extends(_extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        size: 'include',
        orient: 'ignore',
        theta: 'ignore'
      })), pointPosition('x', model, {
        defaultPos: 'mid'
      })), pointPosition('y', model, {
        defaultPos: 'mid'
      })), nonPosition('size', model)), defined(model));
    }
  };

  function _encodeEntry(model, fixedShape) {
    var config = model.config;
    return _extends(_extends(_extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
      align: 'ignore',
      baseline: 'ignore',
      color: 'include',
      size: 'include',
      orient: 'ignore',
      theta: 'ignore'
    })), pointPosition('x', model, {
      defaultPos: 'mid'
    })), pointPosition('y', model, {
      defaultPos: 'mid'
    })), nonPosition('size', model)), nonPosition('angle', model)), shapeMixins(model, config, fixedShape));
  }

  function shapeMixins(model, config, fixedShape) {
    if (fixedShape) {
      return {
        shape: {
          value: fixedShape
        }
      };
    }

    return nonPosition('shape', model);
  }
  var point$2 = {
    vgMark: 'symbol',
    encodeEntry: function encodeEntry(model) {
      return _encodeEntry(model);
    }
  };
  var circle$2 = {
    vgMark: 'symbol',
    encodeEntry: function encodeEntry(model) {
      return _encodeEntry(model, 'circle');
    }
  };
  var square = {
    vgMark: 'symbol',
    encodeEntry: function encodeEntry(model) {
      return _encodeEntry(model, 'square');
    }
  };

  var rect$1 = {
    vgMark: 'rect',
    encodeEntry: function encodeEntry(model) {
      return _extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        orient: 'ignore',
        size: 'ignore',
        theta: 'ignore'
      })), rectPosition(model, 'x', 'rect')), rectPosition(model, 'y', 'rect'));
    }
  };

  var rule$2 = {
    vgMark: 'rule',
    encodeEntry: function encodeEntry(model) {
      var markDef = model.markDef;
      var orient = markDef.orient;

      if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {
        // Show nothing if we have none of x, y, lat, and long.
        return {};
      }

      return _extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        orient: 'ignore',
        size: 'ignore',
        theta: 'ignore'
      })), pointOrRangePosition('x', model, {
        defaultPos: orient === 'horizontal' ? 'zeroOrMax' : 'mid',
        defaultPos2: 'zeroOrMin',
        range: orient !== 'vertical' // include x2 for horizontal or line segment rule

      })), pointOrRangePosition('y', model, {
        defaultPos: orient === 'vertical' ? 'zeroOrMax' : 'mid',
        defaultPos2: 'zeroOrMin',
        range: orient !== 'horizontal' // include y2 for vertical or line segment rule

      })), nonPosition('size', model, {
        vgChannel: 'strokeWidth' // VL's rule size is strokeWidth

      }));
    }
  };

  var text$2 = {
    vgMark: 'text',
    encodeEntry: function encodeEntry(model) {
      var config = model.config,
          encoding = model.encoding;
      return _extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'include',
        baseline: 'include',
        color: 'include',
        size: 'ignore',
        orient: 'ignore',
        theta: 'include'
      })), pointPosition('x', model, {
        defaultPos: 'mid'
      })), pointPosition('y', model, {
        defaultPos: 'mid'
      })), text$1(model)), nonPosition('size', model, {
        vgChannel: 'fontSize' // VL's text size is fontSize

      })), nonPosition('angle', model)), valueIfDefined('align', align(model.markDef, encoding, config))), valueIfDefined('baseline', baseline$1(model.markDef, encoding, config))), pointPosition('radius', model, {
        defaultPos: null,
        isMidPoint: true
      })), pointPosition('theta', model, {
        defaultPos: null,
        isMidPoint: true
      }));
    }
  };

  function align(markDef, encoding, config) {
    var a = getMarkPropOrConfig('align', markDef, config);

    if (a === undefined) {
      return 'center';
    } // If there is a config, Vega-parser will process this already.


    return undefined;
  }

  function baseline$1(markDef, encoding, config) {
    var b = getMarkPropOrConfig('baseline', markDef, config);

    if (b === undefined) {
      return 'middle';
    } // If there is a config, Vega-parser will process this already.


    return undefined;
  }

  var tick = {
    vgMark: 'rect',
    encodeEntry: function encodeEntry(model) {
      var config = model.config,
          markDef = model.markDef;
      var orient = markDef.orient;
      var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
      var vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';
      return _extends(_extends(_extends(_extends(_extends({}, baseEncodeEntry(model, {
        align: 'ignore',
        baseline: 'ignore',
        color: 'include',
        orient: 'ignore',
        size: 'ignore',
        theta: 'ignore'
      })), pointPosition('x', model, {
        defaultPos: 'mid',
        vgChannel: 'xc'
      })), pointPosition('y', model, {
        defaultPos: 'mid',
        vgChannel: 'yc'
      })), nonPosition('size', model, {
        defaultValue: defaultSize(model),
        vgChannel: vgSizeChannel
      })), _defineProperty({}, vgThicknessChannel, signalOrValueRef(getMarkPropOrConfig('thickness', markDef, config))));
    }
  };

  function defaultSize(model) {
    var _a;

    var config = model.config,
        markDef = model.markDef;
    var orient = markDef.orient;
    var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
    var scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');
    var markPropOrConfig = (_a = getMarkPropOrConfig('size', markDef, config, {
      vgChannel: vgSizeChannel
    })) !== null && _a !== void 0 ? _a : config.tick.bandSize;

    if (markPropOrConfig !== undefined) {
      return markPropOrConfig;
    } else {
      var scaleRange = scale ? scale.get('range') : undefined;

      if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {
        return scaleRange.step * 3 / 4;
      }

      var defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);
      return defaultViewStep * 3 / 4;
    }
  }

  var markCompiler = {
    arc: arc$3,
    area: area$4,
    bar: bar,
    circle: circle$2,
    geoshape: geoshape,
    image: image$2,
    line: line$3,
    point: point$2,
    rect: rect$1,
    rule: rule$2,
    square: square,
    text: text$2,
    tick: tick,
    trail: trail$2
  };
  function parseMarkGroups(model) {
    if (contains$1([LINE, AREA, TRAIL], model.mark)) {
      return parsePathMark(model);
    } else if (contains$1([BAR], model.mark)) {
      return getStackGroups(model);
    } else {
      return getMarkGroups(model);
    }
  }
  var FACETED_PATH_PREFIX = 'faceted_path_';

  function parsePathMark(model) {
    var details = pathGroupingFields(model.mark, model.encoding);
    var pathMarks = getMarkGroups(model, {
      // If has subfacet for line/area group, need to use faceted data from below.
      fromPrefix: details.length > 0 ? FACETED_PATH_PREFIX : ''
    });

    if (details.length > 0) {
      // have level of details - need to facet line into subgroups
      // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
      return [{
        name: model.getName('pathgroup'),
        type: 'group',
        from: {
          facet: {
            name: FACETED_PATH_PREFIX + model.requestDataName(MAIN),
            data: model.requestDataName(MAIN),
            groupby: details
          }
        },
        encode: {
          update: {
            width: {
              field: {
                group: 'width'
              }
            },
            height: {
              field: {
                group: 'height'
              }
            }
          }
        },
        marks: pathMarks
      }];
    } else {
      return pathMarks;
    }
  }

  var STACK_GROUP_PREFIX = 'stack_group_';
  /**
   * We need to put stacked bars into groups in order to enable cornerRadius for stacks.
   * If stack is used and the model doesn't have size encoding, we put the mark into groups,
   * and apply cornerRadius properties at the group.
   */

  function getStackGroups(model) {
    // Don't use nested groups when cornerRadius is not specified, or specified as 0
    var hasCornerRadius = VG_CORNERRADIUS_CHANNELS.some(function (prop) {
      return getMarkPropOrConfig(prop, model.markDef, model.config);
    }); // Activate groups if stack is used and the model doesn't have size encoding

    if (model.stack && !model.fieldDef('size') && hasCornerRadius) {
      // Generate the mark
      var _getMarkGroups = getMarkGroups(model, {
        fromPrefix: STACK_GROUP_PREFIX
      }),
          _getMarkGroups2 = _slicedToArray(_getMarkGroups, 1),
          mark = _getMarkGroups2[0]; // Get the scale for the stacked field


      var fieldScale = model.scaleName(model.stack.fieldChannel);

      var stackField = function stackField() {
        var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return model.vgField(model.stack.fieldChannel, opt);
      }; // Find the min/max of the pixel value on the stacked direction


      var stackFieldGroup = function stackFieldGroup(func, expr) {
        var vgFieldMinMax = [stackField({
          prefix: 'min',
          suffix: 'start',
          expr: expr
        }), stackField({
          prefix: 'max',
          suffix: 'start',
          expr: expr
        }), stackField({
          prefix: 'min',
          suffix: 'end',
          expr: expr
        }), stackField({
          prefix: 'max',
          suffix: 'end',
          expr: expr
        })];
        return "".concat(func, "(").concat(vgFieldMinMax.map(function (field) {
          return "scale('".concat(fieldScale, "',").concat(field, ")");
        }).join(','), ")");
      };

      var groupUpdate;
      var innerGroupUpdate; // Build the encoding for group and an inner group

      if (model.stack.fieldChannel === 'x') {
        // Move cornerRadius, y/yc/y2/height properties to group
        // Group x/x2 should be the min/max of the marks within
        groupUpdate = _extends(_extends({}, pick$2(mark.encode.update, ['y', 'yc', 'y2', 'height'].concat(_toConsumableArray(VG_CORNERRADIUS_CHANNELS)))), {
          x: {
            signal: stackFieldGroup('min', 'datum')
          },
          x2: {
            signal: stackFieldGroup('max', 'datum')
          },
          clip: {
            value: true
          }
        }); // Inner group should revert the x translation, and pass height through

        innerGroupUpdate = {
          x: {
            field: {
              group: 'x'
            },
            mult: -1
          },
          height: {
            field: {
              group: 'height'
            }
          }
        }; // The marks should use the same height as group, without y/yc/y2 properties (because it's already done by group)
        // This is why size encoding is not supported yet

        mark.encode.update = _extends(_extends({}, omit(mark.encode.update, ['y', 'yc', 'y2'])), {
          height: {
            field: {
              group: 'height'
            }
          }
        });
      } else {
        groupUpdate = _extends(_extends({}, pick$2(mark.encode.update, ['x', 'xc', 'x2', 'width'])), {
          y: {
            signal: stackFieldGroup('min', 'datum')
          },
          y2: {
            signal: stackFieldGroup('max', 'datum')
          },
          clip: {
            value: true
          }
        });
        innerGroupUpdate = {
          y: {
            field: {
              group: 'y'
            },
            mult: -1
          },
          width: {
            field: {
              group: 'width'
            }
          }
        };
        mark.encode.update = _extends(_extends({}, omit(mark.encode.update, ['x', 'xc', 'x2'])), {
          width: {
            field: {
              group: 'width'
            }
          }
        });
      } // Deal with cornerRadius properties


      var _iterator = _createForOfIteratorHelper(VG_CORNERRADIUS_CHANNELS),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var key = _step.value;
          var configValue = getMarkConfig(key, model.markDef, model.config); // Move from mark to group

          if (mark.encode.update[key]) {
            groupUpdate[key] = mark.encode.update[key];
            delete mark.encode.update[key];
          } else if (configValue) {
            groupUpdate[key] = {
              value: configValue
            };
          } // Overwrite any cornerRadius on mark set by config --- they are already moved to the group


          if (configValue) {
            mark.encode.update[key] = {
              value: 0
            };
          }
        } // For bin and time unit, we have to add bin/timeunit -end channels.

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var groupByField = model.fieldDef(model.stack.groupbyChannel);
      var groupby = vgField(groupByField) ? [vgField(groupByField)] : [];

      if ((groupByField === null || groupByField === void 0 ? void 0 : groupByField.bin) || (groupByField === null || groupByField === void 0 ? void 0 : groupByField.timeUnit)) {
        groupby.push(vgField(groupByField, {
          binSuffix: 'end'
        }));
      }

      var strokeProperties = ['stroke', 'strokeWidth', 'strokeJoin', 'strokeCap', 'strokeDash', 'strokeDashOffset', 'strokeMiterLimit', 'strokeOpacity']; // Generate stroke properties for the group

      groupUpdate = strokeProperties.reduce(function (encode, prop) {
        if (mark.encode.update[prop]) {
          return _extends(_extends({}, encode), _defineProperty({}, prop, mark.encode.update[prop]));
        } else {
          var configValue = getMarkConfig(prop, model.markDef, model.config);

          if (configValue !== undefined) {
            return _extends(_extends({}, encode), _defineProperty({}, prop, {
              value: configValue
            }));
          } else {
            return encode;
          }
        }
      }, groupUpdate); // Apply strokeForeground and strokeOffset if stroke is used

      if (groupUpdate.stroke) {
        groupUpdate.strokeForeground = {
          value: true
        };
        groupUpdate.strokeOffset = {
          value: 0
        };
      }

      return [{
        type: 'group',
        from: {
          facet: {
            data: model.requestDataName(MAIN),
            name: STACK_GROUP_PREFIX + model.requestDataName(MAIN),
            groupby: groupby,
            aggregate: {
              fields: [stackField({
                suffix: 'start'
              }), stackField({
                suffix: 'start'
              }), stackField({
                suffix: 'end'
              }), stackField({
                suffix: 'end'
              })],
              ops: ['min', 'max', 'min', 'max']
            }
          }
        },
        encode: {
          update: groupUpdate
        },
        marks: [{
          type: 'group',
          encode: {
            update: innerGroupUpdate
          },
          marks: [mark]
        }]
      }];
    } else {
      return getMarkGroups(model);
    }
  }

  function getSort$1(model) {
    var encoding = model.encoding,
        stack = model.stack,
        mark = model.mark,
        markDef = model.markDef,
        config = model.config;
    var order = encoding.order;

    if (!isArray(order) && isValueDef(order) && isNullOrFalse(order.value) || !order && isNullOrFalse(getMarkPropOrConfig('order', markDef, config))) {
      return undefined;
    } else if ((isArray(order) || isFieldDef(order)) && !stack) {
      // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)
      return sortParams(order, {
        expr: 'datum'
      });
    } else if (isPathMark(mark)) {
      // For both line and area, we sort values based on dimension by default
      var dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';
      var dimensionChannelDef = encoding[dimensionChannel];

      if (isFieldDef(dimensionChannelDef)) {
        var s = dimensionChannelDef.sort;

        if (isArray(s)) {
          return {
            field: vgField(dimensionChannelDef, {
              prefix: dimensionChannel,
              suffix: 'sort_index',
              expr: 'datum'
            })
          };
        } else if (isSortField(s)) {
          return {
            field: vgField({
              // FIXME: this op might not already exist?
              // FIXME: what if dimensionChannel (x or y) contains custom domain?
              aggregate: isAggregate(model.encoding) ? s.op : undefined,
              field: s.field
            }, {
              expr: 'datum'
            })
          };
        } else if (isSortByEncoding(s)) {
          var fieldDefToSort = model.fieldDef(s.encoding);
          return {
            field: vgField(fieldDefToSort, {
              expr: 'datum'
            }),
            order: s.order
          };
        } else {
          return {
            field: vgField(dimensionChannelDef, {
              // For stack with imputation, we only have bin_mid
              binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,
              expr: 'datum'
            })
          };
        }
      }

      return undefined;
    }

    return undefined;
  }

  function getMarkGroups(model) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      fromPrefix: ''
    };
    var mark = model.mark;
    var clip = getFirstDefined(model.markDef.clip, scaleClip(model), projectionClip(model));
    var style = getStyles(model.markDef);
    var key = model.encoding.key;
    var sort = getSort$1(model);
    var interactive = interactiveFlag(model);
    var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;
    return [_extends(_extends(_extends(_extends(_extends(_extends(_extends({
      name: model.getName('marks'),
      type: markCompiler[mark].vgMark
    }, clip ? {
      clip: true
    } : {}), style ? {
      style: style
    } : {}), key ? {
      key: key.field
    } : {}), sort ? {
      sort: sort
    } : {}), interactive ? interactive : {}), {
      from: {
        data: opt.fromPrefix + model.requestDataName(MAIN)
      },
      encode: {
        update: markCompiler[mark].encodeEntry(model)
      }
    }), postEncodingTransform ? {
      transform: postEncodingTransform
    } : {})];
  }
  /**
   * If scales are bound to interval selections, we want to automatically clip
   * marks to account for panning/zooming interactions. We identify bound scales
   * by the selectionExtent property, which gets added during scale parsing.
   */


  function scaleClip(model) {
    var xScale = model.getScaleComponent('x');
    var yScale = model.getScaleComponent('y');
    return xScale && xScale.get('selectionExtent') || yScale && yScale.get('selectionExtent') ? true : undefined;
  }
  /**
   * If we use a custom projection with auto-fitting to the geodata extent,
   * we need to clip to ensure the chart size doesn't explode.
   */


  function projectionClip(model) {
    var projection = model.component.projection;
    return projection && !projection.isFit ? true : undefined;
  }
  /**
   * Only output interactive flags if we have selections defined somewhere in our model hierarchy.
   */


  function interactiveFlag(model) {
    if (!model.component.selection) return null;
    var unitCount = keys$2(model.component.selection).length;
    var parentCount = unitCount;
    var parent = model.parent;

    while (parent && parentCount === 0) {
      parentCount = keys$2(parent.component.selection).length;
      parent = parent.parent;
    }

    return parentCount ? {
      interactive: unitCount > 0
    } : null;
  }

  /**
   * Internal model of Vega-Lite specification for the compiler.
   */

  var UnitModel = /*#__PURE__*/function (_ModelWithField) {
    _inherits(UnitModel, _ModelWithField);

    var _super = _createSuper(UnitModel);

    function UnitModel(spec, parent, parentGivenName) {
      var _this;

      var parentGivenSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var config = arguments.length > 4 ? arguments[4] : undefined;

      _classCallCheck(this, UnitModel);

      var _a, _b;

      _this = _super.call(this, spec, 'unit', parent, parentGivenName, config, undefined, isFrameMixins(spec) ? spec.view : undefined);
      _this.specifiedScales = {};
      _this.specifiedAxes = {};
      _this.specifiedLegends = {};
      _this.specifiedProjection = {};
      _this.selection = {};
      _this.children = [];
      var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;
      _this.markDef = initMarkdef(spec.mark, (_a = spec.encoding) !== null && _a !== void 0 ? _a : {}, config, {
        graticule: spec.data && isGraticuleGenerator(spec.data)
      });
      var encoding = _this.encoding = initEncoding((_b = spec.encoding) !== null && _b !== void 0 ? _b : {}, _this.markDef);
      _this.size = initLayoutSize({
        encoding: encoding,
        size: isFrameMixins(spec) ? _extends(_extends(_extends({}, parentGivenSize), spec.width ? {
          width: spec.width
        } : {}), spec.height ? {
          height: spec.height
        } : {}) : parentGivenSize
      }); // calculate stack properties

      _this.stack = stack(mark, encoding);
      _this.specifiedScales = _this.initScales(mark, encoding);
      _this.specifiedAxes = _this.initAxes(encoding);
      _this.specifiedLegends = _this.initLegend(encoding);
      _this.specifiedProjection = spec.projection; // Selections will be initialized upon parse.

      _this.selection = spec.selection;
      return _this;
    }

    _createClass(UnitModel, [{
      key: "scaleDomain",

      /**
       * Return specified Vega-Lite scale domain for a particular channel
       * @param channel
       */
      value: function scaleDomain(channel) {
        var scale = this.specifiedScales[channel];
        return scale ? scale.domain : undefined;
      }
    }, {
      key: "axis",
      value: function axis(channel) {
        return this.specifiedAxes[channel];
      }
    }, {
      key: "legend",
      value: function legend(channel) {
        return this.specifiedLegends[channel];
      }
    }, {
      key: "initScales",
      value: function initScales(mark, encoding) {
        return SCALE_CHANNELS.reduce(function (scales, channel) {
          var _a;

          var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);

          if (fieldOrDatumDef) {
            scales[channel] = (_a = fieldOrDatumDef.scale) !== null && _a !== void 0 ? _a : {};
          }

          return scales;
        }, {});
      }
    }, {
      key: "initAxes",
      value: function initAxes(encoding) {
        return [X$1, Y$1].reduce(function (_axis, channel) {
          // Position Axis
          // TODO: handle ConditionFieldDef
          var channelDef = encoding[channel];

          if (isFieldOrDatumDef(channelDef) || channel === X$1 && isFieldOrDatumDef(encoding.x2) || channel === Y$1 && isFieldOrDatumDef(encoding.y2)) {
            var axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : undefined;
            _axis[channel] = axisSpec ? _extends({}, axisSpec) : axisSpec; // convert truthy value to object
          }

          return _axis;
        }, {});
      }
    }, {
      key: "initLegend",
      value: function initLegend(encoding) {
        return NONPOSITION_SCALE_CHANNELS.reduce(function (_legend, channel) {
          var fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);

          if (fieldOrDatumDef && supportLegend(channel)) {
            var legend = fieldOrDatumDef.legend;
            _legend[channel] = legend ? _extends({}, legend) : legend; // convert truthy value to object
          }

          return _legend;
        }, {});
      }
    }, {
      key: "parseData",
      value: function parseData() {
        this.component.data = parseData$2(this);
      }
    }, {
      key: "parseLayoutSize",
      value: function parseLayoutSize() {
        parseUnitLayoutSize(this);
      }
    }, {
      key: "parseSelections",
      value: function parseSelections() {
        this.component.selection = parseUnitSelection(this, this.selection);
      }
    }, {
      key: "parseMarkGroup",
      value: function parseMarkGroup() {
        this.component.mark = parseMarkGroups(this);
      }
    }, {
      key: "parseAxesAndHeaders",
      value: function parseAxesAndHeaders() {
        this.component.axes = parseUnitAxes(this);
      }
    }, {
      key: "assembleSelectionTopLevelSignals",
      value: function assembleSelectionTopLevelSignals(signals) {
        return assembleTopLevelSignals(this, signals);
      }
    }, {
      key: "assembleSignals",
      value: function assembleSignals() {
        return [].concat(_toConsumableArray(assembleAxisSignals(this)), _toConsumableArray(assembleUnitSelectionSignals(this, [])));
      }
    }, {
      key: "assembleSelectionData",
      value: function assembleSelectionData(data) {
        return assembleUnitSelectionData(this, data);
      }
    }, {
      key: "assembleLayout",
      value: function assembleLayout() {
        return null;
      }
    }, {
      key: "assembleLayoutSignals",
      value: function assembleLayoutSignals$1() {
        return assembleLayoutSignals(this);
      }
    }, {
      key: "assembleMarks",
      value: function assembleMarks() {
        var _a;

        var marks = (_a = this.component.mark) !== null && _a !== void 0 ? _a : []; // If this unit is part of a layer, selections should augment
        // all in concert rather than each unit individually. This
        // ensures correct interleaving of clipping and brushed marks.

        if (!this.parent || !isLayerModel(this.parent)) {
          marks = assembleUnitSelectionMarks(this, marks);
        }

        return marks.map(this.correctDataNames);
      }
    }, {
      key: "getMapping",
      value: function getMapping() {
        return this.encoding;
      }
    }, {
      key: "channelHasField",
      value: function channelHasField$1(channel) {
        return channelHasField(this.encoding, channel);
      }
    }, {
      key: "fieldDef",
      value: function fieldDef(channel) {
        var channelDef = this.encoding[channel];
        return getFieldDef(channelDef);
      }
    }, {
      key: "typedFieldDef",
      value: function typedFieldDef(channel) {
        var fieldDef = this.fieldDef(channel);

        if (isTypedFieldDef(fieldDef)) {
          return fieldDef;
        }

        return null;
      }
    }, {
      key: "hasProjection",
      get: function get() {
        var encoding = this.encoding;
        var isGeoShapeMark = this.mark === GEOSHAPE;
        var hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(function (channel) {
          return isFieldOrDatumDef(encoding[channel]);
        });
        return isGeoShapeMark || hasGeoPosition;
      }
    }, {
      key: "mark",
      get: function get() {
        return this.markDef.type;
      }
    }]);

    return UnitModel;
  }(ModelWithField);

  var LayerModel = /*#__PURE__*/function (_Model) {
    _inherits(LayerModel, _Model);

    var _super = _createSuper(LayerModel);

    function LayerModel(spec, parent, parentGivenName, parentGivenSize, config) {
      var _this;

      _classCallCheck(this, LayerModel);

      _this = _super.call(this, spec, 'layer', parent, parentGivenName, config, spec.resolve, spec.view);

      var layoutSize = _extends(_extends(_extends({}, parentGivenSize), spec.width ? {
        width: spec.width
      } : {}), spec.height ? {
        height: spec.height
      } : {});

      _this.children = spec.layer.map(function (layer, i) {
        if (isLayerSpec(layer)) {
          return new LayerModel(layer, _assertThisInitialized(_this), _this.getName('layer_' + i), layoutSize, config);
        } else if (isUnitSpec(layer)) {
          return new UnitModel(layer, _assertThisInitialized(_this), _this.getName('layer_' + i), layoutSize, config);
        }

        throw new Error(message.invalidSpec(layer));
      });
      return _this;
    }

    _createClass(LayerModel, [{
      key: "parseData",
      value: function parseData() {
        this.component.data = parseData$2(this);

        var _iterator = _createForOfIteratorHelper(this.children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            child.parseData();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "parseLayoutSize",
      value: function parseLayoutSize() {
        parseLayerLayoutSize(this);
      }
    }, {
      key: "parseSelections",
      value: function parseSelections() {
        // Merge selections up the hierarchy so that they may be referenced
        // across unit specs. Persist their definitions within each child
        // to assemble signals which remain within output Vega unit groups.
        this.component.selection = {};

        var _iterator2 = _createForOfIteratorHelper(this.children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            child.parseSelections();

            var _iterator3 = _createForOfIteratorHelper(keys$2(child.component.selection)),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var key = _step3.value;
                this.component.selection[key] = child.component.selection[key];
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }, {
      key: "parseMarkGroup",
      value: function parseMarkGroup() {
        var _iterator4 = _createForOfIteratorHelper(this.children),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var child = _step4.value;
            child.parseMarkGroup();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }, {
      key: "parseAxesAndHeaders",
      value: function parseAxesAndHeaders() {
        parseLayerAxes(this);
      }
    }, {
      key: "assembleSelectionTopLevelSignals",
      value: function assembleSelectionTopLevelSignals(signals) {
        return this.children.reduce(function (sg, child) {
          return child.assembleSelectionTopLevelSignals(sg);
        }, signals);
      } // TODO: Support same named selections across children.

    }, {
      key: "assembleSignals",
      value: function assembleSignals() {
        return this.children.reduce(function (signals, child) {
          return signals.concat(child.assembleSignals());
        }, assembleAxisSignals(this));
      }
    }, {
      key: "assembleLayoutSignals",
      value: function assembleLayoutSignals$1() {
        return this.children.reduce(function (signals, child) {
          return signals.concat(child.assembleLayoutSignals());
        }, assembleLayoutSignals(this));
      }
    }, {
      key: "assembleSelectionData",
      value: function assembleSelectionData(data) {
        return this.children.reduce(function (db, child) {
          return child.assembleSelectionData(db);
        }, data);
      }
    }, {
      key: "assembleTitle",
      value: function assembleTitle() {
        var title = _get(_getPrototypeOf(LayerModel.prototype), "assembleTitle", this).call(this);

        if (title) {
          return title;
        } // If title does not provide layer, look into children


        var _iterator5 = _createForOfIteratorHelper(this.children),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var child = _step5.value;
            title = child.assembleTitle();

            if (title) {
              return title;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return undefined;
      }
    }, {
      key: "assembleLayout",
      value: function assembleLayout() {
        return null;
      }
    }, {
      key: "assembleMarks",
      value: function assembleMarks() {
        return assembleLayerSelectionMarks(this, this.children.flatMap(function (child) {
          return child.assembleMarks();
        }));
      }
    }, {
      key: "assembleLegends",
      value: function assembleLegends$1() {
        return this.children.reduce(function (legends, child) {
          return legends.concat(child.assembleLegends());
        }, assembleLegends(this));
      }
    }]);

    return LayerModel;
  }(Model);

  function buildModel(spec, parent, parentGivenName, unitSize, config) {
    if (isFacetSpec(spec)) {
      return new FacetModel(spec, parent, parentGivenName, config);
    } else if (isLayerSpec(spec)) {
      return new LayerModel(spec, parent, parentGivenName, unitSize, config);
    } else if (isUnitSpec(spec)) {
      return new UnitModel(spec, parent, parentGivenName, unitSize, config);
    } else if (isAnyConcatSpec(spec)) {
      return new ConcatModel(spec, parent, parentGivenName, config);
    }

    throw new Error(message.invalidSpec(spec));
  }

  /**
   * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.
   *
   * At a high-level, we make the following transformations in different phases:
   *
   * Input spec
   *     |
   *     |  (Normalization)
   *     v
   * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)
   *     |
   *     |  (Build Model)
   *     v
   * A model tree of the spec
   *     |
   *     |  (Parse)
   *     v
   * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)
   *     |
   *     | (Optimize)
   *     v
   * A model tree with parsed components with the data component optimized
   *     |
   *     | (Assemble)
   *     v
   * Vega spec
   *
   * @param inputSpec The Vega-Lite specification.
   * @param opt       Optional arguments passed to the Vega-Lite compiler.
   * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.
   */

  function compile(inputSpec) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // 0. Augment opt with default opts
    if (opt.logger) {
      // set the singleton logger to the provided logger
      set$4(opt.logger);
    }

    if (opt.fieldTitle) {
      // set the singleton field title formatter
      setTitleFormatter(opt.fieldTitle);
    }

    if (opt.formatTypes) {
      setCustomFormatTypes(opt.formatTypes);
    }

    try {
      // 1. Initialize config by deep merging default config with the config provided via option and the input spec.
      var config = initConfig(mergeConfig(opt.config, inputSpec.config)); // 2. Normalize: Convert input spec -> normalized spec
      // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.
      // - Normalize autosize and width or height spec

      var spec = normalize$1(inputSpec, config); // 3. Build Model: normalized spec -> Model (a tree structure)
      // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.
      // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.

      var model = buildModel(spec, null, '', undefined, config); // 4 Parse: Model --> Model with components
      // Note that components = intermediate representations that are equivalent to Vega specs.
      // We need these intermediate representation because we need to merge many visualization "components" like projections, scales, axes, and legends.
      // We will later convert these components into actual Vega specs in the assemble phase.
      // In this phase, we do a bottom-up traversal over the whole tree to
      // parse for each type of components once (e.g., data, layout, mark, scale).
      // By doing bottom-up traversal, we start parsing components of unit specs and
      // then merge child components of parent composite specs.
      //
      // Please see inside model.parse() for order of different components parsed.

      model.parse(); // draw(model.component.data.sources);
      // 5. Optimize the dataflow. This will modify the data component of the model.

      optimizeDataflow(model.component.data, model); // 6. Assemble: convert model components --> Vega Spec.

      var vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);
      return {
        spec: vgSpec,
        normalized: spec
      };
    } finally {
      // Reset the singleton logger if a logger is provided
      if (opt.logger) {
        reset$1();
      } // Reset the singleton field title formatter if provided


      if (opt.fieldTitle) {
        resetTitleFormatter();
      }
    }
  }

  function getTopLevelProperties(inputSpec, autosize, config, model) {
    var width = model.component.layoutSize.get('width');
    var height = model.component.layoutSize.get('height');

    if (autosize === undefined) {
      autosize = {
        type: 'pad'
      };
    } else if (isString(autosize)) {
      autosize = {
        type: autosize
      };
    }

    if (width && height && isFitType(autosize.type)) {
      if (width === 'step' && height === 'step') {
        warn$1(message.droppingFit());
        autosize.type = 'pad';
      } else if (width === 'step' || height === 'step') {
        // effectively XOR, because else if
        // get step dimension
        var sizeType = width === 'step' ? 'width' : 'height'; // log that we're dropping fit for respective channel

        warn$1(message.droppingFit(getPositionScaleChannel(sizeType))); // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)

        var inverseSizeType = sizeType === 'width' ? 'height' : 'width';
        autosize.type = getFitType(inverseSizeType);
      }
    }

    return _extends(_extends(_extends({}, keys$2(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {
      autosize: autosize.type
    } : {
      autosize: autosize
    }), extractTopLevelProperties(config)), extractTopLevelProperties(inputSpec));
  }
  /*
   * Assemble the top-level model to a Vega spec.
   *
   * Note: this couldn't be `model.assemble()` since the top-level model
   * needs some special treatment to generate top-level properties.
   */


  function assembleTopLevelModel(model, topLevelProperties) {
    var datasets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var usermeta = arguments.length > 3 ? arguments[3] : undefined;
    // Config with Vega-Lite only config removed.
    var vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;
    var data = [].concat(model.assembleSelectionData([]), // only assemble data in the root
    assembleRootData(model.component.data, datasets));
    var projections = model.assembleProjections();
    var title = model.assembleTitle();
    var style = model.assembleGroupStyle();
    var encodeEntry = model.assembleGroupEncodeEntry(true);
    var layoutSignals = model.assembleLayoutSignals(); // move width and height signals with values to top level

    layoutSignals = layoutSignals.filter(function (signal) {
      if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {
        topLevelProperties[signal.name] = +signal.value;
        return false;
      }

      return true;
    });
    return _extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends(_extends({
      $schema: 'https://vega.github.io/schema/vega/v5.json'
    }, model.description ? {
      description: model.description
    } : {}), topLevelProperties), title ? {
      title: title
    } : {}), style ? {
      style: style
    } : {}), encodeEntry ? {
      encode: {
        update: encodeEntry
      }
    } : {}), {
      data: data
    }), projections.length > 0 ? {
      projections: projections
    } : {}), model.assembleGroup([].concat(_toConsumableArray(layoutSignals), _toConsumableArray(model.assembleSelectionTopLevelSignals([]))))), vgConfig ? {
      config: vgConfig
    } : {}), usermeta ? {
      usermeta: usermeta
    } : {});
  }

  var TransformExtractMapper = /*#__PURE__*/function (_SpecMapper) {
    _inherits(TransformExtractMapper, _SpecMapper);

    var _super = _createSuper(TransformExtractMapper);

    function TransformExtractMapper() {
      _classCallCheck(this, TransformExtractMapper);

      return _super.apply(this, arguments);
    }

    _createClass(TransformExtractMapper, [{
      key: "mapUnit",
      value: function mapUnit(spec, _ref) {
        var config = _ref.config;

        if (spec.encoding) {
          var oldEncoding = spec.encoding,
              oldTransforms = spec.transform;

          var _extractTransformsFro = extractTransformsFromEncoding(oldEncoding, config),
              bins = _extractTransformsFro.bins,
              timeUnits = _extractTransformsFro.timeUnits,
              aggregate = _extractTransformsFro.aggregate,
              groupby = _extractTransformsFro.groupby,
              encoding = _extractTransformsFro.encoding;

          var transform = [].concat(_toConsumableArray(oldTransforms ? oldTransforms : []), _toConsumableArray(bins), _toConsumableArray(timeUnits), _toConsumableArray(aggregate.length === 0 ? [] : [{
            aggregate: aggregate,
            groupby: groupby
          }]));
          return _extends(_extends(_extends({}, spec), transform.length > 0 ? {
            transform: transform
          } : {}), {
            encoding: encoding
          });
        } else {
          return spec;
        }
      }
    }]);

    return TransformExtractMapper;
  }(SpecMapper);

  var extractor = new TransformExtractMapper();
  /**
   * Modifies spec extracting transformations from encoding and moving them to the transforms array
   */

  function extractTransforms(spec, config) {
    return extractor.map(spec, {
      config: config
    });
  }

  var version$2 = pkg.version;

  var vegaLiteImport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    normalize: normalize$1,
    version: version$2,
    compile: compile,
    extractTransforms: extractTransforms
  });

  var vegaSchemaUrlParser = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    /**
     * Parse a vega schema url into library and version.
     */

    function default_1(url) {
      var regex = /\/schema\/([\w-]+)\/([\w\.\-]+)\.json$/g;

      var _a = regex.exec(url).slice(1, 3),
          library = _a[0],
          version = _a[1];

      return {
        library: library,
        version: version
      };
    }

    exports.default = default_1;
  });
  var schemaParser = unwrapExports(vegaSchemaUrlParser);

  var name$1 = "vega-themes";
  var version$3 = "2.8.3";
  var description$1 = "Themes for stylized Vega and Vega-Lite visualizations.";
  var keywords$1 = [
  	"vega",
  	"vega-lite",
  	"themes",
  	"style"
  ];
  var license$1 = "BSD-3-Clause";
  var author$1 = {
  	name: "UW Interactive Data Lab",
  	url: "https://idl.cs.washington.edu"
  };
  var contributors = [
  	{
  		name: "Emily Gu",
  		url: "https://github.com/emilygu"
  	},
  	{
  		name: "Arvind Satyanarayan",
  		url: "http://arvindsatya.com"
  	},
  	{
  		name: "Jeffrey Heer",
  		url: "https://idl.cs.washington.edu"
  	},
  	{
  		name: "Dominik Moritz",
  		url: "https://www.domoritz.de"
  	}
  ];
  var main$2 = "build/vega-themes.js";
  var module$1 = "build/src/index.js";
  var unpkg$1 = "build/vega-themes.min.js";
  var jsdelivr$1 = "build/vega-themes.min.js";
  var typings = "build/src/index.d.ts";
  var repository$1 = {
  	type: "git",
  	url: "https://github.com/vega/vega-themes.git"
  };
  var scripts$1 = {
  	prepare: "beemo create-config --silent",
  	clean: "rm -rf build examples/build",
  	prettierbase: "beemo prettier 'examples/*.{html,scss,css}'",
  	eslintbase: "beemo eslint 'src/**/*.ts'",
  	format: "yarn eslintbase --fix && yarn prettierbase --write",
  	lint: "yarn eslintbase && yarn prettierbase --check",
  	prebuild: "mkdir -p build",
  	build: "tsc && rollup -c",
  	postbuild: "terser build/vega-themes.js -cm > build/vega-themes.min.js",
  	"deploy:gh": "yarn build && mkdir -p examples/build && rsync -r build/* examples/build && gh-pages -d examples",
  	prepublishOnly: "yarn clean && yarn build",
  	preversion: "yarn lint",
  	serve: "browser-sync start -s -f build examples --serveStatic examples",
  	start: "yarn build && concurrently --kill-others -n Server,Typescript,Rollup 'yarn serve' 'tsc -w' 'rollup -c -w'"
  };
  var devDependencies$1 = {
  	"@rollup/plugin-json": "^4.0.2",
  	"browser-sync": "^2.26.7",
  	concurrently: "^5.1.0",
  	"gh-pages": "^2.2.0",
  	rollup: "^2.1.0",
  	terser: "^4.6.7",
  	typescript: "^3.8.3",
  	vega: "^5.10.0",
  	"vega-lite": "^4.8.1",
  	"vega-lite-dev-config": "^0.5.0"
  };
  var peerDependencies$1 = {
  	vega: "*",
  	"vega-lite": "*"
  };
  var beemo = {
  	module: "vega-lite-dev-config",
  	drivers: [
  		"prettier",
  		"eslint"
  	]
  };
  var pkg$1 = {
  	name: name$1,
  	version: version$3,
  	description: description$1,
  	keywords: keywords$1,
  	license: license$1,
  	author: author$1,
  	contributors: contributors,
  	main: main$2,
  	module: module$1,
  	unpkg: unpkg$1,
  	jsdelivr: jsdelivr$1,
  	typings: typings,
  	repository: repository$1,
  	scripts: scripts$1,
  	devDependencies: devDependencies$1,
  	peerDependencies: peerDependencies$1,
  	beemo: beemo
  };

  var lightColor = '#fff';
  var medColor = '#888';
  var darkTheme = {
    background: '#333',
    title: {
      color: lightColor
    },
    style: {
      'guide-label': {
        fill: lightColor
      },
      'guide-title': {
        fill: lightColor
      }
    },
    axis: {
      domainColor: lightColor,
      gridColor: medColor,
      tickColor: lightColor
    }
  };

  var markColor = '#4572a7';
  var excelTheme = {
    background: '#fff',
    arc: {
      fill: markColor
    },
    area: {
      fill: markColor
    },
    line: {
      stroke: markColor,
      strokeWidth: 2
    },
    path: {
      stroke: markColor
    },
    rect: {
      fill: markColor
    },
    shape: {
      stroke: markColor
    },
    symbol: {
      fill: markColor,
      strokeWidth: 1.5,
      size: 50
    },
    axis: {
      bandPosition: 0.5,
      grid: true,
      gridColor: '#000000',
      gridOpacity: 1,
      gridWidth: 0.5,
      labelPadding: 10,
      tickSize: 5,
      tickWidth: 0.5
    },
    axisBand: {
      grid: false,
      tickExtra: true
    },
    legend: {
      labelBaseline: 'middle',
      labelFontSize: 11,
      symbolSize: 50,
      symbolType: 'square'
    },
    range: {
      category: ['#4572a7', '#aa4643', '#8aa453', '#71598e', '#4598ae', '#d98445', '#94aace', '#d09393', '#b9cc98', '#a99cbc']
    }
  };

  var markColor$1 = '#30a2da';
  var axisColor = '#cbcbcb';
  var guideLabelColor = '#999';
  var guideTitleColor = '#333';
  var backgroundColor = '#f0f0f0';
  var blackTitle = '#333';
  var fiveThirtyEightTheme = {
    arc: {
      fill: markColor$1
    },
    area: {
      fill: markColor$1
    },
    axis: {
      domainColor: axisColor,
      grid: true,
      gridColor: axisColor,
      gridWidth: 1,
      labelColor: guideLabelColor,
      labelFontSize: 10,
      titleColor: guideTitleColor,
      tickColor: axisColor,
      tickSize: 10,
      titleFontSize: 14,
      titlePadding: 10,
      labelPadding: 4
    },
    axisBand: {
      grid: false
    },
    background: backgroundColor,
    group: {
      fill: backgroundColor
    },
    legend: {
      labelColor: blackTitle,
      labelFontSize: 11,
      padding: 1,
      symbolSize: 30,
      symbolType: 'square',
      titleColor: blackTitle,
      titleFontSize: 14,
      titlePadding: 10
    },
    line: {
      stroke: markColor$1,
      strokeWidth: 2
    },
    path: {
      stroke: markColor$1,
      strokeWidth: 0.5
    },
    rect: {
      fill: markColor$1
    },
    range: {
      category: ['#30a2da', '#fc4f30', '#e5ae38', '#6d904f', '#8b8b8b', '#b96db8', '#ff9e27', '#56cc60', '#52d2ca', '#52689e', '#545454', '#9fe4f8'],
      diverging: ['#cc0020', '#e77866', '#f6e7e1', '#d6e8ed', '#91bfd9', '#1d78b5'],
      heatmap: ['#d6e8ed', '#cee0e5', '#91bfd9', '#549cc6', '#1d78b5']
    },
    point: {
      filled: true,
      shape: 'circle'
    },
    shape: {
      stroke: markColor$1
    },
    bar: {
      binSpacing: 2,
      fill: markColor$1,
      stroke: null
    },
    title: {
      anchor: 'start',
      fontSize: 24,
      fontWeight: 600,
      offset: 20
    }
  };

  var markColor$2 = '#000';
  var ggplot2Theme = {
    group: {
      fill: '#e5e5e5'
    },
    arc: {
      fill: markColor$2
    },
    area: {
      fill: markColor$2
    },
    line: {
      stroke: markColor$2
    },
    path: {
      stroke: markColor$2
    },
    rect: {
      fill: markColor$2
    },
    shape: {
      stroke: markColor$2
    },
    symbol: {
      fill: markColor$2,
      size: 40
    },
    axis: {
      domain: false,
      grid: true,
      gridColor: '#FFFFFF',
      gridOpacity: 1,
      labelColor: '#7F7F7F',
      labelPadding: 4,
      tickColor: '#7F7F7F',
      tickSize: 5.67,
      titleFontSize: 16,
      titleFontWeight: 'normal'
    },
    legend: {
      labelBaseline: 'middle',
      labelFontSize: 11,
      symbolSize: 40
    },
    range: {
      category: ['#000000', '#7F7F7F', '#1A1A1A', '#999999', '#333333', '#B0B0B0', '#4D4D4D', '#C9C9C9', '#666666', '#DCDCDC']
    }
  };

  var headlineFontSize = 22;
  var headlineFontWeight = 'normal';
  var labelFont = 'Benton Gothic, sans-serif';
  var labelFontSize = 11.5;
  var labelFontWeight = 'normal';
  var markColor$3 = '#82c6df'; // const markHighlight = '#006d8f';
  // const markDemocrat = '#5789b8';
  // const markRepublican = '#d94f54';

  var titleFont = 'Benton Gothic Bold, sans-serif';
  var titleFontWeight = 'normal';
  var titleFontSize = 13;
  var colorSchemes = {
    'category-6': ['#ec8431', '#829eb1', '#c89d29', '#3580b1', '#adc839', '#ab7fb4'],
    'fire-7': ['#fbf2c7', '#f9e39c', '#f8d36e', '#f4bb6a', '#e68a4f', '#d15a40', '#ab4232'],
    'fireandice-6': ['#e68a4f', '#f4bb6a', '#f9e39c', '#dadfe2', '#a6b7c6', '#849eae'],
    'ice-7': ['#edefee', '#dadfe2', '#c4ccd2', '#a6b7c6', '#849eae', '#607785', '#47525d']
  };
  var latimesTheme = {
    background: '#ffffff',
    title: {
      anchor: 'start',
      color: '#000000',
      font: titleFont,
      fontSize: headlineFontSize,
      fontWeight: headlineFontWeight
    },
    arc: {
      fill: markColor$3
    },
    area: {
      fill: markColor$3
    },
    line: {
      stroke: markColor$3,
      strokeWidth: 2
    },
    path: {
      stroke: markColor$3
    },
    rect: {
      fill: markColor$3
    },
    shape: {
      stroke: markColor$3
    },
    symbol: {
      fill: markColor$3,
      size: 30
    },
    axis: {
      labelFont: labelFont,
      labelFontSize: labelFontSize,
      labelFontWeight: labelFontWeight,
      titleFont: titleFont,
      titleFontSize: titleFontSize,
      titleFontWeight: titleFontWeight
    },
    axisX: {
      labelAngle: 0,
      labelPadding: 4,
      tickSize: 3
    },
    axisY: {
      labelBaseline: 'middle',
      maxExtent: 45,
      minExtent: 45,
      tickSize: 2,
      titleAlign: 'left',
      titleAngle: 0,
      titleX: -45,
      titleY: -11
    },
    legend: {
      labelFont: labelFont,
      labelFontSize: labelFontSize,
      symbolType: 'square',
      titleFont: titleFont,
      titleFontSize: titleFontSize,
      titleFontWeight: titleFontWeight
    },
    range: {
      category: colorSchemes['category-6'],
      diverging: colorSchemes['fireandice-6'],
      heatmap: colorSchemes['fire-7'],
      ordinal: colorSchemes['fire-7'],
      ramp: colorSchemes['fire-7']
    }
  };

  var markColor$4 = '#ab5787';
  var axisColor$1 = '#979797';
  var quartzTheme = {
    background: '#f9f9f9',
    arc: {
      fill: markColor$4
    },
    area: {
      fill: markColor$4
    },
    line: {
      stroke: markColor$4
    },
    path: {
      stroke: markColor$4
    },
    rect: {
      fill: markColor$4
    },
    shape: {
      stroke: markColor$4
    },
    symbol: {
      fill: markColor$4,
      size: 30
    },
    axis: {
      domainColor: axisColor$1,
      domainWidth: 0.5,
      gridWidth: 0.2,
      labelColor: axisColor$1,
      tickColor: axisColor$1,
      tickWidth: 0.2,
      titleColor: axisColor$1
    },
    axisBand: {
      grid: false
    },
    axisX: {
      grid: true,
      tickSize: 10
    },
    axisY: {
      domain: false,
      grid: true,
      tickSize: 0
    },
    legend: {
      labelFontSize: 11,
      padding: 1,
      symbolSize: 30,
      symbolType: 'square'
    },
    range: {
      category: ['#ab5787', '#51b2e5', '#703c5c', '#168dd9', '#d190b6', '#00609f', '#d365ba', '#154866', '#666666', '#c4c4c4']
    }
  };

  var markColor$5 = '#3e5c69';
  var voxTheme = {
    background: '#fff',
    arc: {
      fill: markColor$5
    },
    area: {
      fill: markColor$5
    },
    line: {
      stroke: markColor$5
    },
    path: {
      stroke: markColor$5
    },
    rect: {
      fill: markColor$5
    },
    shape: {
      stroke: markColor$5
    },
    symbol: {
      fill: markColor$5
    },
    axis: {
      domainWidth: 0.5,
      grid: true,
      labelPadding: 2,
      tickSize: 5,
      tickWidth: 0.5,
      titleFontWeight: 'normal'
    },
    axisBand: {
      grid: false
    },
    axisX: {
      gridWidth: 0.2
    },
    axisY: {
      gridDash: [3],
      gridWidth: 0.4
    },
    legend: {
      labelFontSize: 11,
      padding: 1,
      symbolType: 'square'
    },
    range: {
      category: ['#3e5c69', '#6793a6', '#182429', '#0570b0', '#3690c0', '#74a9cf', '#a6bddb', '#e2ddf2']
    }
  };

  var markColor$6 = '#1696d2';
  var axisColor$2 = '#000000';
  var backgroundColor$1 = '#FFFFFF';
  var font$1 = 'Lato';
  var labelFont$1 = 'Lato';
  var sourceFont = 'Lato';
  var gridColor = '#DEDDDD';
  var titleFontSize$1 = 18;
  var colorSchemes$1 = {
    'main-colors': ['#1696d2', '#d2d2d2', '#000000', '#fdbf11', '#ec008b', '#55b748', '#5c5859', '#db2b27'],
    'shades-blue': ['#CFE8F3', '#A2D4EC', '#73BFE2', '#46ABDB', '#1696D2', '#12719E', '#0A4C6A', '#062635'],
    'shades-gray': ['#F5F5F5', '#ECECEC', '#E3E3E3', '#DCDBDB', '#D2D2D2', '#9D9D9D', '#696969', '#353535'],
    'shades-yellow': ['#FFF2CF', '#FCE39E', '#FDD870', '#FCCB41', '#FDBF11', '#E88E2D', '#CA5800', '#843215'],
    'shades-magenta': ['#F5CBDF', '#EB99C2', '#E46AA7', '#E54096', '#EC008B', '#AF1F6B', '#761548', '#351123'],
    'shades-green': ['#DCEDD9', '#BCDEB4', '#98CF90', '#78C26D', '#55B748', '#408941', '#2C5C2D', '#1A2E19'],
    'shades-black': ['#D5D5D4', '#ADABAC', '#848081', '#5C5859', '#332D2F', '#262223', '#1A1717', '#0E0C0D'],
    'shades-red': ['#F8D5D4', '#F1AAA9', '#E9807D', '#E25552', '#DB2B27', '#A4201D', '#6E1614', '#370B0A'],
    'one-group': ['#1696d2', '#000000'],
    'two-groups-cat-1': ['#1696d2', '#000000'],
    'two-groups-cat-2': ['#1696d2', '#fdbf11'],
    'two-groups-cat-3': ['#1696d2', '#db2b27'],
    'two-groups-seq': ['#a2d4ec', '#1696d2'],
    'three-groups-cat': ['#1696d2', '#fdbf11', '#000000'],
    'three-groups-seq': ['#a2d4ec', '#1696d2', '#0a4c6a'],
    'four-groups-cat-1': ['#000000', '#d2d2d2', '#fdbf11', '#1696d2'],
    'four-groups-cat-2': ['#1696d2', '#ec0008b', '#fdbf11', '#5c5859'],
    'four-groups-seq': ['#cfe8f3', '#73bf42', '#1696d2', '#0a4c6a'],
    'five-groups-cat-1': ['#1696d2', '#fdbf11', '#d2d2d2', '#ec008b', '#000000'],
    'five-groups-cat-2': ['#1696d2', '#0a4c6a', '#d2d2d2', '#fdbf11', '#332d2f'],
    'five-groups-seq': ['#cfe8f3', '#73bf42', '#1696d2', '#0a4c6a', '#000000'],
    'six-groups-cat-1': ['#1696d2', '#ec008b', '#fdbf11', '#000000', '#d2d2d2', '#55b748'],
    'six-groups-cat-2': ['#1696d2', '#d2d2d2', '#ec008b', '#fdbf11', '#332d2f', '#0a4c6a'],
    'six-groups-seq': ['#cfe8f3', '#a2d4ec', '#73bfe2', '#46abdb', '#1696d2', '#12719e'],
    'diverging-colors': ['#ca5800', '#fdbf11', '#fdd870', '#fff2cf', '#cfe8f3', '#73bfe2', '#1696d2', '#0a4c6a']
  };
  var urbanInstituteTheme = {
    background: backgroundColor$1,
    title: {
      anchor: 'start',
      fontSize: titleFontSize$1,
      font: font$1
    },
    axisX: {
      domain: true,
      domainColor: axisColor$2,
      domainWidth: 1,
      grid: false,
      labelFontSize: 12,
      labelFont: labelFont$1,
      labelAngle: 0,
      tickColor: axisColor$2,
      tickSize: 5,
      titleFontSize: 12,
      titlePadding: 10,
      titleFont: font$1
    },
    axisY: {
      domain: false,
      domainWidth: 1,
      grid: true,
      gridColor: gridColor,
      gridWidth: 1,
      labelFontSize: 12,
      labelFont: labelFont$1,
      labelPadding: 8,
      ticks: false,
      titleFontSize: 12,
      titlePadding: 10,
      titleFont: font$1,
      titleAngle: 0,
      titleY: -10,
      titleX: 18
    },
    legend: {
      labelFontSize: 12,
      labelFont: labelFont$1,
      symbolSize: 100,
      titleFontSize: 12,
      titlePadding: 10,
      titleFont: font$1,
      orient: 'right',
      offset: 10
    },
    view: {
      stroke: 'transparent'
    },
    range: {
      category: colorSchemes$1['six-groups-cat-1'],
      diverging: colorSchemes$1['diverging-colors'],
      heatmap: colorSchemes$1['diverging-colors'],
      ordinal: colorSchemes$1['six-groups-seq'],
      ramp: colorSchemes$1['shades-blue']
    },
    area: {
      fill: markColor$6
    },
    rect: {
      fill: markColor$6
    },
    line: {
      color: markColor$6,
      stroke: markColor$6,
      strokeWidth: 5
    },
    trail: {
      color: markColor$6,
      stroke: markColor$6,
      strokeWidth: 0,
      size: 1
    },
    path: {
      stroke: markColor$6,
      strokeWidth: 0.5
    },
    point: {
      filled: true
    },
    text: {
      font: sourceFont,
      color: markColor$6,
      fontSize: 11,
      align: 'center',
      fontWeight: 400,
      size: 11
    },
    style: {
      bar: {
        fill: markColor$6,
        stroke: null
      }
    },
    arc: {
      fill: markColor$6
    },
    shape: {
      stroke: markColor$6
    },
    symbol: {
      fill: markColor$6,
      size: 30
    }
  };

  /**
   * Copyright 2020 Google LLC.
   *
   * Use of this source code is governed by a BSD-style
   * license that can be found in the LICENSE file or at
   * https://developers.google.com/open-source/licenses/bsd
   */
  var markColor$7 = '#3366CC';
  var gridColor$1 = '#ccc';
  var defaultFont$1 = 'Arial, sans-serif';
  var googlechartsTheme = {
    arc: {
      fill: markColor$7
    },
    area: {
      fill: markColor$7
    },
    path: {
      stroke: markColor$7
    },
    rect: {
      fill: markColor$7
    },
    shape: {
      stroke: markColor$7
    },
    symbol: {
      stroke: markColor$7
    },
    circle: {
      fill: markColor$7
    },
    background: '#fff',
    padding: {
      top: 10,
      right: 10,
      bottom: 10,
      left: 10
    },
    style: {
      'guide-label': {
        font: defaultFont$1,
        fontSize: 12
      },
      'guide-title': {
        font: defaultFont$1,
        fontSize: 12
      },
      'group-title': {
        font: defaultFont$1,
        fontSize: 12
      }
    },
    title: {
      font: defaultFont$1,
      fontSize: 14,
      fontWeight: 'bold',
      dy: -3,
      anchor: 'start'
    },
    axis: {
      gridColor: gridColor$1,
      tickColor: gridColor$1,
      domain: false,
      grid: true
    },
    range: {
      category: ['#4285F4', '#DB4437', '#F4B400', '#0F9D58', '#AB47BC', '#00ACC1', '#FF7043', '#9E9D24', '#5C6BC0', '#F06292', '#00796B', '#C2185B'],
      heatmap: ['#c6dafc', '#5e97f6', '#2a56c6']
    }
  };

  var version$4 = pkg$1.version;

  var themes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    version: version$4,
    dark: darkTheme,
    excel: excelTheme,
    fivethirtyeight: fiveThirtyEightTheme,
    ggplot2: ggplot2Theme,
    latimes: latimesTheme,
    quartz: quartzTheme,
    vox: voxTheme,
    urbaninstitute: urbanInstituteTheme,
    googlecharts: googlechartsTheme
  });

  // generated with build-style.sh
  var defaultStyle = "#vg-tooltip-element {\n  visibility: hidden;\n  padding: 8px;\n  position: fixed;\n  z-index: 1000;\n  font-family: sans-serif;\n  font-size: 11px;\n  border-radius: 3px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n  /* The default theme is the light theme. */\n  background-color: rgba(255, 255, 255, 0.95);\n  border: 1px solid #d9d9d9;\n  color: black; }\n  #vg-tooltip-element.visible {\n    visibility: visible; }\n  #vg-tooltip-element h2 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    font-size: 13px; }\n  #vg-tooltip-element table {\n    border-spacing: 0; }\n    #vg-tooltip-element table tr {\n      border: none; }\n      #vg-tooltip-element table tr td {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        padding-top: 2px;\n        padding-bottom: 2px; }\n        #vg-tooltip-element table tr td.key {\n          color: #808080;\n          max-width: 150px;\n          text-align: right;\n          padding-right: 4px; }\n        #vg-tooltip-element table tr td.value {\n          display: block;\n          max-width: 300px;\n          max-height: 7em;\n          text-align: left; }\n  #vg-tooltip-element.dark-theme {\n    background-color: rgba(32, 32, 32, 0.9);\n    border: 1px solid #f5f5f5;\n    color: white; }\n    #vg-tooltip-element.dark-theme td.key {\n      color: #bfbfbf; }\n";

  var EL_ID = 'vg-tooltip-element';
  var DEFAULT_OPTIONS = {
    /**
     * X offset.
     */
    offsetX: 10,

    /**
     * Y offset.
     */
    offsetY: 10,

    /**
     * ID of the tooltip element.
     */
    id: EL_ID,

    /**
     * ID of the tooltip CSS style.
     */
    styleId: 'vega-tooltip-style',

    /**
     * The name of the theme. You can use the CSS class called [THEME]-theme to style the tooltips.
     *
     * There are two predefined themes: "light" (default) and "dark".
     */
    theme: 'light',

    /**
     * Do not use the default styles provided by Vega Tooltip. If you enable this option, you need to use your own styles. It is not necessary to disable the default style when using a custom theme.
     */
    disableDefaultStyle: false,

    /**
     * HTML sanitizer function that removes dangerous HTML to prevent XSS.
     *
     * This should be a function from string to string. You may replace it with a formatter such as a markdown formatter.
     */
    sanitize: escapeHTML,

    /**
     * The maximum recursion depth when printing objects in the tooltip.
     */
    maxDepth: 2
  };
  /**
   * Escape special HTML characters.
   *
   * @param value A value to convert to string and HTML-escape.
   */

  function escapeHTML(value) {
    return String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;');
  }
  function createDefaultStyle(id) {
    // Just in case this id comes from a user, ensure these is no security issues
    if (!/^[A-Za-z]+[-:.\w]*$/.test(id)) {
      throw new Error('Invalid HTML ID');
    }

    return defaultStyle.toString().replace(EL_ID, id);
  }

  var __rest$1 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  /**
   * Format the value to be shown in the toolip.
   *
   * @param value The value to show in the tooltip.
   * @param valueToHtml Function to convert a single cell value to an HTML string
   */

  function formatValue$3(value, valueToHtml, maxDepth) {
    if (isArray(value)) {
      return "[".concat(value.map(function (v) {
        return valueToHtml(isString(v) ? v : stringify$2(v, maxDepth));
      }).join(', '), "]");
    }

    if (isObject(value)) {
      var content = '';

      var _a = value,
          title = _a.title,
          rest = __rest$1(_a, ["title"]);

      if (title) {
        content += "<h2>".concat(valueToHtml(title), "</h2>");
      }

      var keys = Object.keys(rest);

      if (keys.length > 0) {
        content += '<table>';

        var _iterator = _createForOfIteratorHelper(keys),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var key = _step.value;
            var val = rest[key]; // ignore undefined properties

            if (val === undefined) {
              continue;
            }

            if (isObject(val)) {
              val = stringify$2(val, maxDepth);
            }

            content += "<tr><td class=\"key\">".concat(valueToHtml(key), ":</td><td class=\"value\">").concat(valueToHtml(val), "</td></tr>");
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        content += "</table>";
      }

      return content || '{}'; // show empty object if there are no properties
    }

    return valueToHtml(value);
  }
  function replacer(maxDepth) {
    var stack = [];
    return function (key, value) {
      if (_typeof(value) !== 'object' || value === null) {
        return value;
      }

      var pos = stack.indexOf(this) + 1;
      stack.length = pos;

      if (stack.length > maxDepth) {
        return '[Object]';
      }

      if (stack.indexOf(value) >= 0) {
        return '[Circular]';
      }

      stack.push(value);
      return value;
    };
  }
  /**
   * Stringify any JS object to valid JSON
   */

  function stringify$2(obj, maxDepth) {
    return JSON.stringify(obj, replacer(maxDepth));
  }

  /**
   * Position the tooltip
   *
   * @param event The mouse event.
   * @param tooltipBox
   * @param offsetX Horizontal offset.
   * @param offsetY Vertical offset.
   */
  function calculatePosition(event, tooltipBox, offsetX, offsetY) {
    var x = event.clientX + offsetX;

    if (x + tooltipBox.width > window.innerWidth) {
      x = +event.clientX - offsetX - tooltipBox.width;
    }

    var y = event.clientY + offsetY;

    if (y + tooltipBox.height > window.innerHeight) {
      y = +event.clientY - offsetY - tooltipBox.height;
    }

    return {
      x: x,
      y: y
    };
  }

  /**
   * The tooltip handler class.
   */

  var Handler$1 = /*#__PURE__*/function () {
    /**
     * Create the tooltip handler and initialize the element and style.
     *
     * @param options Tooltip Options
     */
    function Handler(options) {
      _classCallCheck(this, Handler);

      this.options = _extends(_extends({}, DEFAULT_OPTIONS), options);
      var elementId = this.options.id; // bind this to call

      this.call = this.tooltipHandler.bind(this); // prepend a default stylesheet for tooltips to the head

      if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {
        var style = document.createElement('style');
        style.setAttribute('id', this.options.styleId);
        style.innerHTML = createDefaultStyle(elementId);
        var head = document.head;

        if (head.childNodes.length > 0) {
          head.insertBefore(style, head.childNodes[0]);
        } else {
          head.appendChild(style);
        }
      } // append a div element that we use as a tooltip unless it already exists
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


      this.el = document.getElementById(elementId);

      if (!this.el) {
        this.el = document.createElement('div');
        this.el.setAttribute('id', elementId);
        this.el.classList.add('vg-tooltip');
        document.body.appendChild(this.el);
      }
    }
    /**
     * The tooltip handler function.
     */


    _createClass(Handler, [{
      key: "tooltipHandler",
      value: function tooltipHandler(handler, event, item, value) {
        // console.log(handler, event, item, value);
        // hide tooltip for null, undefined, or empty string values
        if (value == null || value === '') {
          this.el.classList.remove('visible', "".concat(this.options.theme, "-theme"));
          return;
        } // set the tooltip content


        this.el.innerHTML = formatValue$3(value, this.options.sanitize, this.options.maxDepth); // make the tooltip visible

        this.el.classList.add('visible', "".concat(this.options.theme, "-theme"));

        var _calculatePosition = calculatePosition(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY),
            x = _calculatePosition.x,
            y = _calculatePosition.y;

        this.el.setAttribute('style', "top: ".concat(y, "px; left: ").concat(x, "px"));
      }
    }]);

    return Handler;
  }();

  /**
   * Open editor url in a new window, and pass a message.
   */
  function post (window, url, data) {
    var editor = window.open(url);
    var wait = 10000;
    var step = 250; // eslint-disable-next-line no-bitwise

    var count = ~~(wait / step);

    function listen(evt) {
      if (evt.source === editor) {
        count = 0;
        window.removeEventListener('message', listen, false);
      }
    }

    window.addEventListener('message', listen, false); // send message
    // periodically resend until ack received or timeout

    function send() {
      if (count <= 0) {
        return;
      }

      editor.postMessage(data, '*');
      setTimeout(send, step);
      count -= 1;
    }

    setTimeout(send, step);
  }

  // generated with build-style.sh
  var embedStyle = ".vega-embed {\n  position: relative;\n  display: inline-block; }\n  .vega-embed.has-actions {\n    padding-right: 38px; }\n  .vega-embed details:not([open]) > :not(summary) {\n    display: none !important; }\n  .vega-embed summary {\n    list-style: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 6px;\n    z-index: 1000;\n    background: white;\n    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);\n    color: #1b1e23;\n    border: 1px solid #aaa;\n    border-radius: 999px;\n    opacity: 0.2;\n    transition: opacity 0.4s ease-in;\n    outline: none;\n    cursor: pointer;\n    line-height: 0px; }\n    .vega-embed summary::-webkit-details-marker {\n      display: none; }\n    .vega-embed summary:active {\n      box-shadow: #aaa 0px 0px 0px 1px inset; }\n    .vega-embed summary svg {\n      width: 14px;\n      height: 14px; }\n  .vega-embed details[open] summary {\n    opacity: 0.7; }\n  .vega-embed:hover summary,\n  .vega-embed:focus summary {\n    opacity: 1 !important;\n    transition: opacity 0.2s ease; }\n  .vega-embed .vega-actions {\n    position: absolute;\n    z-index: 1001;\n    top: 35px;\n    right: -9px;\n    display: flex;\n    flex-direction: column;\n    padding-bottom: 8px;\n    padding-top: 8px;\n    border-radius: 4px;\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);\n    border: 1px solid #d9d9d9;\n    background: white;\n    animation-duration: 0.15s;\n    animation-name: scale-in;\n    animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);\n    text-align: left; }\n    .vega-embed .vega-actions a {\n      padding: 8px 16px;\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: 600;\n      white-space: nowrap;\n      color: #434a56;\n      text-decoration: none; }\n      .vega-embed .vega-actions a:hover {\n        background-color: #f7f7f9;\n        color: black; }\n    .vega-embed .vega-actions::before, .vega-embed .vega-actions::after {\n      content: \"\";\n      display: inline-block;\n      position: absolute; }\n    .vega-embed .vega-actions::before {\n      left: auto;\n      right: 14px;\n      top: -16px;\n      border: 8px solid #0000;\n      border-bottom-color: #d9d9d9; }\n    .vega-embed .vega-actions::after {\n      left: auto;\n      right: 15px;\n      top: -14px;\n      border: 7px solid #0000;\n      border-bottom-color: #fff; }\n\n.vega-embed-wrapper {\n  max-width: 100%;\n  overflow: scroll;\n  padding-right: 14px; }\n\n@keyframes scale-in {\n  from {\n    opacity: 0;\n    transform: scale(0.6); }\n  to {\n    opacity: 1;\n    transform: scale(1); } }\n";

  if (!String.prototype.startsWith) {
    // eslint-disable-next-line no-extend-native,func-names
    String.prototype.startsWith = function (search, pos) {
      return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    };
  }
  function mergeDeep$1(dest) {
    for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      src[_key - 1] = arguments[_key];
    }

    for (var _i = 0, _src = src; _i < _src.length; _i++) {
      var s = _src[_i];
      deepMerge_$1(dest, s);
    }

    return dest;
  }

  function deepMerge_$1(dest, src) {
    for (var _i2 = 0, _Object$keys = Object.keys(src); _i2 < _Object$keys.length; _i2++) {
      var property = _Object$keys[_i2];
      writeConfig(dest, property, src[property], true);
    }
  }

  var _a;
  var vega = vegaImport;
  var _vegaLite = vegaLiteImport; // For backwards compatibility with Vega-Lite before v4.
  var w$1 = typeof window !== 'undefined' ? window : undefined;

  if (_vegaLite === undefined && ((_a = w$1 === null || w$1 === void 0 ? void 0 : w$1['vl']) === null || _a === void 0 ? void 0 : _a.compile)) {
    _vegaLite = w$1['vl'];
  }

  var DEFAULT_ACTIONS = {
    export: {
      svg: true,
      png: true
    },
    source: true,
    compiled: true,
    editor: true
  };
  var I18N = {
    CLICK_TO_VIEW_ACTIONS: 'Click to view actions',
    COMPILED_ACTION: 'View Compiled Vega',
    EDITOR_ACTION: 'Open in Vega Editor',
    PNG_ACTION: 'Save as PNG',
    SOURCE_ACTION: 'View Source',
    SVG_ACTION: 'Save as SVG'
  };
  var NAMES = {
    vega: 'Vega',
    'vega-lite': 'Vega-Lite'
  };
  var VERSION = {
    vega: vega.version,
    'vega-lite': _vegaLite ? _vegaLite.version : 'not available'
  };
  var PREPROCESSOR = {
    vega: function vega(vgSpec) {
      return vgSpec;
    },
    'vega-lite': function vegaLite(vlSpec, config) {
      return _vegaLite.compile(vlSpec, {
        config: config
      }).spec;
    }
  };
  var SVG_CIRCLES = "\n<svg viewBox=\"0 0 16 16\" fill=\"currentColor\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n  <circle r=\"2\" cy=\"8\" cx=\"2\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"8\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"14\"></circle>\n</svg>";

  function isTooltipHandler(h) {
    return typeof h === 'function';
  }

  function viewSource(source, sourceHeader, sourceFooter, mode) {
    var header = "<html><head>".concat(sourceHeader, "</head><body><pre><code class=\"json\">");
    var footer = "</code></pre>".concat(sourceFooter, "</body></html>");
    var win = window.open('');
    win.document.write(header + source + footer);
    win.document.title = "".concat(NAMES[mode], " JSON Source");
  }
  /**
   * Try to guess the type of spec.
   *
   * @param spec Vega or Vega-Lite spec.
   */


  function guessMode(spec, providedMode) {
    var _a; // Decide mode


    if (spec.$schema) {
      var parsed = schemaParser(spec.$schema);

      if (providedMode && providedMode !== parsed.library) {
        console.warn("The given visualization spec is written in ".concat(NAMES[parsed.library], ", but mode argument sets ").concat((_a = NAMES[providedMode]) !== null && _a !== void 0 ? _a : providedMode, "."));
      }

      var mode = parsed.library;

      if (!semver_33(VERSION[mode], "^".concat(parsed.version.slice(1)))) {
        console.warn("The input spec uses ".concat(NAMES[mode], " ").concat(parsed.version, ", but the current version of ").concat(NAMES[mode], " is v").concat(VERSION[mode], "."));
      }

      return mode;
    } // try to guess from the provided spec


    if ('mark' in spec || 'encoding' in spec || 'layer' in spec || 'hconcat' in spec || 'vconcat' in spec || 'facet' in spec || 'repeat' in spec) {
      return 'vega-lite';
    }

    if ('marks' in spec || 'signals' in spec || 'scales' in spec || 'axes' in spec) {
      return 'vega';
    }

    return providedMode !== null && providedMode !== void 0 ? providedMode : 'vega';
  }

  function isLoader(o) {
    return !!(o && 'load' in o);
  }
  /**
   * Embed a Vega visualization component in a web page. This function returns a promise.
   *
   * @param el        DOM element in which to place component (DOM node or CSS selector).
   * @param spec      String : A URL string from which to load the Vega specification.
   *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.
   * @param opts       A JavaScript object containing options for embedding.
   */


  function embed(el, spec) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var _a, _b, _c;

    return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var loader, parsedSpec, usermetaOpts, parsedOpts, mergedOpts;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              loader = isLoader(opts.loader) ? opts.loader : vega.loader(opts.loader); // load spec, config, and patch that are references by URLs

              if (!isString(spec)) {
                _context.next = 9;
                break;
              }

              _context.t1 = JSON;
              _context.next = 5;
              return loader.load(spec);

            case 5:
              _context.t2 = _context.sent;
              _context.t0 = _context.t1.parse.call(_context.t1, _context.t2);
              _context.next = 10;
              break;

            case 9:
              _context.t0 = spec;

            case 10:
              parsedSpec = _context.t0;
              _context.next = 13;
              return loadOpts((_a = parsedSpec.usermeta && parsedSpec.usermeta['embedOptions']) !== null && _a !== void 0 ? _a : {}, loader);

            case 13:
              usermetaOpts = _context.sent;
              _context.next = 16;
              return loadOpts(opts, loader);

            case 16:
              parsedOpts = _context.sent;
              mergedOpts = _extends(_extends({}, mergeDeep$1(parsedOpts, usermetaOpts)), {
                config: mergeConfig((_b = parsedOpts.config) !== null && _b !== void 0 ? _b : {}, (_c = usermetaOpts.config) !== null && _c !== void 0 ? _c : {})
              });
              _context.next = 20;
              return _embed(el, parsedSpec, mergedOpts, loader);

            case 20:
              return _context.abrupt("return", _context.sent);

            case 21:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  }

  function loadOpts(opt, loader) {
    var _a;

    return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var config, patch;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!isString(opt.config)) {
                _context2.next = 8;
                break;
              }

              _context2.t1 = JSON;
              _context2.next = 4;
              return loader.load(opt.config);

            case 4:
              _context2.t2 = _context2.sent;
              _context2.t0 = _context2.t1.parse.call(_context2.t1, _context2.t2);
              _context2.next = 9;
              break;

            case 8:
              _context2.t0 = (_a = opt.config) !== null && _a !== void 0 ? _a : {};

            case 9:
              config = _context2.t0;

              if (!isString(opt.patch)) {
                _context2.next = 18;
                break;
              }

              _context2.t4 = JSON;
              _context2.next = 14;
              return loader.load(opt.patch);

            case 14:
              _context2.t5 = _context2.sent;
              _context2.t3 = _context2.t4.parse.call(_context2.t4, _context2.t5);
              _context2.next = 19;
              break;

            case 18:
              _context2.t3 = opt.patch;

            case 19:
              patch = _context2.t3;
              return _context2.abrupt("return", _extends(_extends(_extends({}, opt), patch ? {
                patch: patch
              } : {}), config ? {
                config: config
              } : {}));

            case 21:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  }

  function _embed(el, spec) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var loader = arguments.length > 3 ? arguments[3] : undefined;

    var _a, _b, _c, _d, _e, _f;

    return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var config, actions, i18n, renderer, logLevel, downloadFileName, ID, style, mode, vgSpec, parsed, div, patch, runtime, view, handler, hover, _ref, hoverSet, updateSet, documentClickHandler, wrapper, details, summary, ctrl, _loop, _i, _arr, viewSourceLink, compileLink, editorUrl, editorLink, finalize;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              finalize = function _finalize() {
                if (documentClickHandler) {
                  document.removeEventListener('click', documentClickHandler);
                }

                view.finalize();
              };

              config = opts.theme ? mergeConfig(themes[opts.theme], (_a = opts.config) !== null && _a !== void 0 ? _a : {}) : opts.config;
              actions = isBoolean(opts.actions) ? opts.actions : mergeDeep$1({}, DEFAULT_ACTIONS, (_b = opts.actions) !== null && _b !== void 0 ? _b : {});
              i18n = _extends(_extends({}, I18N), opts.i18n);
              renderer = (_c = opts.renderer) !== null && _c !== void 0 ? _c : 'canvas';
              logLevel = (_d = opts.logLevel) !== null && _d !== void 0 ? _d : vega.Warn;
              downloadFileName = (_e = opts.downloadFileName) !== null && _e !== void 0 ? _e : 'visualization';

              if (opts.defaultStyle !== false) {
                // Add a default stylesheet to the head of the document.
                ID = 'vega-embed-style';

                if (!document.getElementById(ID)) {
                  style = document.createElement('style');
                  style.id = ID;
                  style.innerText = opts.defaultStyle === undefined || opts.defaultStyle === true ? ( embedStyle ).toString() : opts.defaultStyle;
                  document.head.appendChild(style);
                }
              }

              mode = guessMode(spec, opts.mode);
              vgSpec = PREPROCESSOR[mode](spec, config);

              if (mode === 'vega-lite') {
                if (vgSpec.$schema) {
                  parsed = schemaParser(vgSpec.$schema);

                  if (!semver_33(VERSION.vega, "^".concat(parsed.version.slice(1)))) {
                    console.warn("The compiled spec uses Vega ".concat(parsed.version, ", but current version is v").concat(VERSION.vega, "."));
                  }
                }
              }

              div = typeof el === 'string' ? document.querySelector(el) : el;

              if (div) {
                _context4.next = 14;
                break;
              }

              throw Error("".concat(el, " does not exist"));

            case 14:
              div.classList.add('vega-embed');

              if (actions) {
                div.classList.add('has-actions');
              }

              div.innerHTML = ''; // clear container

              patch = opts.patch;

              if (patch) {
                if (patch instanceof Function) {
                  vgSpec = patch(vgSpec);
                } else {
                  vgSpec = applyPatch(vgSpec, patch, true, false).newDocument;
                }
              } // Set locale. Note that this is a global setting.


              if (opts.formatLocale) {
                vega.formatLocale(opts.formatLocale);
              }

              if (opts.timeFormatLocale) {
                vega.timeFormatLocale(opts.timeFormatLocale);
              } // Do not apply the config to Vega when we have already applied it to Vega-Lite.
              // This call may throw an Error if parsing fails.


              runtime = vega.parse(vgSpec, mode === 'vega-lite' ? {} : config);
              view = new vega.View(runtime, {
                loader: loader,
                logLevel: logLevel,
                renderer: renderer
              });

              if (opts.tooltip !== false) {
                if (isTooltipHandler(opts.tooltip)) {
                  handler = opts.tooltip;
                } else {
                  // user provided boolean true or tooltip options
                  handler = new Handler$1(opts.tooltip === true ? {} : opts.tooltip).call;
                }

                view.tooltip(handler);
              }

              hover = opts.hover;

              if (hover === undefined) {
                hover = mode === 'vega';
              }

              if (hover) {
                _ref = typeof hover === 'boolean' ? {} : hover, hoverSet = _ref.hoverSet, updateSet = _ref.updateSet;
                view.hover(hoverSet, updateSet);
              }

              if (opts) {
                if (opts.width != null) {
                  view.width(opts.width);
                }

                if (opts.height != null) {
                  view.height(opts.height);
                }

                if (opts.padding != null) {
                  view.padding(opts.padding);
                }
              }

              _context4.next = 30;
              return view.initialize(el).runAsync();

            case 30:
              if (actions !== false) {
                wrapper = div;

                if (opts.defaultStyle !== false) {
                  details = document.createElement('details');
                  details.title = i18n.CLICK_TO_VIEW_ACTIONS;
                  div.append(details);
                  wrapper = details;
                  summary = document.createElement('summary');
                  summary.innerHTML = SVG_CIRCLES;
                  details.append(summary);

                  documentClickHandler = function documentClickHandler(ev) {
                    if (!details.contains(ev.target)) {
                      details.removeAttribute('open');
                    }
                  };

                  document.addEventListener('click', documentClickHandler);
                }

                ctrl = document.createElement('div');
                wrapper.append(ctrl);
                ctrl.classList.add('vega-actions'); // add 'Export' action

                if (actions === true || actions.export !== false) {
                  _loop = function _loop() {
                    var ext = _arr[_i];

                    if (actions === true || actions.export === true || actions.export[ext]) {
                      var i18nExportAction = i18n["".concat(ext.toUpperCase(), "_ACTION")];
                      var exportLink = document.createElement('a');
                      exportLink.text = i18nExportAction;
                      exportLink.href = '#';
                      exportLink.target = '_blank';
                      exportLink.download = "".concat(downloadFileName, ".").concat(ext);
                      exportLink.addEventListener('mousedown', function (e) {
                        return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                          var url;
                          return regeneratorRuntime.wrap(function _callee3$(_context3) {
                            while (1) {
                              switch (_context3.prev = _context3.next) {
                                case 0:
                                  e.preventDefault();
                                  _context3.next = 3;
                                  return view.toImageURL(ext, opts.scaleFactor);

                                case 3:
                                  url = _context3.sent;
                                  this.href = url;

                                case 5:
                                case "end":
                                  return _context3.stop();
                              }
                            }
                          }, _callee3, this);
                        }));
                      });
                      ctrl.append(exportLink);
                    }
                  };

                  for (_i = 0, _arr = ['svg', 'png']; _i < _arr.length; _i++) {
                    _loop();
                  }
                } // add 'View Source' action


                if (actions === true || actions.source !== false) {
                  viewSourceLink = document.createElement('a');
                  viewSourceLink.text = i18n.SOURCE_ACTION;
                  viewSourceLink.href = '#';
                  viewSourceLink.addEventListener('mousedown', function (e) {
                    var _a, _b;

                    viewSource(jsonStringifyPrettyCompact(spec), (_a = opts.sourceHeader) !== null && _a !== void 0 ? _a : '', (_b = opts.sourceFooter) !== null && _b !== void 0 ? _b : '', mode);
                    e.preventDefault();
                  });
                  ctrl.append(viewSourceLink);
                } // add 'View Compiled' action


                if (mode === 'vega-lite' && (actions === true || actions.compiled !== false)) {
                  compileLink = document.createElement('a');
                  compileLink.text = i18n.COMPILED_ACTION;
                  compileLink.href = '#';
                  compileLink.addEventListener('mousedown', function (e) {
                    var _a, _b;

                    viewSource(jsonStringifyPrettyCompact(vgSpec), (_a = opts.sourceHeader) !== null && _a !== void 0 ? _a : '', (_b = opts.sourceFooter) !== null && _b !== void 0 ? _b : '', 'vega');
                    e.preventDefault();
                  });
                  ctrl.append(compileLink);
                } // add 'Open in Vega Editor' action


                if (actions === true || actions.editor !== false) {
                  editorUrl = (_f = opts.editorUrl) !== null && _f !== void 0 ? _f : 'https://vega.github.io/editor/';
                  editorLink = document.createElement('a');
                  editorLink.text = i18n.EDITOR_ACTION;
                  editorLink.href = '#';
                  editorLink.addEventListener('mousedown', function (e) {
                    post(window, editorUrl, {
                      config: config,
                      mode: mode,
                      renderer: renderer,
                      spec: jsonStringifyPrettyCompact(spec)
                    });
                    e.preventDefault();
                  });
                  ctrl.append(editorLink);
                }
              }

              return _context4.abrupt("return", {
                view: view,
                spec: spec,
                vgSpec: vgSpec,
                finalize: finalize
              });

            case 32:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
  }

  var supportedKeys = ['chart_1', 'chart_2', 'chart_3', 'chart_4', 'chart_counties_confirmed', 'chart_counties_death', 'chart_counties_recovered', 'chart_counties_confirmed_daily', 'chart_counties_death_daily', 'chart_counties_recovered_daily'];

  function loadVega(f, id) {
    if (supportedKeys.indexOf(f) === -1) {
      console.error('unsupported key:', f);
      return;
    }

    jquery.get('data/' + f + '.json', function (spec) {
      var opt = {
        "renderer": "canvas",
        "actions": false
      };
      embed("#" + id, spec, opt);
    });
  }

  function loadMetaData() {
    jquery.get('data/metadata.json', function (metadata) {
      jquery('#lastUpdate').text(metadata.lastUpdate);
    });
  }

  jquery(document).ready(function () {
    loadMetaData();
    loadVega('chart_1', 'vega_chart_1');
    loadVega('chart_2', 'vega_chart_2');
    loadVega('chart_3', 'vega_chart_3');
    loadVega('chart_4', 'vega_chart_4');
    loadVega('chart_counties_confirmed', 'vega_chart_counties_confirmed');
    loadVega('chart_counties_death', 'vega_chart_counties_death');
    loadVega('chart_counties_recovered', 'vega_chart_counties_recovered');
    loadVega('chart_counties_confirmed_daily', 'vega_chart_counties_confirmed_daily');
    loadVega('chart_counties_death_daily', 'vega_chart_counties_death_daily');
    loadVega('chart_counties_recovered_daily', 'vega_chart_counties_recovered_daily');
  });

}());
